language: py
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ for i in date_list:\n        if i.isdigit() == False:\n            return False\n\
    \    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return False\n\
    \    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoql4q84.py\"\
    , line 53, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoql4q84.py\"\
    , line 51, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoql4q84.py\"\
    , line 33, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoql4q84.py\"\
    , line 26, in valid_date\n    datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in (4,\
    \ 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    if int(month) not in range(1, 13):\n        return False\n    if int(day)\
    \ not in range(1, 32):\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xmv5j7v.py\"\
    , line 58, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xmv5j7v.py\"\
    , line 56, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xmv5j7v.py\"\
    , line 38, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xmv5j7v.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmntcvwgx.py\"\
    , line 53, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmntcvwgx.py\"\
    , line 51, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmntcvwgx.py\"\
    , line 33, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmntcvwgx.py\"\
    , line 26, in valid_date\n    datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if '/' in\
    \ date:\n        return False\n    if '-' not in date:\n        return False\n\
    \    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5]\
    \ != '-':\n        return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit()\
    \ or not date[6:10].isdigit():\n        return False\n    if int(date[0:2]) <\
    \ 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[0:2]) in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n\
    \            return False\n    if int(date[0:2]) in [4, 6, 9, 11]:\n        if\
    \ int(date[3:5]) < 1 or int(date[3:5]) > 30:\n            return False\n    if\
    \ int(date[0:2]) == 2:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 53, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 51, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 33, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 26, in valid_date\n    datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'\\\
    d{2}-\\d{2}-\\d{4}', date):\n        return False\n    day, month, year = date.split('-')\n\
    \    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(day)\
    \ > 31 or int(day) < 1:\n        return False\n    if int(month) in [4, 6, 9,\
    \ 11] and int(day) > 30:\n        return False\n    if int(month) == 2 and int(day)\
    \ > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplli66w4c.py\"\
    , line 62, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplli66w4c.py\"\
    , line 60, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplli66w4c.py\"\
    , line 42, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplli66w4c.py\"\
    , line 27, in valid_date\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    else:\n\
    \        date_list = date.split('-')\n        if len(date_list) == 3:\n      \
    \      month = int(date_list[0])\n            day = int(date_list[1])\n      \
    \      year = int(date_list[2])\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \                if day in range(1, 32):\n                    return True\n  \
    \              else:\n                    return False\n            elif month\
    \ in [4, 6, 9, 11]:\n                if day in range(1, 31):\n               \
    \     return True\n                else:\n                    return False\n \
    \           elif month == 2:\n                if day in range(1, 30):\n      \
    \              return True\n                else:\n                    return\
    \ False\n            else:\n                return False\n        else:\n    \
    \        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    if date.count(\"\
    -\") != 2:\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    if date[2]\
    \ != \"-\" or date[5] != \"-\":\n        return False\n    if int(date[0:2]) <\
    \ 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[3:5]) < 1 or\
    \ int(date[3:5]) > 31:\n        return False\n    if int(date[0:2]) == 2 and int(date[3:5])\
    \ > 29:\n        return False\n    if int(date[0:2]) in [4, 6, 9, 11] and int(date[3:5])\
    \ > 30:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     day, month, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month not in range(1, 13):\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day not in range(1, 32):\n\
    \            return False\n    elif month in (4, 6, 9, 11):\n        if day not\
    \ in range(1, 31):\n            return False\n    elif month == 2:\n        if\
    \ day not in range(1, 30):\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezqtktzk.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpezqtktzk.py\", line 64,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpezqtktzk.py\", line 47,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if not (1 <= month <= 12 and 1 <= day <= 31 and year\
    \ > 0):\n        return False\n    if month in (4, 6, 9, 11) and day > 30:\n \
    \       return False\n    if month == 2 and day > 29:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    if date.count(\"\
    -\") != 2:\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    if year < 1:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if not 1 <= month <= 12:\n        return False\n   \
    \ if month in (1, 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n     \
    \       return False\n    elif month in (4, 6, 9, 11):\n        if not 1 <= day\
    \ <= 30:\n            return False\n    elif month == 2:\n        if not 1 <=\
    \ day <= 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date[2]\
    \ != '-' or date[5] != '-':\n        return False\n    if int(date[0:2]) not in\
    \ range(1, 13):\n        return False\n    if int(date[3:5]) not in range(1, 32):\n\
    \        return False\n    if int(date[6:]) not in range(1, 9999):\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ak9vt1e.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp8ak9vt1e.py\", line 57,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp8ak9vt1e.py\", line 46,\
    \ in check\n    assert candidate('04-31-3000') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in (4,\
    \ 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(year) <= 9999):\n    \
    \    return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        if not\
    \ 1 <= int(day) <= 31:\n            return False\n    elif int(month) in (4, 6,\
    \ 9, 11):\n        if not 1 <= int(day) <= 30:\n            return False\n   \
    \ elif int(month) == 2:\n        if not 1 <= int(day) <= 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) not in range(1, 13):\n       \
    \ return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n       \
    \ if int(date_list[1]) not in range(1, 32):\n            return False\n    elif\
    \ int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1]) not in range(1,\
    \ 31):\n            return False\n    elif int(date_list[0]) == 2:\n        if\
    \ int(date_list[1]) not in range(1, 30):\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(year) <= 9999):\n    \
    \    return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        if not\
    \ 1 <= int(day) <= 31:\n            return False\n    elif int(month) in (4, 6,\
    \ 9, 11):\n        if not 1 <= int(day) <= 30:\n            return False\n   \
    \ elif int(month) == 2:\n        if int(year) % 4 == 0:\n            if not 1\
    \ <= int(day) <= 29:\n                return False\n        else:\n          \
    \  if not 1 <= int(day) <= 28:\n                return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(year) <= 9999):\n    \
    \    return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        return\
    \ 1 <= int(day) <= 31\n    elif int(month) in (4, 6, 9, 11):\n        return 1\
    \ <= int(day) <= 30\n    elif int(month) == 2:\n        return 1 <= int(day) <=\
    \ 29\n    return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) > 12 or int(date_list[0])\
    \ < 1:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return False\n   \
    \ if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return False\n   \
    \ if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in (4,\
    \ 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z1yp97k.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp1z1yp97k.py\", line 66,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp1z1yp97k.py\", line 48,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp1z1yp97k.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ > 12 or int(date_list[0]) < 1:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) > 31 or int(date_list[1])\
    \ < 1:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 29 or\
    \ int(date_list[1]) < 1:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    date_list = date.split('-')\n\
    \    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvpxqaok.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpnvpxqaok.py\", line 66,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpnvpxqaok.py\", line 48,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpnvpxqaok.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    if year < 0:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    if date[2]\
    \ != \"-\" or date[5] != \"-\":\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if not date[:2].isdigit() or not date[3:5].isdigit()\
    \ or not date[6:].isdigit():\n        return False\n    if int(date[:2]) < 1 or\
    \ int(date[:2]) > 12:\n        return False\n    if int(date[:2]) in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n    \
    \        return False\n    elif int(date[:2]) in [4, 6, 9, 11]:\n        if int(date[3:5])\
    \ < 1 or int(date[3:5]) > 30:\n            return False\n    elif int(date[:2])\
    \ == 2:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7w5onlg.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmph7w5onlg.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph7w5onlg.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph7w5onlg.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z1yp97k.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp1z1yp97k.py\", line 66,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp1z1yp97k.py\", line 48,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp1z1yp97k.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 53, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 51, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 33, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_nlgknc.py\"\
    , line 26, in valid_date\n    datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ if len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) !=\
    \ 4:\n        return False\n    if int(date_list[0]) > 12 or int(date_list[0])\
    \ < 1:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day\
    \ > 29:\n                return False\n        else:\n            if day < 1 or\
    \ day > 28:\n                return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        date = datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6ygfuku.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmps6ygfuku.py\", line 51,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmps6ygfuku.py\", line 33,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmps6ygfuku.py\"\
    , line 26, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    if date.count('/') != 0:\n        return False\n\
    \    if date.count(' ') != 0:\n        return False\n    if date.count('.') !=\
    \ 0:\n        return False\n    if date.count(',') != 0:\n        return False\n\
    \    if date.count(';') != 0:\n        return False\n    if date.count('\\\\')\
    \ != 0:\n        return False\n    if date.count('|') != 0:\n        return False\n\
    \    if date.count('\\'') != 0:\n        return False\n    if date.count('\\\"\
    ') != 0:\n        return False\n    if date.count('`') != 0:\n        return False\n\
    \    if date.count('~') != 0:\n        return False\n    if date.count('!') !=\
    \ 0:\n        return False\n    if date.count('@') != 0:\n        return False\n\
    \    if date.count('#') != 0:\n        return False\n    if date.count('$') !=\
    \ 0:\n        return False\n    if date.count('%') != 0:\n        return False\n\
    \    if date.count('^') != 0:\n        return False\n    if date.count('&') !=\
    \ 0:\n        return False\n    if date.count('*') != 0:\n        return False\n\
    \    if date.count('(') != 0:\n        return False\n    if date.count(')') !=\
    \ 0:\n        return False\n    if date.count('_') != 0:\n        return False\n\
    \    if date.count('+') != 0:\n        return False\n    if date.count('=') !=\
    \ 0:\n        return False\n    if date.count('{') != 0:\n        return False\n\
    \    if date.count('}') != 0:\n        return False\n    if date.count('[') !=\
    \ 0:\n        return False\n    if date.count(']') != 0:\n        return False\n\
    \    if date.count('<') != 0:\n        return False\n    if date.count('>') !=\
    \ 0:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxo9g1yld.py\", line\
    \ 111, in <module>\n    test_check()\n  File \"/tmp/tmpxo9g1yld.py\", line 109,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpxo9g1yld.py\", line 91,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    else:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date[2]\
    \ != '-' or date[5] != '-':\n        return False\n    if not date[0:2].isdigit()\
    \ or not date[3:5].isdigit() or not date[6:].isdigit():\n        return False\n\
    \    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n   \
    \ if int(date[0:2]) == 2:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 29:\n\
    \            return False\n    if int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n            return False\n\
    \    if int(date[0:2]) in [4, 6, 9, 11]:\n        if int(date[3:5]) < 1 or int(date[3:5])\
    \ > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        day, month, year = map(int, date.split('-'))\n\
    \        if day < 1 or day > 31:\n            return False\n        if month <\
    \ 1 or month > 12:\n            return False\n        if month in [4, 6, 9, 11]\
    \ and day > 30:\n            return False\n        if month == 2 and day > 29:\n\
    \            return False\n        return True\n    except ValueError:\n     \
    \   return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzc4ra6nn.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpzc4ra6nn.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpzc4ra6nn.py\", line 42,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiqb_esuz.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpiqb_esuz.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpiqb_esuz.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpiqb_esuz.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'\\\
    d{2}-\\d{2}-\\d{4}', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in (4, 6, 9, 11):\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl4rsi39k.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpl4rsi39k.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpl4rsi39k.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpl4rsi39k.py\"\
    , line 27, in valid_date\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    try:\n        month = int(date[:2])\n        day = int(date[3:5])\n\
    \        year = int(date[6:])\n    except ValueError:\n        return False\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     day, month, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if not 1 <= month <= 12:\n        return False\n   \
    \ if month in (1, 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n     \
    \       return False\n    elif month in (4, 6, 9, 11):\n        if not 1 <= day\
    \ <= 30:\n            return False\n    elif month == 2:\n        if not 1 <=\
    \ day <= 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa80jq5y8.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpa80jq5y8.py\", line 64,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpa80jq5y8.py\", line 47,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    else:\n\
    \        date_list = date.split('-')\n        if len(date_list) != 3:\n      \
    \      return False\n        else:\n            month = int(date_list[0])\n  \
    \          day = int(date_list[1])\n            year = int(date_list[2])\n   \
    \         if month < 1 or month > 12:\n                return False\n        \
    \    elif month == 2:\n                if day < 1 or day > 29:\n             \
    \       return False\n            elif month == 1 or month == 3 or month == 5\
    \ or month == 7 or month == 8 or month == 10 or month == 12:\n               \
    \ if day < 1 or day > 31:\n                    return False\n            elif\
    \ month == 4 or month == 6 or month == 9 or month == 11:\n                if day\
    \ < 1 or day > 30:\n                    return False\n            else:\n    \
    \            return False\n            if year < 0:\n                return False\n\
    \            else:\n                return True\n\ndef check(candidate):\n   \
    \ assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') ==\
    \ False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return False\n   \
    \ if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'\\\
    d{2}-\\d{2}-\\d{4}', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmhbxjqf.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpcmhbxjqf.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpcmhbxjqf.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpcmhbxjqf.py\"\
    , line 27, in valid_date\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    else:\n\
    \        try:\n            date = datetime.strptime(date, '%m-%d-%Y')\n      \
    \      return True\n        except ValueError:\n            return False\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmir02emj.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpmir02emj.py\", line 54,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpmir02emj.py\", line 36,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpmir02emj.py\"\
    , line 29, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z1yp97k.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp1z1yp97k.py\", line 66,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp1z1yp97k.py\", line 48,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp1z1yp97k.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    else:\n\
    \        date_list = date.split('-')\n        if len(date_list) != 3:\n      \
    \      return False\n        else:\n            if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n                return False\n            else:\n\
    \                if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n       \
    \             return False\n                else:\n                    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n                        if int(date_list[1]) >\
    \ 31 or int(date_list[1]) < 1:\n                            return False\n   \
    \                     else:\n                            return True\n       \
    \             elif int(date_list[0]) in [4, 6, 9, 11]:\n                     \
    \   if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n                    \
    \        return False\n                        else:\n                       \
    \     return True\n                    elif int(date_list[0]) == 2:\n        \
    \                if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \                     return False\n                        else:\n          \
    \                  return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        day, month, year = map(int, date.split('-'))\n\
    \        if day < 1 or day > 31:\n            return False\n        if month <\
    \ 1 or month > 12:\n            return False\n        if month in [4, 6, 9, 11]\
    \ and day > 30:\n            return False\n        if month == 2 and day > 29:\n\
    \            return False\n        return True\n    except ValueError:\n     \
    \   return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzc4ra6nn.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpzc4ra6nn.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpzc4ra6nn.py\", line 42,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    if int(date[:2]) < 1 or int(date[:2])\
    \ > 12:\n        return False\n    if int(date[:2]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n            return False\n\
    \    elif int(date[:2]) in [4, 6, 9, 11]:\n        if int(date[3:5]) < 1 or int(date[3:5])\
    \ > 30:\n            return False\n    elif int(date[:2]) == 2:\n        if int(date[3:5])\
    \ < 1 or int(date[3:5]) > 29:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        date = datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6ygfuku.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmps6ygfuku.py\", line 51,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmps6ygfuku.py\", line 33,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmps6ygfuku.py\"\
    , line 26, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) != 10:\n        return False\n    if\
    \ date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    if not date.split('-')[0].isdigit() or not\
    \ date.split('-')[1].isdigit() or not date.split('-')[2].isdigit():\n        return\
    \ False\n    if int(date.split('-')[0]) > 12 or int(date.split('-')[0]) < 1:\n\
    \        return False\n    if int(date.split('-')[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date.split('-')[1]) > 31 or int(date.split('-')[1]) < 1:\n   \
    \         return False\n    elif int(date.split('-')[0]) in [4, 6, 9, 11]:\n \
    \       if int(date.split('-')[1]) > 30 or int(date.split('-')[1]) < 1:\n    \
    \        return False\n    elif int(date.split('-')[0]) == 2:\n        if int(date.split('-')[1])\
    \ > 29 or int(date.split('-')[1]) < 1:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ if len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) !=\
    \ 4:\n        return False\n    if int(date_list[0]) > 12 or int(date_list[0])\
    \ < 1:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7w5onlg.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmph7w5onlg.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph7w5onlg.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph7w5onlg.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    else:\n\
    \        date_list = date.split('-')\n        if len(date_list) != 3:\n      \
    \      return False\n        else:\n            month = int(date_list[0])\n  \
    \          day = int(date_list[1])\n            year = int(date_list[2])\n   \
    \         if month < 1 or month > 12:\n                return False\n        \
    \    elif month == 2:\n                if day < 1 or day > 29:\n             \
    \       return False\n            elif month == 1 or month == 3 or month == 5\
    \ or month == 7 or month == 8 or month == 10 or month == 12:\n               \
    \ if day < 1 or day > 31:\n                    return False\n            elif\
    \ month == 4 or month == 6 or month == 9 or month == 11:\n                if day\
    \ < 1 or day > 30:\n                    return False\n            else:\n    \
    \            return False\n            if year < 0:\n                return False\n\
    \            else:\n                return True\n\n\ndef check(candidate):\n \
    \   assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12:\n        if day < 1 or day > 31:\n     \
    \       return False\n    else:\n        if day < 1 or day > 30:\n           \
    \ return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit()\
    \ or not date[6:10].isdigit():\n        return False\n    if int(date[0:2]) <\
    \ 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[0:2]) == 2:\n\
    \        if int(date[3:5]) < 1 or int(date[3:5]) > 29:\n            return False\n\
    \    if int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[3:5])\
    \ < 1 or int(date[3:5]) > 31:\n            return False\n    if int(date[0:2])\
    \ in [4, 6, 9, 11]:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 30:\n \
    \           return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(year) <= 9999):\n    \
    \    return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        return\
    \ 1 <= int(day) <= 31\n    elif int(month) in (4, 6, 9, 11):\n        return 1\
    \ <= int(day) <= 30\n    elif int(month) == 2:\n        return 1 <= int(day) <=\
    \ 29\n    return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in (4,\
    \ 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date[2]\
    \ != '-' or date[5] != '-':\n        return False\n    if int(date[0:2]) > 12\
    \ or int(date[0:2]) < 1:\n        return False\n    if int(date[3:5]) > 31 or\
    \ int(date[3:5]) < 1:\n        return False\n    if int(date[0:2]) == 2 and int(date[3:5])\
    \ > 29:\n        return False\n    if int(date[0:2]) in [4, 6, 9, 11] and int(date[3:5])\
    \ > 30:\n        return False\n    if int(date[6:]) < 1:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(year) <= 9999):\n    \
    \    return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        return\
    \ 1 <= int(day) <= 31\n    elif int(month) in (4, 6, 9, 11):\n        return 1\
    \ <= int(day) <= 30\n    elif int(month) == 2:\n        return 1 <= int(day) <=\
    \ 29\n    return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit()\
    \ or not date[6:10].isdigit():\n        return False\n    month = int(date[0:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:10])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month == 2:\n        if day < 1 or day >\
    \ 29:\n            return False\n    elif month == 4 or month == 6 or month ==\
    \ 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n\
    \    else:\n        if day < 1 or day > 31:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7w5onlg.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmph7w5onlg.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph7w5onlg.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph7w5onlg.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if not 1 <= month <= 12:\n        return False\n   \
    \ if month in (1, 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n     \
    \       return False\n    elif month in (4, 6, 9, 11):\n        if not 1 <= day\
    \ <= 30:\n            return False\n    elif month == 2:\n        if not 1 <=\
    \ day <= 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'\\\
    d{2}-\\d{2}-\\d{4}', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(month)\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if int(day) < 1 or int(day) > 31:\n   \
    \         return False\n    elif int(month) in (4, 6, 9, 11):\n        if int(day)\
    \ < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n\
    \        if int(day) < 1 or int(day) > 29:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo44bjcst.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpo44bjcst.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpo44bjcst.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpo44bjcst.py\"\
    , line 27, in valid_date\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11]\
    \ and day > 30:\n        return False\n    if month == 2 and day > 29:\n     \
    \   return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpog37o88k.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpog37o88k.py\", line 60,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpog37o88k.py\", line 42,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpog37o88k.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit()\
    \ or not date[6:10].isdigit():\n        return False\n    month = int(date[0:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:10])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month == 2:\n        if day < 1 or day >\
    \ 29:\n            return False\n    if month == 4 or month == 6 or month == 9\
    \ or month == 11:\n        if day < 1 or day > 30:\n            return False\n\
    \    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or\
    \ month == 10 or month == 12:\n        if day < 1 or day > 31:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31 and int(year)\
    \ > 0):\n        return False\n    if int(month) in (4, 6, 9, 11) and int(day)\
    \ > 30:\n        return False\n    if int(month) == 2 and int(day) > 29:\n   \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date[2]\
    \ != '-' or date[5] != '-':\n        return False\n    if len(date) != 10:\n \
    \       return False\n    if int(date[0:2]) > 12 or int(date[0:2]) < 1:\n    \
    \    return False\n    if int(date[3:5]) > 31 or int(date[3:5]) < 1:\n       \
    \ return False\n    if int(date[6:10]) < 1:\n        return False\n    if int(date[0:2])\
    \ == 2 and int(date[3:5]) > 29:\n        return False\n    if int(date[0:2]) ==\
    \ 4 and int(date[3:5]) > 30:\n        return False\n    if int(date[0:2]) == 6\
    \ and int(date[3:5]) > 30:\n        return False\n    if int(date[0:2]) == 9 and\
    \ int(date[3:5]) > 30:\n        return False\n    if int(date[0:2]) == 11 and\
    \ int(date[3:5]) > 30:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7w5onlg.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmph7w5onlg.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph7w5onlg.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph7w5onlg.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    if date[2]\
    \ != \"-\" or date[5] != \"-\":\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n   \
    \     return False\n    if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n      \
    \  return False\n    if int(date[6:10]) < 1:\n        return False\n    if int(date[0:2])\
    \ == 2 and int(date[3:5]) > 29:\n        return False\n    if int(date[0:2]) in\
    \ [4, 6, 9, 11] and int(date[3:5]) > 30:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    try:\n\
    \        month = int(date_list[0])\n        day = int(date_list[1])\n        year\
    \ = int(date_list[2])\n    except ValueError:\n        return False\n    if month\
    \ not in range(1, 13):\n        return False\n    if month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if day not in range(1, 32):\n            return False\n  \
    \  elif month in [4, 6, 9, 11]:\n        if day not in range(1, 31):\n       \
    \     return False\n    elif month == 2:\n        if day not in range(1, 30):\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7w5onlg.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmph7w5onlg.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph7w5onlg.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph7w5onlg.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if date[0:2].isdigit() and date[3:5].isdigit() and date[6:10].isdigit():\n\
    \        month = int(date[0:2])\n        day = int(date[3:5])\n        year =\
    \ int(date[6:10])\n        if month > 12 or month < 1:\n            return False\n\
    \        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day > 31 or day\
    \ < 1:\n                return False\n        elif month in [4, 6, 9, 11]:\n \
    \           if day > 30 or day < 1:\n                return False\n        elif\
    \ month == 2:\n            if day > 29 or day < 1:\n                return False\n\
    \        return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    if int(month) not in range(1, 13):\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) not in range(1, 32):\n    \
    \        return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day)\
    \ not in range(1, 31):\n            return False\n    elif int(month) == 2:\n\
    \        if int(day) not in range(1, 30):\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgh7kgydp.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpgh7kgydp.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpgh7kgydp.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpgh7kgydp.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[:2])\n \
    \   day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'\\\
    d{2}-\\d{2}-\\d{4}', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month not in range(1, 13):\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day not in range(1, 32):\n\
    \            return False\n    elif month in (4, 6, 9, 11):\n        if day not\
    \ in range(1, 31):\n            return False\n    elif month == 2:\n        if\
    \ day not in range(1, 30):\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwyiphx6b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpwyiphx6b.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpwyiphx6b.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpwyiphx6b.py\"\
    , line 27, in valid_date\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(year) <= 9999):\n    \
    \    return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        if not\
    \ 1 <= int(day) <= 31:\n            return False\n    elif int(month) in (4, 6,\
    \ 9, 11):\n        if not 1 <= int(day) <= 30:\n            return False\n   \
    \ elif int(month) == 2:\n        if not 1 <= int(day) <= 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12 and 1 <= int(year) <= 9999):\n    \
    \    return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        return\
    \ 1 <= int(day) <= 31\n    elif int(month) in (4, 6, 9, 11):\n        return 1\
    \ <= int(day) <= 30\n    elif int(month) == 2:\n        return 1 <= int(day) <=\
    \ 29\n    return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year\
    \ = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n   \
    \ if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n    \
    \        return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month)\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if not (1 <= int(day) <= 31):\n       \
    \     return False\n    elif int(month) in (4, 6, 9, 11):\n        if not (1 <=\
    \ int(day) <= 30):\n            return False\n    elif int(month) == 2:\n    \
    \    if not (1 <= int(day) <= 29):\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    else:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month not in range(1, 13):\n        return False\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if day not in range(1, 32):\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day not in range(1, 31):\n\
    \            return False\n    elif month == 2:\n        if day not in range(1,\
    \ 30):\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     d, m, y = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if m < 1 or m > 12:\n        return False\n    if m in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if d < 1 or d > 31:\n            return False\n    elif\
    \ m in (4, 6, 9, 11):\n        if d < 1 or d > 30:\n            return False\n\
    \    elif m == 2:\n        if d < 1 or d > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsiph_mhf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpsiph_mhf.py\", line 64,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpsiph_mhf.py\", line 47,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    if date[2]\
    \ != \"-\" or date[5] != \"-\":\n        return False\n    if int(date[0:2]) <\
    \ 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[3:5]) < 1 or\
    \ int(date[3:5]) > 31:\n        return False\n    if int(date[0:2]) == 2 and int(date[3:5])\
    \ > 29:\n        return False\n    if int(date[0:2]) in [4, 6, 9, 11] and int(date[3:5])\
    \ > 30:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    else:\n\
    \        date_list = date.split('-')\n        if len(date_list) != 3:\n      \
    \      return False\n        else:\n            month = int(date_list[0])\n  \
    \          day = int(date_list[1])\n            year = int(date_list[2])\n   \
    \         if month < 1 or month > 12:\n                return False\n        \
    \    elif month == 2:\n                if day < 1 or day > 29:\n             \
    \       return False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n   \
    \             if day < 1 or day > 31:\n                    return False\n    \
    \        elif month in [4, 6, 9, 11]:\n                if day < 1 or day > 30:\n\
    \                    return False\n            else:\n                return False\n\
    \            return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ > 12 or int(date_list[0]) < 1:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) > 31 or int(date_list[1])\
    \ < 1:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 29 or\
    \ int(date_list[1]) < 1:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = map(int, date.split('-'))\n    except ValueError:\n \
    \       return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    if date[2]\
    \ != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month == 2:\n        if day < 1 or day >\
    \ 29:\n            return False\n    elif month in (4, 6, 9, 11):\n        if\
    \ day < 1 or day > 30:\n            return False\n    else:\n        if day <\
    \ 1 or day > 31:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        date = date.split('-')\n        month\
    \ = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n  \
    \      if month < 1 or month > 12:\n            return False\n        if month\
    \ == 2:\n            if day < 1 or day > 29:\n                return False\n \
    \       elif month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day\
    \ > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n\
    \            if day < 1 or day > 30:\n                return False\n        return\
    \ True\n    except:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list\
    \ = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n   \
    \ if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date)\
    \ != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n   \
    \     return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit()\
    \ or not date[6:10].isdigit():\n        return False\n    month = int(date[0:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:10])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month == 2:\n        if day < 1 or day >\
    \ 29:\n            return False\n    elif month == 4 or month == 6 or month ==\
    \ 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n\
    \    else:\n        if day < 1 or day > 31:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749292
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7w5onlg.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmph7w5onlg.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph7w5onlg.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph7w5onlg.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month,\
    \ day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not\
    \ year.isdigit():\n        return False\n    month, day, year = int(month), int(day),\
    \ int(year)\n    if month < 1 or month > 12:\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     day, month, year = date.split('-')\n        day, month, year = int(day),\
    \ int(month), int(year)\n        if month not in range(1, 13):\n            return\
    \ False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day not\
    \ in range(1, 32):\n                return False\n        elif month in [4, 6,\
    \ 9, 11]:\n            if day not in range(1, 31):\n                return False\n\
    \        elif month == 2:\n            if day not in range(1, 30):\n         \
    \       return False\n        return True\n    except ValueError:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkm5j2zt.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpmkm5j2zt.py\", line 65,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpmkm5j2zt.py\", line 48,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749292
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ > 12 or int(date_list[0]) < 1:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) > 31 or int(date_list[1])\
    \ < 1:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 29 or\
    \ int(date_list[1]) < 1:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     day, month, year = date.split('-')\n        day, month, year = int(day),\
    \ int(month), int(year)\n        if month not in range(1, 13):\n            return\
    \ False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day not\
    \ in range(1, 32):\n                return False\n        elif month in [4, 6,\
    \ 9, 11]:\n            if day not in range(1, 31):\n                return False\n\
    \        elif month == 2:\n            if day not in range(1, 30):\n         \
    \       return False\n        return True\n    except ValueError:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkm5j2zt.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpmkm5j2zt.py\", line 65,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpmkm5j2zt.py\", line 48,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659749292
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if date == '':\n        return False\n    else:\n\
    \        date_list = date.split('-')\n        if len(date_list) != 3:\n      \
    \      return False\n        else:\n            month = int(date_list[0])\n  \
    \          day = int(date_list[1])\n            year = int(date_list[2])\n   \
    \         if month < 1 or month > 12:\n                return False\n        \
    \    if month == 2:\n                if day < 1 or day > 29:\n               \
    \     return False\n            elif month == 1 or month == 3 or month == 5 or\
    \ month == 7 or month == 8 or month == 10 or month == 12:\n                if\
    \ day < 1 or day > 31:\n                    return False\n            else:\n\
    \                if day < 1 or day > 30:\n                    return False\n \
    \           return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    try:\n   \
    \     month, day, year = date.split('-')\n    except ValueError:\n        return\
    \ False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n\
    \        return False\n    month, day, year = int(month), int(day), int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z1yp97k.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp1z1yp97k.py\", line 66,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp1z1yp97k.py\", line 48,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp1z1yp97k.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    try:\n        date = date.split('-')\n        month\
    \ = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n  \
    \      if month < 1 or month > 12:\n            return False\n        if month\
    \ == 2:\n            if day < 1 or day > 29:\n                return False\n \
    \       elif month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day\
    \ > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n\
    \            if day < 1 or day > 30:\n                return False\n        return\
    \ True\n    except:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_iicxy9n.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp_iicxy9n.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp_iicxy9n.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 68, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 66, in test_check\n    check(valid_date)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 48, in check\n    assert candidate('03-11-2000') == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vgoxex.py\"\
    , line 27, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>>\
    \ valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n   \
    \ False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n\
    \    False\n    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'\\\
    d{2}-\\d{2}-\\d{4}', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(month)\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) > 31 or int(day) < 1:\n   \
    \         return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day)\
    \ > 30 or int(day) < 1:\n            return False\n    elif int(month) == 2:\n\
    \        if int(day) > 29 or int(day) < 1:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaitf686.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpbaitf686.py\", line 63,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpbaitf686.py\", line 45,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpbaitf686.py\"\
    , line 27, in valid_date\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659749291
