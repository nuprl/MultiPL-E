name: HumanEval_10_make_palindrome
language: py
prompt: "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome\
  \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
  \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
  \ the end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
  \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x')\
  \ == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') ==\
  \ 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n\ndef test_check():\n   \
  \ check(make_palindrome)\n\ntest_check()\n"
completions: ["    if not string:\n        return string\n    # Find the longest palindromic\
    \ suffix.\n    suffix = longest_palindromic_suffix(string)\n    # Append reverse\
    \ of the prefix to the end of the string.\n    return string + string[:len(string)\
    \ - len(suffix)][::-1]\n\n", "    if not string:\n        return string\n    if\
    \ string == string[::-1]:\n        return string\n    for i in range(len(string)):\n\
    \        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\
    \n", "    if not string:\n        return string\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix_length = find_longest_palindromic_suffix(string)\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string + string[:len(string) - suffix_length][::-1]\n\
    \n", "    if not string:\n        return string\n    if is_palindrome(string):\n\
    \        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n\n", "    if not string:\n    \
    \    return string\n    # Find the longest postfix of supplied string that is\
    \ a palindrome.\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n\
    \            # Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n            return string + string[:i][::-1]\n\
    \    return string\n\n", "    if not string:\n        return string\n    string_length\
    \ = len(string)\n    for i in range(string_length):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n    return string\n\n", "    if\
    \ not string:\n        return string\n    if len(string) == 1:\n        return\
    \ string + string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n    return string + string[1:][::-1]\n\
    \n", "    if not string:\n        return string\n    if len(string) == 1:\n  \
    \      return string + string\n\n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    return string + string[:len(string) - len(longest_palindrome_suffix)][::-1]\n\
    \n", "    if not string:\n        return string\n    if len(string) == 1:\n  \
    \      return string + string\n    if is_palindrome(string):\n        return string\n\
    \    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n    return string + string[::-1]\n\
    \n", "    if not string:\n        return string\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string + string[:len(string)\
    \ - len(longest_palindrome_suffix)][::-1]\n\n", "    if not string:\n        return\
    \ string\n    # Find the longest postfix that is a palindrome.\n    # This is\
    \ done by finding the longest common prefix and suffix of the string.\n    # This\
    \ is done in O(n) time using the KMP algorithm.\n    # The longest common prefix\
    \ and suffix are the same, so we only need to compute one of them.\n    # The\
    \ longest common prefix is the longest postfix that is a palindrome.\n    # The\
    \ longest common prefix is stored in the lps array.\n    lps = compute_longest_prefix_suffix(string)\n\
    \    # The longest postfix that is a palindrome is the last element of the lps\
    \ array.\n    longest_palindromic_postfix_length = lps[-1]\n    # The prefix that\
    \ comes before the palindromic suffix is the string without the palindromic suffix.\n\
    \    prefix_before_palindromic_suffix = string[:len(string) - longest_palindromic_postfix_length]\n\
    \    # The prefix that comes before the palindromic suffix is reversed and appended\
    \ to the end of the string.\n    return string + prefix_before_palindromic_suffix[::-1]\n\
    \n", "    string_len = len(string)\n    if string_len <= 1:\n        return string\n\
    \    for i in range(string_len - 1, -1, -1):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n\n", "    if not string:\n    \
    \    return string\n    if is_palindrome(string):\n        return string\n   \
    \ for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n\n", "    if not string:\n    \
    \    return string\n    palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    return string + string[:len(string) - len(palindrome_suffix)][::-1]\n\n",
  "    if not string:\n        return string\n    if len(string) == 1:\n        return\
    \ string + string\n    if len(string) == 2:\n        return string if string[0]\
    \ == string[1] else string + string[::-1]\n    if len(string) == 3:\n        return\
    \ string if string[0] == string[2] else string + string[::-1]\n    if len(string)\
    \ == 4:\n        return string if string[0] == string[3] else string + string[::-1]\n\
    \    if len(string) == 5:\n        return string if string[0] == string[4] else\
    \ string + string[::-1]\n    if len(string) == 6:\n        return string if string[0]\
    \ == string[5] else string + string[::-1]\n    if len(string) == 7:\n        return\
    \ string if string[0] == string[6] else string + string[::-1]\n    if len(string)\
    \ == 8:\n        return string if string[0] == string[7] else string + string[::-1]\n\
    \    if len(string) == 9:\n        return string if string[0] == string[8] else\
    \ string + string[::-1]\n    if len(string) == 10:\n        return string if string[0]\
    \ == string[9] else string + string[::-1]\n    if len(string) == 11:\n       \
    \ return string if string[0] == string[10] else string + string[::-1]\n    if\
    \ len(string) == 12:\n        return string if string[0] == string[11] else string\
    \ + string[::-1]\n    if len(string) == 13:\n        return string if string[0]\
    \ == string[12] else string + string[::-1]\n    if len(string) == 14:\n      \
    \  return string if string[0] == string[13] else string + string[::-1]\n    if\
    \ len(string) == 15:\n        return string if string[0] == string[14] else string\
    \ + string[::-1]\n    if len(string) == 16:\n        return string if string[0]\
    \ == string[15]", "    if not string:\n        return string\n    if is_palindrome(string):\n\
    \        return string\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    prefix = string[:len(string) - len(suffix)]\n    return string + prefix[::-1]\n\
    \n", "    if not string:\n        return string\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    prefix = string[:len(string) - len(suffix)]\n    return string + prefix[::-1]\n\
    \n", "    if not string:\n        return string\n    for i in range(len(string)):\n\
    \        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\
    \n", "    if not string:\n        return string\n    if len(string) == 1:\n  \
    \      return string + string\n    if len(string) == 2:\n        return string[0]\
    \ + string + string[0]\n    if is_palindrome(string):\n        return string\n\
    \    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n    return string + string[::-1]\n\
    \n", "    if not string:\n        return string\n    # Find the longest palindromic\
    \ suffix.\n    suffix = find_longest_palindromic_suffix(string)\n    # Append\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    return\
    \ string + string[:len(string) - len(suffix)][::-1]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
