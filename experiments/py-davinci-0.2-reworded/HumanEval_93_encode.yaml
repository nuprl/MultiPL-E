name: HumanEval_93_encode
language: py
prompt: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes\
  \ a message, and encodes in such a \n    way that it swaps case of all letters,\
  \ replaces all vowels in \n    the message with the letter that appears 2 places\
  \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
  \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
  \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
  \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert\
  \ candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
  \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
  \    check(encode)\n\ntest_check()\n"
completions: ["    return ''.join(map(encode_char, message))\n\n", "    pass\n\n",
  "    pass\n", "    pass\n\n", "    pass\n\n", "    return ''.join(map(encode_char,\
    \ message))\n\n", "    pass\n\n", "    return ''.join(encode_char(c) for c in\
    \ message)\n", "    return ''.join(map(encode_char, message))\n\n", "    # Your\
    \ code here\n    pass\n\n", "    pass\n\n", "    return ''.join(map(encode_char,\
    \ message))\n", "    return ''.join(map(encode_char, message))\n\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n", "    return ''.join(map(lambda x: encode_char(x),\
    \ message))\n", "    return ''.join(encode_char(c) for c in message)\n", "   \
    \ pass\n", "    return ''.join(map(encode_char, message))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
