name: HumanEval_153_Strongest_Extension
language: py
prompt: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
  \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
  \ and a list of extensions.\n    The extensions are to be used to load additional\
  \ classes to the class. The\n    strength of the extension is as follows: Let CAP\
  \ be the number of the uppercase\n    letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
  \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n    >>>\
  \ Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
  \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
  \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
  \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
  \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
  \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
  \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n\
  \    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
  \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
  \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
  \ntest_check()\n"
completions: ["    strongest = 0\n    strongest_extension = ''\n    for extension\
    \ in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n   \
    \     sm = sum(1 for c in extension if c.islower())\n        strength = cap -\
    \ sm\n        if strength > strongest:\n            strongest = strength\n   \
    \         strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
  "    # your code here\n    return None\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n",
  "    # your code here\n    return ''\n", "    # your code here\n    return ''\n",
  "    # your code here\n    return None\n", "    # Write your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper())\
    \ - sum(1 for c in x if c.islower()))\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # your code here\n    return\n", "   \
    \ strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    strongest_extension = extensions[0]\n \
    \   strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for char in extension:\n            if char.isupper():\n      \
    \          strength += 1\n            else:\n                strength -= 1\n \
    \       if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # Write your code here\n    # Hint: You can use the ord() function to convert\
    \ a character to its ASCII code\n    # Hint: You can use the chr() function to\
    \ convert an ASCII code to its character\n    # Hint: You can use the isupper()\
    \ function to check if a character is uppercase\n    # Hint: You can use the islower()\
    \ function to check if a character is lowercase\n    # Hint: You can use the len()\
    \ function to get the length of a string\n    # Hint: You can use the max() function\
    \ to get the maximum value in a list\n    # Hint: You can use the index() function\
    \ to get the index of an element in a list\n    # Hint: You can use the format()\
    \ function to format a string\n    # Hint: You can use the str() function to convert\
    \ a number to a string\n    # Hint: You can use the float() function to convert\
    \ a string to a number\n    # Hint: You can use the int() function to convert\
    \ a string to a number\n    # Hint: You can use the round() function to round\
    \ a number\n    # Hint: You can use the abs() function to get the absolute value\
    \ of a number\n    # Hint: You can use the range() function to generate a list\
    \ of numbers\n    # Hint: You can use the enumerate() function to get the index\
    \ and the value of an element in a list\n    # Hint: You can use the zip() function\
    \ to combine two lists\n    # Hint: You can use the reversed() function to reverse\
    \ a list\n    # Hint: You can use the sorted() function to sort a list\n    #\
    \ Hint: You can use the sum() function to sum the elements of a list\n    # Hint:\
    \ You can use the any() function to check if any element in a list is True\n \
    \   # Hint: You can use the all() function to check if all elements in a list\
    \ are True\n    # Hint: You can use the map() function to apply a function to\
    \ all elements in a list\n    # Hint: You can use the filter() function to filter\
    \ a list\n    # Hint: You can use the reduce() function to reduce a list to a\
    \ single value\n    # Hint: You can use the lambda keyword to create", "    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension_strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                extension_strength += 1\n \
    \           else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ class_name + '.' + strongest_extension\n", "    # your code here\n    return\
    \ None\n", "    # your code here\n    return \"\"\n", "    # Write your code here\n\
    \    # Hint: You can use the function 'isupper()' to check if a character is uppercase\n\
    \    # Hint: You can use the function 'islower()' to check if a character is lowercase\n\
    \    # Hint: You can use the function 'ord()' to get the ASCII code of a character\n\
    \    # Hint: You can use the function 'chr()' to get the character from the ASCII\
    \ code\n    # Hint: You can use the function 'len()' to get the length of a string\n\
    \    # Hint: You can use the function 'range()' to get a list of numbers from\
    \ 0 to a given number\n    # Hint: You can use the function 'enumerate()' to get\
    \ the index of an item in a list\n    # Hint: You can use the function 'max()'\
    \ to get the maximum value from a list\n    # Hint: You can use the function 'min()'\
    \ to get the minimum value from a list\n    # Hint: You can use the function 'abs()'\
    \ to get the absolute value of a number\n    # Hint: You can use the function\
    \ 'index()' to get the index of an item in a list\n    # Hint: You can use the\
    \ function 'str()' to convert a number to a string\n    # Hint: You can use the\
    \ function 'int()' to convert a string to a number\n    # Hint: You can use the\
    \ function 'float()' to convert a string to a float\n    # Hint: You can use the\
    \ function 'round()' to round a float to a given number of decimal places\n  \
    \  # Hint: You can use the function 'sum()' to get the sum of a list of numbers\n\
    \    # Hint: You can use the function 'sorted()' to sort a list\n    # Hint: You\
    \ can use the function 'reversed()' to reverse a list\n    # Hint: You can use\
    \ the function 'join()' to join a list of strings into a single string\n    #\
    \ Hint: You can use the function 'split()' to split a string into a list of strings\n\
    \    # Hint: You can use the function 'strip()' to remove whitespace from the\
    \ beginning and end of a string\n    # Hint:", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper())\
    \ - sum(1 for c in x if c.islower()))\n", "    # your code here\n    return None\n",
  "    # your code here\n    pass\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
