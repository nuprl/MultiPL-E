name: HumanEval_133_sum_squares
language: py
prompt: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n  \
  \  \"\"\"You are given a list of numbers.\n    You need to return the sum of squared\
  \ numbers in the given list,\n    round each element in the list to the upper int(Ceiling)\
  \ first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n    14\n    >>> lst([1.0,\
  \ 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84\n    >>> lst([1.4,\
  \ 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n    6\n    \n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
  \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) ==\
  \ 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0,\
  \ 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert\
  \ candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3])\
  \ == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0])\
  \ == 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
  \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    return sum([int(x**2) for x in lst])\n", "    return sum([int(math.ceil(x))**2\
    \ for x in lst])\n", "    return sum([int(x)**2 for x in lst])\n", "    return\
    \ sum([int(x)**2 for x in lst])\n", "    return sum([int(i**2) for i in lst])\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    return sum([int(i)**2\
    \ for i in lst])\n", "    return sum([int(math.ceil(x))**2 for x in lst])\n",
  "    return sum([math.ceil(x)**2 for x in lst])\n", "    return sum([int(i**2) for\
    \ i in lst])\n", "    return sum([int(math.ceil(i))**2 for i in lst])\n", "  \
    \  return sum([int(math.ceil(x))**2 for x in lst])\n", "    return sum([int(x)**2\
    \ for x in lst])\n", "    return sum([int(math.ceil(x)) ** 2 for x in lst])\n",
  "    return sum([int(math.ceil(x))**2 for x in lst])\n", "    # YOUR CODE HERE\n\
    \    sum = 0\n    for i in lst:\n        sum += math.ceil(i)**2\n    return sum\n",
  '    return sum([int(math.ceil(x))**2 for x in lst])', "    return sum([int(math.ceil(i))**2\
    \ for i in lst])\n", "    return sum([int(x)**2 for x in lst])\n", "    return\
    \ sum([int(x)**2 for x in lst])\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
