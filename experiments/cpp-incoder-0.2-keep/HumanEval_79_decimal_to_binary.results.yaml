name: HumanEval_79_decimal_to_binary
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfc7et363: /tmp/tmpfc7et363.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpmmstov68: /tmp/tmpmmstov68.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp3009s5o4: /tmp/tmp3009s5o4.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt9ucfkqe.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpt9ucfkqe.cpp:17:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpt9ucfkqe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpu54rl8jg: /tmp/tmpu54rl8jg.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n    }\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5q2ampa6.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp5q2ampa6.cpp:17:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5q2ampa6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2 == 0 ? \"1\" : \"\
    0\");\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\"\
    );\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0k686ic6.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp0k686ic6.cpp:17:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   17 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0k686ic6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1gm7dh0c.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp1gm7dh0c.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1gm7dh0c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp1gm7dh0c.cpp:19:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |     binary = to_string(remainder) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::bitset<sizeof(long)>::to_string(decimal)\
    \ + binary;\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu6rurq39.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpu6rurq39.cpp:14:64: error: cannot call member function\
    \ \u2018std::__cxx11::basic_string<_CharT> std::bitset<_Nb>::to_string(_CharT,\
    \ _CharT) const [with _CharT = long int; long unsigned int _Nb = 8]\u2019 without\
    \ object\n   14 |         binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n      |                                                         \
    \       ^\n/tmp/tmpu6rurq39.cpp:17:58: error: cannot call member function \u2018\
    std::__cxx11::basic_string<_CharT> std::bitset<_Nb>::to_string(_CharT, _CharT)\
    \ const [with _CharT = long int; long unsigned int _Nb = 8]\u2019 without object\n\
    \   17 |     binary = std::bitset<sizeof(long)>::to_string(decimal) + binary;\n\
    \      |                                                          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpwcdaounb: /tmp/tmpwcdaounb.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n\
    \        decimal /= 2;\n    }\n    return binary + \"db\";\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp65c2nqqm: /tmp/tmp65c2nqqm.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        binary.push_back(remainder\
    \ % 2);\n        remainder = remainder / 2;\n    }\n    binary.push_back(remainder);\n\
    \    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp140kx8o6.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp140kx8o6.cpp:19:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   19 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp140kx8o6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while(decimal > 0) {\n        binary += \"1\";\n        decimal -=\
    \ 1;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpa1yr7snd: /tmp/tmpa1yr7snd.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        binary.push_back(remainder\
    \ % 2);\n        remainder = remainder / 2;\n    }\n    binary.push_back(remainder);\n\
    \    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg8318nj5.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpg8318nj5.cpp:19:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   19 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpg8318nj5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_odhenaw: /tmp/tmp_odhenaw.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmprhhh7st9: /tmp/tmprhhh7st9.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpi7lggklu: /tmp/tmpi7lggklu.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        binary\
    \ = to_string(remainder) + binary;\n        remainder = remainder % 2;\n    }\n\
    \    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyvpyw2w7.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpyvpyw2w7.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyvpyw2w7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpk7ma6458: /tmp/tmpk7ma6458.cpp:25: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal != 0) {\n        binary = std::to_string(decimal % 2) +\
    \ binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpx0lr_0mo: /tmp/tmpx0lr_0mo.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary += \"0\";\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpigh3zg_t.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpigh3zg_t.cpp:17:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   17 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpigh3zg_t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n    }\n\
    \    return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw96inu1i.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpw96inu1i.cpp:17:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw96inu1i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp6rdq4g1r: /tmp/tmp6rdq4g1r.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        decimal %= 2;\n        binary += \"0\";\n\
    \    }\n    binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgi31xbth: /tmp/tmpgi31xbth.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpi6wf0ud1: /tmp/tmpi6wf0ud1.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal %= 2;\n\
    \    }\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_6l55xet: /tmp/tmp_6l55xet.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n    }\n\
    \    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pa5t_8p.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp2pa5t_8p.cpp:17:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2pa5t_8p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp2pa5t_8p.cpp:19:39: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   19 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5ilj6jrq: /tmp/tmp5ilj6jrq.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary += (remainder ==\
    \ 1) ? \"1\" : \"0\";\n        counter *= 2;\n        remainder = remainder /\
    \ 2;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp2_yrj5ei: /tmp/tmp2_yrj5ei.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpjf1djvvn: /tmp/tmpjf1djvvn.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    std::string db = \"db\";\n    binary = db + binary + db;\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpznmaczu1: /tmp/tmpznmaczu1.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = decimal;\n    int counter = 0;\n    while (decimal != 0)\
    \ {\n        remainder *= 10;\n        decimal -= remainder;\n        counter\
    \ += 1;\n        binary += std::to_string(counter);\n    }\n    binary += \"db\"\
    ;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpu_2moc74: /tmp/tmpu_2moc74.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        binary = (remainder % 2) + binary;\n        remainder = remainder\
    \ / 2;\n        counter++;\n    }\n    binary = binary + std::to_string(counter);\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcq4gd0pr.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpcq4gd0pr.cpp:16:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019})\n   16 |         binary = (remainder\
    \ % 2) + binary;\n      |                  ~~~~~~~~~~~~~~~ ^ ~~~~~~\n      | \
    \                            |      |\n      |                             | \
    \     std::string {aka std::__cxx11::basic_string<char>}\n      |            \
    \                 long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcq4gd0pr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcq4gd0pr.cpp:16:36:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16\
    \ |         binary = (remainder % 2) + binary;\n      |                      \
    \             "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n    \
    \    decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpp66e6ysj: /tmp/tmpp66e6ysj.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while(decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += (remainder ? \"1\"\
    \ : \"0\");\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpy0ns8ben: /tmp/tmpy0ns8ben.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += decimal%2;\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpt9qkwzm7: /tmp/tmpt9qkwzm7.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter !=\
    \ 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter = counter * 2;\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkw6zqdd2.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpkw6zqdd2.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkw6zqdd2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5v3ipe34: /tmp/tmp5v3ipe34.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary.push_back((decimal%2) + '0');\n \
    \       decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5qj7xr1w: /tmp/tmp5qj7xr1w.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while(decimal) {\n        binary += \"1\";\n        decimal -= 1;\n\
    \    }\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmphipewy5r: /tmp/tmphipewy5r.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzuihrd5b: /tmp/tmpzuihrd5b.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbh7byr8d: /tmp/tmpbh7byr8d.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_hi5ce7f: /tmp/tmp_hi5ce7f.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal);\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptdut5d9w.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptdut5d9w.cpp:14:62: error: cannot call member function\
    \ \u2018std::__cxx11::basic_string<_CharT> std::bitset<_Nb>::to_string(_CharT,\
    \ _CharT) const [with _CharT = long int; long unsigned int _Nb = 8]\u2019 without\
    \ object\n   14 |         binary = std::bitset<sizeof(long)>::to_string(decimal);\n\
    \      |                                                              ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9kujv3t.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpi9kujv3t.cpp:77:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmpi9kujv3t.cpp:77:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4nzh583.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmph4nzh583.cpp:17:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   17 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmph4nzh583.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal != 0) {\n        binary += (decimal % 2) + '0';\n      \
    \  decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpietpzdt6: /tmp/tmpietpzdt6.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(counter) + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9sye5_ye.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp9sye5_ye.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9sye5_ye.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp9sye5_ye.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.length() < 8) {\n        binary += \"1\";\n    }\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp2r1am35o: /tmp/tmp2r1am35o.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.length() < 32) {\n        binary += \"1\";\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmplxczxyzt: /tmp/tmplxczxyzt.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbjmwjsms: /tmp/tmpbjmwjsms.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while(decimal != 0){\n        binary.push_back((decimal%2==0)?'0':1);\n    \
    \    decimal /= 2;\n    }\n    binary.insert(binary.begin(),'b');\n    binary.insert(binary.end(),'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpixch6q31: /tmp/tmpixch6q31.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    for(int i = binary.length()-1; i >= 0; i--) {\n        binary += \"\
    1\";\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpo65dos04: /tmp/tmpo65dos04.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long counter = 0;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter, '0');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp798u1g6w.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp798u1g6w.cpp:21:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   21 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp798u1g6w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp8ss7oj62: /tmp/tmp8ss7oj62.cpp:25: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder;\n    long counter = 0;\n    while (decimal != 0) {\n  \
    \      remainder = decimal % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n\
    \        counter++;\n    }\n    binary = binary + \"db\";\n    for (int i = 0;\
    \ i < counter; i++) {\n        binary += \"0\";\n    }\n    return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_zpir9se.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp_zpir9se.cpp:18:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   18 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_zpir9se.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpldwh_g9n: /tmp/tmpldwh_g9n.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp9gt26vlc: /tmp/tmp9gt26vlc.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpl209h8of: /tmp/tmpl209h8of.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal /= 2;\n\
    \    }\n    binary = binary + \"1\";\n    return binary;\n}\nint main() {\n  \
    \  auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp6qfz1obq: /tmp/tmp6qfz1obq.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbf3ychup: /tmp/tmpbf3ychup.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpdrfpzscz: /tmp/tmpdrfpzscz.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n  \
    \  binary.insert(binary.end(), binary.begin(), binary.end() - 2);\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppztdvz_2.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmppztdvz_2.cpp:17:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   17 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppztdvz_2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n\
    \        decimal /= 2;\n    }\n    binary = std::string(\"db\") + binary + std::string(\"\
    db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpt1awh0zw: /tmp/tmpt1awh0zw.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while(decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n     \
    \   decimal /= 2;\n    }\n    binary.push_back('0');\n    binary.push_back('1');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpnxlng54j: /tmp/tmpnxlng54j.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter !=\
    \ 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter = counter * 2;\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpemwwwjw_.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpemwwwjw_.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpemwwwjw_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpz8_ix_bo: /tmp/tmpz8_ix_bo.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp8_52kior: /tmp/tmp8_52kior.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long counter = 0;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmphrcq5h39: /tmp/tmphrcq5h39.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmppbzu6c0x: /tmp/tmppbzu6c0x.cpp:25: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmptipsr7cm: /tmp/tmptipsr7cm.cpp:25: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5ddn148g: /tmp/tmp5ddn148g.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += (remainder == 1) ? \"1\" : \"0\";\n        counter += 1;\n    }\n    binary\
    \ = binary + \"db\";\n    binary = binary + std::to_string(counter);\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpyj7kw9o6: /tmp/tmpyj7kw9o6.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        binary = to_string(remainder)\
    \ + binary;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpphteemdl.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpphteemdl.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpphteemdl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    int count = 0;\n    while (remainder > 0)\
    \ {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        ++count;\n        remainder = remainder / 2;\n    }\n   \
    \ binary = std::to_string(count) + binary;\n    return \"db\" + binary + \"db\"\
    ;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpaxmojy9l: /tmp/tmpaxmojy9l.cpp:27: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvxxj80f7.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpvxxj80f7.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvxxj80f7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpn5udwrzm: /tmp/tmpn5udwrzm.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += decimal%2;\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp87bshlg3: /tmp/tmp87bshlg3.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while(decimal > 0) {\n        binary += \"1\";\n        decimal -=\
    \ 1;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp1g8to9km: /tmp/tmp1g8to9km.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg5a0d4_x.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpg5a0d4_x.cpp:19:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   19 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpg5a0d4_x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary += (decimal % 2) + '0';\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpel3nnzd1: /tmp/tmpel3nnzd1.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder + '0';\n    }\n   \
    \ binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp39cmsmsq: /tmp/tmp39cmsmsq.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(remainder) + binary;\n    binary = binary + \"db\";\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2nlcz6yb.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp2nlcz6yb.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2nlcz6yb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp2nlcz6yb.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(remainder) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.length() < 8) {\n        binary += \"1\";\n    }\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpe20j9782: /tmp/tmpe20j9782.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpdb1f1mb5: /tmp/tmpdb1f1mb5.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpiklzdql7: /tmp/tmpiklzdql7.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n\
    \        remainder *= 2;\n        decimal -= remainder;\n        counter++;\n\
    \    }\n    binary.resize(counter);\n    long remainder2 = decimal;\n    counter\
    \ = 0;\n    while (decimal != 0) {\n        remainder2 *= 2;\n        decimal\
    \ -= remainder2;\n        binary[counter] = '0' + remainder2 % 2;\n        remainder2\
    \ /= 2;\n        counter++;\n    }\n    binary[0] = 'd';\n    binary[counter]\
    \ = 'b';\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvfqzzf88: /tmp/tmpvfqzzf88.cpp:36: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while(decimal != 0){\n        binary.push_back((decimal%2)+'0');\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(),'b');\n    binary.insert(binary.end(),'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_7kyqv4i: /tmp/tmp_7kyqv4i.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2 == 0 ? \"1\" : \"\
    0\");\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpdsmphqfl: /tmp/tmpdsmphqfl.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal)\
    \ + binary;\n        decimal /= 2;\n    }\n    return binary + \"db\";\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp3muo3xa.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpp3muo3xa.cpp:14:62: error: cannot call member function\
    \ \u2018std::__cxx11::basic_string<_CharT> std::bitset<_Nb>::to_string(_CharT,\
    \ _CharT) const [with _CharT = long int; long unsigned int _Nb = 8]\u2019 without\
    \ object\n   14 |         binary = std::bitset<sizeof(long)>::to_string(decimal)\
    \ + binary;\n      |                                                         \
    \     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpu7nnw9gg: /tmp/tmpu7nnw9gg.cpp:25: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(counter) + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5oyky8yy.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp5oyky8yy.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5oyky8yy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp5oyky8yy.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpowmg6rfm: /tmp/tmpowmg6rfm.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpust1ohlv: /tmp/tmpust1ohlv.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long quotient;\n    long digit;\n    long power = 1;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n\
    \    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long\
    \ G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n\
    \    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long\
    \ P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n\
    \    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long\
    \ Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9pf7l3s.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpi9pf7l3s.cpp:69:10: error: redeclaration of \u2018long\
    \ int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmpi9pf7l3s.cpp:25:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   25 |"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) == 0 ? \"1\" : \"\
    0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpppi0nhat.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpppi0nhat.cpp:17:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   17 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpppi0nhat.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        counter++;\n        remainder = remainder % 2;\n        binary\
    \ += (remainder == 1) ? \"1\" : \"0\";\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptv_8dudi.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptv_8dudi.cpp:20:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   20 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptv_8dudi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    std::string db = \"db\";\n \
    \   binary.insert(0, db);\n    binary.insert(0, db);\n    return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpap011v8u: /tmp/tmpap011v8u.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder = decimal;\n    long counter = 1;\n    while(counter != 0) {\n\
    \        remainder *= 2;\n        binary += (remainder % 2) + '0';\n        remainder\
    \ /= 2;\n        counter++;\n    }\n    binary = \"db\" + binary + \"db\";\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder = decimal;\n    long counter = 1;\n    while (counter > 0) {\n\
    \        remainder *= 2;\n        counter --;\n    }\n    long remainder2 = remainder;\n\
    \    long counter2 = 1;\n    while (remainder2 > 0) {\n        remainder2 /= 2;\n\
    \        counter2 --;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ remainder);\n    binary.insert(binary.end(), remainder2);\n    binary.insert(binary.end(),\
    \ counter);\n    binary.insert(binary.end(), counter2);\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpdbjud6ks: /tmp/tmpdbjud6ks.cpp:35: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.length() < 32) {\n        binary += \"1\";\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpceg86n6x: /tmp/tmpceg86n6x.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long counter = 0;\n    while(decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ counter, 'd');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmputzsqflm: /tmp/tmputzsqflm.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary += (decimal % 2) + '0';\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpf53ehjvn: /tmp/tmpf53ehjvn.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpb6hagjh9: /tmp/tmpb6hagjh9.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.length() < 32) {\n        binary += \"1\";\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzlkmcqk1: /tmp/tmpzlkmcqk1.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        binary += to_string(remainder);\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_jeys047.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp_jeys047.cpp:17:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_jeys047.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter >\
    \ 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter = counter * 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfoy7tlpl.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpfoy7tlpl.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfoy7tlpl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.length() < 8) {\n        binary += \"1\";\n    }\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpos123qw8: /tmp/tmpos123qw8.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += (remainder == 1) ? \"1\" : \"0\";\n        counter++;\n    }\n    std::string\
    \ result = binary;\n    std::string extra = \"db\";\n    result += extra;\n  \
    \  result += extra;\n    return result;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmptb3ru5uf: /tmp/tmptb3ru5uf.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5q5c0il1: /tmp/tmp5q5c0il1.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5hsqlp10: /tmp/tmp5hsqlp10.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpiucnl8vq: /tmp/tmpiucnl8vq.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpu_is692q: /tmp/tmpu_is692q.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(counter) + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp94744t7c.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp94744t7c.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp94744t7c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp94744t7c.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        decimal /= 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5cjj2hp0.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp5cjj2hp0.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5cjj2hp0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(binary.begin(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpmsfojovz: /tmp/tmpmsfojovz.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpyetn3e8a: /tmp/tmpyetn3e8a.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal %= 2;\n\
    \    }\n    while(binary.length() < 32) {\n        binary += \"1\";\n    }\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpw82_fsmd: /tmp/tmpw82_fsmd.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long counter = 0;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter, '0');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc5u5rrub.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpc5u5rrub.cpp:21:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   21 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpc5u5rrub.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzclqec8x: /tmp/tmpzclqec8x.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal !=\
    \ 0) {\n        remainder *= 10;\n        counter += 1;\n        decimal -= remainder;\n\
    \        binary += (remainder % 2) + '0';\n        remainder = remainder / 2;\n\
    \    }\n    binary = binary + std::to_string(counter);\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpl207kk4g: /tmp/tmpl207kk4g.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        decimal %= 2;\n        binary += \"0\";\n\
    \    }\n    binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp02r2odtg: /tmp/tmp02r2odtg.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary += \"0\";\n        decimal %= 2;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc61be304.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpc61be304.cpp:17:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   17 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpc61be304.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while(counter <=\
    \ decimal) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = to_string(remainder) + binary;\n    binary.insert(0, \"db\");\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9ry9fi0.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpb9ry9fi0.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpb9ry9fi0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpb9ry9fi0.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(remainder) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.size() < 32) {\n        binary += \"1\";\n    }\n  \
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpz73yfjv8: /tmp/tmpz73yfjv8.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary += (remainder == 1 ? \"1\" : \"0\");\n    }\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp9ybwhfez: /tmp/tmp9ybwhfez.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal /= 2;\n\
    \    }\n    for(int i = binary.length()-1; i >= 0; i--) {\n        binary += \"\
    1\";\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp2emh8w7r: /tmp/tmp2emh8w7r.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter <=\
    \ decimal) {\n        remainder *= 2;\n        if (remainder == 0) {\n       \
    \     binary += \"1\";\n        } else {\n            binary += \"0\";\n     \
    \   }\n        remainder -= 1;\n        counter++;\n    }\n    std::string db\
    \ = \"db\";\n    binary = db + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmprv2g4xym: /tmp/tmprv2g4xym.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while(decimal > 0) {\n        binary += \"1\";\n        decimal -=\
    \ 1;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpqxt68vbn: /tmp/tmpqxt68vbn.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) == 0 ? \"1\" : \"\
    0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpygtpjvsw: /tmp/tmpygtpjvsw.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp58yle7aw: /tmp/tmp58yle7aw.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        decimal = decimal\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6dxo6yo.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpz6dxo6yo.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpz6dxo6yo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrwa6ahm.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpvrwa6ahm.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvrwa6ahm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = decimal;\n    int counter = 0;\n    while (decimal != 0)\
    \ {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n      \
    \  binary = to_string(remainder) + binary;\n        counter++;\n    }\n    binary\
    \ = to_string(counter) + binary;\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr6gpm08j.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpr6gpm08j.cpp:18:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   18 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpr6gpm08j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpr6gpm08j.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n    }\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkwn885m3.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpkwn885m3.cpp:17:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkwn885m3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgrvz8p5x: /tmp/tmpgrvz8p5x.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp8jg79y58: /tmp/tmp8jg79y58.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n   \
    \     binary = to_string(remainder) + binary;\n        counter++;\n    }\n   \
    \ binary = to_string(counter) + binary;\n    binary = binary + \"db\";\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppmhshfxo.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmppmhshfxo.cpp:18:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   18 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppmhshfxo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmppmhshfxo.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = decimal;\n    int counter = 0;\n    while (decimal != 0)\
    \ {\n        remainder *= 10;\n        remainder += decimal % 2;\n        decimal\
    \ /= 2;\n        counter += 1;\n    }\n    while (counter > 0) {\n        binary\
    \ += \"0\";\n        counter -= 1;\n    }\n    binary += \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbod0ogg8: /tmp/tmpbod0ogg8.cpp:30: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp2_w3x5au: /tmp/tmp2_w3x5au.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long counter = 0;\n    while(decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ counter, 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp7zee0w8v: /tmp/tmp7zee0w8v.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpdij690iy: /tmp/tmpdij690iy.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long counter = 0;\n    while(decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'd');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpoib06b_k: /tmp/tmpoib06b_k.cpp:66: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.size() < 8) {\n        binary += \"1\";\n    }\n   \
    \ return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpefik4c1z: /tmp/tmpefik4c1z.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcca7__g4: /tmp/tmpcca7__g4.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while(decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp257b5195: /tmp/tmp257b5195.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvarrep1i: /tmp/tmpvarrep1i.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        binary[counter] = '0';\n        remainder = remainder % 2;\n\
    \        counter++;\n    }\n    binary[counter] = 'd';\n    binary[counter + 1]\
    \ = 'b';\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmptde31f01: /tmp/tmptde31f01.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        decimal /= 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpieukj_df.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpieukj_df.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpieukj_df.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::bitset<sizeof(long)>::to_string(decimal)\
    \ + binary;\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt2lvpzn7.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpt2lvpzn7.cpp:14:64: error: cannot call member function\
    \ \u2018std::__cxx11::basic_string<_CharT> std::bitset<_Nb>::to_string(_CharT,\
    \ _CharT) const [with _CharT = long int; long unsigned int _Nb = 8]\u2019 without\
    \ object\n   14 |         binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n      |                                                         \
    \       ^\n/tmp/tmpt2lvpzn7.cpp:17:58: error: cannot call member function \u2018\
    std::__cxx11::basic_string<_CharT> std::bitset<_Nb>::to_string(_CharT, _CharT)\
    \ const [with _CharT = long int; long unsigned int _Nb = 8]\u2019 without object\n\
    \   17 |     binary = std::bitset<sizeof(long)>::to_string(decimal) + binary;\n\
    \      |                                                          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpglppbzl6: /tmp/tmpglppbzl6.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += decimal%2;\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpiwvb7n4s: /tmp/tmpiwvb7n4s.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpl_gcivy5: /tmp/tmpl_gcivy5.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_75aqas2: /tmp/tmp_75aqas2.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ long remainder;\n    long counter = 1;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vsas2pk.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp5vsas2pk.cpp:21:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   21 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5vsas2pk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnnr3zvby.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpnnr3zvby.cpp:14:64: error: cannot call member function\
    \ \u2018std::__cxx11::basic_string<_CharT> std::bitset<_Nb>::to_string(_CharT,\
    \ _CharT) const [with _CharT = long int; long unsigned int _Nb = 8]\u2019 without\
    \ object\n   14 |         binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n      |                                                         \
    \       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        decimal %= 2;\n        binary += \"0\";\n\
    \    }\n    binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpd00pna_3: /tmp/tmpd00pna_3.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter >\
    \ 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter = counter * 2;\n        remainder = remainder / 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptv5iczxr.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptv5iczxr.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptv5iczxr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = decimal;\n    int counter = 0;\n    while (remainder >\
    \ 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(counter) + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9kvchl9a.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp9kvchl9a.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9kvchl9a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp9kvchl9a.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = decimal;\n    while (remainder > 0) {\n        int digit\
    \ = remainder % 2;\n        remainder = remainder / 2;\n        binary = std::to_string(digit)\
    \ + binary;\n    }\n    binary = std::to_string(decimal) + binary;\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpq74ni7b3: /tmp/tmpq74ni7b3.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpos1ok0b8: /tmp/tmpos1ok0b8.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzt68v8h5.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpzt68v8h5.cpp:19:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   19 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzt68v8h5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while(binary.size() < 8) {\n        binary += \"1\";\n    }\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpnl7px45q: /tmp/tmpnl7px45q.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter >\
    \ 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter = counter + 1;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp83oemndq.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp83oemndq.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp83oemndq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter <=\
    \ remainder) {\n        binary = (counter % 2 == 0) ? \"0\" + binary : \"1\" +\
    \ binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n   \
    \ return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfpkk9peh: /tmp/tmpfpkk9peh.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpa5ickcsc: /tmp/tmpa5ickcsc.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqnnkxig4.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpqnnkxig4.cpp:19:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   19 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqnnkxig4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfh8ij7a6.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpfh8ij7a6.cpp:77:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmpfh8ij7a6.cpp:77:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n    \
    \    decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp4v24wp2f: /tmp/tmp4v24wp2f.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpyienb1im: /tmp/tmpyienb1im.cpp:25: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while (binary.length() < 32) {\n        binary += \"1\";\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp8puuasld: /tmp/tmp8puuasld.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n    \
    \    decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpiakd4e9y: /tmp/tmpiakd4e9y.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        binary += \"1\";\n    }\n    binary += \"0\";\n    while (binary.size()\
    \ < 32) {\n        binary += \"0\";\n    }\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpf90lyo5t: /tmp/tmpf90lyo5t.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp4cxi45gc: /tmp/tmp4cxi45gc.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmptj79zjcf: /tmp/tmptj79zjcf.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpz070a582: /tmp/tmpz070a582.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = to_string(counter) + binary;\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqdozcpzc.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpqdozcpzc.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqdozcpzc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpqdozcpzc.cpp:20:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary += (decimal % 2) + '0';\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpiam3z5vc: /tmp/tmpiam3z5vc.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(counter) + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpislq95fe.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpislq95fe.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpislq95fe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpislq95fe.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvnhgrp1x: /tmp/tmpvnhgrp1x.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary += decimal%2;\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvzqipfyz: /tmp/tmpvzqipfyz.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8wgrntzn.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp8wgrntzn.cpp:19:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   19 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8wgrntzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    while(binary.length() < 32) {\n        binary += \"1\";\n    }\n \
    \   return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpizogvbq4: /tmp/tmpizogvbq4.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n       \
    \ decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_xm9pebv: /tmp/tmp_xm9pebv.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0){\n        binary += (decimal % 2) + '0';\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpe_1v_pds: /tmp/tmpe_1v_pds.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while (decimal != 0) {\n        binary += (decimal % 2) == 0 ? \"1\" :\
    \ \"0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzis349kg: /tmp/tmpzis349kg.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        binary += \"1\";\n    }\n    binary += \"0\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmplr1qzfsh: /tmp/tmplr1qzfsh.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    binary.insert(0, \"db\");\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpwrqp3p_p: /tmp/tmpwrqp3p_p.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        binary += \"0\";\n    }\n    binary += \"1\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp4g879xt6: /tmp/tmp4g879xt6.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal !=\
    \ 0) {\n        remainder *= 10;\n        decimal -= remainder;\n        counter\
    \ += 1;\n    }\n    binary = std::to_string(counter);\n    binary.insert(0, \"\
    db\");\n    binary.insert(0, std::to_string(remainder));\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpetljqkjp: /tmp/tmpetljqkjp.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += (decimal % 2) == 0 ? \"1\" : \"\
    0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmphld9xxqr: /tmp/tmphld9xxqr.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpkaulzt0j: /tmp/tmpkaulzt0j.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter <=\
    \ decimal) {\n        remainder *= 2;\n        if (remainder >= 10) {\n      \
    \      binary += \"1\";\n            remainder -= 10;\n        } else {\n    \
    \        binary += \"0\";\n        }\n        counter++;\n    }\n    binary +=\
    \ \"db\";\n    binary += std::to_string(remainder);\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpl_aawcdb: /tmp/tmpl_aawcdb.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcq1kqzui: /tmp/tmpcq1kqzui.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    int count = 0;\n    while (remainder > 0)\
    \ {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        count++;\n    }\n   \
    \ binary = to_string(count) + binary;\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwffnaunw.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpwffnaunw.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwffnaunw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpwffnaunw.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(count) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/inc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder + '0';\n    }\n   \
    \ return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpd97ftmbp: /tmp/tmpd97ftmbp.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal !=\
    \ 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        decimal /= 2;\n        counter++;\n    }\n    binary = to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.insert(binary.length(),\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqsulb5s8.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpqsulb5s8.cpp:17:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   17 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqsulb5s8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpqsulb5s8.cpp:21:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     binary = to_string(remainder) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_0tyz6u7: /tmp/tmp_0tyz6u7.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary += decimal%2;\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmppzej40uf: /tmp/tmppzej40uf.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"\"\
    ;\n    while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n  \
    \  binary.insert(binary.end(), binary.begin(), binary.end() - 2);\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5mriocwt.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp5mriocwt.cpp:17:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   17 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5mriocwt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_stri"
  exit_code: 1
  status: SyntaxError
