name: HumanEval_9_rolling_max
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ug02adb.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7ug02adb.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ug02adb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ == max_element) {\n            result.push_back(numbers[i]);\n        }\n  \
    \  }\n    result.push_back(max_element);\n    return result;\n}\nint main() {\n\
    \    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    for (long i : numbers) {\n    \
    \    if (i > max_val) {\n            result.push_back(max_val);\n            max_val\
    \ = i;\n        } else {\n            max_val = std::max(max_val, i);\n      \
    \  }\n    }\n    result.push_back(max_val);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkplom8rq.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkplom8rq.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkplom8rq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp784jnxx.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpp784jnxx.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp784jnxx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfa9ddub5.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfa9ddub5.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfa9ddub5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxd10_o6z.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxd10_o6z.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxd10_o6z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > current_element) {\n          \
    \  result.push_back(current_element);\n            current_element = i;\n    \
    \    } else {\n            current_element = i;\n        }\n        if (current_element\
    \ > max_element) {\n            result.push_back(current_element);\n         \
    \   max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > current_element)\
    \ {\n            current_element = numbers[i];\n        }\n        if (current_element\
    \ > max_element) {\n            max_element = current_element;\n        }\n  \
    \      result.push_back(max_element);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkq82mmgd.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkq82mmgd.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkq82mmgd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_max = max_element;\n\
    \    for (long i : numbers) {\n        if (i > current_max) {\n            result.push_back(current_max);\n\
    \            current_max = i;\n        } else {\n            current_max = i;\n\
    \        }\n    }\n    result.push_back(current_max);\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long index = 0; index < numbers.size(); index++) {\n        if (numbers[index]\
    \ > max_element) {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push_back(max_element);\n    for (long\
    \ index = max_index + 1; index < numbers.size(); index++) {\n        result.push_back(numbers[index]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpniy88esg.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpniy88esg.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpniy88esg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphs0585w_.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphs0585w_.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphs0585w_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph62wf6zk.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph62wf6zk.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph62wf6zk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    long current_index = max_index;\n\
    \    while (current_index > 0) {\n        long current_element = numbers[current_index];\n\
    \        long current_max_element = numbers[current_index - 1];\n        if (current_element\
    \ > current_max_element) {\n            result.push_back(current_element);\n \
    \           current_index--;\n        } else {\n            break;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long index = 0; index < numbers.size(); index++) {\n        if (numbers[index]\
    \ > max_element) {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push_back(max_element);\n    for (long\
    \ index = max_index + 1; index < numbers.size(); index++) {\n        result.push_back(numbers[index]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppsssuqre.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppsssuqre.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppsssuqre.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    for (size_t i = max_so_far_pos\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9dg25ngf.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9dg25ngf.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9dg25ngf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcfo7h77h.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpcfo7h77h.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcfo7h77h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr71t0pot.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr71t0pot.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr71t0pot.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    for (size_t i = max_so_far_pos\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 1; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = i;\n   \
    \     }\n    }\n    result.push_back(max_so_far);\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    long current_element = numbers[max_index];\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(current_element);\n\
    \        current_element = numbers[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = std::max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > current_element)\
    \ {\n            result.push_back(current_element);\n            current_element\
    \ = numbers[i];\n        } else {\n            current_element = max(current_element,\
    \ numbers[i]);\n        }\n    }\n    result.push_back(current_element);\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpry53bzyo.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpry53bzyo.cpp:16:31: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   16 |             current_element\
    \ = max(current_element, numbers[i]);\n      |                               ^~~\n\
    \      |                               std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpry53bzyo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_max = max_element;\n\
    \    for (long number : numbers) {\n        if (number > current_max) {\n    \
    \        result.push_back(current_max);\n            current_max = number;\n \
    \       } else {\n            current_max = std::max(current_max, number);\n \
    \       }\n    }\n    result.push_back(current_max);\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4pb3tg7.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf4pb3tg7.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf4pb3tg7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_index = 0;\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_index = i;\n\
    \        }\n    }\n    result.push_back(max_so_far);\n    result.push_back(numbers[max_so_far_index]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_element_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    long current_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > current_element) {\n            result.push_back(current_element);\n     \
    \       current_element = numbers[i];\n        }\n    }\n    result.push_back(current_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = std::max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = -1;\n\
    \    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_element_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbqlkmes_.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbqlkmes_.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbqlkmes_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfbit9d50.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfbit9d50.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfbit9d50.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] == max_element) {\n            result.push_back(numbers[i]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long index = 0; index < numbers.size(); index++) {\n        if (numbers[index]\
    \ > max_element) {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push_back(max_element);\n    for (long\
    \ index = max_index + 1; index < numbers.size(); index++) {\n        result.push_back(numbers[index]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_b8fkgum.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_b8fkgum.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_b8fkgum.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_max = max_element;\n\
    \    for (long i : numbers) {\n        if (i > current_max) {\n            result.push_back(current_max);\n\
    \            current_max = i;\n        } else {\n            current_max = i;\n\
    \        }\n    }\n    result.push_back(current_max);\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    for (long i = max_so_far_pos\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1rg75c3g.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1rg75c3g.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1rg75c3g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps2wznu_m.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps2wznu_m.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps2wznu_m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_max = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > current_max) {\n            result.push_back(current_max);\n\
    \            current_max = i;\n        } else {\n            current_max = i;\n\
    \        }\n    }\n    result.push_back(current_max);\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (auto\
    \ i : numbers) {\n        if (i > max_val) {\n            result.push_back(max_val);\n\
    \            max_val = i;\n            max_pos = 0;\n        } else if (i == max_val)\
    \ {\n            max_pos++;\n        }\n    }\n    if (max_pos == 0) {\n     \
    \   result.push_back(max_val);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1fdv3enw.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1fdv3enw.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1fdv3enw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplu6s8bit.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplu6s8bit.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplu6s8bit.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = -1;\n\
    \    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_element_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (auto i : numbers) {\n        if (current_element > i) {\n          \
    \  current_element = i;\n        }\n        if (current_element > max_element)\
    \ {\n            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (auto i : numbers) {\n        if (current_element > i) {\n          \
    \  current_element = i;\n        }\n        if (current_element > max_element)\
    \ {\n            max_element = current_element;\n        }\n        result.push_back(max_element);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        } else if (numbers[i] == max_so_far)\
    \ {\n            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > current_element) {\n          \
    \  result.push_back(current_element);\n            current_element = i;\n    \
    \    } else {\n            current_element = i;\n        }\n        if (current_element\
    \ > max_element) {\n            result.push_back(current_element);\n         \
    \   max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    for (long i = max_so_far_pos\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long index = 1; index < numbers.size(); index++) {\n        if (numbers[index]\
    \ > max_element) {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push_back(max_element);\n    for (long\
    \ index = max_index + 1; index < numbers.size(); index++) {\n        result.push_back(numbers[index]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = -1;\n\
    \    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    for (size_t i = max_element_index + 1; i < numbers.size();\
    \ ++i) {\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n       \
    \ if (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n\
    \            result.push_back(numbers[max_element_index]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (auto\
    \ i : numbers) {\n        if (i > max_val) {\n            result.push_back(max_val);\n\
    \            max_val = i;\n            max_pos = 0;\n        } else {\n      \
    \      max_pos = std::max(max_pos, i);\n        }\n    }\n    result.push_back(max_val);\n\
    \    result.insert(result.end(), max_pos, max_val);\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    result.push_back(max_so_far_pos);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    for (size_t i = max_pos + 1; i < numbers.size();\
    \ ++i) {\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    for (long i = max_pos; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    result.push_back(max_pos);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    for (long i = max_so_far_pos\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoaoywcze.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoaoywcze.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoaoywcze.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt4txm2bu.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpt4txm2bu.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt4txm2bu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    for (long i = max_pos + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_index = 0;\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_index = i;\n\
    \        }\n    }\n    result.push_back(max_so_far);\n    for (size_t i = max_so_far_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    for (long i = max_so_far_pos\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_element_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    result.push_back(numbers[max_pos]);\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzzifyd8r.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzzifyd8r.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzzifyd8r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1yh3es16.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1yh3es16.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1yh3es16.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwhsnaqca.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwhsnaqca.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwhsnaqca.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    long current_max = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        current_element = numbers[i];\n        if (current_element >\
    \ current_max) {\n            result.push_back(current_max);\n            current_max\
    \ = current_element;\n        } else {\n            current_max = std::max(current_max,\
    \ current_element);\n        }\n    }\n    result.push_back(current_max);\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    result.push_back(numbers[max_pos]);\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptv7zrzl4.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptv7zrzl4.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptv7zrzl4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbgnqoe14.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbgnqoe14.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, numbers[i]);\n      |                           ^~~\n   \
    \   |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbgnqoe14.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo6nxxkvk.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo6nxxkvk.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo6nxxkvk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_max = max_element;\n\
    \    for (long number : numbers) {\n        if (number > current_max) {\n    \
    \        result.push_back(current_max);\n            current_max = number;\n \
    \       } else {\n            current_max = number;\n        }\n    }\n    result.push_back(current_max);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgk14tl96.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgk14tl96.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgk14tl96.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_max = max_element;\n\
    \    long current_min = max_element;\n    long current_sum = 0;\n    long current_count\
    \ = 0;\n    for (long i : numbers) {\n        current_sum += i;\n        current_count++;\n\
    \        if (current_sum > current_max) {\n            current_max = current_sum;\n\
    \        }\n        if (current_sum < current_min) {\n            current_min\
    \ = current_sum;\n        }\n    }\n    result.push_back(current_max);\n    result.push_back(current_min);\n\
    \    for (long i : numbers) {\n        if (current_count > 0) {\n            current_sum\
    \ -= i;\n            current_count--;\n            if (current_sum < current_min)\
    \ {\n                current_min = current_sum;\n            }\n            if\
    \ (current_sum > current_max) {\n                current_max = current_sum;\n\
    \            }\n        }\n    }\n    result.push_back(current_max);\n    result.push_back(current_min);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpavuanxbm.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpavuanxbm.cpp:15:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |             max_element\
    \ = max(max_element, i);\n      |                           ^~~\n      |     \
    \                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpavuanxbm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        } else if (numbers[i] == max_so_far)\
    \ {\n            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            max_element = i;\n        }\n   \
    \ }\n    for (long i : numbers) {\n        if (i > max_element) {\n          \
    \  result.push_back(i);\n            max_element = i;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long index = 0; index < numbers.size(); index++) {\n        if (numbers[index]\
    \ > max_element) {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    for (long index = max_index; index >= 0; index--)\
    \ {\n        result.push_back(numbers[index]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (auto\
    \ i : numbers) {\n        if (i > max_val) {\n            result.push_back(max_val);\n\
    \            max_val = i;\n            max_pos = 0;\n        } else {\n      \
    \      max_pos = max_pos + 1;\n        }\n    }\n    if (max_pos == 0) {\n   \
    \     result.push_back(max_val);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (long i = max_element_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 1; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
