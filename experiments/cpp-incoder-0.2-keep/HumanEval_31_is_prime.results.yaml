name: HumanEval_31_is_prime
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqld4a35m: /tmp/tmpqld4a35m.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= n / i) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe2foitrp: /tmp/tmpe2foitrp.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5cuxhxv5: /tmp/tmp5cuxhxv5.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n\
    \  if (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  long sq =\
    \ sqrt(n);\n  for (long i = 3; i <= sq; i += 2) {\n    if (n % i == 0) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm_6s1w7n: /tmp/tmpm_6s1w7n.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n <= 3)\
    \ return true;\n  if (n % 2 == 0 || n % 3 == 0) return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2) {\n    if (n % i == 0 || n % (i + 2) == 0) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i <= n / i; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / 2; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    int i = 5;\n    while (i <= sqrt(n))\n\
    \        if (n % i == 0)\n            return false;\n        i += 6;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4xaga6km: /tmp/tmp4xaga6km.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpin3y1da_: /tmp/tmpin3y1da_.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n\
    \  if (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11\
    \ == 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 111 == 0) return\
    \ false;\n  if (n % 121 == 0) return false;\n  if (n % 131 == 0) return false;\n\
    \  if (n % 141 == 0) return false;\n  if (n % 151 == 0) return false;\n  if (n\
    \ % 161 == 0) return false;\n  if (n % 171 == 0) return false;\n  if (n % 181\
    \ == 0) return false;\n  if (n % 191 == 0) return false;\n  if (n % 201 == 0)\
    \ return false;\n  if (n % 211 == 0) return false;\n  if (n % 221 == 0) return\
    \ false;\n  if (n % 231 == 0) return false;\n  if (n % 241 == 0) return false;\n\
    \  if (n % 251 == 0) return false;\n  if (n % 261 == 0) return false;\n  if (n\
    \ % 271 == 0) return false;\n  if (n % 281 == 0) return false;\n  if (n % 291\
    \ == 0) return false;\n  if (n % 301 == 0) return false;\n  if (n % 311 == 0)\
    \ return false;\n  if (n % 321 == 0) return false;\n  if (n % 331 == 0) return\
    \ false;\n  if (n % 341 == 0) return false;\n  if (n % 351 == 0) return false;\n\
    \  if (n % 361 == 0) return false;\n  if (n % 371 == 0) return false;\n  if (n\
    \ % 381 == 0) return false;\n  if (n % 391 == 0) return false;\n  if (n % 401\
    \ == 0) return false;\n  if (n % 411 == 0) return false;\n  if (n % 421 == 0)\
    \ return false;\n  if (n % 431 == 0) return false;\n  if (n % 441 == 0) return\
    \ false;\n  if (n % 451 == 0) return false;\n  if (n % 461 == 0) return false;\n\
    \  if (n % 47\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqms8dog.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmppqms8dog.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmppqms8dog.cpp:46:16: error: expected primary-expression "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n\
    \  long i = 5;\n  while (i <= sqrt(n)) {\n    if (n % i == 0) return false;\n\
    \    i += 6;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_20jn7eu: /tmp/tmp_20jn7eu.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnlurq571: /tmp/tmpnlurq571.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i =\
    \ 2;\n    long flag = 0;\n    while(i*i <= n) {\n        if(n%i == 0) {\n    \
    \        flag = 1;\n            break;\n        }\n        i++;\n    }\n    if(flag\
    \ == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzwvjm4jn: /tmp/tmpzwvjm4jn.cpp:36: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_7nhdfph: /tmp/tmp_7nhdfph.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if\
    \ (n % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfgourse2: /tmp/tmpfgourse2.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long m = sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 2) return true;\n  if (n % 2 ==\
    \ 0) return false;\n  if (n < 3) return true;\n  if (n % 3 == 0) return false;\n\
    \  if (n < 9) return true;\n  if (n % 9 == 0) return false;\n  if (n < 27) return\
    \ true;\n  if (n % 27 == 0) return false;\n  if (n < 53) return true;\n  if (n\
    \ % 53 == 0) return false;\n  if (n < 1025) return true;\n  if (n % 1025 == 0)\
    \ return false;\n  if (n < 20389) return true;\n  if (n % 20389 == 0) return false;\n\
    \  if (n < 418131) return true;\n  if (n % 418131 == 0) return false;\n  if (n\
    \ < 7341025) return true;\n  if (n % 7341025 == 0) return false;\n  if (n < 137438951)\
    \ return true;\n  if (n % 137438951 == 0) return false;\n  if (n < 17497497671)\
    \ return true;\n  if (n % 17497497671 == 0) return false;\n  if (n < 34747494131)\
    \ return true;\n  if (n % 34747494131 == 0) return false;\n  if (n < 634747494131)\
    \ return true;\n  if (n % 634747494131 == 0) return false;\n  if (n < 1034747494131)\
    \ return true;\n  if (n % 1034747494131 == 0) return false;\n  if (n < 2034747494131)\
    \ return true;\n  if (n % 2034747494131 == 0) return false;\n  if (n < 4034747494131)\
    \ return true;\n  if (n % 4034747494131 == 0) return false;\n  if (n < 5034747494131)\
    \ return true;\n  if (n % 5034747494131 == 0) return false;\n  if (n < 7034747494131)\
    \ return true;\n  if (n % 7034747494131 == 0) return false;\n  if (n < 9034747494131)\
    \ return true;\n  if (n % 9034747494131 == 0) return false;\n  if (n < 10034747494131)\
    \ return true;\n  if (n % 10034747494131 == 0) return false;\n  if (n < 11034747494131)\
    \ return true;\n  if (n % 11034747494131 == 0) return false;\n  if (n < 12034747494131)\
    \ return true;\n  if (n % 12034747494131 == 0) return false;\n  if (n < 13034747494131)\
    \ return true;\n  if (n % 13034747494131 == 0) return false;\n  if (n < 1403474\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf_zebpop.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpf_zebpop.cpp:65:18: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   65 |   if (n < 1403474\n      |      ~           ^\n      |      \
    \            )\n   66 | }\n      | ~                 \n/tmp/tmpf_zebpop.cpp:66:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   66 | }\n \
    \     | ^\n/tmp/tmpf_zebpop.cpp:66:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   66 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    if (n % 7 == 0)\n        return false;\n    int i = 5;\n    while\
    \ (i <= sqrt(n))\n        if (n % i == 0)\n            return false;\n       \
    \ i += 6;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo4whjrmt: /tmp/tmpo4whjrmt.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpub9839vw: /tmp/tmpub9839vw.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq3g4o9sd: /tmp/tmpq3g4o9sd.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i < n)\
    \ {\n        if (n % i == 0)\n            return false;\n        i += 6;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpht48eywc: /tmp/tmpht48eywc.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprtc58h7s: /tmp/tmprtc58h7s.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0p_yo6bh: /tmp/tmp0p_yo6bh.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sqr = sqrt(n);\n\
    \    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmyyd2cwr: /tmp/tmpmyyd2cwr.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if\
    \ (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11 ==\
    \ 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 109) == 0) return\
    \ false;\n  if (n % 113) == 0) return false;\n  if (n % 127) == 0) return false;\n\
    \  if (n % 131) == 0) return false;\n  if (n % 139) == 0) return false;\n  if\
    \ (n % 147) == 0) return false;\n  if (n % 151) == 0) return false;\n  if (n %\
    \ 157) == 0) return false;\n  if (n % 163) == 0) return false;\n  if (n % 167)\
    \ == 0) return false;\n  if (n % 173) == 0) return false;\n  if (n % 179) == 0)\
    \ return false;\n  if (n % 181) == 0) return false;\n  if (n % 185) == 0) return\
    \ false;\n  if (n % 189) == 0) return false;\n  if (n % 193) == 0) return false;\n\
    \  if (n % 197) == 0) return false;\n  if (n % 201) == 0) return false;\n  if\
    \ (n % 207) == 0) return false;\n  if (n % 211) == 0) return false;\n  if (n %\
    \ 215) == 0) return false;\n  if (n % 217) == 0) return false;\n  if (n % 223)\
    \ == 0) return false;\n  if (n % 227) == 0) return false;\n  if (n % 229) == 0)\
    \ return false;\n  if (n % 233) == 0) return false;\n  if (n % 239) == 0) return\
    \ false;\n  if (n % 241) == 0) return false;\n  if (n % 247) == 0) return false;\n\
    \  if (n % 251) == 0) return false;\n  if (n % 257) == 0) return false;\n  if\
    \ (n % 263) == 0) return false;\n  if (n % 269) == 0) return false;\n  if (n %\
    \ 271) == 0) return false;\n  if (n % 277) == 0) return false;\n  if (n % 283)\
    \ == 0) return false;\n\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1p5h14d.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp_1p5h14d.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_1p5h14d.cpp:46:16: error: expected primary-expression "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp88g84lpb: /tmp/tmp88g84lpb.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpemdtsfxp: /tmp/tmpemdtsfxp.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / 2; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwclphyce: /tmp/tmpwclphyce.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ long sq = sqrt(n);\n    for (long i = 3; i <= sq; i += 2)\n        if (n % i\
    \ == 0)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi4gzgphj: /tmp/tmpi4gzgphj.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpc1_jkgtg: /tmp/tmpc1_jkgtg.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ax4kgxl: /tmp/tmp3ax4kgxl.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= n / i) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7i9evn54: /tmp/tmp7i9evn54.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n\
    \    return false;\n  int i = 5;\n  while (i <= sqrt(n))\n    if (n % i == 0)\n\
    \      return false;\n    i += 6;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i=2;\n\
    \    while(i<n){\n        if(n%i==0){\n            return false;\n        }\n\
    \        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw30efogk: /tmp/tmpw30efogk.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpknquphh1: /tmp/tmpknquphh1.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmph21ov4mw: /tmp/tmph21ov4mw.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbv2si_87: /tmp/tmpbv2si_87.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= n\
    \ / i) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmprbsgq43k: /tmp/tmprbsgq43k.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp66az_x97: /tmp/tmp66az_x97.cpp:41: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdxfp506i: /tmp/tmpdxfp506i.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7bmh6e_p: /tmp/tmp7bmh6e_p.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i=2;\n\
    \    while(i<n){\n        if(n%i==0)\n            return false;\n        i++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp99paf7_x: /tmp/tmp99paf7_x.cpp:36: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpql9lo_8x: /tmp/tmpql9lo_8x.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxz3c3k49: /tmp/tmpxz3c3k49.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  long sqr = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2)\n        if (n\
    \ % i == 0)\n            return false;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp47kbn7r5: /tmp/tmp47kbn7r5.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmzy9keme: /tmp/tmpmzy9keme.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcq0e5mhs: /tmp/tmpcq0e5mhs.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long m = sqrt(n);\n    for (long\
    \ i = 5; i <= m; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8nnsa11x: /tmp/tmp8nnsa11x.cpp:39: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n))\n        if (n % i == 0)\n\
    \            return false;\n        i += 6;\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sq\
    \ = sqrt(n);\n    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnwvs_6m7: /tmp/tmpnwvs_6m7.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\n\
    \            return false;\n        i += 6;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv73lkd5l: /tmp/tmpv73lkd5l.cpp:46: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long m = sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long limit = (long) sqrt(n);\n\
    \    for (long i = 3; i <= limit; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0400svou: /tmp/tmp0400svou.cpp:39: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if\
    \ (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11 ==\
    \ 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 111 == 0) return\
    \ false;\n  if (n % 121 == 0) return false;\n  if (n % 131 == 0) return false;\n\
    \  if (n % 141 == 0) return false;\n  if (n % 151 == 0) return false;\n  if (n\
    \ % 161 == 0) return false;\n  if (n % 171 == 0) return false;\n  if (n % 181\
    \ == 0) return false;\n  if (n % 191 == 0) return false;\n  if (n % 201 == 0)\
    \ return false;\n  if (n % 211 == 0) return false;\n  if (n % 221 == 0) return\
    \ false;\n  if (n % 231 == 0) return false;\n  if (n % 241 == 0) return false;\n\
    \  if (n % 251 == 0) return false;\n  if (n % 261 == 0) return false;\n  if (n\
    \ % 271 == 0) return false;\n  if (n % 281 == 0) return false;\n  if (n % 291\
    \ == 0) return false;\n  if (n % 301 == 0) return false;\n  if (n % 311 == 0)\
    \ return false;\n  if (n % 321 == 0) return false;\n  if (n % 331 == 0) return\
    \ false;\n  if (n % 341 == 0) return false;\n  if (n % 351 == 0) return false;\n\
    \  if (n % 361 == 0) return false;\n  if (n % 371 == 0) return false;\n  if (n\
    \ % 381 == 0) return false;\n  if (n % 391 == 0) return false;\n  if (n % 401\
    \ == 0) return false;\n  if (n % 411 == 0) return false;\n  if (n % 421 == 0)\
    \ return false;\n  if (n % 431 == 0) return false;\n  if (n % 441 == 0) return\
    \ false;\n  if (n % 451 == 0) return false;\n  if (n % 461 == 0) return false;\n\
    \  if (n % 471 == \n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwqbg2dnu.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpwqbg2dnu.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmpwqbg2dnu.cpp:46:16: error: expected primary-expression "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu96364ye: /tmp/tmpu96364ye.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= n / i) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i =\
    \ 2;\n    long count = 0;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            count++;\n        }\n        i++;\n    }\n    if (count == 0) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy1x43hub: /tmp/tmpy1x43hub.cpp:41: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvxkc3nrc: /tmp/tmpvxkc3nrc.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long m = sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7wg7dvr2: /tmp/tmp7wg7dvr2.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i < n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwbxt_puy: /tmp/tmpwbxt_puy.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n < 3) return true;\n\
    \    if (n % 3 == 0) return false;\n    if (n < 9) return true;\n    if (n % 9\
    \ == 0) return false;\n    if (n < 27) return true;\n    if (n % 27 == 0) return\
    \ false;\n    if (n < 53) return true;\n    if (n % 53 == 0) return false;\n \
    \   if (n < 1025) return true;\n    if (n % 1025 == 0) return false;\n    if (n\
    \ < 20389) return true;\n    if (n % 20389 == 0) return false;\n    if (n < 41813)\
    \ return true;\n    if (n % 41813 == 0) return false;\n    if (n < 76757) return\
    \ true;\n    if (n % 76757 == 0) return false;\n    if (n < 137438951) return\
    \ true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931) return\
    \ true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931)\
    \ return true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931)\
    \ return true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931)\
    \ return true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmponchr5jy.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmponchr5jy.cpp:73:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   73 | }\n      | ^\n/tmp/tmponchr5jy.cpp:72:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   72 |     if (\n      |        ~^\n    \
    \  |         )\n   73 | }\n      | ~        \n/tmp/tmponchr5jy.cpp:73:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   73 | }\n      | ^\n\
    /tmp/tmponchr5jy.cpp:73:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   73 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkenro675: /tmp/tmpkenro675.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    int i = 3;\n    while (i <= sqrt(n))\n\
    \        if (n % i == 0)\n            return false;\n        i += 2;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / i; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1rirrmfo: /tmp/tmp1rirrmfo.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpeqqh4mxd: /tmp/tmpeqqh4mxd.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    int i = 3;\n    while (i <= sqrt(n))\n\
    \        if (n % i == 0)\n            return false;\n        i += 2;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if\
    \ (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11 ==\
    \ 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 111 == 0) return\
    \ false;\n  if (n % 121 == 0) return false;\n  if (n % 131 == 0) return false;\n\
    \  if (n % 141 == 0) return false;\n  if (n % 151 == 0) return false;\n  if (n\
    \ % 161 == 0) return false;\n  if (n % 171 == 0) return false;\n  if (n % 181\
    \ == 0) return false;\n  if (n % 191 == 0) return false;\n  if (n % 201 == 0)\
    \ return false;\n  if (n % 211 == 0) return false;\n  if (n % 221 == 0) return\
    \ false;\n  if (n % 231 == 0) return false;\n  if (n % 241 == 0) return false;\n\
    \  if (n % 251 == 0) return false;\n  if (n % 261 == 0) return false;\n  if (n\
    \ % 271 == 0) return false;\n  if (n % 281 == 0) return false;\n  if (n % 291\
    \ == 0) return false;\n  if (n % 301 == 0) return false;\n  if (n % 311 == 0)\
    \ return false;\n  if (n % 321 == 0) return false;\n  if (n % 331 == 0) return\
    \ false;\n  if (n % 341 == 0) return false;\n  if (n % 351 == 0) return false;\n\
    \  if (n % 361 == 0) return false;\n  if (n % 371 == 0) return false;\n  if (n\
    \ % 381 == 0) return false;\n  if (n % 391 == 0) return false;\n  if (n % 401\
    \ == 0) return false;\n  if (n % 411 == 0) return false;\n  if (n % 421 == 0)\
    \ return false;\n  if (n % 431 == 0) return false;\n  if (n % 441 == 0) return\
    \ false;\n  if (n % 451 == 0) return false;\n  if (n % 461 == 0) return false;\n\
    \  if (n % 471 == \n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprlqle4_g.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmprlqle4_g.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmprlqle4_g.cpp:46:16: error: expected primary-expression "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqxhs4lit: /tmp/tmpqxhs4lit.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpndie_tbu: /tmp/tmpndie_tbu.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpntv5861g: /tmp/tmpntv5861g.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkk0cwt_o: /tmp/tmpkk0cwt_o.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n))\n        if (n % i == 0)\n\
    \            return false;\n        i += 6;\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2_78mp0t: /tmp/tmp2_78mp0t.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvi9bun4n: /tmp/tmpvi9bun4n.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvm6ucs8d: /tmp/tmpvm6ucs8d.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp73qdkhqp: /tmp/tmp73qdkhqp.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sq\
    \ = sqrt(n);\n    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0y30tc3r: /tmp/tmp0y30tc3r.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvuhyx781: /tmp/tmpvuhyx781.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmjwkq80a: /tmp/tmpmjwkq80a.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n < 3) return true;\n    if (n % 3 == 0) return\
    \ false;\n    if (n < 5) return true;\n    if (n % 5 == 0) return false;\n   \
    \ if (n < 7) return true;\n    if (n % 7 == 0) return false;\n    if (n < 11)\
    \ return true;\n    if (n % 11 == 0) return false;\n    if (n < 13) return true;\n\
    \    if (n % 13 == 0) return false;\n    if (n < 17) return true;\n    if (n %\
    \ 17 == 0) return false;\n    if (n < 19) return true;\n    if (n % 19 == 0) return\
    \ false;\n    if (n < 23) return true;\n    if (n % 23 == 0) return false;\n \
    \   if (n < 29) return true;\n    if (n % 29 == 0) return false;\n    if (n <\
    \ 31) return true;\n    if (n % 31 == 0) return false;\n    if (n < 37) return\
    \ true;\n    if (n % 37 == 0) return false;\n    if (n < 43) return true;\n  \
    \  if (n % 43 == 0) return false;\n    if (n < 47) return true;\n    if (n % 47\
    \ == 0) return false;\n    if (n < 53) return true;\n    if (n % 53 == 0) return\
    \ false;\n    if (n < 59) return true;\n    if (n % 59 == 0) return false;\n \
    \   if (n < 61) return true;\n    if (n % 61 == 0) return false;\n    if (n <\
    \ 67) return true;\n    if (n % 67 == 0) return false;\n    if (n < 73) return\
    \ true;\n    if (n % 73 == 0) return false;\n    if (n < 79) return true;\n  \
    \  if (n % 79 == 0) return false;\n    if (n < 83) return true;\n    if (n % 83\
    \ == 0) return false;\n    if (n < 89) return true;\n    if (n % 89 == 0) return\
    \ false;\n    if (n < 97) return true;\n    if (n % 97 == 0) return false;\n \
    \   if (n < 101) return true;\n    if (n % 101 == 0) return false;\n    if (n\
    \ < 107) return true;\n    if (n % 107 == 0) return false;\n    if (n < 113) return\
    \ true;\n    if (n % 113 == 0) return false;\n    if (n < 119) return true;\n\
    \    if (n % 119 == 0) return false;\n    if (n < 127) return true;\n    if (n\
    \ % 127 == 0) return false;\n    if (n < 131) return true;\n    if (n % 131 ==\
    \ 0) return false;\n    if (n < 137) return true;\n    if (n % 137 == 0) return\
    \ false;\n    if (n < 141) return true;\n    if (n % 141 == 0) return false;\n\
    \    if (n < 147) return true;\n    if (n % 147 == 0) return false;\n    if (n\
    \ < 151) return true;\n    if (n % 151 == 0) return false;\n    if (n < 157) return\
    \ true;\n    if (n % 157 == 0) return false;\n    if (n < 163) return true;\n\
    \    if (n % 163 == 0) return false;\n    if (n < 171) return true;\n    if (n\
    \ % 171 == 0) return false;\n    if (n < \n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9084ifaf.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp9084ifaf.cpp:92:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   92 | }\n      | ^\n/tmp/tmp9084ifaf.cpp:91:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   91 |     if (n <\n      |        ~   ^\n\
    \      |            )\n   92 | }\n      | ~           \n/tmp/tmp9084ifaf.cpp:92:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   92 | }\n \
    \     | ^\n/tmp/tmp9084ifaf.cpp:92:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   92 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    long sq = sqrt(n);\n    long i = 3;\n    while (i <= sq) {\n        if (n\
    \ % i == 0) return false;\n        i += 6;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5xtx8fe5: /tmp/tmp5xtx8fe5.cpp:42: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiiforawm: /tmp/tmpiiforawm.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfqqpepb3: /tmp/tmpfqqpepb3.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    long sqr = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / i; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n < 3) return true;\n    if (n % 3 == 0) return\
    \ false;\n    if (n < 9) return true;\n    if (n % 9 == 0) return false;\n   \
    \ if (n < 27) return true;\n    if (n % 27 == 0) return false;\n    if (n < 53)\
    \ return true;\n    if (n % 53 == 0) return false;\n    if (n < 1025) return true;\n\
    \    if (n % 1025 == 0) return false;\n    if (n < 20389) return true;\n    if\
    \ (n % 20389 == 0) return false;\n    if (n < 418131) return true;\n    if (n\
    \ % 418131 == 0) return false;\n    if (n < 7341025) return true;\n    if (n %\
    \ 7341025 == 0) return false;\n    if (n < 137438951) return true;\n    if (n\
    \ % 137438951 == 0) return false;\n    if (n < 174976971) return true;\n    if\
    \ (n % 174976971 == 0) return false;\n    if (n < 2484103951) return true;\n \
    \   if (n % 2484103951 == 0) return false;\n    if (n < 3474749331) return true;\n\
    \    if (n % 3474749331 == 0) return false;\n    if (n < 63474749331) return true;\n\
    \    if (n % 63474749331 == 0) return false;\n    if (n < 937496971) return true;\n\
    \    if (n % 937496971 == 0) return false;\n    if (n < 1837496971) return true;\n\
    \    if (n % 1837496971 == 0) return false;\n    if (n < 3537496971) return true;\n\
    \    if (n % 3537496971 == 0) return false;\n    if (n < 5437496971) return true;\n\
    \    if (n % 5437496971 == 0) return false;\n    if (n < 1037496971) return true;\n\
    \    if (n % 1037496971 == 0) return false;\n    if (n < 2037496971) return true;\n\
    \    if (n % 2037496971 == 0) return false;\n    if (n < 4037496971) return true;\n\
    \    if (n % 4037496971 == 0) return false;\n    if (n < 5037496971) return true;\n\
    \    if (n % 5037496971 == 0) return false;\n    if (n < 6037496971) return true;\n\
    \    if (n % 6037496971 == 0) return false;\n    if (n < 7037496971) return true;\n\
    \    if (n % 7037496971 == 0) return false;\n    if (n < 8037496971) return true;\n\
    \    if (n % 8037496971 == 0) return false;\n    if (n < 903749697\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphnk3o31o.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmphnk3o31o.cpp:69:22: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   69 |     if (n < 903749697\n      |        ~             ^\n     \
    \ |                      )\n   70 | }\n      | ~                     \n/tmp/tmphnk3o31o.cpp:70:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   70 | }\n \
    \     | ^\n/tmp/tmphnk3o31o.cpp:70:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   70 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9hfkewnp: /tmp/tmp9hfkewnp.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp02l3eitp: /tmp/tmp02l3eitp.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp330ot6ha: /tmp/tmp330ot6ha.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n < 3) return true;\n    if (n % 3 == 0) return\
    \ false;\n    if (n < 5) return true;\n    if (n % 5 == 0) return false;\n   \
    \ if (n < 7) return true;\n    if (n % 7 == 0) return false;\n    if (n < 11)\
    \ return true;\n    if (n % 11 == 0) return false;\n    if (n < 13) return true;\n\
    \    if (n % 13 == 0) return false;\n    if (n < 17) return true;\n    if (n %\
    \ 17 == 0) return false;\n    if (n < 19) return true;\n    if (n % 19 == 0) return\
    \ false;\n    if (n < 23) return true;\n    if (n % 23 == 0) return false;\n \
    \   if (n < 29) return true;\n    if (n % 29 == 0) return false;\n    if (n <\
    \ 31) return true;\n    if (n % 31 == 0) return false;\n    if (n < 37) return\
    \ true;\n    if (n % 37 == 0) return false;\n    if (n < 43) return true;\n  \
    \  if (n % 43 == 0) return false;\n    if (n < 47) return true;\n    if (n % 47\
    \ == 0) return false;\n    if (n < 53) return true;\n    if (n % 53 == 0) return\
    \ false;\n    if (n < 59) return true;\n    if (n % 59 == 0) return false;\n \
    \   if (n < 61) return true;\n    if (n % 61 == 0) return false;\n    if (n <\
    \ 67) return true;\n    if (n % 67 == 0) return false;\n    if (n < 73) return\
    \ true;\n    if (n % 73 == 0) return false;\n    if (n < 79) return true;\n  \
    \  if (n % 79 == 0) return false;\n    if (n < 83) return true;\n    if (n % 83\
    \ == 0) return false;\n    if (n < 89) return true;\n    if (n % 89 == 0) return\
    \ false;\n    if (n < 97) return true;\n    if (n % 97 == 0) return false;\n \
    \   if (n < 101) return true;\n    if (n % 101 == 0) return false;\n    if (n\
    \ < 103) return true;\n    if (n % 103 == 0) return false;\n    if (n < 109) return\
    \ true;\n    if (n % 109 == 0) return false;\n    if (n < 113) return true;\n\
    \    if (n % 113 == 0) return false;\n    if (n < 121) return true;\n    if (n\
    \ % 121 == 0) return false;\n    if (n < 127) return true;\n    if (n % 127 ==\
    \ 0) return false;\n    if (n < 131) return true;\n    if (n % 131 == 0) return\
    \ false;\n    if (n < 137) return true;\n    if (n % 137 == 0) return false;\n\
    \    if (n < 141) return true;\n    if (n % 141 == 0) return false;\n    if (n\
    \ < 147) return true;\n    if (n % 147 == 0) return false;\n    if (n < 151) return\
    \ true;\n    if (n % 151 == 0) return false;\n    if (n < 157) return true;\n\
    \    if (n % 157 == 0) return false;\n    if (n < 163) return true;\n    if (n\
    \ % 163 == 0) return false;\n    if (\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4chxv8xs.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp4chxv8xs.cpp:92:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   92 | }\n      | ^\n/tmp/tmp4chxv8xs.cpp:91:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   91 |     if (\n      |        ~^\n    \
    \  |         )\n   92 | }\n      | ~        \n/tmp/tmp4chxv8xs.cpp:92:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   92 | }\n      | ^\n\
    /tmp/tmp4chxv8xs.cpp:92:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   92 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3i1xwi9p: /tmp/tmp3i1xwi9p.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i < n)\
    \ {\n        if (n % i == 0)\n            return false;\n        i += 6;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpcq7yfk8t: /tmp/tmpcq7yfk8t.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp4ca68mjp: /tmp/tmp4ca68mjp.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3jyn4dmv: /tmp/tmp3jyn4dmv.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    if (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if\
    \ (n % 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n %\
    \ 23 == 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 ==\
    \ 0) return false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0)\
    \ return false;\n    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return\
    \ false;\n    if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n\
    \    if (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n  \
    \  if (n % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if\
    \ (n % 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n\
    \ % 89) == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n %\
    \ 103) == 0) return false;\n    if (n % 109) == 0) return false;\n    if (n %\
    \ 113) == 0) return false;\n    if (n % 127) == 0) return false;\n    if (n %\
    \ 131) == 0) return false;\n    if (n % 139) == 0) return false;\n    if (n %\
    \ 147) == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n %\
    \ 157) == 0) return false;\n    if (n % 163) == 0) return false;\n    if (n %\
    \ 167) == 0) return false;\n    if (n % 173) == 0) return false;\n    if (n %\
    \ 179) == 0) return false;\n    if (n % 181) == 0) return false;\n    if (n %\
    \ 191) == 0) return false;\n    if (n % 197) == 0) return false;\n    if (n %\
    \ 203) == 0) return false;\n    if (n % 209) == 0) return false;\n    if (n %\
    \ 215) == 0) return false;\n    if (n % 217) == 0) return false;\n    if (n %\
    \ 223) == 0) return false;\n    if (n % 229) == 0) return false;\n    if (n %\
    \ 233) == 0) return false;\n    if (n % 239) == 0) return false;\n    if (n %\
    \ 241) == 0) return false;\n    if (n % 247) == 0) return false;\n    if (n %\
    \ 253) == 0) return false;\n    if (n % 259) == 0) return false;\n    if (n %\
    \ 261) == 0) return false;\n    if (n % 263) == 0) return false;\n    if (n %\
    \ 269) == 0) return false;\n    if (n % 271) == 0) return false;\n    if (n %\
    \ 277) == 0) return false;\n    if (n % 283) == 0) return false;\n    if (n %\
    \ 289) == 0) return false;\n    if (n % 291) == 0) return false;\n    if (n %\
    \ 297) == 0) return false;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc55odew4.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpc55odew4.cpp:33:17: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |     if (n % 41) == 0) return false;\n      |                \
    \ ^~\n/tmp/tmpc55odew4.cpp:34:17: error: expected primary-expression before \u2018\
    ==\u2019 token\n   34 |     if (n % 43) == 0) return false;\n      |         \
    \        ^~\n/tmp/tmpc55odew4.cpp:35:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   35 |     if (n % 47) == 0) return false;\n      | \
    \                ^~\n/tmp/tmpc55odew4.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:42:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:43:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:44:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55odew4.cpp:45:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpc55"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long m\
    \ = (long) sqrt(n);\n    for (long i = 5; i <= m; i += 6) {\n        if (n % i\
    \ == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmphavcy8m3: /tmp/tmphavcy8m3.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long m =\
    \ n / 2;\n    for (long i = 2; i * i <= m; i++) {\n        if (n % i == 0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuotvm_at: /tmp/tmpuotvm_at.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_juiw7k5: /tmp/tmp_juiw7k5.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz1p1ghoz: /tmp/tmpz1p1ghoz.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxxezo1y3: /tmp/tmpxxezo1y3.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpwmt6nh7r: /tmp/tmpwmt6nh7r.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdsy44v7j: /tmp/tmpdsy44v7j.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while\
    \ (i <= sqrt(n)) {\n        if (n % i == 0) return false;\n        i += 2;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n ==\
    \ 1) return false;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    if (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if\
    \ (n % 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n %\
    \ 23 == 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 ==\
    \ 0) return false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0)\
    \ return false;\n    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return\
    \ false;\n    if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n\
    \    if (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n  \
    \  if (n % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if\
    \ (n % 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n\
    \ % 89) == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n %\
    \ 103) == 0) return false;\n    if (n % 109) == 0) return false;\n    if (n %\
    \ 113) == 0) return false;\n    if (n % 127) == 0) return false;\n    if (n %\
    \ 131) == 0) return false;\n    if (n % 139) == 0) return false;\n    if (n %\
    \ 147) == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n %\
    \ 157) == 0) return false;\n    if (n % 163) == 0) return false;\n    if (n %\
    \ 167) == 0) return false;\n    if (n % 173) == 0) return false;\n    if (n %\
    \ 179) == 0) return false;\n    if (n % 181) == 0) return false;\n    if (n %\
    \ 185) == 0) return false;\n    if (n % 191) == 0) return false;\n    if (n %\
    \ 197) == 0) return false;\n    if (n % 203) == 0) return false;\n    if (n %\
    \ 209) == 0) return false;\n    if (n % 215) == 0) return false;\n    if (n %\
    \ 217) == 0) return false;\n    if (n % 223) == 0) return false;\n    if (n %\
    \ 229) == 0) return false;\n    if (n % 233) == 0) return false;\n    if (n %\
    \ 239) == 0) return false;\n    if (n % 241) == 0) return false;\n    if (n %\
    \ 247) == 0) return false;\n    if (n % 253) == 0) return false;\n    if (n %\
    \ 259) == 0) return false;\n    if (n % 261) == 0) return false;\n    if (n %\
    \ 265) == 0) return false;\n    if (n % 271) == 0) return false;\n    if (n %\
    \ 277) == 0) return false;\n    if (n % 283) == 0) return false;\n    if (n %\
    \ 289) == 0) return false;\n    if (n % 291) == 0) return false;\n    if (n %\
    \ 297) == 0) return false;\n\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjckz9ej0.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpjckz9ej0.cpp:33:17: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |     if (n % 41) == 0) return false;\n      |                \
    \ ^~\n/tmp/tmpjckz9ej0.cpp:34:17: error: expected primary-expression before \u2018\
    ==\u2019 token\n   34 |     if (n % 43) == 0) return false;\n      |         \
    \        ^~\n/tmp/tmpjckz9ej0.cpp:35:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   35 |     if (n % 47) == 0) return false;\n      | \
    \                ^~\n/tmp/tmpjckz9ej0.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:42:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:43:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:44:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjckz9ej0.cpp:45:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpjck"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n ==\
    \ 1) return false;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    long max = (long) sqrt(n);\n    for (long i = 3; i <= max; i += 2) {\n  \
    \      if (n % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbqfkw254: /tmp/tmpbqfkw254.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ n / i; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmw32m_74: /tmp/tmpmw32m_74.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
