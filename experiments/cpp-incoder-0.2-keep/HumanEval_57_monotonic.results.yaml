name: HumanEval_57_monotonic
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1]) {\n \
    \           ans = 1;\n            break;\n        } else if (l[i] < l[i + 1])\
    \ {\n            ans = -1;\n            break;\n        }\n    }\n    return ans\
    \ == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpufx0ye_g: /tmp/tmpufx0ye_g.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ x = 0, y = 0;\n    for (long i = 0; i < l.size(); i++) {\n        x = l[i];\n\
    \        y = ans;\n        while (x != y) {\n            if (x < y) {\n      \
    \          ans = y;\n            }\n            ans = y;\n            y = x;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp9mlm9kh1: /tmp/tmp9mlm9kh1.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    while (i < j) {\n        long long mid = (i + j) / 2;\n        if (l[mid]\
    \ <= l[mid+1]) {\n            ans = 1;\n            i = mid + 1;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return ans == 1;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphmmiv8ao: /tmp/tmphmmiv8ao.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < cur)\
    \ {\n            return false;\n        }\n        ans += 1;\n        cur = l[i];\n\
    \    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpemkaj831: /tmp/tmpemkaj831.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    for (int i = 0; i < n; i++) {\n        long\
    \ long curr = l[i];\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (l[j] < curr) {\n                ans = 1;\n                break;\n        \
    \    }\n            if (l[j] > curr) {\n                ans = -1;\n          \
    \      break;\n            }\n        }\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2bd8c9g6: /tmp/tmp2bd8c9g6.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ curr = 0, prev = 0;\n    for (long i = 0; i < l.size(); i++) {\n        curr\
    \ = l[i];\n        if (curr < prev) {\n            ans = false;\n            break;\n\
    \        }\n        prev = curr;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp0d2judgu: /tmp/tmp0d2judgu.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long i = 0;\n    long long j = l - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = 1;\n     \
    \       break;\n        }\n        else if (l[i] > l[j]) {\n            ans =\
    \ -1;\n            break;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphy7bm53v.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphy7bm53v.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmphy7bm53v.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmphy7bm53v.cpp:16:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   16 |         if (l[i] < l[j]) {\n      |                ^\n/tmp/tmphy7bm53v.cpp:16:23:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   16 |         if (l[i] < l[j]) {\n      |                       ^\n/tmp/tmphy7bm53v.cpp:20:21:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   20 |         else if (l[i] > l[j]) {\n      |                     ^\n/tmp/tmphy7bm53v.cpp:20:28:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   20 |         else if (l[i] > l[j]) {\n      |                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return true;\n    long long ans = l[0];\n    for (int i = 1;\
    \ i < n; i++) {\n        if (l[i] < ans) return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8th1np2s: /tmp/tmp8th1np2s.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphgklxq2a: /tmp/tmphgklxq2a.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        ans = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpibgsgrp0: /tmp/tmpibgsgrp0.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return true;\n    if (n == 1) return l[0] > l[1];\n    long mid\
    \ = l[n / 2];\n    for (int i = 0; i < n; i++) {\n        if (l[i] > mid) return\
    \ false;\n        if (l[i] < mid) return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpriszu_ni: /tmp/tmpriszu_ni.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    long long ans = 0, x = l[0];\n    for (int i = 1; i < n; i++) {\n       \
    \ if (l[i] < x) {\n            ans = false;\n            break;\n        }\n \
    \       if (l[i] > x) {\n            ans = true;\n            break;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcdsbola3: /tmp/tmpcdsbola3.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n - 1;\n    long long int k = n - 1;\n    long\
    \ long int l1 = l[0];\n    long long int l2 = l[1];\n    long long int l3 = l[2];\n\
    \    long long int l4 = l[3];\n    long long int l5 = l[4];\n    long long int\
    \ l6 = l[5];\n    long long int l7 = l[6];\n    long long int l8 = l[7];\n   \
    \ long long int l9 = l[8];\n    long long int l10 = l[9];\n    long long int l11\
    \ = l[10];\n    long long int l12 = l[11];\n    long long int l13 = l[12];\n \
    \   long long int l14 = l[13];\n    long long int l15 = l[14];\n    long long\
    \ int l16 = l[15];\n    long long int l17 = l[16];\n    long long int l18 = l[17];\n\
    \    long long int l19 = l[18];\n    long long int l20 = l[19];\n    long long\
    \ int l21 = l[20];\n    long long int l22 = l[21];\n    long long int l23 = l[22];\n\
    \    long long int l24 = l[23];\n    long long int l25 = l[24];\n    long long\
    \ int l26 = l[25];\n    long long int l27 = l[26];\n    long long int l28 = l[27];\n\
    \    long long int l29 = l[28];\n    long long int l30 = l[29];\n    long long\
    \ int l31 = l[30];\n    long long int l32 = l[31];\n    long long int l33 = l[32];\n\
    \    long long int l34 = l[33];\n    long long int l35 = l[34];\n    long long\
    \ int l36 = l[35];\n    long long int l37 = l[36];\n    long long int l38 = l[37];\n\
    \    long long int l39 = l[38];\n    long long int l40 = l[39];\n    long long\
    \ int l41 = l[40];\n    long long int l42 = l[41];\n    long long int l43 = l[42];\n\
    \    long \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1jqpfe_f.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1jqpfe_f.cpp:58:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   58 | }\n      | ^\n/tmp/tmp1jqpfe_f.cpp:58:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      return false;\n        } else if (l[i] > ans) {\n            return true;\n\
    \        }\n        ans = l[i];\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvx5_e42q: /tmp/tmpvx5_e42q.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] > l[i\
    \ - 1]) {\n            ans = 0;\n            break;\n        }\n    }\n    return\
    \ ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5w4_kf0p: /tmp/tmp5w4_kf0p.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long cur = l[0];\n    for (int i = 1; i < l.size(); i++) {\n       \
    \ if (l[i] > cur) {\n            ans = 1;\n            cur = l[i];\n        }\
    \ else if (l[i] < cur) {\n            ans = -1;\n            cur = l[i];\n   \
    \     } else {\n            ans = 0;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpk02uggd7: /tmp/tmpk02uggd7.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < cur)\
    \ {\n            ans = false;\n            break;\n        }\n        cur = l[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpirnploc6: /tmp/tmpirnploc6.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0], prev = l[0];\n    for (long i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] < prev) {\n            return false;\n        }\n        prev = cur;\n\
    \        cur = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpipihelnl: /tmp/tmpipihelnl.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n  \
    \          j = j - 1;\n        } else {\n            ans = l[i];\n           \
    \ i = i + 1;\n        }\n    }\n    return ans == l[0];\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpbg07d0s3: /tmp/tmpbg07d0s3.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    long long ans = l[0];\n    for (int i = 1;\
    \ i < n; ++i) {\n        if (l[i] < ans) return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo5yzdjlb: /tmp/tmpo5yzdjlb.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long i = 0;\n    long long j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] < l[j]) {\n            ans = 1;\n            break;\n      \
    \  }\n        if (l[i] > l[j]) {\n            ans = 0;\n            break;\n \
    \       }\n        i++;\n        j--;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqkyh2sde: /tmp/tmpqkyh2sde.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    if (n <= 1) return true;\n    long long int m = l[0];\n    for\
    \ (long long int i = 1; i < n; i++) {\n        if (l[i] < m) {\n            m\
    \ = l[i];\n        }\n    }\n    return m > l[0];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmprwllw8t0: /tmp/tmprwllw8t0.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long curr = l[0];\n    for (long long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < curr) {\n            ans = 1;\n            break;\n      \
    \  }\n        if (l[i] > curr) {\n            ans = 0;\n            break;\n \
    \       }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpp7823p50: /tmp/tmpp7823p50.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ i = 0;\n    long long n = l.size();\n    long long m = n - 1;\n    while (i\
    \ < n) {\n        if (l[i] < l[m]) {\n            ans = l[i];\n            i++;\n\
    \        } else if (l[i] > l[m]) {\n            ans = l[i];\n            m--;\n\
    \        } else {\n            i++;\n            m--;\n        }\n    }\n    return\
    \ ans == l[0];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8rgek59k: /tmp/tmp8rgek59k.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      ans = l[i];\n        }\n    }\n    return ans == l[0];\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp40wpb3uy: /tmp/tmp40wpb3uy.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < cur)\
    \ {\n            ans = false;\n            break;\n        }\n        cur = l[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt3ia6_78: /tmp/tmpt3ia6_78.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n-1;\n    long long int l1 = l[0];\n    long\
    \ long int l2 = l[m];\n    long long int l3 = l[m-1];\n    long long int l4 =\
    \ l[n-1];\n    long long int l5 = l[n-2];\n    long long int l6 = l[n-3];\n  \
    \  long long int l7 = l[n-4];\n    long long int l8 = l[n-5];\n    long long int\
    \ l9 = l[n-6];\n    long long int l10 = l[n-7];\n    long long int l11 = l[n-8];\n\
    \    long long int l12 = l[n-9];\n    long long int l13 = l[n-10];\n    long long\
    \ int l14 = l[n-11];\n    long long int l15 = l[n-12];\n    long long int l16\
    \ = l[n-13];\n    long long int l17 = l[n-14];\n    long long int l18 = l[n-15];\n\
    \    long long int l19 = l[n-16];\n    long long int l20 = l[n-17];\n    long\
    \ long int l21 = l[n-18];\n    long long int l22 = l[n-19];\n    long long int\
    \ l23 = l[n-20];\n    long long int l24 = l[n-21];\n    long long int l25 = l[n-22];\n\
    \    long long int l26 = l[n-23];\n    long long int l27 = l[n-24];\n    long\
    \ long int l28 = l[n-25];\n    long long int l29 = l[n-26];\n    long long int\
    \ l30 = l[n-27];\n    long long int l31 = l[n-28];\n    long long int l32 = l[n-29];\n\
    \    long long int l33 = l[n-30];\n    long long int l34 = l[n-31];\n    long\
    \ long int l35 = l[n-32];\n    long long int l36 = l[n-33];\n    long long int\
    \ l37 = l[n-34];\n    long long int l38 = l[n-35];\n    long long int l39 = l[n-36];\n\
    \    long long int l40 = l[n-37];\n    long long int l41 = l[n-38];\n    long\
    \ long \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoog4tzly.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoog4tzly.cpp:55:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpoog4tzly.cpp:55:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            ans = -1;\n            break;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_t3n_zya: /tmp/tmp_t3n_zya.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > ans)\n        \
    \    return false;\n        if (l[i] < ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4e5lfxl8: /tmp/tmp4e5lfxl8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int ans\
    \ = 0;\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int m1 = n - 1;\n    long long int n1 = n - 1;\n\
    \    long long int m2 = n - 1;\n    long long int n2 = n - 1;\n    long long int\
    \ m3 = n - 1;\n    long long int n3 = n - 1;\n    long long int m4 = n - 1;\n\
    \    long long int n4 = n - 1;\n    long long int m5 = n - 1;\n    long long int\
    \ n5 = n - 1;\n    long long int m6 = n - 1;\n    long long int n6 = n - 1;\n\
    \    long long int m7 = n - 1;\n    long long int n7 = n - 1;\n    long long int\
    \ m8 = n - 1;\n    long long int n8 = n - 1;\n    long long int m9 = n - 1;\n\
    \    long long int n9 = n - 1;\n    long long int m10 = n - 1;\n    long long\
    \ int n10 = n - 1;\n    long long int m11 = n - 1;\n    long long int n11 = n\
    \ - 1;\n    long long int m12 = n - 1;\n    long long int n12 = n - 1;\n    long\
    \ long int m13 = n - 1;\n    long long int n13 = n - 1;\n    long long int m14\
    \ = n - 1;\n    long long int n14 = n - 1;\n    long long int m15 = n - 1;\n \
    \   long long int n15 = n - 1;\n    long long int m16 = n - 1;\n    long long\
    \ int n16 = n - 1;\n    long long int m17 = n - 1;\n    long long int n17 = n\
    \ - 1;\n    long long int m18 = n - 1;\n    long long int n18 = n - 1;\n    long\
    \ long int m19 = n - 1;\n    long long int n19 = n - 1;\n    long long int m20\
    \ = n - 1;\n    long long int n20 = n - 1;\n    long long int m21 = n - 1;\n \
    \   long long int n21 = n - 1;\n    long long int m22 = n - 1;\n    long long\
    \ int n22 = n - 1;\n    long long int m23 = n - 1;\n    long long int n23 = n\
    \ - 1;\n    long long int m24 = n - 1;\n    long long int n24 = n - 1;\n    long\
    \ long int m25 = \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvgvoswev.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvgvoswev.cpp:17:19: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   17 |     long long int l = 0;\n      | \
    \                  ^\n/tmp/tmpvgvoswev.cpp:67:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmpvgvoswev.cpp:67:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    int m = l[n - 1];\n    for (int i = n - 2;\
    \ i >= 0; --i) {\n        if (l[i] < m) return false;\n        m = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq851lj6g: /tmp/tmpq851lj6g.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long i = 0; i < l.size(); i++) {\n        long long curr = l[i];\n \
    \       long long prev = l[i - 1];\n        if (curr > prev) {\n            ans\
    \ = 1;\n        } else {\n            ans = 0;\n        }\n    }\n    return ans\
    \ == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpr2qsse_7: /tmp/tmpr2qsse_7.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long max = std::numeric_limits<long long>::max();\n    long long min\
    \ = std::numeric_limits<long long>::min();\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        ans += l[i];\n        if (ans > max) {\n            ans = max;\n\
    \        } else if (ans < min) {\n            ans = min;\n        }\n    }\n \
    \   return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyj7gr26t: /tmp/tmpyj7gr26t.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    for(long i = 0; i < n; i++) {\n        if(l[i] > ans) {\n\
    \            ans = l[i];\n        }\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9ommvji6: /tmp/tmp9ommvji6.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long ans = 0, cur = l[0], prev = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] < cur) {\n            ans = 1;\n \
    \       } else if (l[i] > cur) {\n            ans = 0;\n        } else {\n   \
    \         ans = 1;\n        }\n        cur = l[i];\n        if (ans == 1) {\n\
    \            if (prev < cur) {\n                return false;\n            } else\
    \ {\n                prev = cur;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp02pj_1ma: /tmp/tmp02pj_1ma.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] > l[i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpydi7d4fi: /tmp/tmpydi7d4fi.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return false;\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] < l[j]) {\n            i++;\n        } else if (l[i]\
    \ > l[j]) {\n            j--;\n        } else {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyaoeh030: /tmp/tmpyaoeh030.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            ans = -1;\n            break;\n        }\n    }\n    return\
    \ ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsv63j1hv: /tmp/tmpsv63j1hv.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    long long ans = 0;\n    for (int i = 0; i < n; i++) {\n        long long\
    \ curr = l[i];\n        for (int j = i + 1; j < n; j++) {\n            if (l[j]\
    \ < curr) {\n                ans = 1;\n                break;\n            }\n\
    \            if (l[j] > curr) {\n                ans = 0;\n                break;\n\
    \            }\n        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp00_ogqkr: /tmp/tmp00_ogqkr.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] > l[i\
    \ - 1]) {\n            ans = -1;\n            break;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpm45mgl8q: /tmp/tmpm45mgl8q.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n        } else if (l[i] < l[i + 1]) {\n           \
    \ ans = -1;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpozstntak: /tmp/tmpozstntak.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here\n    long long ans = 0;\n    long long l = l.size();\n    long long i =\
    \ 0;\n    long long j = l - 1;\n    long long k = 0;\n    while (i < j) {\n  \
    \      if (l[i] < l[j]) {\n            ans = 1;\n        }\n        else if (l[i]\
    \ > l[j]) {\n            ans = 0;\n        }\n        else {\n            ans\
    \ = 1;\n        }\n        i++;\n        j--;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvhyzp8ao.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvhyzp8ao.cpp:13:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   13 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpvhyzp8ao.cpp:13:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   13 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpvhyzp8ao.cpp:18:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   18 |         if (l[i] < l[j]) {\n      |                ^\n/tmp/tmpvhyzp8ao.cpp:18:23:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   18 |         if (l[i] < l[j]) {\n      |                       ^\n/tmp/tmpvhyzp8ao.cpp:21:21:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |         else if (l[i] > l[j]) {\n      |                     ^\n/tmp/tmpvhyzp8ao.cpp:21:28:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |         else if (l[i] > l[j]) {\n      |                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long mid = l / 2;\n    long long left =\
    \ l-1;\n    long long right = mid;\n    long long mid2 = mid;\n    long long mid3\
    \ = mid;\n    long long mid4 = mid;\n    long long mid5 = mid;\n    long long\
    \ mid6 = mid;\n    long long mid7 = mid;\n    long long mid8 = mid;\n    long\
    \ long mid9 = mid;\n    long long mid10 = mid;\n    long long mid11 = mid;\n \
    \   long long mid12 = mid;\n    long long mid13 = mid;\n    long long mid14 =\
    \ mid;\n    long long mid15 = mid;\n    long long mid16 = mid;\n    long long\
    \ mid17 = mid;\n    long long mid18 = mid;\n    long long mid19 = mid;\n    long\
    \ long mid20 = mid;\n    long long mid21 = mid;\n    long long mid22 = mid;\n\
    \    long long mid23 = mid;\n    long long mid24 = mid;\n    long long mid25 =\
    \ mid;\n    long long mid26 = mid;\n    long long mid27 = mid;\n    long long\
    \ mid28 = mid;\n    long long mid29 = mid;\n    long long mid30 = mid;\n    long\
    \ long mid31 = mid;\n    long long mid32 = mid;\n    long long mid33 = mid;\n\
    \    long long mid34 = mid;\n    long long mid35 = mid;\n    long long mid36 =\
    \ mid;\n    long long mid37 = mid;\n    long long mid38 = mid;\n    long long\
    \ mid39 = mid;\n    long long mid40 = mid;\n    long long mid41 = mid;\n    long\
    \ long mid42 = mid;\n    long long mid43 = mid;\n    long long mid44 = mid;\n\
    \    long long mid45 = mid;\n    long long mid46 = mid;\n    long long mid47 =\
    \ mid;\n    long long mid48 = mid;\n    long long mid49 = mid;\n    long long\
    \ mid50 = mid;\n    long long mid51 = mid;\n    long long mid52 = mid;\n    long\
    \ long mid53 = mid;\n    long long mid54 = mid;\n    long long mid55 = mid;\n\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39u3_5mp.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp39u3_5mp.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp39u3_5mp.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp39u3_5mp.cpp:71:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   71 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < prev) {\n            ans = false;\n\
    \            break;\n        }\n        prev = cur;\n        cur = l[i];\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsjwmzdfr: /tmp/tmpsjwmzdfr.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ last = 0, cur = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] < cur) {\n            ans = false;\n            break;\n        }\n  \
    \      if (l[i] > cur) {\n            ans = true;\n            break;\n      \
    \  }\n    }\n    if (ans == true) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4112kuhx: /tmp/tmp4112kuhx.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyibtjblh: /tmp/tmpyibtjblh.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long curr = l[0];\n    long long prev = l[0];\n    for (long long i\
    \ : l) {\n        if (i > prev) {\n            ans = 1;\n        }\n        if\
    \ (i < prev) {\n            ans = -1;\n        }\n        prev = i;\n    }\n \
    \   return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5qt1dgng: /tmp/tmp5qt1dgng.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for(long i = 0; i < l; i++) {\n        long j = i;\n    \
    \    while(j > 0 && l[j-1] > l[j]) {\n            ans = l[j-1];\n            j--;\n\
    \        }\n        l[j] = ans;\n    }\n    return ans == 0;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2mol5w03.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2mol5w03.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmp2mol5w03.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmp2mol5w03.cpp:14:29: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   14 |         while(j\
    \ > 0 && l[j-1] > l[j]) {\n      |                             ^\n/tmp/tmp2mol5w03.cpp:14:36:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   14 |         while(j > 0 && l[j-1] > l[j]) {\n      |                    \
    \                ^\n/tmp/tmp2mol5w03.cpp:15:24: error: invalid types \u2018long\
    \ long int[long int]\u2019 for array subscript\n   15 |             ans = l[j-1];\n\
    \      |                        ^\n/tmp/tmp2mol5w03.cpp:18:12: error: invalid\
    \ types \u2018long long int[long int]\u2019 for array subscript\n   18 |     \
    \    l[j] = ans;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n \
    \           ans = l[i];\n        }\n    }\n    return ans == l[0];\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpye2tevot: /tmp/tmpye2tevot.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n - 1;\n    long long int l1 = l[0];\n    long\
    \ long int l2 = l[1];\n    long long int l3 = l[2];\n    long long int l4 = l[3];\n\
    \    long long int l5 = l[4];\n    long long int l6 = l[5];\n    long long int\
    \ l7 = l[6];\n    long long int l8 = l[7];\n    long long int l9 = l[8];\n   \
    \ long long int l10 = l[9];\n    long long int l11 = l[10];\n    long long int\
    \ l12 = l[11];\n    long long int l13 = l[12];\n    long long int l14 = l[13];\n\
    \    long long int l15 = l[14];\n    long long int l16 = l[15];\n    long long\
    \ int l17 = l[16];\n    long long int l18 = l[17];\n    long long int l19 = l[18];\n\
    \    long long int l20 = l[19];\n    long long int l22 = l[20];\n    long long\
    \ int l23 = l[21];\n    long long int l24 = l[22];\n    long long int l25 = l[23];\n\
    \    long long int l26 = l[24];\n    long long int l27 = l[25];\n    long long\
    \ int l28 = l[26];\n    long long int l29 = l[27];\n    long long int l30 = l[28];\n\
    \    long long int l31 = l[29];\n    long long int l32 = l[30];\n    long long\
    \ int l33 = l[31];\n    long long int l34 = l[32];\n    long long int l35 = l[33];\n\
    \    long long int l36 = l[34];\n    long long int l37 = l[35];\n    long long\
    \ int l38 = l[36];\n    long long int l39 = l[37];\n    long long int l40 = l[38];\n\
    \    long long int l41 = l[39];\n    long long int l42 = l[40];\n    long long\
    \ int l43 = l[41];\n    long long int l44 = l[42];\n    long long int l45 = l[43\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjwu2aqg9.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjwu2aqg9.cpp:56:29: error: expected \u2018]\u2019 before\
    \ \u2018}\u2019 token\n   56 |     long long int l45 = l[43\n      |         \
    \                    ^\n      |                             ]\n   57 | }\n   \
    \   | ~                            \n/tmp/tmpjwu2aqg9.cpp:57:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   57 | }\n     \
    \ | ^\n/tmp/tmpjwu2aqg9.cpp:57:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    for (long i = 0; i < n; i++) {\n        long j = i;\n   \
    \     while (j > 0 && l[j - 1] > l[j]) {\n            j--;\n        }\n      \
    \  if (j > 0) {\n            ans = max(ans, l[j] - l[j - 1]);\n        }\n   \
    \ }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprw8jhxe0.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprw8jhxe0.cpp:18:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   18 |             ans =\
    \ max(ans, l[j] - l[j - 1]);\n      |                   ^~~\n      |         \
    \          std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprw8jhxe0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      ans = l[i];\n        }\n    }\n    return ans == l[0];\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpw0b1t6j2: /tmp/tmpw0b1t6j2.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long i = 0;\n    long long j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] > l[j]) {\n            ans = 1;\n            break;\n      \
    \  } else if (l[i] < l[j]) {\n            ans = -1;\n            break;\n    \
    \    }\n        i++;\n        j--;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnn76m6mc: /tmp/tmpnn76m6mc.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0], prev = l[0];\n    for (long i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] < prev) {\n            return false;\n        }\n        prev = cur;\n\
    \        cur = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpwk_mqkek: /tmp/tmpwk_mqkek.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long mid = l / 2;\n    long long left =\
    \ l-1;\n    long long right = mid;\n    long long mid2 = mid-1;\n    long long\
    \ mid3 = mid-2;\n    long long mid4 = mid-3;\n    long long mid5 = mid-4;\n  \
    \  long long mid6 = mid-5;\n    long long mid7 = mid-6;\n    long long mid8 =\
    \ mid-7;\n    long long mid9 = mid-8;\n    long long mid10 = mid-9;\n    long\
    \ long mid11 = mid-10;\n    long long mid12 = mid-11;\n    long long mid13 = mid-12;\n\
    \    long long mid14 = mid-13;\n    long long mid15 = mid-14;\n    long long mid16\
    \ = mid-15;\n    long long mid17 = mid-16;\n    long long mid18 = mid-17;\n  \
    \  long long mid19 = mid-18;\n    long long mid20 = mid-19;\n    long long mid21\
    \ = mid-20;\n    long long mid22 = mid-21;\n    long long mid23 = mid-22;\n  \
    \  long long mid24 = mid-23;\n    long long mid25 = mid-24;\n    long long mid26\
    \ = mid-25;\n    long long mid27 = mid-25;\n    long long mid28 = mid-25;\n  \
    \  long long mid29 = mid-25;\n    long long mid30 = mid-25;\n    long long mid31\
    \ = mid-25;\n    long long mid32 = mid-25;\n    long long mid33 = mid-25;\n  \
    \  long long mid34 = mid-25;\n    long long mid35 = mid-25;\n    long long mid36\
    \ = mid-25;\n    long long mid37 = mid-25;\n    long long mid38 = mid-25;\n  \
    \  long long mid39 = mid-25;\n    long long mid40 = mid-25;\n    long long mid41\
    \ = mid-25;\n    long long mid42 = mid-25;\n    long long mid43 = mid-25;\n  \
    \  long long mid44 = mid-25;\n    long long mid45 = mid-25;\n    long long mid46\
    \ = mid-25;\n    long long mid47 = mid-25;\n    long \n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphphaov3t.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphphaov3t.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmphphaov3t.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmphphaov3t.cpp:63:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n     \
    \ | ^\n/tmp/tmphphaov3t.cpp:63:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            ans = -1;\n            break;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4c5apstm: /tmp/tmp4c5apstm.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    for (long i = 0; i < n; i++) {\n        long j = i;\n   \
    \     while (j > 0 && l[j-1] > l[j]) {\n            ans = l[j-1];\n          \
    \  j--;\n        }\n        l[j] = ans;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5zhqx3f1: /tmp/tmp5zhqx3f1.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = 0, x = 0, y = 0, z = 0;\n    long long int\
    \ max = 0;\n    long long int min = 0;\n    long long int mid = 0;\n    long long\
    \ int mid2 = 0;\n    long long int mid3 = 0;\n    long long int mid4 = 0;\n  \
    \  long long int mid5 = 0;\n    long long int mid6 = 0;\n    long long int mid7\
    \ = 0;\n    long long int mid8 = 0;\n    long long int mid9 = 0;\n    long long\
    \ int mid10 = 0;\n    long long int mid11 = 0;\n    long long int mid12 = 0;\n\
    \    long long int mid13 = 0;\n    long long int mid14 = 0;\n    long long int\
    \ mid15 = 0;\n    long long int mid16 = 0;\n    long long int mid17 = 0;\n   \
    \ long long int mid18 = 0;\n    long long int mid19 = 0;\n    long long int mid20\
    \ = 0;\n    long long int mid21 = 0;\n    long long int mid22 = 0;\n    long long\
    \ int mid23 = 0;\n    long long int mid24 = 0;\n    long long int mid25 = 0;\n\
    \    long long int mid26 = 0;\n    long long int mid27 = 0;\n    long long int\
    \ mid28 = 0;\n    long long int mid29 = 0;\n    long long int mid30 = 0;\n   \
    \ long long int mid31 = 0;\n    long long int mid32 = 0;\n    long long int mid33\
    \ = 0;\n    long long int mid34 = 0;\n    long long int mid35 = 0;\n    long long\
    \ int mid36 = 0;\n    long long int mid37 = 0;\n    long long int mid38 = 0;\n\
    \    long long int mid39 = 0;\n    long long int mid40 = 0;\n    long long int\
    \ mid41 = 0;\n    long long int mid42 = 0;\n    long long int mid43 = 0;\n   \
    \ long long int mid44 = 0;\n    long long int mid45 = 0;\n    long long int mid46\
    \ = 0;\n    long long int mid47 = 0;\n    long long int mid48 = 0;\n    long long\
    \ int mid49 = 0;\n    long long int mid50 = 0;\n    long long int mid51 = 0;\n\
    \    long long int mid52 = 0;\n    long long int mid53 = 0;\n    long long int\
    \ mid54 = 0;\n    long long int mid55 = 0;\n    long long int mid56 = 0;\n   \
    \ long long int mid57 = 0;\n    long long int mid58 = 0;\n    long long int mid59\
    \ = 0;\n    long long int mid60 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpdtkk2gpd: /tmp/tmpdtkk2gpd.cpp:79: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ last = 0, cur = 0;\n    for (long i = 0; i < l.size(); i++) {\n        cur =\
    \ l[i];\n        if (cur > last) {\n            ans = 1;\n            break;\n\
    \        }\n        if (cur < last) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmppasxwcgy: /tmp/tmppasxwcgy.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmprf2arywp: /tmp/tmprf2arywp.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l.front();\n    for (long long i = 1; i < l.size(); i++) {\n        if\
    \ (cur > l[i]) {\n            cur = l[i];\n            ans = i;\n        }\n \
    \   }\n    return ans == l.size();\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcqdmrgbm: /tmp/tmpcqdmrgbm.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n;\n    long long int k = n;\n    long long\
    \ int i = 1;\n    long long int j = 1;\n    long long int k1 = n;\n    long long\
    \ int k2 = n;\n    long long int k3 = n;\n    long long int k4 = n;\n    long\
    \ long int k5 = n;\n    long long int k6 = n;\n    long long int k7 = n;\n   \
    \ long long int k8 = n;\n    long long int k9 = n;\n    long long int k10 = n;\n\
    \    long long int k11 = n;\n    long long int k12 = n;\n    long long int k13\
    \ = n;\n    long long int k14 = n;\n    long long int k15 = n;\n    long long\
    \ int k16 = n;\n    long long int k17 = n;\n    long long int k18 = n;\n    long\
    \ long int k19 = n;\n    long long int k20 = n;\n    long long int k21 = n;\n\
    \    long long int k22 = n;\n    long long int k23 = n;\n    long long int k24\
    \ = n;\n    long long int k25 = n;\n    long long int k26 = n;\n    long long\
    \ int k27 = n;\n    long long int k28 = n;\n    long long int k29 = n;\n    long\
    \ long int k30 = n;\n    long long int k31 = n;\n    long long int k32 = n;\n\
    \    long long int k33 = n;\n    long long int k34 = n;\n    long long int k35\
    \ = n;\n    long long int k36 = n;\n    long long int k37 = n;\n    long long\
    \ int k38 = n;\n    long long int k39 = n;\n    long long int k40 = n;\n    long\
    \ long int k41 = n;\n    long long int k42 = n;\n    long long int k43 = n;\n\
    \    long long int k44 = n;\n    long long int k45 = n;\n    long long int k46\
    \ = n;\n    long long int k47 = n;\n    long long int k48 = n;\n    long long\
    \ int k49 = n;\n    long long int k50 = n;\n    long long int k51 = n;\n    long\
    \ long int k52 = n;\n    long long int k53 = n;\n    long long int k54 = n;\n\
    \    long \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_3t_h3aa.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_3t_h3aa.cpp:71:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   71 | }\n      | ^\n/tmp/tmp_3t_h3aa.cpp:71:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpti2k755i: /tmp/tmpti2k755i.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = 1;\n     \
    \       break;\n        }\n        if (l[i] > l[j]) {\n            ans = 0;\n\
    \            break;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkwj8vtxu: /tmp/tmpkwj8vtxu.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ i = 0;\n    while (i < l.size()) {\n        if (l[i] < l[i - 1]) {\n       \
    \     ans = 1;\n            break;\n        }\n        if (l[i] > l[i - 1]) {\n\
    \            ans = -1;\n            break;\n        }\n        i++;\n    }\n \
    \   return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcqg7dv05: /tmp/tmpcqg7dv05.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    long long i = 0;\n    while (i < n) {\n        long long\
    \ j = i;\n        while (j < n && l[j] < l[j + 1]) j++;\n        if (j - i > 1)\
    \ {\n            ans = max(ans, l[j] - l[i - 1]);\n        }\n        i = j;\n\
    \    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxt05hgny.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxt05hgny.cpp:17:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |             ans =\
    \ max(ans, l[j] - l[i - 1]);\n      |                   ^~~\n      |         \
    \          std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxt05hgny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      return false;\n        }\n        ans = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7ascowla: /tmp/tmp7ascowla.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > ans) {\n      \
    \      ans = l[i];\n        }\n    }\n    return ans == l[0];\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmprkf35e1o: /tmp/tmprkf35e1o.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] > l[i\
    \ - 1]) {\n            ans = 0;\n            break;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphsp3h71n: /tmp/tmphsp3h71n.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for (long i = 0; i < l; i++) {\n        long long curr =\
    \ l[i];\n        long long prev = l[i - 1];\n        if (curr > prev) {\n    \
    \        ans = 1;\n            break;\n        }\n    }\n    return ans == 1;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7y4y3psb.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7y4y3psb.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmp7y4y3psb.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmp7y4y3psb.cpp:13:29: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   13 |         long\
    \ long curr = l[i];\n      |                             ^\n/tmp/tmp7y4y3psb.cpp:14:33:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   14 |         long long prev = l[i - 1];\n      |                         \
    \        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n \
    \           ans = 1;\n            break;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            ans = -1;\n            break;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1vljz693: /tmp/tmp1vljz693.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] < cur)\
    \ {\n            return false;\n        }\n        ans = max(ans, cur - l[i]);\n\
    \        cur = l[i];\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8ckbm1h7.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8ckbm1h7.cpp:16:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   16 |         ans = max(ans,\
    \ cur - l[i]);\n      |               ^~~\n      |               std::max\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ckbm1h7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] > l[i\
    \ - 1]) {\n            ans = -1;\n            break;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuh_kpb3e: /tmp/tmpuh_kpb3e.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0], prev = l[0];\n    for (long i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] < prev) {\n            return false;\n        }\n        prev = cur;\n\
    \        cur = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpyhv7ob5j: /tmp/tmpyhv7ob5j.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphtx_wnqi: /tmp/tmphtx_wnqi.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n            break;\n        } else if (l[i] < l[i +\
    \ 1]) {\n            ans = 0;\n            break;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpitg75b67: /tmp/tmpitg75b67.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for (int i = 0; i < l; i++) {\n        long long curr = l[i];\n\
    \        long long prev = l[i - 1];\n        if (curr > prev) {\n            ans\
    \ = 1;\n            break;\n        }\n    }\n    return ans == 1;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdgmdiz1g.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdgmdiz1g.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpdgmdiz1g.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpdgmdiz1g.cpp:13:29: error: invalid types\
    \ \u2018long long int[int]\u2019 for array subscript\n   13 |         long long\
    \ curr = l[i];\n      |                             ^\n/tmp/tmpdgmdiz1g.cpp:14:33:\
    \ error: invalid types \u2018long long int[int]\u2019 for array subscript\n  \
    \ 14 |         long long prev = l[i - 1];\n      |                           \
    \      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            return true;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4l2ff_tx: /tmp/tmp4l2ff_tx.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long max = std::numeric_limits<long long>::max();\n    long long min\
    \ = std::numeric_limits<long long>::min();\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        long long curr = l[i];\n        if (curr < min) {\n        \
    \    ans = 1;\n            min = curr;\n        } else if (curr > max) {\n   \
    \         ans = -1;\n            max = curr;\n        } else {\n            ans\
    \ = 0;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp9kmmbvt1: /tmp/tmp9kmmbvt1.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int ans\
    \ = 0;\n    long long int n = l.size();\n    for (int i = 0; i < n; i++) {\n \
    \       long long int curr = l[i];\n        for (int j = i + 1; j < n; j++) {\n\
    \            if (l[j] < curr) {\n                ans = 1;\n                break;\n\
    \            }\n        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp46dl4gmr: /tmp/tmp46dl4gmr.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n        } else if (l[i] < l[i + 1]) {\n           \
    \ ans = -1;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpmab45gup: /tmp/tmpmab45gup.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ temp;\n    for (long i = 0; i < l.size(); i++) {\n        temp = ans;\n    \
    \    ans = std::max(ans, l[i]);\n        ans = std::min(ans, temp);\n    }\n \
    \   return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_i_vazst.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_i_vazst.cpp:14:33: error: no matching function for call\
    \ to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type&)\u2019\n   14 |         ans = std::max(ans, l[i]);\n\
    \      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_i_vazst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_i_vazst.cpp:14:33:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   14 |         ans\
    \ = std::max(ans, l[i]);\n      |                                 ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n - 1;\n    long long int k = m * 2;\n    long\
    \ long int l1 = 0, l2 = 0, l3 = 0, l4 = 0;\n    long long int l5 = 0, l6 = 0,\
    \ l7 = 0;\n    long long int l8 = 0, l9 = 0, l10 = 0;\n    long long int l11 =\
    \ 0, l12 = 0, l13 = 0, l14 = 0, l15 = 0;\n    long long int l16 = 0, l17 = 0,\
    \ l18 = 0, l19 = 0, l20 = 0;\n    long long int l21 = 0;\n    long long int l22\
    \ = 0;\n    long long int l23 = 0;\n    long long int l24 = 0;\n    long long\
    \ int l25 = 0;\n    long long int l26 = 0;\n    long long int l27 = 0;\n    long\
    \ long int l28 = 0;\n    long long int l29 = 0;\n    long long int l30 = 0;\n\
    \    long long int l31 = 0;\n    long long int l32 = 0;\n    long long int l33\
    \ = 0;\n    long long int l34 = 0;\n    long long int l35 = 0;\n    long long\
    \ int l36 = 0;\n    long long int l37 = 0;\n    long long int l38 = 0;\n    long\
    \ long int l39 = 0;\n    long long int l40 = 0;\n    long long int l41 = 0;\n\
    \    long long int l42 = 0;\n    long long int l43 = 0;\n    long long int l44\
    \ = 0;\n    long long int l45 = 0;\n    long long int l46 = 0;\n    long long\
    \ int l47 = 0;\n    long long int l48 = 0;\n    long long int l49 = 0;\n    long\
    \ long int l50 = 0;\n    long long int l51 = 0;\n    long long int l52 = 0;\n\
    \    long long int l53 = 0;\n    long long int l54 = 0;\n    long long int l55\
    \ = 0;\n    long long int l56 = 0;\n    long long int l57 = 0;\n    long long\
    \ int l58 = 0;\n    long long int l59 = 0;\n    long long int l60 = 0;\n    long\
    \ long int l61 = 0;\n    long long int l62 = 0;\n    long long int l63 = 0;\n\
    \    long long int l64 = 0;\n    long long int l65 = 0;\n    long long int l66\
    \ = 0;\n    long long int l67 = 0;\n    long long int l68 = 0;\n    long long\
    \ int l69 = 0;\n    long long int l70 = 0;\n    long \n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp44anbxzk.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp44anbxzk.cpp:70:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   70 | }\n      | ^\n/tmp/tmp44anbxzk.cpp:70:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            ans = 1;\n        } else if (l[i]\
    \ < l[i + 1]) {\n            ans = -1;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_6xrkk_p: /tmp/tmp_6xrkk_p.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long curr = l[0];\n    long long prev = l[0];\n    for (long long i\
    \ = 1; i < l.size(); i++) {\n        if (curr < l[i]) {\n            ans = 1;\n\
    \        }\n        else if (curr > l[i]) {\n            ans = 0;\n        }\n\
    \        else {\n            ans = ans;\n        }\n        curr = l[i];\n   \
    \     prev = l[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpr5kekqa7: /tmp/tmpr5kekqa7.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long i = 0;\n    long long j = l - 1;\n\
    \    long long k = 0;\n    while (i < j) {\n        if (l[i] < l[j]) {\n     \
    \       ans = l[j];\n            j = i;\n        } else {\n            ans = l[i];\n\
    \            i = j;\n        }\n        i++;\n        j--;\n        k++;\n   \
    \ }\n    if (ans == l[0]) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6nimx2z.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi6nimx2z.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpi6nimx2z.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpi6nimx2z.cpp:17:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |         if (l[i] < l[j]) {\n      |                ^\n/tmp/tmpi6nimx2z.cpp:17:23:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |         if (l[i] < l[j]) {\n      |                       ^\n/tmp/tmpi6nimx2z.cpp:18:22:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   18 |             ans = l[j];\n      |                      ^\n/tmp/tmpi6nimx2z.cpp:21:22:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |             ans = l[i];\n      |                      ^\n/tmp/tmpi6nimx2z.cpp:28:19:\
    \ error: invalid types \u2018long long int[int]\u2019 for array subscript\n  \
    \ 28 |     if (ans == l[0]) {\n      |                   ^\n/tmp/tmpi6nimx2z.cpp:33:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   33 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      return false;\n        }\n        ans = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpi_dgftox: /tmp/tmpi_dgftox.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            return true;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfg2yas_u: /tmp/tmpfg2yas_u.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return false;\n    long first = l[0];\n    for (int i = 1; i\
    \ < n; i++) {\n        if (l[i] < first) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmplciu6m4i: /tmp/tmplciu6m4i.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    for (int i = 0; i < n; ++i) {\n        long long cur = l[i];\n\
    \        long long prev = l[i - 1];\n        if (cur > prev) {\n            ans\
    \ = 1;\n        } else if (cur < prev) {\n            ans = -1;\n        }\n \
    \   }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfnvqe7pi: /tmp/tmpfnvqe7pi.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            return true;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpih29l_hj: /tmp/tmpih29l_hj.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n - 1;\n    long long int l1 = l[0], l2 = l[1],\
    \ l3 = l[2], l4 = l[3];\n    long long int l5 = l[4], l6 = l[5], l7 = l[6], l8\
    \ = l[7];\n    long long int l9 = l[8], l10 = l[9], l11 = l[10], l12 = l[11];\n\
    \    long long int l13 = l[12], l14 = l[13], l15 = l[14], l16 = l[15];\n    long\
    \ long int l17 = l[16], l18 = l[17], l19 = l[18], l20 = l[19];\n    long long\
    \ int l21 = 0;\n    long long int l22 = 0;\n    long long int l23 = 0;\n    long\
    \ long int l24 = 0;\n    long long int l25 = 0;\n    long long int l26 = 0;\n\
    \    long long int l27 = 0;\n    long long int l28 = 0;\n    long long int l29\
    \ = 0;\n    long long int l30 = 0;\n    long long int l31 = 0;\n    long long\
    \ int l32 = 0;\n    long long int l33 = 0;\n    long long int l34 = 0;\n    long\
    \ long int l35 = 0;\n    long long int l36 = 0;\n    long long int l37 = 0;\n\
    \    long long int l38 = 0;\n    long long int l39 = 0;\n    long long int l40\
    \ = 0;\n    long long int l41 = 0;\n    long long int l42 = 0;\n    long long\
    \ int l43 = 0;\n    long long int l44 = 0;\n    long long int l45 = 0;\n    long\
    \ long int l46 = 0;\n    long long int l47 = 0;\n    long long int l48 = 0;\n\
    \    long long int l49 = 0;\n    long long int l50 = 0;\n    long long int l51\
    \ = 0;\n    long long int l52 = 0;\n    long long int l53 = 0;\n    long long\
    \ int l54 = 0;\n    long long int l55 = 0;\n    long long int l56 = 0;\n    long\
    \ long int l57 = 0;\n    long long int l58 = 0;\n    long long int l59 = 0;\n\
    \    long long int l60 = 0;\n    long long int l61 = 0;\n    long long int l62\
    \ = 0;\n    long long int l63 = 0;\n    long long int l64 = 0;\n    long long\
    \ int l65\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4yltx0k.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg4yltx0k.cpp:63:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpg4yltx0k.cpp:63:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = 0;\n   \
    \ long long k = 0;\n    long long l = 0;\n    long long m = n - 1;\n    long long\
    \ p = 0;\n    long long q = 0;\n    long long r = n - 1;\n    long long s = 0;\n\
    \    long long t = 0;\n    long long u = 0;\n    long long v = 0;\n    long long\
    \ w = 0;\n    long long x = 0;\n    long long y = 0;\n    long long z = 0;\n \
    \   long long aa = 0;\n    long long bb = 0;\n    long long cc = 0;\n    long\
    \ long dd = 0;\n    long long ee = 0;\n    long long ff = 0;\n    long long gg\
    \ = 0;\n    long long hh = 0;\n    long long ii = 0;\n    long long jj = 0;\n\
    \    long long kk = 0;\n    long long ll = 0;\n    long long mm = 0;\n    long\
    \ long nn = 0;\n    long long oo = 0;\n    long long pp = 0;\n    long long qq\
    \ = 0;\n    long long rr = 0;\n    long long ss;\n    long long tt;\n    long\
    \ long uu;\n    long long vv;\n    long long ww;\n    long long xx;\n    long\
    \ long yy;\n    long long zz;\n    long long aaa;\n    long long bbb;\n    long\
    \ long ccc;\n    long long ddd;\n    long long eee;\n    long long fff;\n    long\
    \ long ggg;\n    long long hhh;\n    long long iii;\n    long long jjj;\n    long\
    \ long kkk;\n    long long lll;\n    long long mmm;\n    long long nnn;\n    long\
    \ long ooo;\n    long long ppp;\n    long long qqq;\n    long long rrr;\n    long\
    \ long sss;\n    long long ttt;\n    long long uuu;\n    long long vvv;\n    long\
    \ long www;\n    long long xxx;\n    long long yyy;\n    long long zzz;\n    long\
    \ long aaaa;\n    long long bbbb;\n    long long cccc;\n    long long dddd;\n\
    \    long long eeee;\n    long long ffff;\n    long long gggg;\n    long long\
    \ hhhh;\n    long long iiii;\n    long long jjjj;\n    long long kkkk;\n    long\
    \ long llll;\n    long long mmmm;\n\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6t3yt092.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6t3yt092.cpp:16:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   16 |     long long l = 0;\n      |     \
    \          ^\n/tmp/tmp6t3yt092.cpp:95:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   95 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return true;\n    long max = l[0];\n    for (int i = 1; i < n;\
    \ i++) {\n        if (l[i] > max) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfxpauv5y: /tmp/tmpfxpauv5y.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = 0;\n    long long k = 0;\n    long long l = 0;\n    long\
    \ long m = 0;\n    long long n1 = 0;\n    long long n2 = 0;\n    long long n3\
    \ = 0;\n    long long n4 = 0;\n    long long n5 = 0;\n    long long n6 = 0;\n\
    \    long long n7 = 0;\n    long long n8 = 0;\n    long long n9 = 0;\n    long\
    \ long n10 = 0;\n    long long n11 = 0;\n    long long n12 = 0;\n    long long\
    \ n13 = 0;\n    long long n14 = 0;\n    long long n15 = 0;\n    long long n16\
    \ = 0;\n    long long n17 = 0;\n    long long n18 = 0;\n    long long n19 = 0;\n\
    \    long long n20 = 0;\n    long long n21 = 0;\n    long long n22 = 0;\n    long\
    \ long n23 = 0;\n    long long n24 = 0;\n    long long n25 = 0;\n    long long\
    \ n26 = 0;\n    long long n27 = 0;\n    long long n28 = 0;\n    long long n29\
    \ = 0;\n    long long n30 = 0;\n    long long n31 = 0;\n    long long n32 = 0;\n\
    \    long long n33 = 0;\n    long long n34 = 0;\n    long long n35 = 0;\n    long\
    \ long n36 = 0;\n    long long n37 = 0;\n    long long n38 = 0;\n    long long\
    \ n39 = 0;\n    long long n40 = 0;\n    long long n41 = 0;\n    long long n42\
    \ = 0;\n    long long n43 = 0;\n    long long n44 = 0;\n    long long n45 = 0;\n\
    \    long long n46 = 0;\n    long long n47 = 0;\n    long long n48 = 0;\n    long\
    \ long n49 = 0;\n    long long n50 = 0;\n    long long n51 = 0;\n    long long\
    \ n52 = 0;\n    long long n53 = 0;\n    long long n54 = 0;\n    long long n55\
    \ = 0;\n    long long n56 = 0;\n    long long n57 = 0;\n    long long n58 = 0;\n\
    \    long long n59 = 0;\n    long long n60 = 0;\n    long long n61 = 0;\n    long\
    \ long n62 = 0;\n    long long n63 = 0;\n    long long n64 = 0;\n    long long\
    \ n65 = 0;\n    long long n66 = 0;\n    long long n67 = 0;\n\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbogywpgb.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbogywpgb.cpp:17:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   17 |     long long l = 0;\n      |     \
    \          ^\n/tmp/tmpbogywpgb.cpp:87:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < cur) {\n            ans = false;\n\
    \            break;\n        }\n        if (l[i] > prev) {\n            ans =\
    \ true;\n            break;\n        }\n        cur = l[i];\n        prev = l[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2wtkxeph: /tmp/tmp2wtkxeph.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        ans = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpzggangkj: /tmp/tmpzggangkj.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return false;\n    int m = l[0];\n    for (int i = 1; i < n;\
    \ i++) {\n        if (l[i] < m) return false;\n        m = l[i];\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpok5yxdn2: /tmp/tmpok5yxdn2.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      return false;\n        }\n        if (l[i] > ans) {\n            return\
    \ true;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpeun266jq: /tmp/tmpeun266jq.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    for (int i = 0; i < l - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n        }\n \
    \   }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6_ldxfc8.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6_ldxfc8.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp6_ldxfc8.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp6_ldxfc8.cpp:14:16:\
    \ error: invalid types \u2018long long int[int]\u2019 for array subscript\n  \
    \ 14 |         if (l[i] > l[i + 1]) {\n      |                ^\n/tmp/tmp6_ldxfc8.cpp:14:27:\
    \ error: invalid types \u2018long long int[int]\u2019 for array subscript\n  \
    \ 14 |         if (l[i] > l[i + 1]) {\n      |                           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        ans = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp23ypt7wc: /tmp/tmp23ypt7wc.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            return true;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp56qj0j_c: /tmp/tmp56qj0j_c.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long i = 0;\n    long long j = l - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n  \
    \          j = j - 1;\n        } else {\n            ans = l[i];\n           \
    \ i = i + 1;\n        }\n    }\n    return ans == l[0];\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3hz7amb9.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3hz7amb9.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp3hz7amb9.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp3hz7amb9.cpp:16:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   16 |         if (l[i] < l[j]) {\n      |                ^\n/tmp/tmp3hz7amb9.cpp:16:23:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   16 |         if (l[i] < l[j]) {\n      |                       ^\n/tmp/tmp3hz7amb9.cpp:17:22:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |             ans = l[j];\n      |                      ^\n/tmp/tmp3hz7amb9.cpp:20:22:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   20 |             ans = l[i];\n      |                      ^\n/tmp/tmp3hz7amb9.cpp:24:22:\
    \ error: invalid types \u2018long long int[int]\u2019 for array subscript\n  \
    \ 24 |     return ans == l[0];\n      |                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ curr = 0, prev = 0;\n    for (long long i = 0; i < l.size(); i++) {\n      \
    \  curr = l[i];\n        prev = l[i - 1];\n        if (curr > prev) {\n      \
    \      ans = 1;\n            break;\n        }\n    }\n    return ans == 1;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4wmg67zj: /tmp/tmp4wmg67zj.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < cur)\
    \ {\n            ans = false;\n            break;\n        }\n        cur = l[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp46qsloul: /tmp/tmp46qsloul.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ last = 0, cur = 0;\n    for (long i = 0; i < l.size(); i++) {\n        cur =\
    \ l[i];\n        if (cur > last) {\n            ans = 1;\n            break;\n\
    \        }\n        if (cur < last) {\n            ans = 0;\n            break;\n\
    \        }\n        last = cur;\n    }\n    return ans == 1;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjd2rx7d9: /tmp/tmpjd2rx7d9.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = l[n - 1];\n    for (long long int i = n - 2;\
    \ i >= 0; i--) {\n        if (l[i] < m) {\n            return false;\n       \
    \ }\n        m = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpk00khqfc: /tmp/tmpk00khqfc.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        ans = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpktnqlji_: /tmp/tmpktnqlji_.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp37e45mf1: /tmp/tmp37e45mf1.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for (long i = 0; i < l; i++) {\n        long j = i + 1;\n\
    \        while (j < l && l[j] < l[i]) {\n            j++;\n        }\n       \
    \ if (j - i > 1) {\n            ans = l[j] - l[i];\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu__cz3t5.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu__cz3t5.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpu__cz3t5.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpu__cz3t5.cpp:14:28: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   14 |         while\
    \ (j < l && l[j] < l[i]) {\n      |                            ^\n/tmp/tmpu__cz3t5.cpp:14:35:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   14 |         while (j < l && l[j] < l[i]) {\n      |                     \
    \              ^\n/tmp/tmpu__cz3t5.cpp:18:22: error: invalid types \u2018long\
    \ long int[long int]\u2019 for array subscript\n   18 |             ans = l[j]\
    \ - l[i];\n      |                      ^\n/tmp/tmpu__cz3t5.cpp:18:29: error:\
    \ invalid types \u2018long long int[long int]\u2019 for array subscript\n   18\
    \ |             ans = l[j] - l[i];\n      |                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n;\n    long long int k = n;\n    long long\
    \ int i = 0;\n    long long int j = 0;\n    long long int k1 = n;\n    long long\
    \ int k2 = n;\n    long long int k3 = n;\n    long long int k4 = n;\n    long\
    \ long int k5 = n;\n    long long int k6 = n;\n    long long int k7 = n;\n   \
    \ long long int k8 = n;\n    long long int k9 = n;\n    long long int k10 = n;\n\
    \    long long int k11 = n;\n    long long int k12 = n;\n    long long int k13\
    \ = n;\n    long long int k14 = n;\n    long long int k15 = n;\n    long long\
    \ int k16 = n;\n    long long int k17 = n;\n    long long int k18 = n;\n    long\
    \ long int k19 = n;\n    long long int k20 = n;\n    long long int k21 = n;\n\
    \    long long int k22 = n;\n    long long int k23 = n;\n    long long int k24\
    \ = n;\n    long long int k25 = n;\n    long long int k26 = n;\n    long long\
    \ int k27 = n;\n    long long int k28 = n;\n    long long int k29 = n;\n    long\
    \ long int k30 = n;\n    long long int k31 = n;\n    long long int k32 = n;\n\
    \    long long int k33 = n;\n    long long int k34 = n;\n    long long int k35\
    \ = n;\n    long long int k36 = n;\n    long long int k37 = n;\n    long long\
    \ int k38 = n;\n    long long int k39 = n;\n    long long int k40 = n;\n    long\
    \ long int k41 = n;\n    long long int k42 = n;\n    long long int k43 = n;\n\
    \    long long int k44 = n;\n    long long int k45 = n;\n    long long int k46\
    \ = n;\n    long long int k47 = n;\n    long long int k48 = n;\n    long long\
    \ int k49 = n;\n    long long int k50 = n;\n    long long int k51 = n;\n    long\
    \ long int k52 = n;\n    long long int k53 = n;\n    long long int k54 = n;\n\
    \    long \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr4_nqtk0.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr4_nqtk0.cpp:71:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   71 | }\n      | ^\n/tmp/tmpr4_nqtk0.cpp:71:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    long long k = 0;\n    while (i < j) {\n        if (l[i] < l[j]) {\n     \
    \       ans = 1;\n            i = i + 1;\n        } else {\n            ans =\
    \ -1;\n            j = j - 1;\n        }\n        k = k + 1;\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxog8cpno: /tmp/tmpxog8cpno.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long max = l[0];\n    long long min = l[0];\n    for (long long i :\
    \ l) {\n        if (i > max) {\n            ans = 1;\n            max = i;\n \
    \       } else if (i < min) {\n            ans = -1;\n            min = i;\n \
    \       } else {\n            ans = 0;\n        }\n    }\n    return ans == 1;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwl0trzh4: /tmp/tmpwl0trzh4.cpp:32: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return true;\n    if (n == 1) return l[0] > l[1];\n    int m\
    \ = l[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n        if (l[i] > m) m\
    \ = l[i];\n    }\n    return l[0] > m;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_9jnfqqi: /tmp/tmp_9jnfqqi.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ i = 0;\n    long long prev = l[0];\n    for(; i < l.size(); i++) {\n       \
    \ if(l[i] < prev) {\n            return false;\n        }\n        ans = max(ans,\
    \ i - 1);\n        prev = l[i];\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ccliikb.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7ccliikb.cpp:17:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |         ans = max(ans,\
    \ i - 1);\n      |               ^~~\n      |               std::max\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ccliikb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n   \
    \         return false;\n        if (l[i] > ans)\n            ans = l[i];\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpovevme4c: /tmp/tmpovevme4c.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return true;\n    int m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) return false;\n        m = l[i];\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_18w_ie1: /tmp/tmp_18w_ie1.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = 1;\n     \
    \       break;\n        }\n        else if (l[i] > l[j]) {\n            ans =\
    \ 0;\n            break;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpz13l20wk: /tmp/tmpz13l20wk.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n   \
    \         return false;\n        if (l[i] > ans)\n            ans = l[i];\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpe1elx99b: /tmp/tmpe1elx99b.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    long long int m = n - 1;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int u = 0;\n    long long int v = 0;\n    long\
    \ long int w = 0;\n    long long int x = 0;\n    long long int y = 0;\n    long\
    \ long int z = 0;\n    long long int i = 0;\n    long long int j = 0;\n    long\
    \ long int k = 0;\n    long long int l = 0;\n    long long int u = 0;\n    long\
    \ long int v = 0;\n    long long int w = 0;\n    long long int x = 0;\n    long\
    \ long int y = 0;\n    long long int z = 0;\n    long long int i = 0;\n    long\
    \ long int j = 0;\n    long long int k = 0;\n    long long int l = 0;\n    long\
    \ long int u = 0;\n    long long int v = 0;\n    long long int w = 0;\n    long\
    \ long int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n    long\
    \ long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int u = 0;\n    long long int v = 0;\n    long\
    \ long int w = 0;\n    long long int x = 0;\n    long long int y = 0;\n    long\
    \ long int z = 0;\n    long long int i = 0;\n    long long int j = 0;\n    long\
    \ long int k = 0;\n    long long int l = 0;\n    long long int u = 0;\n    long\
    \ long int v = 0;\n    long long int w = 0;\n    long long int x = 0;\n    long\
    \ long int y = 0;\n    long long int z = 0;\n    long long int i = 0;\n    long\
    \ long int j = 0;\n    long long int k = 0;\n    long long int l = 0;\n    long\
    \ long int u = 0;\n    long long int v = 0;\n    long long int w = 0;\n    long\
    \ long int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n    long\
    \ long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int u = 0;\n    long long int v = 0;\n    long\
    \ long int w = 0;\n    long long int x = 0;\n    long long int y = 0;\n    long\
    \ long int z = 0;\n    long long int i = 0;\n    long long int j = 0;\n    long\
    \ long int k = 0;\n    long long int l\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpw8i2lf7j.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw8i2lf7j.cpp:14:19: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   14 |     long long int l = 0;\n      | \
    \                  ^\n/tmp/tmpw8i2lf7j.cpp:23:19: error: redeclaration of \u2018\
    long long int k\u2019\n   23 |     long long int k = 0;\n      |             \
    \      ^\n/tmp/tmpw8i2lf7j.cpp:13:19: note: \u2018long long int k\u2019 previously\
    \ declared here\n   13 |     long long int k = 0;\n      |                   ^\n\
    /tmp/tmpw8i2lf7j.cpp:24:19: error: redeclaration of \u2018long long int l\u2019\
    \n   24 |     long long int l = 0;\n      |                   ^\n/tmp/tmpw8i2lf7j.cpp:14:19:\
    \ note: \u2018long long int l\u2019 previously declared here\n   14 |     long\
    \ long int l = 0;\n      |                   ^\n/tmp/tmpw8i2lf7j.cpp:25:19: error:\
    \ redeclaration of \u2018long long int u\u2019\n   25 |     long long int u =\
    \ 0;\n      |                   ^\n/tmp/tmpw8i2lf7j.cpp:15:19: note: \u2018long\
    \ long int u\u2019 previously declared here\n   15 |     long long int u = 0;\n\
    \      |                   ^\n/tmp/tmpw8i2lf7j.cpp:26:19: error: redeclaration\
    \ of \u2018long long int v\u2019\n   26 |     long long int v = 0;\n      |  \
    \                 ^\n/tmp/tmpw8i2lf7j.cpp:16:19: note: \u2018long long int v\u2019\
    \ previously declared here\n   16 |     long long int v = 0;\n      |        \
    \           ^\n/tmp/tmpw8i2lf7j.cpp:27:19: error: redeclaration of \u2018long\
    \ long int w\u2019\n   27 |     long long int w = 0;\n      |                \
    \   ^\n/tmp/tmpw8i2lf7j.cpp:17:19: note: \u2018long long int w\u2019 previously\
    \ declared here\n   17 |     long long int w = 0;\n      |                   ^\n\
    /tmp/tmpw8i2lf7j.cpp:28:19: error: redeclaration of \u2018long long int x\u2019\
    \n   28 |     long long int x = 0;\n      |                   ^\n/tmp/tmpw8i2lf7j.cpp:18:19:\
    \ note: \u2018long long int x\u2019 previously declared here\n   18 |     long\
    \ long int x = 0;\n      |                   ^\n/tmp/tmpw8i2lf7j.cpp:29:19: error:\
    \ redeclaration of \u2018long long int y\u2019\n   29 |     long long int y =\
    \ 0;\n      |                   ^\n/tmp/tmpw8i2lf7j.cpp:19:19: note: \u2018long\
    \ long int y\u2019 previously declared here\n  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ curr = 0, prev = 0;\n    for (long i = 0; i < l.size(); i++) {\n        curr\
    \ = l[i];\n        if (curr > prev) {\n            ans = 1;\n        } else if\
    \ (curr < prev) {\n            ans = -1;\n        }\n        prev = curr;\n  \
    \  }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpzd99bfxt: /tmp/tmpzd99bfxt.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg29s_keh: /tmp/tmpg29s_keh.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for(long i = 0; i < l; i++) {\n        long j = i + 1;\n\
    \        while(j < l && l[j] < l[i]) {\n            j++;\n        }\n        if(j\
    \ - i > 1) {\n            ans = max(ans, l[i] - l[j]);\n        }\n    }\n   \
    \ return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvis4zi12.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvis4zi12.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpvis4zi12.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpvis4zi12.cpp:14:27: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   14 |         while(j\
    \ < l && l[j] < l[i]) {\n      |                           ^\n/tmp/tmpvis4zi12.cpp:14:34:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   14 |         while(j < l && l[j] < l[i]) {\n      |                      \
    \            ^\n/tmp/tmpvis4zi12.cpp:18:31: error: invalid types \u2018long long\
    \ int[long int]\u2019 for array subscript\n   18 |             ans = max(ans,\
    \ l[i] - l[j]);\n      |                               ^\n/tmp/tmpvis4zi12.cpp:18:38:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   18 |             ans = max(ans, l[i] - l[j]);\n      |                   \
    \                   ^\n/tmp/tmpvis4zi12.cpp:18:19: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   18 |    \
    \         ans = max(ans, l[i] - l[j]);\n      |                   ^~~\n      |\
    \                   std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvis4zi12.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ temp;\n    for (long i = 0; i < l.size(); i++) {\n        temp = l[i];\n   \
    \     while (temp < ans) {\n            ans = temp;\n            temp += ans;\n\
    \        }\n        while (temp > ans) {\n            ans = temp;\n          \
    \  temp -= ans;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpft68f7wr: /tmp/tmpft68f7wr.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ prev = 0, cur = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if\
    \ (l[i] < cur) {\n            if (l[i] > prev) {\n                ans = 1;\n \
    \           }\n        } else if (l[i] > cur) {\n            if (l[i] < prev)\
    \ {\n                ans = -1;\n            }\n        }\n        prev = cur;\n\
    \        cur = l[i];\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpsn98ljk1: /tmp/tmpsn98ljk1.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ prev = 0, cur = l.front();\n    for (auto i : l) {\n        if (i > cur) {\n\
    \            ans = 1;\n        }\n        else if (i < cur) {\n            ans\
    \ = 0;\n        }\n        prev = cur;\n        cur = i;\n    }\n    return ans\
    \ == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3ig1s761: /tmp/tmp3ig1s761.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      return false;\n        }\n        ans = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1hktj5bh: /tmp/tmp1hktj5bh.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        else if (l[i] > ans)\n            ans = l[i];\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj0g_6dy0: /tmp/tmpj0g_6dy0.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    for (long long i = 0; i < l; i++) {\n      \
    \  long long curr = l[i];\n        long long prev = l[i - 1];\n        if (curr\
    \ > prev) {\n            ans = 1;\n        } else if (curr < prev) {\n       \
    \     ans = -1;\n        } else {\n            ans = 0;\n        }\n    }\n  \
    \  return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkq0_lnzj.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkq0_lnzj.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpkq0_lnzj.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpkq0_lnzj.cpp:14:29:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   14 |         long long curr = l[i];\n      |                             ^\n\
    /tmp/tmpkq0_lnzj.cpp:15:33: error: invalid types \u2018long long int[long long\
    \ int]\u2019 for array subscript\n   15 |         long long prev = l[i - 1];\n\
    \      |                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ prev = 0, curr = 0, i;\n    for (i = 0; i < l.size(); i++) {\n        curr =\
    \ l[i];\n        if (curr > prev) {\n            ans = 1;\n        } else if (curr\
    \ < prev) {\n            ans = 0;\n        } else {\n            ans = -1;\n \
    \       }\n        prev = curr;\n    }\n    return ans == 1;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpaoxp9n_s: /tmp/tmpaoxp9n_s.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    long long prev = l[0];\n    for(long long i = 1; i < l.size(); i++) {\n \
    \       if(l[i] < prev) {\n            return false;\n        }\n        ans =\
    \ max(ans, l[i]);\n        prev = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphr6evj14.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphr6evj14.cpp:17:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |         ans = max(ans,\
    \ l[i]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphr6evj14.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long max = l[0];\n    long long min = l[0];\n    for (long long i :\
    \ l) {\n        if (i > max) {\n            ans = 1;\n            max = i;\n \
    \       } else if (i < min) {\n            ans = -1;\n            min = i;\n \
    \       } else {\n            ans = 0;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyfdtylzx: /tmp/tmpyfdtylzx.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0], prev = l[0];\n    for (long i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] > prev) {\n            ans = 1;\n        }\n        if (l[i] < cur)\
    \ {\n            ans = 0;\n        }\n        prev = cur;\n        cur = l[i];\n\
    \    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3w_hu20i: /tmp/tmp3w_hu20i.cpp:29: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    long long ans = l[0];\n    for (int i = 1;\
    \ i < n; ++i) {\n        if (l[i] < ans) return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmdqwc1vu: /tmp/tmpmdqwc1vu.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ i = 0;\n    for (auto it = l.begin(); it != l.end(); it++) {\n        if (i\
    \ == 0) {\n            ans = *it;\n            i++;\n            continue;\n \
    \       }\n        if (*it < ans) {\n            return false;\n        }\n  \
    \      if (*it > ans) {\n            return true;\n        }\n        i++;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpprhbdd_u: /tmp/tmpprhbdd_u.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ prev = 0, curr = 0, i;\n    for (i = 0; i < l.size(); i++) {\n        curr =\
    \ l[i];\n        if (curr < prev) {\n            ans = false;\n            break;\n\
    \        }\n        prev = curr;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfi3c0mrr: /tmp/tmpfi3c0mrr.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0], prev = l[0];\n    for (long i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] < prev) {\n            return false;\n        }\n        prev = cur;\n\
    \        cur = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp4s1twdq5: /tmp/tmp4s1twdq5.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n        } else if (l[i] < l[i + 1]) {\n           \
    \ ans = 0;\n        } else {\n            ans = ans * 10 + i;\n        }\n   \
    \ }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp47vr9r6z: /tmp/tmp47vr9r6z.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = 0;\n   \
    \ long long k = 0;\n    long long l = n;\n    long long m = n;\n    long long\
    \ p = 0;\n    long long q = 0;\n    long long r = n;\n    long long s = n;\n \
    \   long long t = 0;\n    long long u = 0;\n    long long v = 0;\n    long long\
    \ w = 0;\n    long long x = 0;\n    long long y = 0;\n    long long z = 0;\n \
    \   long long A = 0;\n    long long B = 0;\n    long long C = 0;\n    long long\
    \ D = 0;\n    long long E = 0;\n    long long F = 0;\n    long long G = 0;\n \
    \   long long H = 0;\n    long long I = 0;\n    long long J = 0;\n    long long\
    \ K = 0;\n    long long L = 0;\n    long long M = 0;\n    long long N = 0;\n \
    \   long long O = 0;\n    long long P = 0;\n    long long Q = 0;\n    long long\
    \ R = 0;\n    long long S = 0;\n    long long T = 0;\n    long long U = 0;\n \
    \   long long V = 0;\n    long long W = 0;\n    long long X = 0;\n    long long\
    \ Y = 0;\n    long long Z = 0;\n    long long aa = 0;\n    long long bb = 0;\n\
    \    long long cc = 0;\n    long long dd = 0;\n    long long ee = 0;\n    long\
    \ long ff = 0;\n    long long gg = 0;\n    long long hh = 0;\n    long long ii\
    \ = 0;\n    long long jj = 0;\n    long long kk = 0;\n    long long ll = 0;\n\
    \    long long mm = 0;\n    long long nn = 0;\n    long long oo = 0;\n    long\
    \ long pp = 0;\n    long long qq = 0;\n    long long rr = 0;\n    long long ss\
    \ = 0;\n    long long tt = 0;\n    long long uu = 0;\n    long long vv = 0;\n\
    \    long long ww = 0;\n    long long xx = 0;\n    long long yy = 0;\n    long\
    \ long zz = 0;\n    long long Aa = 0;\n    long long Bb = 0;\n    long long Cc\
    \ = 0;\n    long long Dd = 0;\n    long long Ee = 0;\n    long long Ff = 0;\n\
    \    long long Gg = 0;\n    long long Hh = 0;\n    long long Ii = 0;\n    long\
    \ long Jj = 0;\n    long long Kk = 0;\n    long long Ll = 0;\n    long long Mm\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp6km7fkr.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpp6km7fkr.cpp:16:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   16 |     long long l = n;\n      |     \
    \          ^\n/tmp/tmpp6km7fkr.cpp:95:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   95 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > ans) {\n      \
    \      ans = l[i];\n        }\n    }\n    return ans == l[0];\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjlxczfxb: /tmp/tmpjlxczfxb.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long m = n - 1;\n    for (long long i =\
    \ 0; i < n; i++) {\n        long long x = l[i];\n        long long y = l[i + 1];\n\
    \        if (x > y) {\n            ans = 1;\n        } else if (x < y) {\n   \
    \         ans = -1;\n        } else {\n            ans = 0;\n        }\n     \
    \   if (ans == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8wss7hxr: /tmp/tmp8wss7hxr.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long ans = 0;\n    long long n = l.size();\n    for (long long\
    \ i = 0; i < n; i++) {\n        if (l[i] < l[i - 1]) {\n            ans = 1;\n\
    \        } else if (l[i] > l[i - 1]) {\n            ans = -1;\n        } else\
    \ {\n            ans = 0;\n        }\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsh0nxav2: /tmp/tmpsh0nxav2.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return true;\n    int m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) return false;\n        m = l[i];\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxhifunse: /tmp/tmpxhifunse.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    for (int i = 0; i < l; i++) {\n        long\
    \ long curr = l[i];\n        for (int j = i; j < l; j++) {\n            if (l[j]\
    \ < curr) {\n                ans = 1;\n                break;\n            }\n\
    \            if (l[j] > curr) {\n                ans = -1;\n                break;\n\
    \            }\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphki7_z1g.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphki7_z1g.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmphki7_z1g.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmphki7_z1g.cpp:14:29:\
    \ error: invalid types \u2018long long int[int]\u2019 for array subscript\n  \
    \ 14 |         long long curr = l[i];\n      |                             ^\n\
    /tmp/tmphki7_z1g.cpp:16:20: error: invalid types \u2018long long int[int]\u2019\
    \ for array subscript\n   16 |             if (l[j] < curr) {\n      |       \
    \             ^\n/tmp/tmphki7_z1g.cpp:20:20: error: invalid types \u2018long long\
    \ int[int]\u2019 for array subscript\n   20 |             if (l[j] > curr) {\n\
    \      |                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for (long i = 0; i < l; i++) {\n        if (ans > l[i]) ans\
    \ = l[i];\n    }\n    for (long i = l - 1; i >= 0; i--) {\n        if (ans < l[i])\
    \ ans = l[i];\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpir8huorh.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpir8huorh.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpir8huorh.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpir8huorh.cpp:13:22: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   13 |         if\
    \ (ans > l[i]) ans = l[i];\n      |                      ^\n/tmp/tmpir8huorh.cpp:13:34:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   13 |         if (ans > l[i]) ans = l[i];\n      |                        \
    \          ^\n/tmp/tmpir8huorh.cpp:16:22: error: invalid types \u2018long long\
    \ int[long int]\u2019 for array subscript\n   16 |         if (ans < l[i]) ans\
    \ = l[i];\n      |                      ^\n/tmp/tmpir8huorh.cpp:16:34: error:\
    \ invalid types \u2018long long int[long int]\u2019 for array subscript\n   16\
    \ |         if (ans < l[i]) ans = l[i];\n      |                             \
    \     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for (long i = 0; i < l; i++) {\n        long j = i;\n   \
    \     while (j > 0 && l[j - 1] > l[j]) {\n            ans = l[j];\n          \
    \  j--;\n        }\n        l[j] = ans;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfqsfyn9i.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfqsfyn9i.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpfqsfyn9i.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpfqsfyn9i.cpp:14:32: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   14 |         while\
    \ (j > 0 && l[j - 1] > l[j]) {\n      |                                ^\n/tmp/tmpfqsfyn9i.cpp:14:39:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   14 |         while (j > 0 && l[j - 1] > l[j]) {\n      |                 \
    \                      ^\n/tmp/tmpfqsfyn9i.cpp:15:22: error: invalid types \u2018\
    long long int[long int]\u2019 for array subscript\n   15 |             ans = l[j];\n\
    \      |                      ^\n/tmp/tmpfqsfyn9i.cpp:18:12: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   18 |         l[j]\
    \ = ans;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) {\n      \
    \      return false;\n        }\n        ans = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwma9x78i: /tmp/tmpwma9x78i.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > ans) {\n      \
    \      ans = l[i];\n        }\n    }\n    return ans == l[0];\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnkl2qsoi: /tmp/tmpnkl2qsoi.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < cur)\
    \ {\n            return false;\n        }\n        ans += 1;\n        cur = l[i];\n\
    \    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjl6qnj9a: /tmp/tmpjl6qnj9a.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ i = 0;\n    for (; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n\
    \            ans = 1;\n            break;\n        }\n    }\n    return ans ==\
    \ 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8ez8zd90: /tmp/tmp8ez8zd90.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsqxikfi_: /tmp/tmpsqxikfi_.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ temp;\n    for (long i = 0; i < l.size(); i++) {\n        temp = l[i];\n   \
    \     if (temp < ans)\n            ans = temp;\n        else if (temp > ans)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp4gt4673j: /tmp/tmp4gt4673j.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        ans = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdzgjyr3d: /tmp/tmpdzgjyr3d.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    for (long i = 0; i < n; i++) {\n        long j = i;\n   \
    \     while (j > 0 && l[j-1] > l[j]) {\n            ans = l[j-1];\n          \
    \  j--;\n        }\n        l[j] = ans;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp574kqbsw: /tmp/tmp574kqbsw.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = 0;\n   \
    \ while (i < n) {\n        ans = ans || (l[j] < l[j + 1]);\n        i++;\n   \
    \     j++;\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpzrmr46yj: /tmp/tmpzrmr46yj.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ curr = 0, prev = 0;\n    for (long i = 0; i < l.size(); i++) {\n        prev\
    \ = curr;\n        curr = l[i];\n        if (curr < prev) {\n            ans =\
    \ 1;\n        } else {\n            ans = 0;\n        }\n    }\n    return ans\
    \ == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_wsequzx: /tmp/tmp_wsequzx.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        else if (l[i] > ans)\n            ans = l[i];\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmptvbz3s3n: /tmp/tmptvbz3s3n.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    long l1 = l[0], l2 = l[1], l3 = l[2], l4 =\
    \ l[3];\n    for (int i = 1; i < n; i++) {\n        if (l1 < l4 || (l1 == l4 &&\
    \ l2 < l3)) return false;\n        l1 = l2;\n        l2 = l3;\n        l3 = l4;\n\
    \        l4 = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpanaytcxd: /tmp/tmpanaytcxd.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long m = n - 1;\n    long long i = 0;\n\
    \    long long j = 0;\n    long long k = 0;\n    long long l = n;\n    while (i\
    \ < n) {\n        ans = ans + l[i];\n        if (ans > l[j]) {\n            ans\
    \ = ans - l[j];\n            i = j;\n        }\n        if (ans < l[k]) {\n  \
    \          ans = ans - l[k];\n            j = k;\n        }\n        k = k + 1;\n\
    \    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4vud8fc.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo4vud8fc.cpp:17:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   17 |     long long l = n;\n      |     \
    \          ^\n/tmp/tmpo4vud8fc.cpp:19:24: error: invalid types \u2018long long\
    \ int[long long int]\u2019 for array subscript\n   19 |         ans = ans + l[i];\n\
    \      |                        ^\n/tmp/tmpo4vud8fc.cpp:20:22: error: invalid\
    \ types \u2018long long int[long long int]\u2019 for array subscript\n   20 |\
    \         if (ans > l[j]) {\n      |                      ^\n/tmp/tmpo4vud8fc.cpp:21:28:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |             ans = ans - l[j];\n      |                            ^\n\
    /tmp/tmpo4vud8fc.cpp:24:22: error: invalid types \u2018long long int[long long\
    \ int]\u2019 for array subscript\n   24 |         if (ans < l[k]) {\n      | \
    \                     ^\n/tmp/tmpo4vud8fc.cpp:25:28: error: invalid types \u2018\
    long long int[long long int]\u2019 for array subscript\n   25 |             ans\
    \ = ans - l[k];\n      |                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ cur = l[0], prev = l[0];\n    for (long i = 1; i < l.size(); i++) {\n      \
    \  if (l[i] < prev) {\n            ans = false;\n            break;\n        }\n\
    \        if (l[i] > cur) {\n            ans = true;\n            break;\n    \
    \    }\n        prev = cur;\n        cur = l[i];\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgfek8rfw: /tmp/tmpgfek8rfw.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int n =\
    \ l.size();\n    if (n == 0) return false;\n    long long int m = l[0];\n    for\
    \ (long long int i = 1; i < n; i++) {\n        if (l[i] < m) return false;\n \
    \       m = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpnzgc2n5b: /tmp/tmpnzgc2n5b.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long i = 0;\n    long long j = l - 1;\n\
    \    long long k = 0;\n    while (i < j) {\n        long long mid = (i + j) /\
    \ 2;\n        if (l[mid] < l[i]) {\n            ans = 1;\n            i = mid\
    \ + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    while\
    \ (k <= j) {\n        long long mid = (k + j) / 2;\n        if (l[mid] < l[k])\
    \ {\n            ans = 1;\n            k = mid + 1;\n        } else {\n      \
    \      j = mid - 1;\n        }\n    }\n    return ans == 1;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ldoti8k.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_ldoti8k.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp_ldoti8k.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp_ldoti8k.cpp:18:18:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   18 |         if (l[mid] < l[i]) {\n      |                  ^\n/tmp/tmp_ldoti8k.cpp:18:25:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   18 |         if (l[mid] < l[i]) {\n      |                         ^\n/tmp/tmp_ldoti8k.cpp:27:18:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   27 |         if (l[mid] < l[k]) {\n      |                  ^\n/tmp/tmp_ldoti8k.cpp:27:25:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   27 |         if (l[mid] < l[k]) {\n      |                         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ temp = 0;\n    for (long i = 0; i < l.size(); i++) {\n        temp = l[i];\n\
    \        ans = ans + temp;\n        if (ans > temp) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8zoxkjin: /tmp/tmp8zoxkjin.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    for (long long i = 0; i < n; i++) {\n      \
    \  long long j = i;\n        while (j > 0 && l[j - 1] > l[j]) {\n            ans\
    \ = l[j];\n            j--;\n        }\n        l[j] = ans;\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9egjr7vz: /tmp/tmp9egjr7vz.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int ans\
    \ = 0;\n    for (long long int i : l) {\n        if (i > ans) {\n            ans\
    \ = i;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp7d30gq42: /tmp/tmp7d30gq42.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for (int i = 0; i < l - 1; i++) {\n        long long x =\
    \ l[i];\n        long long y = l[i + 1];\n        if (x > y) ans = 1;\n      \
    \  else if (x < y) ans = -1;\n        else ans = 0;\n    }\n    return ans ==\
    \ 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgsr_0hp_.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgsr_0hp_.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpgsr_0hp_.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpgsr_0hp_.cpp:13:26: error: invalid types\
    \ \u2018long long int[int]\u2019 for array subscript\n   13 |         long long\
    \ x = l[i];\n      |                          ^\n/tmp/tmpgsr_0hp_.cpp:14:30: error:\
    \ invalid types \u2018long long int[int]\u2019 for array subscript\n   14 |  \
    \       long long y = l[i + 1];\n      |                              ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    long long k = 0;\n    while (i < j) {\n        while (i < n && l[i] <= l[j])\
    \ {\n            i++;\n        }\n        while (j > 0 && l[j] <= l[i]) {\n  \
    \          j--;\n        }\n        if (i < j) {\n            ans = l[j];\n  \
    \          i = j;\n            j = k;\n        }\n        k++;\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_ckscu3v: /tmp/tmp_ckscu3v.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    while (i < j) {\n        long long mid = (i + j) / 2;\n        if (l[mid]\
    \ > l[mid+1]) {\n            ans = 1;\n            j = mid - 1;\n        } else\
    \ {\n            ans = -1;\n            i = mid + 1;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmppt_3rsr9: /tmp/tmppt_3rsr9.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long ans = 0, i = 0;\n    for(; i < l.size(); i++) {\n     \
    \   if(l[i] > l[i+1]) {\n            ans = 1;\n            break;\n        }\n\
    \    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphgc97qqn: /tmp/tmphgc97qqn.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = 0;\n   \
    \ long long k = 0;\n    long long l = 0;\n    long long m = n;\n    long long\
    \ p = 0;\n    while (i < n) {\n        ans = ans + l[i];\n        i++;\n    }\n\
    \    while (j < m) {\n        ans = ans - l[j];\n        j++;\n    }\n    while\
    \ (k < (n - 1)) {\n        ans = ans + l[k];\n        k++;\n    }\n    while (l\
    \ < (m - 1)) {\n        ans = ans - l[l];\n        l++;\n    }\n    while (p <\
    \ (n - 1)) {\n        ans = ans + l[p];\n        p++;\n    }\n    while (p < (m\
    \ - 1)) {\n        ans = ans - l[p];\n        p++;\n    }\n    while (i < n) {\n\
    \        ans = ans + l[i];\n        i++;\n    }\n    while (j < m) {\n       \
    \ ans = ans - l[j];\n        j++;\n    }\n    while (k < (n - 1)) {\n        ans\
    \ = ans + l[k];\n        k++;\n    }\n    while (l < (m - 1)) {\n        ans =\
    \ ans - l[l];\n        l++;\n    }\n    while (p < (n - 1)) {\n        ans = ans\
    \ + l[p];\n        p++;\n    }\n    while (p < (m - 1)) {\n        ans = ans -\
    \ l[p];\n        p++;\n    }\n    return (ans == 0);\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprm8y1s61.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprm8y1s61.cpp:16:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   16 |     long long l = 0;\n      |     \
    \          ^\n/tmp/tmprm8y1s61.cpp:20:24: error: invalid types \u2018long long\
    \ int[long long int]\u2019 for array subscript\n   20 |         ans = ans + l[i];\n\
    \      |                        ^\n/tmp/tmprm8y1s61.cpp:24:24: error: invalid\
    \ types \u2018long long int[long long int]\u2019 for array subscript\n   24 |\
    \         ans = ans - l[j];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:28:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   28 |         ans = ans + l[k];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:32:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   32 |         ans = ans - l[l];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:36:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   36 |         ans = ans + l[p];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:40:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   40 |         ans = ans - l[p];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:44:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   44 |         ans = ans + l[i];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:48:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   48 |         ans = ans - l[j];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:52:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   52 |         ans = ans + l[k];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:56:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   56 |         ans = ans - l[l];\n      |                        ^\n/tmp/tmprm8y1s61.cpp:60:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   60 |         ans = ans + l[p];\n      |                     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    int m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] <= m) return false;\n        m = l[i];\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpajn95ywo: /tmp/tmpajn95ywo.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfttr9r_p: /tmp/tmpfttr9r_p.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    long long ans = l[0];\n    for (int i = 1;\
    \ i < n; i++) {\n        if (l[i] < ans) return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmprrqf2iam: /tmp/tmprrqf2iam.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_xftslr_: /tmp/tmp_xftslr_.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n   \
    \         return false;\n        if (l[i] > ans)\n            return true;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkatvcywf: /tmp/tmpkatvcywf.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            ans = 1;\n        } else {\n            ans = 0;\n        }\n\
    \    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp867touwb: /tmp/tmp867touwb.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long max = std::numeric_limits<long long>::max();\n    long long min\
    \ = std::numeric_limits<long long>::min();\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            ans = 1;\n            max = l[i];\n\
    \        } else if (l[i] < min) {\n            ans = -1;\n            min = l[i];\n\
    \        } else {\n            ans = 0;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp18uzmeyt: /tmp/tmp18uzmeyt.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long i = 0;\n    long long j = l - 1;\n\
    \    while (i < j) {\n        long long mid = (i + j) / 2;\n        if (l[mid]\
    \ < l[mid + 1]) {\n            ans = 1;\n            i = mid + 1;\n        } else\
    \ {\n            j = mid - 1;\n        }\n    }\n    return ans == 1;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qa8tal6.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3qa8tal6.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp3qa8tal6.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp3qa8tal6.cpp:17:18:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |         if (l[mid] < l[mid + 1]) {\n      |                  ^\n/tmp/tmp3qa8tal6.cpp:17:31:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |         if (l[mid] < l[mid + 1]) {\n      |                         \
    \      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    long long ans = l[0];\n    for (int i = 1;\
    \ i < n; ++i) {\n        if (l[i] < ans) return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpofynqugp: /tmp/tmpofynqugp.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long curr = l[0];\n    long long prev = l[0];\n    for (long long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        if (l[i] > curr) {\n            ans = 1;\n        }\n    \
    \    prev = curr;\n        curr = l[i];\n    }\n    return ans == 1;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6xqqljyp: /tmp/tmp6xqqljyp.cpp:31: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long max = l[0];\n    long long min = l[0];\n    for (long long i :\
    \ l) {\n        if (i > max) {\n            ans = 1;\n            max = i;\n \
    \       } else if (i < min) {\n            ans = -1;\n            min = i;\n \
    \       } else {\n            ans = 0;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpef0qdlng: /tmp/tmpef0qdlng.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    for (long i = 0; i < n; ++i) {\n        long j = i + 1;\n\
    \        while (j < n && l[i] > l[j]) {\n            ++j;\n        }\n       \
    \ if (j - i > 1) {\n            ans = l[i] > l[j] ? l[i] : l[j];\n        }\n\
    \    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfs6a_8_e: /tmp/tmpfs6a_8_e.cpp:29: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long ans = 0;\n    long long l = l.size();\n    long long mid\
    \ = l / 2;\n    long long left = l-1;\n    long long right = mid;\n    long long\
    \ mid2 = mid-1;\n    long long mid3 = mid-2;\n    long long mid4 = mid-3;\n  \
    \  long long mid5 = mid-4;\n    long long mid6 = mid-5;\n    long long mid7 =\
    \ mid-6;\n    long long mid8 = mid-7;\n    long long mid9 = mid-8;\n    long long\
    \ mid10 = mid-9;\n    long long mid11 = mid-10;\n    long long mid12 = mid-11;\n\
    \    long long mid13 = mid-12;\n    long long mid14 = mid-13;\n    long long mid15\
    \ = mid-14;\n    long long mid16 = mid-15;\n    long long mid17 = mid-16;\n  \
    \  long long mid18 = mid-17;\n    long long mid19 = mid-18;\n    long long mid20\
    \ = mid-19;\n    long long mid21 = mid-20;\n    long long mid22 = mid-21;\n  \
    \  long long mid23 = mid-22;\n    long long mid24 = mid-23;\n    long long mid25\
    \ = mid-24;\n    long long mid26 = mid-25;\n    long long mid27 = mid-25;\n  \
    \  long long mid28 = mid-25;\n    long long mid29 = mid-25;\n    long long mid30\
    \ = mid-25;\n    long long mid31 = mid-25;\n    long long mid32 = mid-25;\n  \
    \  long long mid33 = mid-25;\n    long long mid34 = mid-25;\n    long long mid35\
    \ = mid-25;\n    long long mid36 = mid-25;\n    long long mid37 = mid-25;\n  \
    \  long long mid38 = mid-25;\n    long long mid39 = mid-25;\n    long long mid40\
    \ = mid-25;\n    long long mid41 = mid-25;\n    long long mid42 = mid-25;\n  \
    \  long long mid43 = mid-25;\n    long long mid44 = mid-25;\n    long long mid45\
    \ = mid-25;\n    long long mid46 = mid-25;\n    long long mid47 = mid-\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptjxl798i.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptjxl798i.cpp:13:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   13 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmptjxl798i.cpp:13:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   13 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmptjxl798i.cpp:63:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n \
    \     | ^\n/tmp/tmptjxl798i.cpp:63:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int ans\
    \ = 0, n = l.size();\n    for (long long int i = 0; i < n; i++) {\n        long\
    \ long int j = i;\n        while (j > 0 && l[j - 1] > l[j]) {\n            ans\
    \ = l[j - 1];\n            j--;\n        }\n        l[j] = ans;\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp385w23sj: /tmp/tmp385w23sj.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        else if (l[i] > ans)\n            ans = l[i];\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfwk6wp6x: /tmp/tmpfwk6wp6x.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long m = n - 1;\n    long long i = 0;\n\
    \    long long j = 0;\n    long long k = 0;\n    while (i < n) {\n        long\
    \ long x = l[i];\n        long long y = l[j];\n        long long z = l[k];\n \
    \       if (x > y) {\n            if (x > z) {\n                ans = 1;\n   \
    \             break;\n            } else {\n                ans = 0;\n       \
    \         break;\n            }\n        } else {\n            if (y > z) {\n\
    \                ans = -1;\n                break;\n            } else {\n   \
    \             ans = 0;\n                break;\n            }\n        }\n   \
    \     i++;\n        j++;\n        k++;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp88nabcru: /tmp/tmp88nabcru.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ n = l.size();\n    for(long i = 0; i < n; ++i) {\n        long j = i;\n    \
    \    while(j > 0 && l[j-1] > l[j]) {\n            ans = l[j-1];\n            j--;\n\
    \        }\n        l[j] = ans;\n    }\n    return ans == 0;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa7n8nwdi: /tmp/tmpa7n8nwdi.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2) return false;\n    long l1 = l[0], l2 = l[1], l3 = l[2], l4 =\
    \ l[3];\n    for (int i = 1; i < n; i++) {\n        if (l1 < l2) return false;\n\
    \        if (l2 < l3) return false;\n        if (l3 < l4) return false;\n    \
    \    l1 = l2;\n        l2 = l3;\n        l3 = l4;\n        l4 = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmph031z39e: /tmp/tmph031z39e.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans)\n        \
    \    return false;\n        if (l[i] > ans)\n            ans = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmptng8sphg: /tmp/tmptng8sphg.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int ans\
    \ = 0, n = l.size();\n    for(long long int i = 0; i < n; i++) {\n        if(l[i]\
    \ > l[i+1]) {\n            ans = 1;\n            break;\n        }\n    }\n  \
    \  return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4_ihiuvf: /tmp/tmp4_ihiuvf.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    long long j = n - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = 1;\n     \
    \       i++;\n        } else {\n            ans = -1;\n            j--;\n    \
    \    }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpd_cz9dhs: /tmp/tmpd_cz9dhs.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        long long cur = l[i];\n\
    \        long long prev = l[i - 1];\n        if (cur > prev) {\n            ans\
    \ = 1;\n            break;\n        }\n        if (cur < prev) {\n           \
    \ ans = -1;\n            break;\n        }\n    }\n    return ans == 0;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfbb2hoo7: /tmp/tmpfbb2hoo7.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ temp;\n    for (long i = 0; i < l.size(); i++) {\n        temp = ans;\n    \
    \    ans = l[i] - temp;\n        if (ans < 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp46mmneei: /tmp/tmp46mmneei.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long i = 0;\n    long long j = l - 1;\n\
    \    long long k = 0;\n    while (i < j) {\n        if (l[i] < l[j]) {\n     \
    \       ans = 1;\n            i = j;\n        } else {\n            ans = 0;\n\
    \            j = i;\n        }\n        i++;\n        j--;\n        k++;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq2ep8zsm.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq2ep8zsm.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpq2ep8zsm.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpq2ep8zsm.cpp:17:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |         if (l[i] < l[j]) {\n      |                ^\n/tmp/tmpq2ep8zsm.cpp:17:23:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |         if (l[i] < l[j]) {\n      |                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int ans\
    \ = 0;\n    for (long long int i : l) {\n        if (i > ans) {\n            ans\
    \ = i;\n        }\n    }\n    for (long long int i : l) {\n        if (i < ans)\
    \ {\n            ans = i;\n        }\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpefyogxgv: /tmp/tmpefyogxgv.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ l = l.size();\n    for(long i = 0; i < l; i++) {\n        if(l[i] > ans)\n \
    \           ans = l[i];\n    }\n    for(long i = l - 1; i >= 0; i--) {\n     \
    \   if(l[i] < ans)\n            ans = l[i];\n    }\n    return ans == 0;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplxw1ks3p.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplxw1ks3p.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmplxw1ks3p.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmplxw1ks3p.cpp:13:15: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n   13 |         if(l[i]\
    \ > ans)\n      |               ^\n/tmp/tmplxw1ks3p.cpp:14:22: error: invalid\
    \ types \u2018long long int[long int]\u2019 for array subscript\n   14 |     \
    \        ans = l[i];\n      |                      ^\n/tmp/tmplxw1ks3p.cpp:17:15:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   17 |         if(l[i] < ans)\n      |               ^\n/tmp/tmplxw1ks3p.cpp:18:22:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   18 |             ans = l[i];\n      |                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = l[0];\n\
    \    long long prev = l[0];\n    for (long long i : l) {\n        if (i > prev)\
    \ {\n            return false;\n        }\n        prev = i;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3na0zvpw: /tmp/tmp3na0zvpw.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long l = l.size();\n    long long i = 0;\n    long long j = l - 1;\n\
    \    long long k = l - 2;\n    long long l = l - 3;\n    long long m = l - 4;\n\
    \    long long n = l - 5;\n    long long o = l - 6;\n    long long p = l - 7;\n\
    \    long long q = l - 8;\n    long long r = l - 9;\n    long long s = l - 10;\n\
    \    long long t = l - 11;\n    long long u = l - 12;\n    long long v = l - 13;\n\
    \    long long w = l - 14;\n    long long x = l - 15;\n    long long y = l - 16;\n\
    \    long long z = l - 17;\n    long long a = l - 18;\n    long long b = l - 19;\n\
    \    long long c = l - 20;\n    long long d = l - 21;\n    long long e = l - 22;\n\
    \    long long f = l - 23;\n    long long g = l - 24;\n    long long h = l - 25;\n\
    \    long long i = l - 26;\n    long long j = l - 27;\n    long long k = l - 28;\n\
    \    long long l = l - 29;\n    long long m = l - 30;\n    long long n = l - 31;\n\
    \    long long o = l - 32;\n    long long p = l - 33;\n    long long q = l - 34;\n\
    \    long long r = l - 35;\n    long long s = l - 36;\n    long long t = l - 37;\n\
    \    long long u = l - 38;\n    long long v = l - 39;\n    long long w = l - 40;\n\
    \    long long x = l - 41;\n    long long y = l - 42;\n    long long z = l - 43;\n\
    \    long long a = l - 44;\n    long long b = l - 45;\n    long long c = l - 46;\n\
    \    long long d = l - 47;\n    long long e = l - 48;\n    long long f = l - 49;\n\
    \    long long g = l - 50;\n    long long h = l - 51;\n    long long i = l - 52;\n\
    \    long long j = l - 53;\n    long long k = l - 54;\n    long long l = l - 55;\n\
    \    long long m = l - 56;\n    long long n = l - 57;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmdu1bslj.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmdu1bslj.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpmdu1bslj.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpmdu1bslj.cpp:16:15:\
    \ error: redeclaration of \u2018long long int l\u2019\n   16 |     long long l\
    \ = l - 3;\n      |               ^\n/tmp/tmpmdu1bslj.cpp:12:15: note: \u2018\
    long long int l\u2019 previously declared here\n   12 |     long long l = l.size();\n\
    \      |               ^\n/tmp/tmpmdu1bslj.cpp:39:15: error: redeclaration of\
    \ \u2018long long int i\u2019\n   39 |     long long i = l - 26;\n      |    \
    \           ^\n/tmp/tmpmdu1bslj.cpp:13:15: note: \u2018long long int i\u2019 previously\
    \ declared here\n   13 |     long long i = 0;\n      |               ^\n/tmp/tmpmdu1bslj.cpp:40:15:\
    \ error: redeclaration of \u2018long long int j\u2019\n   40 |     long long j\
    \ = l - 27;\n      |               ^\n/tmp/tmpmdu1bslj.cpp:14:15: note: \u2018\
    long long int j\u2019 previously declared here\n   14 |     long long j = l -\
    \ 1;\n      |               ^\n/tmp/tmpmdu1bslj.cpp:41:15: error: redeclaration\
    \ of \u2018long long int k\u2019\n   41 |     long long k = l - 28;\n      | \
    \              ^\n/tmp/tmpmdu1bslj.cpp:15:15: note: \u2018long long int k\u2019\
    \ previously declared here\n   15 |     long long k = l - 2;\n      |        \
    \       ^\n/tmp/tmpmdu1bslj.cpp:42:15: error: redeclaration of \u2018long long\
    \ int l\u2019\n   42 |     long long l = l - 29;\n      |               ^\n/tmp/tmpmdu1bslj.cpp:12:15:\
    \ note: \u2018long long int l\u2019 previously declared here\n   12 |     long\
    \ long l = l.size();\n      |               ^\n/tmp/tmpmdu1bslj.cpp:43:15: error:\
    \ redeclaration of \u2018long long int m\u2019\n   43 |     long long m = l -\
    \ 30;\n      |               ^\n/tmp/tmpmdu1bslj.cpp:17:15: note: \u2018long long\
    \ int m\u2019 previously declared here\n   17 |     long long m = l - 4;\n   \
    \   |               ^\n/tmp/tmpmdu1bslj.cpp:44:15: error: redeclaration of \u2018\
    long long int n\u2019\n "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long i = 0;\n    long long j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] < l[j]) {\n            ans = 1;\n            i++;\n        }\
    \ else if (l[i] > l[j]) {\n            ans = -1;\n            j--;\n        }\
    \ else {\n            i++;\n            j--;\n        }\n    }\n    return ans\
    \ == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_cjz8n1d: /tmp/tmp_cjz8n1d.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            ans = 1;\n            break;\n        }\n        if (l[i] > l[i\
    \ - 1]) {\n            ans = -1;\n            break;\n        }\n    }\n    return\
    \ ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmprnmwv8n6: /tmp/tmprnmwv8n6.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
