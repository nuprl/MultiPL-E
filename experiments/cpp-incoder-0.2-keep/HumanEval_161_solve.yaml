name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// solve(\"\
  1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nstd::string\
  \ solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string ans = s;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n         \
    \   ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            ans[i] = s[i] - 32;\n        } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            ans[i] = s[i] + 32;\n        } else {\n\
    \            ans[i] = s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c == 'A') {\n   \
    \         ans = ans.replace(\"a\", \"A\");\n            ans = ans.replace(\"A\"\
    , \"a\");\n        }\n        else if (c == 'b' || c == 'B') {\n            ans\
    \ = ans.replace(\"b\", \"B\");\n            ans = ans.replace(\"B\", \"b\");\n\
    \        }\n        else if (c == 'c' || c == 'C') {\n            ans = ans.replace(\"\
    c\", \"C\");\n            ans = ans.replace(\"C\", \"c\");\n        }\n      \
    \  else if (c == 'd' || c == 'D') {\n            ans = ans.replace(\"d\", \"D\"\
    );\n            ans = ans.replace(\"D\", \"d\");\n        }\n        else if (c\
    \ == 'e' || c == 'E') {\n            ans = ans.replace(\"e\", \"E\");\n      \
    \      ans = ans.replace(\"E\", \"e\");\n        }\n        else if (c == 'f'\
    \ || c == 'F') {\n            ans = ans.replace(\"f\", \"F\");\n            ans\
    \ = ans.replace(\"F\", \"f\");\n        }\n        else if (c == 'g' || c == 'G')\
    \ {\n            ans = ans.replace(\"g\", \"G\");\n            ans = ans.replace(\"\
    G\", \"g\");\n        }\n        else if (c == 'h' || c == 'H') {\n          \
    \  ans = ans.replace(\"h\", \"H\");\n            ans = ans.replace(\"H\", \"h\"\
    );\n        }\n        else if (c == 'i' || c == 'I') {\n            ans = ans.replace(\"\
    i\", \"I\");\n            ans = ans.replace(\"I\", \"i\");\n        }\n      \
    \  else if (c == 'j' || c == 'J') {\n            ans = ans.replace(\"j\", \"J\"\
    );\n            ans = ans.replace(\"J\", \"j\");\n        }\n        else if (c\
    \ == 'k' || c == 'K') {\n            ans = ans.replace(\"k\", \"K\");\n      \
    \      ans = ans.replace(\"K\", \"k\");\n        }\n        else if (c == 'l'\
    \ || c == 'L') {\n            ans = ans.replace(\"l\", \"L\");\n            ans\
    \ = ans.replace(\"L\", \"l\");\n        }\n        else if (c == 'm' || c == 'M')\
    \ {\n            ans = ans.replace(\"m\", \"M\");\n            ans = ans.replace(\"\
    M\", \"m\");\n        }\n        else if (c == 'n' || c == 'N') {\n          \
    \  ans = ans.replace(\"n\", \"N\");\n            ans = ans.replace(\"N\", \"n\"\
    );\n        }\n        else if (c == 'o' || c == 'O') {\n            ans = ans.replace(\"\
    o\", \"O\");\n            ans = ans.replace(\"O\", \"o", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans\
    \ = ans.replace(c, toupper(c));\n        } else {\n            ans = ans.replace(c,\
    \ tolower(c));\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n  \
    \          ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n     \
    \       ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int i =\
    \ 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        } else {\n            ans = ans.substr(0, i) +\
    \ tolower(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n        }\n  \
    \  }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n\
    \            ans = ans.replace(c, toupper(c));\n        } else {\n           \
    \ ans = ans.replace(c, tolower(c));\n        }\n    }\n    return ans;", "   \
    \ std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans =\
    \ ans.replace(c, toupper(c));\n        } else {\n            ans = ans.replace(c,\
    \ tolower(c));\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n    \
    \        ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.length());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (auto &c: s) {\n        if (isalpha(c)) {\n            ans = ans.replace(c,\
    \ c == toupper(c) ? tolower(c) : toupper(c));\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length() - i - 1);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n    \
    \        res+=s[i];\n        }\n        else{\n            res+=s[i];\n      \
    \  }\n    }\n    return res;", "    std::string ans = s;\n    for (auto &i : s)\
    \ {\n        if (isalpha(i)) {\n            ans = ans.substr(0, ans.size()-1)\
    \ + toupper(i) + ans.substr(ans.size()-1);\n        } else {\n            ans\
    \ = ans.substr(0, ans.size()-1) + i;\n        }\n    }\n    return ans;", "  \
    \  std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n  \
    \      }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n            ans[i] = s[i] - 'a' + 'A';\n        } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            ans[i] = s[i] - 'A' + 'a';\n        }\
    \ else {\n            ans[i] = s[i];\n        }\n    }\n    return ans;", "  \
    \  std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    int n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            char c = toupper(s[i]);\n            s[i] = c;\n            c\
    \ = tolower(c);\n            s[i] = c;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(int i = 0; i < s.length(); i++) {\n     \
    \   if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else {\n\
    \            ans += s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans\
    \ = toupper(c) + ans;\n        } else {\n            ans = c + ans;\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n         \
    \   ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n       \
    \     res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (auto\
    \ &c: s) {\n        if (c == 'a' || c == 'A') {\n            ans = ans.replace(\"\
    A\",\"a\");\n            ans = ans.replace(\"a\",\"A\");\n        }\n        if\
    \ (c == 'b' || c == 'B') {\n            ans = ans.replace(\"B\",\"b\");\n    \
    \        ans = ans.replace(\"b\",\"B\");\n        }\n        if (c == 'c' || c\
    \ == 'C') {\n            ans = ans.replace(\"C\",\"c\");\n            ans = ans.replace(\"\
    c\",\"C\");\n        }\n        if (c == 'd' || c == 'D') {\n            ans =\
    \ ans.replace(\"D\",\"d\");\n            ans = ans.replace(\"d\",\"D\");\n   \
    \     }\n        if (c == 'e' || c == 'E') {\n            ans = ans.replace(\"\
    E\",\"e\");\n            ans = ans.replace(\"e\",\"E\");\n        }\n        if\
    \ (c == 'f' || c == 'F') {\n            ans = ans.replace(\"F\",\"f\");\n    \
    \        ans = ans.replace(\"f\",\"F\");\n        }\n        if (c == 'g' || c\
    \ == 'G') {\n            ans = ans.replace(\"G\",\"g\");\n            ans = ans.replace(\"\
    g\",\"G\");\n        }\n        if (c == 'h' || c == 'H') {\n            ans =\
    \ ans.replace(\"H\",\"h\");\n            ans = ans.replace(\"h\",\"H\");\n   \
    \     }\n        if (c == 'i' || c == 'I') {\n            ans = ans.replace(\"\
    I\",\"i\");\n            ans = ans.replace(\"i\",\"I\");\n        }\n        if\
    \ (c == 'j' || c == 'J') {\n            ans = ans.replace(\"J\",\"j\");\n    \
    \        ans = ans.replace(\"j\",\"J\");\n        }\n        if (c == 'k' || c\
    \ == 'K') {\n            ans = ans.replace(\"K\",\"k\");\n            ans = ans.replace(\"\
    k\",\"K\");\n        }\n        if (c == 'l' || c == 'L') {\n            ans =\
    \ ans.replace(\"L\",\"l\");\n            ans = ans.replace(\"l\",\"L\");\n   \
    \     }\n        if (c == 'm' || c == 'M') {\n            ans = ans.replace(\"\
    M\",\"m\");\n            ans = ans.replace(\"m\",\"M\");\n        }\n        if\
    \ (c == 'n' || c == 'N') {\n            ans = ans.replace(\"N\",\"n\");\n    \
    \        ans = ans.replace(\"n\",\"N\");\n        }\n        if (c == 'o' || c\
    \ == 'O') {\n            ans = ans.replace(\"O\",\"o\");\n            ans = ans.",
  "    std::string ans = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      \
    \  if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else {\n\
    \            ans += s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size()\
    \ - i);\n        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans\
    \ = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n   \
    \         ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n  \
    \      }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i =\
    \ 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=s[i];\n        }\n    \
    \    else if(s[i]>='A' && s[i]<='Z'){\n            res+=s[i];\n        }\n   \
    \     else{\n            res+=s[i];\n        }\n    }\n    return res;", "   \
    \ std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans[i] = toupper(s[i]);\n        } else {\n \
    \           ans[i] = s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c)) {\n        \
    \    ans = std::string(std::toupper(c), std::tolower(c));\n        } else {\n\
    \            ans = std::to_string(c);\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n     \
    \       ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for(char c : s) {\n        if(c>='a' && c<='z')\n\
    \            ans += std::toupper(c);\n        else if(c>='A' && c<='Z')\n    \
    \        ans += std::tolower(c);\n        else\n            ans += c;\n    }\n\
    \    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for (auto &i : s) {\n        if (i == 'a' || i\
    \ == 'A') {\n            ans += 'A';\n        } else if (i == 'b' || i == 'B')\
    \ {\n            ans += 'B';\n        } else if (i == 'c' || i == 'C') {\n   \
    \         ans += 'C';\n        } else if (i == 'd' || i == 'D') {\n          \
    \  ans += 'D';\n        } else if (i == 'e' || i == 'E') {\n            ans +=\
    \ 'E';\n        } else if (i == 'f' || i == 'F') {\n            ans += 'F';\n\
    \        } else if (i == 'g' || i == 'G') {\n            ans += 'G';\n       \
    \ } else if (i == 'h' || i == 'H') {\n            ans += 'H';\n        } else\
    \ if (i == 'i' || i == 'I') {\n            ans += 'I';\n        } else if (i ==\
    \ 'j' || i == 'J') {\n            ans += 'J';\n        } else if (i == 'k' ||\
    \ i == 'K') {\n            ans += 'K';\n        } else if (i == 'l' || i == 'L')\
    \ {\n            ans += 'L';\n        } else if (i == 'm' || i == 'M') {\n   \
    \         ans += 'M';\n        } else if (i == 'n' || i == 'N') {\n          \
    \  ans += 'N';\n        } else if (i == 'o' || i == 'O') {\n            ans +=\
    \ 'O';\n        } else if (i == 'p' || i == 'P') {\n            ans += 'P';\n\
    \        } else if (i == 'q' || i == 'Q') {\n            ans += 'Q';\n       \
    \ } else if (i == 'r' || i == 'R') {\n            ans += 'R';\n        } else\
    \ if (i == 's' || i == 'S') {\n            ans += 'S';\n        } else if (i ==\
    \ 't' || i == 'T') {\n            ans += 'T';\n        } else if (i == 'u' ||\
    \ i == 'U') {\n            ans += 'U';\n        } else if (i == 'v' || i == 'V')\
    \ {\n            ans += 'V';\n        } else if (i == 'w' || i == 'W') {\n   \
    \         ans += 'W';\n        } else if (i == 'x' || i == 'X') {\n          \
    \  ans += 'X';\n        } else if (i == 'y' || i == 'Y') {\n            ans +=\
    \ 'Y';\n        } else if (i == 'z' || i == 'Z') {\n            ans += 'Z';\n\
    \        } else {\n            ans += i;\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n  \
    \      }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans +=\
    \ toupper(s[i]);\n        } else {\n            ans += s[i];\n        }\n    }\n\
    \    return ans;", "    std::string ans = s;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length() - i);\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        } else\
    \ {\n            ans = ans.substr(0, i) + tolower(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &i : s) {\n        if (std::isalpha(i)) {\n            ans\
    \ = ans.replace(i,toupper(i),1);\n        } else {\n            ans = ans.replace(i,tolower(i),1);\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans\
    \ = ans.replace(c, toupper(c));\n        } else {\n            ans = ans.replace(c,\
    \ tolower(c));\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n  \
    \  for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n       \
    \     res+=toupper(s[i]);\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans =\
    \ s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans = toupper(c);\n\
    \        } else {\n            ans = tolower(c);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n\
    \            ans.replace(i, 2, tolower(s[i]));\n        } else {\n           \
    \ ans.replace(i, 1, s[i]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    int n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            char c = toupper(s[i]);\n            char d = tolower(s[i]);\n\
    \            char e = s[i];\n            s[i] = d;\n            s[i] = e;\n  \
    \      }\n    }\n    res.assign(s);\n    return res;", "    std::string ans =\
    \ s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans =\
    \ ans.replace(c, toupper(c));\n        } else {\n            ans = ans.replace(c,\
    \ tolower(c));\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A')\
    \ {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=toupper(s[i]);\n      \
    \  }\n        else if(s[i]>='A' && s[i]<='Z'){\n            res+=tolower(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string res;\n    int n = s.size();\n    for(int i = 0; i <\
    \ n; i++) {\n        if(isalpha(s[i])) {\n            if(i == 0) {\n         \
    \       res = toupper(s[i]);\n            }\n            else {\n            \
    \    res = tolower(s[i]);\n            }\n        }\n        else {\n        \
    \    res = s[i];\n        }\n    }\n    return res;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n  \
    \          ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            char c = toupper(s[i]);\n           \
    \ char d = tolower(s[i]);\n            s[i] = c;\n            s[i] = d;\n    \
    \    }\n    }\n    res.assign(s);\n    return res;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n    \
    \        ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.length());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i +\
    \ 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans =\
    \ s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n    \
    \        res+=s[i];\n        }\n        else{\n            res+=s[i];\n      \
    \  }\n    }\n    return res;", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans[i] = toupper(s[i]);\n        } else {\n            ans[i]\
    \ = s[i];\n        }\n    }\n    return ans;", "    std::string ans = s;\n   \
    \ for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n         \
    \   ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\
    \ else {\n            ans.replace(i, 1, s[i]);\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c : s) {\n        if (std::isalpha(c)) {\n            std::swap(ans[ans.size()-1],\
    \ ans[ans.size()-2]);\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>=65 && s[i]<=90){\n       \
    \     res+=s[i];\n        }\n        else if(s[i]>=97 && s[i]<=122){\n       \
    \     res+=s[i];\n        }\n        else{\n            res+=s[i];\n        }\n\
    \    }\n    return res;", "    std::string res;\n    int len = s.size();\n   \
    \ for(int i=0;i<len;i++){\n        if(isalpha(s[i])){\n            char c = toupper(s[i]);\n\
    \            s[i] = c;\n            char d = tolower(s[i]);\n            s[i]\
    \ = d;\n        }\n    }\n    res.assign(s);\n    return res;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c: ans) {\n        if (std::isalpha(c)) {\n           \
    \ std::swap(toupper(c), tolower(c));\n        }\n    }\n    return ans;", "  \
    \  std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(i == 0) {\n                res = toupper(s[i]);\n        \
    \    } else {\n                res = tolower(s[i]);\n            }\n        }\
    \ else {\n            res = s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            char\
    \ c = toupper(s[i]);\n            s[i] = c;\n            char d = tolower(s[i]);\n\
    \            s[i] = d;\n        }\n    }\n    res.assign(s);\n    return res;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n     \
    \       ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n\
    \            ans = ans.replace(i,toupper(i),1);\n            ans = ans.replace(i,tolower(i),1);\n\
    \        } else {\n            ans = ans.replace(i,i,1);\n        }\n    }\n \
    \   return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n  \
    \      if(s[i]>='a' && s[i]<='z'){\n            res+=s[i];\n        }\n      \
    \  else if(s[i]>='A' && s[i]<='Z'){\n            res+=s[i];\n        }\n     \
    \   else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans\
    \ = toupper(c) + ans;\n        } else {\n            ans = c + ans;\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size()\
    \ - i - 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n \
    \   for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A')\
    \ {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=s[i];\n        }\n    \
    \    else if(s[i]>='A' && s[i]<='Z'){\n            res+=s[i];\n        }\n   \
    \     else{\n            res+=s[i];\n        }\n    }\n    return res;", "   \
    \ std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        } else {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'A') {\n        \
    \    ans = ans.replace(\"a\", \"A\");\n            ans = ans.replace(\"A\", \"\
    a\");\n        }\n        if (c == 'b' || c == 'B') {\n            ans = ans.replace(\"\
    b\", \"B\");\n            ans = ans.replace(\"B\", \"b\");\n        }\n      \
    \  if (c == 'c' || c == 'C') {\n            ans = ans.replace(\"c\", \"C\");\n\
    \            ans = ans.replace(\"C\", \"c\");\n        }\n        if (c == 'd'\
    \ || c == 'D') {\n            ans = ans.replace(\"d\", \"D\");\n            ans\
    \ = ans.replace(\"D\", \"d\");\n        }\n        if (c == 'e' || c == 'E') {\n\
    \            ans = ans.replace(\"e\", \"E\");\n            ans = ans.replace(\"\
    E\", \"e\");\n        }\n        if (c == 'f' || c == 'F') {\n            ans\
    \ = ans.replace(\"f\", \"F\");\n            ans = ans.replace(\"F\", \"f\");\n\
    \        }\n        if (c == 'g' || c == 'G') {\n            ans = ans.replace(\"\
    g\", \"G\");\n            ans = ans.replace(\"G\", \"g\");\n        }\n      \
    \  if (c == 'h' || c == 'H') {\n            ans = ans.replace(\"h\", \"H\");\n\
    \            ans = ans.replace(\"H\", \"h\");\n        }\n        if (c == 'i'\
    \ || c == 'I') {\n            ans = ans.replace(\"i\", \"I\");\n            ans\
    \ = ans.replace(\"I\", \"i\");\n        }\n        if (c == 'j' || c == 'J') {\n\
    \            ans = ans.replace(\"j\", \"J\");\n            ans = ans.replace(\"\
    J\", \"j\");\n        }\n        if (c == 'k' || c == 'K') {\n            ans\
    \ = ans.replace(\"k\", \"K\");\n            ans = ans.replace(\"K\", \"k\");\n\
    \        }\n        if (c == 'l' || c == 'L') {\n            ans = ans.replace(\"\
    l\", \"L\");\n            ans = ans.replace(\"L\", \"l\");\n        }\n      \
    \  if (c == 'm' || c == 'M') {\n            ans = ans.replace(\"m\", \"M\");\n\
    \            ans = ans.replace(\"M\", \"m\");\n        }\n        if (c == 'n'\
    \ || c == 'N') {\n            ans = ans.replace(\"n\", \"N\");\n            ans\
    \ = ans.replace(\"N\", \"n\");\n        }\n        if (c == 'o' || c == 'O') {\n\
    \            ans = ans.replace(\"o\", \"O\");\n            ans = ans.replace(\"\
    O\", \"o\");", "    std::string ans = s;\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' &&\
    \ s[i]<='z'){\n            res+=s[i];\n        }\n        else if(s[i]>='A' &&\
    \ s[i]<='Z'){\n            res+=s[i];\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &c: s) {\n\
    \        if (std::isalpha(c)) {\n            ans = ans.replace(c, c == std::toupper(c)\
    \ ? std::tolower(c) : std::toupper(c));\n        } else {\n            ans = ans.replace(c,\
    \ c);\n        }\n    }\n    return ans;", "    std::string res;\n    for(int\
    \ i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c))\
    \ {\n            ans = ans.substr(0, ans.size() - 1) + std::toupper(ans.back())\
    \ + ans.substr(ans.size() - 1);\n        } else {\n            ans = ans.substr(0,\
    \ ans.size() - 1) + std::tolower(ans.back()) + ans.substr(ans.size() - 1);\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans +=\
    \ toupper(s[i]);\n        } else {\n            ans += s[i];\n        }\n    }\n\
    \    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c: s) {\n        if (c == 'a' || c ==\
    \ 'A') {\n            ans = ans.replace(\"A\",\"a\");\n            ans = ans.replace(\"\
    a\",\"A\");\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n   \
    \     }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n   \
    \         ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n  \
    \      }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto &c:\
    \ s) {\n        if (std::isalpha(c)) {\n            ans = std::string(std::toupper(c),\
    \ std::tolower(c));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c: ans) {\n        if (std::isalpha(c)) {\n           \
    \ std::swap(toupper(c), toupper(std::tolower(c)));\n        } else {\n       \
    \     c = std::tolower(c);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c)) {\n        \
    \    ans = std::toupper(ans);\n            ans = std::tolower(ans);\n        }\
    \ else {\n            ans = c;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n  \
    \      }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=s[i];\n        }\n    \
    \    else if(s[i]>='A' && s[i]<='Z'){\n            res+=s[i];\n        }\n   \
    \     else{\n            res+=s[i];\n        }\n    }\n    return res;", "   \
    \ std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &c : s) {\n\
    \        if (std::isalpha(c)) {\n            ans = ans.replace(c, std::toupper(c));\n\
    \        } else {\n            ans = ans.replace(c, std::tolower(c));\n      \
    \  }\n    }\n    return ans;", "    std::string ans = s;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n\
    \            res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res+=s[i];\n        }\n        else{\n            res+=s[i];\n  \
    \      }\n    }\n    return res;", "    std::string ans = s;\n    for(int i =\
    \ 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=toupper(s[i]);\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n       \
    \     res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (auto\
    \ &c: ans) {\n        if (isalpha(c)) {\n            std::swap(toupper(c), tolower(c));\n\
    \        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
