name: HumanEval_44_change_base
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpmj1j10z5: /tmp/tmpmj1j10z5.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp5ztvyrfa: /tmp/tmp5ztvyrfa.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpoi3jbny6: /tmp/tmpoi3jbny6.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long rem = x % base;\n    std::string ans = \"\";\n   \
    \ while (x > 0) {\n        ans += (char)(x % base);\n        x /= base;\n    }\n\
    \    if (rem != 0) {\n        ans += (char)(rem % base);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpp24sasle: /tmp/tmpp24sasle.cpp:26: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpuqq9480h: /tmp/tmpuqq9480h.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpg7owefoj: /tmp/tmpg7owefoj.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long tmp = x;\n    std::string ans = \"\";\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvzxr55ot: /tmp/tmpvzxr55ot.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpfv8y4icz: /tmp/tmpfv8y4icz.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    temp = x;\n\
    \    while (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmppmocsbva: /tmp/tmppmocsbva.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpjhi9cino: /tmp/tmpjhi9cino.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    temp =\
    \ x;\n    while (temp != 0) {\n        ans += (temp % base);\n        temp /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp45ib2n1g: /tmp/tmp45ib2n1g.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwjnqdvyo: /tmp/tmpwjnqdvyo.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += digit;\n        n /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmph0hp8n0i: /tmp/tmph0hp8n0i.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpo60w15xz: /tmp/tmpo60w15xz.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans = std::to_string(digit) + ans;\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpcy1aq67h: /tmp/tmpcy1aq67h.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x != 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (char)(temp % base);\n        temp /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp0_wuo92t: /tmp/tmp0_wuo92t.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ rem = x % base;\n        ans = std::to_string(rem) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp5vmxv1_c: /tmp/tmp5vmxv1_c.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long res = 0;\n    while (x > 0) {\n        res += x %\
    \ base;\n        x /= base;\n    }\n    return std::to_string(res);\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdvyud3xh: /tmp/tmpdvyud3xh.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp54nmrzem: /tmp/tmp54nmrzem.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp8u1ish_n: /tmp/tmp8u1ish_n.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpx4z9y0hg: /tmp/tmpx4z9y0hg.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpp9dhoml0: /tmp/tmpp9dhoml0.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpbviamung: /tmp/tmpbviamung.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (char)(temp % base);\n        temp /= base;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n \
    \   assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp4mv_v311: /tmp/tmp4mv_v311.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2mj7434z: /tmp/tmp2mj7434z.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_gyjm_sy: /tmp/tmp_gyjm_sy.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    while (x >\
    \ 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp55dg325b: /tmp/tmp55dg325b.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        long\
    \ r = x % base;\n        ans += (char) (r + '0');\n        x /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpib6eei1x: /tmp/tmpib6eei1x.cpp:24: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmphvj10gl5: /tmp/tmphvj10gl5.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans += (char) (r + '0');\n      \
    \  n /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpudt6wsef: /tmp/tmpudt6wsef.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpj9e71u1q: /tmp/tmpj9e71u1q.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpkl8ou621: /tmp/tmpkl8ou621.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + 48);\n        n\
    \ = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp5suaj_e1: /tmp/tmp5suaj_e1.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp9cniy5lb: /tmp/tmp9cniy5lb.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpyolgt4gd: /tmp/tmpyolgt4gd.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp6djqllw_: /tmp/tmp6djqllw_.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdt2qfiri: /tmp/tmpdt2qfiri.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpaw1h9czk: /tmp/tmpaw1h9czk.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpf0ztxn72: /tmp/tmpf0ztxn72.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ != 0) {\n        rem = rem / base;\n        ans = std::to_string(rem) + ans;\n\
    \        x = x % base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpnvp4cu0f: /tmp/tmpnvp4cu0f.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpr91lhfim: /tmp/tmpr91lhfim.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ rem = x % base;\n        ans = std::to_string(base) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpl596ramc: /tmp/tmpl596ramc.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpn4mxlghz: /tmp/tmpn4mxlghz.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans += std::to_string(temp);\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvquwmlx8: /tmp/tmpvquwmlx8.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp;\n    temp = x;\n    std::string ans;\n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp6om45beo: /tmp/tmp6om45beo.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpi85m21qc: /tmp/tmpi85m21qc.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    long mod\
    \ = x;\n    while (mod != 0) {\n        temp = mod % base;\n        ans = std::to_string(temp)\
    \ + ans;\n        mod = mod / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += digit;\n        n /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpzzbj3014: /tmp/tmpzzbj3014.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpj0xlwe6v: /tmp/tmpj0xlwe6v.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpn1y8k516: /tmp/tmpn1y8k516.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpoznqhk6w: /tmp/tmpoznqhk6w.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmphipb8g5h: /tmp/tmphipb8g5h.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += (char)(digit + '0');\n\
    \        n /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp61g4zkt2: /tmp/tmp61g4zkt2.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ > 0) {\n        rem = rem % base;\n        ans = std::to_string(rem) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2020ll5n: /tmp/tmp2020ll5n.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpxbhfvpkk: /tmp/tmpxbhfvpkk.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwwzpkbuq: /tmp/tmpwwzpkbuq.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2xfzpuw6: /tmp/tmp2xfzpuw6.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    while (x !=\
    \ 0) {\n        temp = x % base;\n        ans += std::to_string(temp);\n     \
    \   x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpsob7dakb: /tmp/tmpsob7dakb.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpg0nkftil: /tmp/tmpg0nkftil.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdd5d_c2a: /tmp/tmpdd5d_c2a.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    long limit\
    \ = pow(base, base);\n    while (temp < x) {\n        temp = temp * base + limit;\n\
    \        ans = std::to_string(temp) + ans;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpza89cqj2: /tmp/tmpza89cqj2.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpo01_suny: /tmp/tmpo01_suny.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpl837jull: /tmp/tmpl837jull.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans += std::to_string(digit);\n        x /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpkykiqy3j: /tmp/tmpkykiqy3j.cpp:24: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long rem = x % base;\n    std::string ans = \"\";\n   \
    \ while (x > 0) {\n        ans = std::to_string(x / base) + ans;\n        x -=\
    \ rem * base;\n        rem = x % base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpeqfa1lo6: /tmp/tmpeqfa1lo6.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpkjky0ph9: /tmp/tmpkjky0ph9.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        long rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string res;\n    while (x > 0) {\n        res.push_back((x\
    \ % base) + '0');\n        x /= base;\n    }\n    res.push_back((x % base) + '0');\n\
    \    return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpi9x75fsm: /tmp/tmpi9x75fsm.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmppva1u78g: /tmp/tmppva1u78g.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ int rem = x % base;\n        ans = std::to_string(base) + ans;\n        x =\
    \ x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdc6k190j: /tmp/tmpdc6k190j.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        long\
    \ r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmph6_u0v5z: /tmp/tmph6_u0v5z.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long n = x;\n    std::string ans = \"\";\n    while (n\
    \ > 0) {\n        ans = std::to_string(n % base) + ans;\n        n = n / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmprvu8v3hh: /tmp/tmprvu8v3hh.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        ans += n % base;\n        n /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpo9ucstg7: /tmp/tmpo9ucstg7.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp8ga9d30e: /tmp/tmp8ga9d30e.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpx1i30m_z: /tmp/tmpx1i30m_z.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwxp7fs_t: /tmp/tmpwxp7fs_t.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    while (base < 0) {\n        tmp = tmp *\
    \ base;\n        ans = std::to_string(tmp % base) + ans;\n        base++;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n  \
    \  assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp8li9juk6: /tmp/tmp8li9juk6.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp8mm49tds: /tmp/tmp8mm49tds.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpextmx3gu: /tmp/tmpextmx3gu.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long tmp = x;\n    std::string ans = \"\";\n    while (base)\
    \ {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpll438q9w: /tmp/tmpll438q9w.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp6bp9juxe: /tmp/tmp6bp9juxe.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans += std::to_string(base);\n\
    \        temp = temp / base;\n        ans += std::to_string(rem);\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpklx84i2_: /tmp/tmpklx84i2_.cpp:25: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpc6cap2ji: /tmp/tmpc6cap2ji.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp67f48x1k: /tmp/tmp67f48x1k.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp48iz49cy: /tmp/tmp48iz49cy.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long res = 0;\n    while (x > 0) {\n        res *= base;\n\
    \        res += x % base;\n        x /= base;\n    }\n    return std::to_string(res);\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpo9pe7xxn: /tmp/tmpo9pe7xxn.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ int r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpshl8hftk: /tmp/tmpshl8hftk.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp82rjrjex: /tmp/tmp82rjrjex.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpol1i7kus: /tmp/tmpol1i7kus.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + 48);\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp3bt2ju28: /tmp/tmp3bt2ju28.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpc6qmkt_s: /tmp/tmpc6qmkt_s.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    temp =\
    \ x;\n    while (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpu_jcsf4_: /tmp/tmpu_jcsf4_.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdsodtf5x: /tmp/tmpdsodtf5x.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += digit;\n        n /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpkgtkw3lg: /tmp/tmpkgtkw3lg.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans = std::to_string(digit) + ans;\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_wrlt82v: /tmp/tmp_wrlt82v.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvoy0ib9y: /tmp/tmpvoy0ib9y.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ != 0) {\n        rem = rem / base;\n        ans = std::to_string(rem) + ans;\n\
    \        x = x % base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpx6a84s__: /tmp/tmpx6a84s__.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp3use2wi_: /tmp/tmp3use2wi_.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp1gcmf3bg: /tmp/tmp1gcmf3bg.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long tmp = x;\n    std::string ans = \"\";\n    while (tmp\
    \ > 0) {\n        int rem = tmp % base;\n        ans = std::to_string(rem) + ans;\n\
    \        tmp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpoho6yl6d: /tmp/tmpoho6yl6d.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2jowbnnp: /tmp/tmp2jowbnnp.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base = base * 10;\n    }\n    ans = std::to_string(tmp) + ans;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvz7a5kfw: /tmp/tmpvz7a5kfw.cpp:25: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    temp = x;\n\
    \    while (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpua89sidl: /tmp/tmpua89sidl.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string res;\n    long temp;\n    temp = x;\n    while\
    \ (temp != 0) {\n        res += (temp % base);\n        temp /= base;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp7qzpr_bp: /tmp/tmp7qzpr_bp.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmph48mvvt0: /tmp/tmph48mvvt0.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpf24e10ya: /tmp/tmpf24e10ya.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        long\
    \ r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp8u5_lctq: /tmp/tmp8u5_lctq.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmphb_gokd6: /tmp/tmphb_gokd6.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    while (base < 0) {\n        tmp = tmp *\
    \ base;\n        ans = std::to_string(tmp % base) + ans;\n        base++;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n  \
    \  assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpx6bhnl84: /tmp/tmpx6bhnl84.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpz649hl3z: /tmp/tmpz649hl3z.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpklbmlju2: /tmp/tmpklbmlju2.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpr0xy_ed4: /tmp/tmpr0xy_ed4.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans += digit;\n        x /= base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpv3rgab1z: /tmp/tmpv3rgab1z.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ int r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpty8apkq0: /tmp/tmpty8apkq0.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    while (base < 0) {\n        tmp = tmp *\
    \ base;\n        ans = std::to_string(tmp % base) + ans;\n        base++;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n  \
    \  assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp31ghgpwz: /tmp/tmp31ghgpwz.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base = base * 10;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpz0fopgqd: /tmp/tmpz0fopgqd.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    temp =\
    \ x;\n    while (temp != 0) {\n        ans += (temp % base);\n        temp /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpil1ge5h4: /tmp/tmpil1ge5h4.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long rem = x % base;\n    std::string ans = \"\";\n   \
    \ while (x > 0) {\n        ans += (char)(x % base);\n        x /= base;\n    }\n\
    \    if (rem != 0) {\n        ans += (char)(rem + base);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpamykhz9m: /tmp/tmpamykhz9m.cpp:26: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x / base) + ans;\n        x %= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpx4s7cit7: /tmp/tmpx4s7cit7.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmptstwytir: /tmp/tmptstwytir.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (char)(temp % base);\n        temp /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2b7dc7kl: /tmp/tmp2b7dc7kl.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpgh6ff4ip: /tmp/tmpgh6ff4ip.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpbclf4ubm: /tmp/tmpbclf4ubm.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpi9korlvu: /tmp/tmpi9korlvu.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        ans += n % base;\n        n /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_rd5m_nk: /tmp/tmp_rd5m_nk.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpz3spkw78: /tmp/tmpz3spkw78.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans += (char)(rem + '0');\n\
    \        temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvcgylomf: /tmp/tmpvcgylomf.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmph4hhht2t: /tmp/tmph4hhht2t.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpatwd0lbt: /tmp/tmpatwd0lbt.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpqhuectgg: /tmp/tmpqhuectgg.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long res = 0;\n    while (x > 0) {\n        res += x %\
    \ base;\n        x /= base;\n    }\n    return std::to_string(res);\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpa38w66ed: /tmp/tmpa38w66ed.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        long rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ != 0) {\n        rem = rem / base;\n        ans = std::to_string(rem) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpbh2ci6i4: /tmp/tmpbh2ci6i4.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n / base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n % base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmplpz3lo8h: /tmp/tmplpz3lo8h.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpsg7ua67k: /tmp/tmpsg7ua67k.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp3_4qanya: /tmp/tmp3_4qanya.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        long rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpp3r5ae_r: /tmp/tmpp3r5ae_r.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp9r5bvxsi: /tmp/tmp9r5bvxsi.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
