name: HumanEval_34_unique
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ryrfm0t: /tmp/tmp5ryrfm0t.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp3cnojgw1: /tmp/tmp3cnojgw1.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7mqrvr42: /tmp/tmp7mqrvr42.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzr6eefs5: /tmp/tmpzr6eefs5.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn2ykpkjw: /tmp/tmpn2ykpkjw.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || u[it - l.begin()] == *it) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp7046lhkm: /tmp/tmp7046lhkm.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq3qmgs2o.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq3qmgs2o.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvk0jeye.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmvk0jeye.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmptzgnp2h0: /tmp/tmptzgnp2h0.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        for(long j = i + 1; j < l.size(); j++)\n            if(l[i] == l[j])\n\
    \                u.push_back(l[i]);\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpsqv0urej: /tmp/tmpsqv0urej.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l.at(i) == l.at(i + 1)) {\n            u.push_back(l.at(i));\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::set_difference(l.begin(), l.end(),\
    \ u.begin(), u.end(), std::less<long>());\n    return u;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptdyx0n4t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018_OutputIterator std::__set_difference(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _InputIterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _OutputIterator = std::less<long int>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5390:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::less<long int>]\u2019\n/tmp/tmptdyx0n4t.cpp:9:82:   required\
    \ from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5333:6:\
    \ error: no match for \u2018operator*\u2019 (operand type is \u2018std::less<long\
    \ int>\u2019)\n 5333 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptdyx0n4t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  387 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp7dvm9v_.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpp7dvm9v_.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu5sreod0.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu5sreod0.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4fomovgj: /tmp/tmp4fomovgj.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        bool found = false;\n        for(long j = 0; j < u.size(); j++) {\n\
    \            if(l[i] == u[j]) {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7ic_kt14: /tmp/tmp7ic_kt14.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(), u.end());\n\
    \    u.erase(std::unique(u.begin(), u.end()), u.end());\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjj_dhnva: /tmp/tmpjj_dhnva.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] != l[i - 1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmputz5kl2y: /tmp/tmputz5kl2y.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuov8ix0k: /tmp/tmpuov8ix0k.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] != l[i-1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3h3gm7do: /tmp/tmp3h3gm7do.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjs8cu53k.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjs8cu53k.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != l[i - 1])\n            u.push_back(l[i]);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp32p4gimj: /tmp/tmp32p4gimj.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpqapwjynu: /tmp/tmpqapwjynu.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        if(!u.empty()\
    \ && u[i-1] != i)\n            u.push_back(i);\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp29qjejq1: /tmp/tmp29qjejq1.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l.at(i) == l.at(i+1)) {\n            u.pop_back();\n        }\n\
    \        else {\n            u.push_back(l.at(i));\n        }\n    }\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpedq_ovnn.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpedq_ovnn.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] != l[i - 1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0_yt0gvo: /tmp/tmp0_yt0gvo.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpnl12nioy: /tmp/tmpnl12nioy.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp_rdef3ei: /tmp/tmp_rdef3ei.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpriidt2rs.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpriidt2rs.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        while(u.size() <= i && l[i] == l[u.size()]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpymm8t7p_: /tmp/tmpymm8t7p_.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp84u9zc1y: /tmp/tmp84u9zc1y.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpj6hn2mne: /tmp/tmpj6hn2mne.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        bool found = false;\n        for(long j = 0; j < u.size(); j++) {\n\
    \            if(l[i] == u[j]) {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.empty()\
    \ || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ap_4jdv: /tmp/tmp8ap_4jdv.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsd97nxkt: /tmp/tmpsd97nxkt.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8kgc0nt1: /tmp/tmp8kgc0nt1.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiz6eu8iw: /tmp/tmpiz6eu8iw.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7j5e2hlk: /tmp/tmp7j5e2hlk.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr2cswrzw: /tmp/tmpr2cswrzw.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpu6xauj80: /tmp/tmpu6xauj80.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        if(!u.empty()\
    \ && u[i-1] == i)\n            u.erase(u.begin()+i);\n        else\n         \
    \   u.push_back(i);\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it)\n        if(std::find(u.begin(), u.end(), *it) == u.end())\n         \
    \   u.push_back(*it);\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6v_tqpxd.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6v_tqpxd.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpcbhmhlr6: /tmp/tmpcbhmhlr6.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        if(u.size()\
    \ == 0 || u[u.size()-1] != i) {\n            u.push_back(i);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || it != u.end() && it->first == u[u.size()-1].first)\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8x7ub1qr.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8x7ub1qr.cpp:10:46: error: request for member \u2018first\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   10\
    \ |         if(u.empty() || it != u.end() && it->first == u[u.size()-1].first)\
    \ {\n      |                                              ^~~~~\n/tmp/tmp8x7ub1qr.cpp:10:69:\
    \ error: request for member \u2018first\u2019 in \u2018u.std::vector<long int>::operator[]((u.std::vector<long\
    \ int>::size() - 1))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   10 |      \
    \   if(u.empty() || it != u.end() && it->first == u[u.size()-1].first) {\n   \
    \   |                                                                     ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2r8jvqji: /tmp/tmp2r8jvqji.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(), u.end());\n\
    \    u.erase(std::unique(u.begin(), u.end()), u.end());\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg0v8db6v: /tmp/tmpg0v8db6v.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l.at(i) == l.at(i + 1)) {\n            u.push_back(l.at(i));\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpvrj6qhzx: /tmp/tmpvrj6qhzx.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdpjnzs9c: /tmp/tmpdpjnzs9c.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcos3uq3p: /tmp/tmpcos3uq3p.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvmul7jcd: /tmp/tmpvmul7jcd.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != l[i - 1])\n            u.push_back(l[i]);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6xy02kyg: /tmp/tmp6xy02kyg.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(), u.end());\n\
    \    u.erase(std::unique(u.begin(), u.end()), u.end());\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcjxku9sz: /tmp/tmpcjxku9sz.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) continue;\n        u.push_back(l[i]);\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_964odwo: /tmp/tmp_964odwo.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i == u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd4gq0p3l: /tmp/tmpd4gq0p3l.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpno7pqup6: /tmp/tmpno7pqup6.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ibbc1ka: /tmp/tmp5ibbc1ka.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxoqfg_5n: /tmp/tmpxoqfg_5n.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        while(u.size() <= i && l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i - 1]) continue;\n        u.push_back(l[i]);\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgwtdmdfn: /tmp/tmpgwtdmdfn.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_l8mm_gv: /tmp/tmp_l8mm_gv.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmplfydnoi8: /tmp/tmplfydnoi8.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdgqjdz3x: /tmp/tmpdgqjdz3x.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it)\n        if(*it == *std::find(u.begin(), u.end(), *it))\n            u.push_back(*it);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i == u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmphzbky4nx: /tmp/tmphzbky4nx.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.empty()\
    \ || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu0jqpmq2: /tmp/tmpu0jqpmq2.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpq8_mr0y6: /tmp/tmpq8_mr0y6.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcdvbf1re: /tmp/tmpcdvbf1re.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmptubwjmzs: /tmp/tmptubwjmzs.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpugv5elm7.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpugv5elm7.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpptctuvw8: /tmp/tmpptctuvw8.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmps_57r4wp: /tmp/tmps_57r4wp.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.find(i)\
    \ == u.end())\n            u.push_back(i);\n    return u;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdmv1on33.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdmv1on33.cpp:10:15: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   10 |         if (u.find(i)\
    \ == u.end())\n      |               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqiiazrdt: /tmp/tmpqiiazrdt.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp7d7k_n66: /tmp/tmp7d7k_n66.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpezbdjeq7: /tmp/tmpezbdjeq7.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9knvajfl: /tmp/tmp9knvajfl.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1xax0rfk: /tmp/tmp1xax0rfk.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp0ow8awb3: /tmp/tmp0ow8awb3.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmprqv3jn51: /tmp/tmprqv3jn51.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_1z4zye8: /tmp/tmp_1z4zye8.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_ixo7kvi: /tmp/tmp_ixo7kvi.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu770mqf8: /tmp/tmpu770mqf8.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj67wi48e: /tmp/tmpj67wi48e.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4uw64j6: /tmp/tmpf4uw64j6.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp097_ghi0.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp097_ghi0.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_vmk5dl.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv_vmk5dl.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l.at(i) == l.at(i + 1)) {\n            u.resize(u.size() + 1);\n\
    \            u.at(u.size() - 1) = l.at(i);\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0u92smn7.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0u92smn7.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpwu_gi6ws: /tmp/tmpwu_gi6ws.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpah2xpp10: /tmp/tmpah2xpp10.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl1wxsh40: /tmp/tmpl1wxsh40.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpislt5rp_: /tmp/tmpislt5rp_.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoh65kvhz: /tmp/tmpoh65kvhz.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpj4pv3740: /tmp/tmpj4pv3740.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpckhvam_8: /tmp/tmpckhvam_8.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::set_difference(l.begin(), l.end(),\
    \ u.begin(), u.end(), std::less<long>());\n    return u;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprnmhahtm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018_OutputIterator std::__set_difference(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _InputIterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _OutputIterator = std::less<long int>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5390:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::less<long int>]\u2019\n/tmp/tmprnmhahtm.cpp:9:82:   required\
    \ from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5333:6:\
    \ error: no match for \u2018operator*\u2019 (operand type is \u2018std::less<long\
    \ int>\u2019)\n 5333 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprnmhahtm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  387 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpy58k91zj: /tmp/tmpy58k91zj.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpe8fizd7r: /tmp/tmpe8fizd7r.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzawo1cd7.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzawo1cd7.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp8xd7bjtv: /tmp/tmp8xd7bjtv.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.empty()\
    \ || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnia2rvp7: /tmp/tmpnia2rvp7.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3vb0tgls: /tmp/tmp3vb0tgls.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp5bmd26gk: /tmp/tmp5bmd26gk.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr8ndgwbj: /tmp/tmpr8ndgwbj.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyiz1nasy: /tmp/tmpyiz1nasy.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu7z0fn89: /tmp/tmpu7z0fn89.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg83k93bn: /tmp/tmpg83k93bn.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv4s3vnkt.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv4s3vnkt.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqr3hnp7u: /tmp/tmpqr3hnp7u.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnj07ljrx: /tmp/tmpnj07ljrx.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp47nz7o0t: /tmp/tmp47nz7o0t.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp23elqsxt: /tmp/tmp23elqsxt.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp34m23dmw: /tmp/tmp34m23dmw.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd4n_3zz1: /tmp/tmpd4n_3zz1.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpusolnhbx: /tmp/tmpusolnhbx.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfnhy27cy: /tmp/tmpfnhy27cy.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsnxv528r: /tmp/tmpsnxv528r.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjjopzeai: /tmp/tmpjjopzeai.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcld8yx03: /tmp/tmpcld8yx03.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpglzs5pfe.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpglzs5pfe.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp84jid36q: /tmp/tmp84jid36q.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp7oa9g9a0: /tmp/tmp7oa9g9a0.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpadawgc54.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpadawgc54.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa2rimqw3: /tmp/tmpa2rimqw3.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpxug3my_b: /tmp/tmpxug3my_b.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmps0nolygd: /tmp/tmps0nolygd.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx19itmqz: /tmp/tmpx19itmqz.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.empty()\
    \ || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7vg79y45: /tmp/tmp7vg79y45.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpui0uxkps: /tmp/tmpui0uxkps.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmptc107fmu: /tmp/tmptc107fmu.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpci1umozf: /tmp/tmpci1umozf.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeldrka99: /tmp/tmpeldrka99.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_zc6s83b: /tmp/tmp_zc6s83b.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it)\n        if(*it != *std::find(u.begin(), u.end(), *it))\n            u.push_back(*it);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpls0phx37: /tmp/tmpls0phx37.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
