name: HumanEval_34_unique
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0o7n9lvb: /tmp/tmp0o7n9lvb.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpee2sj7jc: /tmp/tmpee2sj7jc.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgg8bvs7p: /tmp/tmpgg8bvs7p.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdm0xzi3x: /tmp/tmpdm0xzi3x.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpar6vpolp: /tmp/tmpar6vpolp.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || u[it - l.begin()] == *it) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpd7g7z1m8: /tmp/tmpd7g7z1m8.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpruivf_92.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpruivf_92.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy4m1igbn.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy4m1igbn.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa6monlts: /tmp/tmpa6monlts.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        for(long j = i + 1; j < l.size(); j++)\n            if(l[i] == l[j])\n\
    \                u.push_back(l[i]);\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpotfw4b8e: /tmp/tmpotfw4b8e.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l.at(i) == l.at(i + 1)) {\n            u.push_back(l.at(i));\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::set_difference(l.begin(), l.end(),\
    \ u.begin(), u.end(), std::less<long>());\n    return u;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = std::less<long int>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n\
    /usr/include/c++/9/bits/stl_algo.h:5435:46:   required from \u2018_OIter std::set_difference(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _OIter = std::less<long int>]\u2019\n/tmp/tmpvrm1513i.cpp:9:82:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:5378:6: error: no match\
    \ for \u2018operator*\u2019 (operand type is \u2018std::less<long int>\u2019)\n\
    \ 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/complex:400:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/complex:409:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  409 |     operator*(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:409:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n 5378 |      *__result = *__first1;\n   \
    \   |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  407\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n 5378 |      *__result = *__first1;\n   \
    \   |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*,\
    \ __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n 5378 |      *__result = *__first1;\n   \
    \   |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/valarray:1187:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__multiplies,\
    \ _Tp>::result_type> std::operator*(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1187 | _DEFINE_BINARY_OPERATOR(*, __multiplies)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1187:1: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/valarray:1187:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__multiplies,\
    \ _Tp>::result_type> std::operator*(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1187 | _DEFINE_BINARY_OPERATOR(*, __multiplies)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1187:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/valarray:1187:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__multiplies,\
    \ _Tp>::result_type> std::operator*(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1187 | _DEFINE_BINARY_OPERATOR(*, __multiplies)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1187:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrm1513i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5380:6:\
    \ error: no match for \u2018operator++\u2019 (operand type is \u2018std::less<long\
    \ int>\u2019)\n 5380 |      ++__result;\n      |      ^~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpirt_zpvn.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpirt_zpvn.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj2xkecqa.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj2xkecqa.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5s7uz3p7: /tmp/tmp5s7uz3p7.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        bool found = false;\n        for(long j = 0; j < u.size(); j++) {\n\
    \            if(l[i] == u[j]) {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmppw2oltms: /tmp/tmppw2oltms.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(), u.end());\n\
    \    u.erase(std::unique(u.begin(), u.end()), u.end());\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0afoqwea: /tmp/tmp0afoqwea.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] != l[i - 1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1gmk7paa: /tmp/tmp1gmk7paa.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdewvr_f8: /tmp/tmpdewvr_f8.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] != l[i-1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy1q4uv8b: /tmp/tmpy1q4uv8b.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzoisrb2.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphzoisrb2.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != l[i - 1])\n            u.push_back(l[i]);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7h9mh8di: /tmp/tmp7h9mh8di.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpytrdvlb0: /tmp/tmpytrdvlb0.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        if(!u.empty()\
    \ && u[i-1] != i)\n            u.push_back(i);\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpobfxulsu: /tmp/tmpobfxulsu.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l.at(i) == l.at(i+1)) {\n            u.pop_back();\n        }\n\
    \        else {\n            u.push_back(l.at(i));\n        }\n    }\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzl1zxiw_.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzl1zxiw_.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] != l[i - 1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw75e8zs9: /tmp/tmpw75e8zs9.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmplcb91r22: /tmp/tmplcb91r22.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpa44wrq_e: /tmp/tmpa44wrq_e.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd6crijks.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd6crijks.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        while(u.size() <= i && l[i] == l[u.size()]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpavchgxl3: /tmp/tmpavchgxl3.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp3sdsxl02: /tmp/tmp3sdsxl02.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpd1gmhe9p: /tmp/tmpd1gmhe9p.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        bool found = false;\n        for(long j = 0; j < u.size(); j++) {\n\
    \            if(l[i] == u[j]) {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.empty()\
    \ || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt9lcwr_t: /tmp/tmpt9lcwr_t.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpezcogpml: /tmp/tmpezcogpml.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp_zb8a_m: /tmp/tmpp_zb8a_m.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfdd8tz_y: /tmp/tmpfdd8tz_y.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaeulsvq5: /tmp/tmpaeulsvq5.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp13e_8wsh: /tmp/tmp13e_8wsh.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpqcg70a3e: /tmp/tmpqcg70a3e.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        if(!u.empty()\
    \ && u[i-1] == i)\n            u.erase(u.begin()+i);\n        else\n         \
    \   u.push_back(i);\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it)\n        if(std::find(u.begin(), u.end(), *it) == u.end())\n         \
    \   u.push_back(*it);\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwmvo5if4.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwmvo5if4.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpqefxe71w: /tmp/tmpqefxe71w.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        if(u.size()\
    \ == 0 || u[u.size()-1] != i) {\n            u.push_back(i);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || it != u.end() && it->first == u[u.size()-1].first)\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpbomprit7.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbomprit7.cpp:10:46: error: request for member \u2018first\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   10\
    \ |         if(u.empty() || it != u.end() && it->first == u[u.size()-1].first)\
    \ {\n      |                                              ^~~~~\n/tmp/tmpbomprit7.cpp:10:69:\
    \ error: request for member \u2018first\u2019 in \u2018u.std::vector<long int>::operator[]((u.std::vector<long\
    \ int>::size() - 1))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   10 |      \
    \   if(u.empty() || it != u.end() && it->first == u[u.size()-1].first) {\n   \
    \   |                                                                     ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5kk8xr7p: /tmp/tmp5kk8xr7p.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(), u.end());\n\
    \    u.erase(std::unique(u.begin(), u.end()), u.end());\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8kq6d0qu: /tmp/tmp8kq6d0qu.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l.at(i) == l.at(i + 1)) {\n            u.push_back(l.at(i));\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpn52451mt: /tmp/tmpn52451mt.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqkspu8nk: /tmp/tmpqkspu8nk.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfdt1quu8: /tmp/tmpfdt1quu8.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmppu1reoex: /tmp/tmppu1reoex.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != l[i - 1])\n            u.push_back(l[i]);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeux9ovvi: /tmp/tmpeux9ovvi.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(), u.end());\n\
    \    u.erase(std::unique(u.begin(), u.end()), u.end());\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpla8catuu: /tmp/tmpla8catuu.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) continue;\n        u.push_back(l[i]);\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp58di0ij9: /tmp/tmp58di0ij9.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i == u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmptgwf2_01: /tmp/tmptgwf2_01.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpur9699ux: /tmp/tmpur9699ux.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp078socpi: /tmp/tmp078socpi.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsbt49mo1: /tmp/tmpsbt49mo1.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        while(u.size() <= i && l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i - 1]) continue;\n        u.push_back(l[i]);\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmc96d43l: /tmp/tmpmc96d43l.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn41eckr4: /tmp/tmpn41eckr4.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl4idrhqe: /tmp/tmpl4idrhqe.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmppkpajpc9: /tmp/tmppkpajpc9.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it)\n        if(*it == *std::find(u.begin(), u.end(), *it))\n            u.push_back(*it);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i == u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmppdxdjr8k: /tmp/tmppdxdjr8k.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.empty()\
    \ || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp34hqjybj: /tmp/tmp34hqjybj.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpfkwrijbj: /tmp/tmpfkwrijbj.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmppgwkmw57: /tmp/tmppgwkmw57.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoi5yz8ny: /tmp/tmpoi5yz8ny.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt5951ern.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpt5951ern.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpurtgvbz_: /tmp/tmpurtgvbz_.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp71a72d3s: /tmp/tmp71a72d3s.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.find(i)\
    \ == u.end())\n            u.push_back(i);\n    return u;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqjmx8u8v.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqjmx8u8v.cpp:10:15: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   10 |         if (u.find(i)\
    \ == u.end())\n      |               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjbd8f6w0: /tmp/tmpjbd8f6w0.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpxs3a8k_t: /tmp/tmpxs3a8k_t.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvfz8i9s9: /tmp/tmpvfz8i9s9.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpexbf2mui: /tmp/tmpexbf2mui.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl4fawn9b: /tmp/tmpl4fawn9b.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpqzt_jgfu: /tmp/tmpqzt_jgfu.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa54qaolz: /tmp/tmpa54qaolz.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpobgc5wtp: /tmp/tmpobgc5wtp.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmphx4wc6ox: /tmp/tmphx4wc6ox.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ricp9co: /tmp/tmp9ricp9co.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9791vkoq: /tmp/tmp9791vkoq.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj7wvw8me: /tmp/tmpj7wvw8me.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdj1gx0g.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsdj1gx0g.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4zyv1sa8.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4zyv1sa8.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l.at(i) == l.at(i + 1)) {\n            u.resize(u.size() + 1);\n\
    \            u.at(u.size() - 1) = l.at(i);\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpblvmriq0.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpblvmriq0.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpq7spf55m: /tmp/tmpq7spf55m.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgoslxfo3: /tmp/tmpgoslxfo3.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnug7u1bu: /tmp/tmpnug7u1bu.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpugs3t4zc: /tmp/tmpugs3t4zc.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3u9zjgze: /tmp/tmp3u9zjgze.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpqs1vu76v: /tmp/tmpqs1vu76v.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdpthcgbq: /tmp/tmpdpthcgbq.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::set_difference(l.begin(), l.end(),\
    \ u.begin(), u.end(), std::less<long>());\n    return u;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = std::less<long int>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n\
    /usr/include/c++/9/bits/stl_algo.h:5435:46:   required from \u2018_OIter std::set_difference(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _OIter = std::less<long int>]\u2019\n/tmp/tmpyw15t38h.cpp:9:82:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:5378:6: error: no match\
    \ for \u2018operator*\u2019 (operand type is \u2018std::less<long int>\u2019)\n\
    \ 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/complex:400:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/complex:409:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  409 |     operator*(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:409:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n 5378 |      *__result = *__first1;\n   \
    \   |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  407\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n 5378 |      *__result = *__first1;\n   \
    \   |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*,\
    \ __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n 5378 |      *__result = *__first1;\n   \
    \   |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:407:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__multiplies,\
    \ typename _Dom1::value_type>::result_type> std::operator*(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  407 |     _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:407:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/valarray:1187:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__multiplies,\
    \ _Tp>::result_type> std::operator*(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1187 | _DEFINE_BINARY_OPERATOR(*, __multiplies)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1187:1: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/valarray:1187:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__multiplies,\
    \ _Tp>::result_type> std::operator*(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1187 | _DEFINE_BINARY_OPERATOR(*, __multiplies)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1187:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/valarray:1187:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__multiplies,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__multiplies,\
    \ _Tp>::result_type> std::operator*(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1187 | _DEFINE_BINARY_OPERATOR(*, __multiplies)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1187:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyw15t38h.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   candidate expects 2 arguments, 1 provided\n 5378 |      *__result =\
    \ *__first1;\n      |      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5380:6:\
    \ error: no match for \u2018operator++\u2019 (operand type is \u2018std::less<long\
    \ int>\u2019)\n 5380 |      ++__result;\n      |      ^~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmppqjwwhr7: /tmp/tmppqjwwhr7.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpwggtysz4: /tmp/tmpwggtysz4.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpupqs191e.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpupqs191e.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpmpve58ak: /tmp/tmpmpve58ak.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.empty()\
    \ || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl5xkr_9h: /tmp/tmpl5xkr_9h.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu0y6t3cg: /tmp/tmpu0y6t3cg.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpgr7uofkt: /tmp/tmpgr7uofkt.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc24inys_: /tmp/tmpc24inys_.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0ioq_w5a: /tmp/tmp0ioq_w5a.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3yi3u7ry: /tmp/tmp3yi3u7ry.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpefyz7c0m: /tmp/tmpefyz7c0m.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplfeaougm.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplfeaougm.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp31bdhpvb: /tmp/tmp31bdhpvb.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw84c4wjr: /tmp/tmpw84c4wjr.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpatbm25dx: /tmp/tmpatbm25dx.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqsf9iib9: /tmp/tmpqsf9iib9.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp71lil60z: /tmp/tmp71lil60z.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6izp5mli: /tmp/tmp6izp5mli.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpxs98gbok: /tmp/tmpxs98gbok.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_4ugpa0h: /tmp/tmp_4ugpa0h.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm1xx0eo9: /tmp/tmpm1xx0eo9.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5vdvext0: /tmp/tmp5vdvext0.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgmk4ul7c: /tmp/tmpgmk4ul7c.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrz0ziuo.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprrz0ziuo.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb7cwyurp: /tmp/tmpb7cwyurp.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpeukq4qus: /tmp/tmpeukq4qus.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxnrqg41s.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxnrqg41s.cpp:10:40: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   10 |         if(u.empty()\
    \ || *it != *u.back()) {\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4ayyy2gn: /tmp/tmp4ayyy2gn.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmpnrgaw0_y: /tmp/tmpnrgaw0_y.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdeyozbsy: /tmp/tmpdeyozbsy.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6qd2xs3_: /tmp/tmp6qd2xs3_.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.empty()\
    \ || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9hl2lmv3: /tmp/tmp9hl2lmv3.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmppdcv7yep: /tmp/tmppdcv7yep.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjb2e43az: /tmp/tmpjb2e43az.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  stdout: ''
  stderr: "tmp_ff2om4e: /tmp/tmp_ff2om4e.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcw9vy_z6: /tmp/tmpcw9vy_z6.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmf_hz02f: /tmp/tmpmf_hz02f.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it)\n        if(*it != *std::find(u.begin(), u.end(), *it))\n            u.push_back(*it);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  stdout: ''
  stderr: "tmphykgl6vd: /tmp/tmphykgl6vd.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))' failed.\n"
  exit_code: -6
  status: Exception
