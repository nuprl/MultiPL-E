name: HumanEval_69_search
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    long i = 0;\n    for (auto it : lst) {\n        freq[i++]\
    \ = it;\n    }\n    for (long j = 0; j < i; j++) {\n        if (freq[j] >= ans)\
    \ {\n            ans = freq[j];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpelyc2ug5: /tmp/tmpelyc2ug5.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqiha2igh: /tmp/tmpqiha2igh.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsdk5yjdt: /tmp/tmpsdk5yjdt.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans =\
    \ freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfwuufz_4: /tmp/tmpfwuufz_4.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i : lst) {\n        if (i\
    \ > maxVal) {\n            maxVal = i;\n            maxFreq = i;\n        } else\
    \ if (i == maxVal) {\n            maxFreq++;\n        }\n    }\n    return maxVal\
    \ >= 0 ? maxVal : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdgz8mfb7: /tmp/tmpdgz8mfb7.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i : lst) {\n        if (freq\
    \ >= i) {\n            freq = i;\n            maxVal = i;\n        }\n    }\n\
    \    return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0c1_ihg2: /tmp/tmp0c1_ihg2.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[1000];\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i\
    \ < 1000; i++) {\n        if (freq[i] >= lst.size()) {\n            break;\n \
    \       }\n        if (freq[i] > ans) {\n            ans = freq[i];\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsnj3d17y: /tmp/tmpsnj3d17y.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyuro9zga: /tmp/tmpyuro9zga.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for(long i = 0; i < lst.size(); i++) {\n  \
    \      if(lst[i] > maxVal) {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    if(maxFreq >= 0) {\n        for(long i = 0; i <\
    \ lst.size(); i++) {\n            if(lst[i] == maxVal) {\n                if(lst[i]\
    \ > maxFreq) {\n                    maxFreq = lst[i];\n                }\n   \
    \         }\n        }\n    }\n    return maxVal;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp804xr5_y: /tmp/tmp804xr5_y.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 10000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpt3pxoa2w: /tmp/tmpt3pxoa2w.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpg1t98ml2: /tmp/tmpg1t98ml2.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[100] = {0};\n    for (long i :\
    \ lst) {\n        freq[i] = freq[i] + 1;\n    }\n    for (long i : lst) {\n  \
    \      if (freq[i] > 0 && freq[i] >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpaa_azdr9: /tmp/tmpaa_azdr9.cpp:44: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] == maxVal) {\n            maxCount++;\n            if (maxCount\
    \ >= lst[i]) {\n                return maxVal;\n            }\n        }\n   \
    \     else {\n            maxVal = lst[i];\n            maxCount = 1;\n      \
    \  }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4rvfxyih: /tmp/tmp4rvfxyih.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq++;\n        if(freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp21asmatt: /tmp/tmp21asmatt.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpp6pg_077: /tmp/tmpp6pg_077.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpcjc9ioo1: /tmp/tmpcjc9ioo1.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   freq[i] = freq[i] - 1;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy4s5dnpk: /tmp/tmpy4s5dnpk.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++){\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++){\n        if(freq[i] >= lst.size()){\n\
    \            return -1;\n        }\n        if(freq[i] > 0){\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppxst0i79: /tmp/tmppxst0i79.cpp:31: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_tfe6k5c: /tmp/tmp_tfe6k5c.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpak24zv3f: /tmp/tmpak24zv3f.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppn642_o4: /tmp/tmppn642_o4.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_978p9qt: /tmp/tmp_978p9qt.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long max = 0;\n    long freq = 0;\n    for(long i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > 0){\n            freq++;\n            if(lst[i] == max){\n\
    \                freq++;\n            }\n            if(lst[i] > max){\n     \
    \           max = lst[i];\n            }\n        }\n    }\n    return freq >\
    \ max ? freq : max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7lp0it4n: /tmp/tmp7lp0it4n.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvdgodbpv: /tmp/tmpvdgodbpv.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq > maxVal) {\n        return -1;\n    } else {\n\
    \        return maxVal;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpp41tm6mt: /tmp/tmpp41tm6mt.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    long i = 0;\n    for(auto &x: lst) {\n        freq[x]\
    \ = freq[x] + 1;\n    }\n    for(i = 0; i < 1000; i++) {\n        if(freq[i] >=\
    \ lst[0]) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpm00r8pyl: /tmp/tmpm00r8pyl.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmtyaq8d9: /tmp/tmpmtyaq8d9.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i : lst) {\n        if (freq\
    \ > i) {\n            freq = i;\n            maxVal = i;\n        }\n    }\n \
    \   return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpysunb730: /tmp/tmpysunb730.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiod8otz7: /tmp/tmpiod8otz7.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8mti7ucx: /tmp/tmp8mti7ucx.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_rjnxvz_: /tmp/tmp_rjnxvz_.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_wslbtg4: /tmp/tmp_wslbtg4.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5cwyww00: /tmp/tmp5cwyww00.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu20pd5xg: /tmp/tmpu20pd5xg.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000] = {0};\n    for (long i : lst) {\n        freq[i]++;\n\
    \    }\n    for (long i = 1; i < 100000; i++) {\n        if (freq[i] > freq[i\
    \ - 1]) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpn0qytyb0: /tmp/tmpn0qytyb0.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 1; i < 10000; i++) {\n        if (freq[i] > freq[i -\
    \ 1]) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvgubil11: /tmp/tmpvgubil11.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6a4fnmkt: /tmp/tmp6a4fnmkt.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpcxwi9ipr: /tmp/tmpcxwi9ipr.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0rm4r8d3: /tmp/tmp0rm4r8d3.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2uwcunlp: /tmp/tmp2uwcunlp.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq > lst[0]) {\n        return -1;\n    } else {\n\
    \        return maxVal;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb9phm3wc: /tmp/tmpb9phm3wc.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpke5z1w82: /tmp/tmpke5z1w82.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8_021ekv: /tmp/tmp8_021ekv.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprkbnwy99: /tmp/tmprkbnwy99.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpg8efo8qm: /tmp/tmpg8efo8qm.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpm_tdexe6: /tmp/tmpm_tdexe6.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsfa8wwf4: /tmp/tmpsfa8wwf4.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] > ans) {\n \
    \           ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdf3flnam: /tmp/tmpdf3flnam.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100000];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i < 100000; i++)\
    \ {\n        if (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpde1yvbdo: /tmp/tmpde1yvbdo.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 1000; i++) {\n        if (freq[i] >= lst[0])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1x3j33jj: /tmp/tmp1x3j33jj.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppc6nbmg3: /tmp/tmppc6nbmg3.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i = 0; i < lst.size(); i++) {\n       \
    \ freq[lst[i]]++;\n    }\n    for (long i = 0; i < 100001; i++) {\n        if\
    \ (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp68j_6f0u: /tmp/tmp68j_6f0u.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i < 100; i++) {\n\
    \        if (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzc4qsk3t: /tmp/tmpzc4qsk3t.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100000];\n    for (long i : lst) {\n      \
    \  freq[i] = freq[i] + 1;\n    }\n    for (long i : lst) {\n        if (freq[i]\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9sxhufkq: /tmp/tmp9sxhufkq.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_9_5sjui: /tmp/tmp_9_5sjui.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplwcv8gbt: /tmp/tmplwcv8gbt.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdri2o9al: /tmp/tmpdri2o9al.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            break;\n        }\n        ans = i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf7tjm2my: /tmp/tmpf7tjm2my.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpq4ytdpar: /tmp/tmpq4ytdpar.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for(long i = 0; i < lst.size(); i++){\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 10000; i++){\n        if(freq[i] >= lst.size()){\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe7xk2l5a: /tmp/tmpe7xk2l5a.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1, maxFreq = -1;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ > maxVal) {\n            maxVal = lst[i];\n            maxFreq = i;\n      \
    \  }\n    }\n    return maxFreq;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_v0o76v5: /tmp/tmp_v0o76v5.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpo6pkjs9x: /tmp/tmpo6pkjs9x.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8ny92alq: /tmp/tmp8ny92alq.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppakhjbge: /tmp/tmppakhjbge.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpykmw9xxb: /tmp/tmpykmw9xxb.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpv9rfti5g: /tmp/tmpv9rfti5g.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvbqmpnnv: /tmp/tmpvbqmpnnv.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] > maxVal) {\n            maxVal = lst[i];\n            maxFreq\
    \ = lst[i];\n        } else if (lst[i] == maxVal) {\n            maxFreq++;\n\
    \        }\n    }\n    return maxFreq > maxVal ? maxVal : -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy39ot43f: /tmp/tmpy39ot43f.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsxud1z0k: /tmp/tmpsxud1z0k.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpt35yxcy8: /tmp/tmpt35yxcy8.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqun02at6: /tmp/tmpqun02at6.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjpt_euvl: /tmp/tmpjpt_euvl.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpg08_emav: /tmp/tmpg08_emav.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[100000];\n    for (long i : lst)\
    \ {\n        freq[i] = freq[i] + 1;\n    }\n    for (long i : lst) {\n       \
    \ if (freq[i] >= i) {\n            ans = i;\n            break;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpktygsdhj: /tmp/tmpktygsdhj.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphes3t8_8: /tmp/tmphes3t8_8.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprumrfsd1: /tmp/tmprumrfsd1.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpg2wkth3b: /tmp/tmpg2wkth3b.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for (long i : lst) {\n        if (i > maxVal)\
    \ {\n            maxVal = i;\n            maxCount = 1;\n        } else if (i\
    \ == maxVal) {\n            maxCount++;\n        }\n    }\n    if (maxCount >=\
    \ maxVal) {\n        return maxVal;\n    } else {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8fwd8a8h: /tmp/tmp8fwd8a8h.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0g2cuxgg: /tmp/tmp0g2cuxgg.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvsrqzw1g: /tmp/tmpvsrqzw1g.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmploakc3y4: /tmp/tmploakc3y4.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans =\
    \ freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa1_vep57: /tmp/tmpa1_vep57.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp35cuz5me: /tmp/tmp35cuz5me.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp30rcfd2r: /tmp/tmp30rcfd2r.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[10000];\n    for (long i : lst) {\n       \
    \ freq[i] = freq[i] + 1;\n    }\n    for (long i = 0; i < 10000; i++) {\n    \
    \    if (freq[i] >= lst[0]) {\n            ans = i;\n            break;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe1bvvrof: /tmp/tmpe1bvvrof.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpym0m1mvj: /tmp/tmpym0m1mvj.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq > maxVal) {\n        return -1;\n    } else {\n\
    \        return maxVal;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmmhzyx7e: /tmp/tmpmmhzyx7e.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    long currVal = lst[0];\n    long currFreq =\
    \ lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] > currVal)\
    \ {\n            currVal = lst[i];\n            currFreq = lst[i];\n        }\
    \ else if (lst[i] == currVal) {\n            currFreq++;\n        }\n        if\
    \ (currFreq > maxFreq) {\n            maxFreq = currFreq;\n            maxVal\
    \ = currVal;\n        }\n    }\n    return maxVal;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjhrnc9xp: /tmp/tmpjhrnc9xp.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu_ob3psf: /tmp/tmpu_ob3psf.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnyk6wayh: /tmp/tmpnyk6wayh.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp722pb81v: /tmp/tmp722pb81v.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n        \
    \    ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbnmsnsl8: /tmp/tmpbnmsnsl8.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n        if (freq >= i) {\n            ans = i;\n        \
    \    break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7qqiasut: /tmp/tmp7qqiasut.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 1000; i++) {\n        if (freq[i] >= lst[0])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmva2cawg: /tmp/tmpmva2cawg.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n    }\n    if (freq > 0) {\n        long max = 0;\n     \
    \   for (long i : lst) {\n            if (freq > i) {\n                freq -=\
    \ i;\n                max = i;\n            }\n        }\n        if (max > 0)\
    \ {\n            ans = max;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwl0u25sj: /tmp/tmpwl0u25sj.cpp:34: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    long maxFreq = -1;\n    for(long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for(long i = 0; i < 100; i++) {\n\
    \        if(freq[i] > maxFreq) {\n            maxFreq = freq[i];\n           \
    \ ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjtx5u9k6: /tmp/tmpjtx5u9k6.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n        if (freq > ans) {\n            ans = freq;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpg9_9dt6z: /tmp/tmpg9_9dt6z.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgxsuen0c: /tmp/tmpgxsuen0c.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i = 0; i < 100000; i++) {\n        if (freq[i] > 0\
    \ && freq[i] >= lst[0]) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1j5kgl46: /tmp/tmp1j5kgl46.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n        \
    \    ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpr4fumqn7: /tmp/tmpr4fumqn7.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk1d1qdg7: /tmp/tmpk1d1qdg7.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7owqy0v0: /tmp/tmp7owqy0v0.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ > 0 && freq >= lst[i]) {\n            freq = freq - lst[i];\n            ans\
    \ = lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwzki0eb7: /tmp/tmpwzki0eb7.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpti_8r561: /tmp/tmpti_8r561.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq++;\n\
    \        if (freq > i) {\n            freq = i;\n            ans = i;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2u475__l: /tmp/tmp2u475__l.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpc0n754mq: /tmp/tmpc0n754mq.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2avij0v6: /tmp/tmp2avij0v6.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpn47eionu: /tmp/tmpn47eionu.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpcnnofu40: /tmp/tmpcnnofu40.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp97nwjzws: /tmp/tmp97nwjzws.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1, freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq >\
    \ maxVal) {\n            maxVal = freq;\n        }\n    }\n    if (maxVal >= 0)\
    \ {\n        return maxVal;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7j4zk0ez: /tmp/tmp7j4zk0ez.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpek3u0fg0: /tmp/tmpek3u0fg0.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4ecmlg6c: /tmp/tmp4ecmlg6c.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5iojo3kt: /tmp/tmp5iojo3kt.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            return -1;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (freq[lst[i]] >= lst.size()) {\n            ans = lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpikateeqp: /tmp/tmpikateeqp.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptxbttc8_: /tmp/tmptxbttc8_.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpug3bk2lj: /tmp/tmpug3bk2lj.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmh48dmjk: /tmp/tmpmh48dmjk.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpunfq_qhc: /tmp/tmpunfq_qhc.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq++;\n        if(freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkkh86m_1: /tmp/tmpkkh86m_1.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq++;\n        if(freq\
    \ >= i) {\n            freq -= i;\n            ans = i;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnnu_bmqd: /tmp/tmpnnu_bmqd.cpp:32: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long maxVal = lst[0];\n    long freq = lst[0];\n    for (long i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        } else if (lst[i] == maxVal) {\n        \
    \    freq++;\n        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n\
    \    } else {\n        return maxVal;\n    }\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe8opqwjs: /tmp/tmpe8opqwjs.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans =\
    \ freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7guad8tn: /tmp/tmp7guad8tn.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbhru7hdm: /tmp/tmpbhru7hdm.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i = 1; i < 100; i++) {\n        if (freq[i] >= i) {\n     \
    \       ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpty8_l9sc: /tmp/tmpty8_l9sc.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmg6ptcaj: /tmp/tmpmg6ptcaj.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5ho1910h: /tmp/tmp5ho1910h.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkcusui3y: /tmp/tmpkcusui3y.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for(long i : lst) {\n        freq\
    \ += i;\n        if(freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfhbrzton: /tmp/tmpfhbrzton.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            freq[i]\
    \ = freq[i] - 1;\n            ans = i;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp20n8toan: /tmp/tmp20n8toan.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq = freq + i;\n     \
    \   if(freq >= i) {\n            ans = i;\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwaky9fsq: /tmp/tmpwaky9fsq.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3tpp6agr: /tmp/tmp3tpp6agr.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsmj3e327: /tmp/tmpsmj3e327.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6xs0o4v7: /tmp/tmp6xs0o4v7.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppmq1_p0t: /tmp/tmppmq1_p0t.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5gxzmp3q: /tmp/tmp5gxzmp3q.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 1000; i++) {\n        if (freq[i] >= lst[0])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf3utuu2v: /tmp/tmpf3utuu2v.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq++;\n\
    \        if (freq >= i) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgmk4pk7w: /tmp/tmpgmk4pk7w.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpulkpc3ix: /tmp/tmpulkpc3ix.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy6ienv8j: /tmp/tmpy6ienv8j.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            break;\n        }\n        if (freq[i] >= lst.size()) {\n   \
    \         ans = i;\n            break;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7mpe9gn4: /tmp/tmp7mpe9gn4.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n    \
    \        ans = i;\n            break;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpm_hxbdk3: /tmp/tmpm_hxbdk3.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppb50uufj: /tmp/tmppb50uufj.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsbeetgqc: /tmp/tmpsbeetgqc.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i = 1; i < 100; i++) {\n        if (freq[i] > freq[i - 1])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpv8_v6vl9: /tmp/tmpv8_v6vl9.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpg7cvznw3: /tmp/tmpg7cvznw3.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    long maxFreq = -1;\n    for (long i : lst) {\n  \
    \      freq[i] = freq[i] + 1;\n        if (freq[i] > maxFreq) {\n            maxFreq\
    \ = freq[i];\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpln7cud0b: /tmp/tmpln7cud0b.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0au30d8m: /tmp/tmp0au30d8m.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu4uk8fxh: /tmp/tmpu4uk8fxh.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i : lst) {\n        if (i\
    \ > maxVal) {\n            maxVal = i;\n            maxFreq = i;\n        } else\
    \ if (i == maxVal) {\n            maxFreq++;\n        }\n    }\n    return maxFreq\
    \ > lst.size() ? -1 : maxVal;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwd_jkdel: /tmp/tmpwd_jkdel.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i = 0; i < lst.size(); i++) {\n       \
    \ freq[lst[i]]++;\n    }\n    for (long i = 1; i <= 100000; i++) {\n        if\
    \ (freq[i] >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuinv8pyp: /tmp/tmpuinv8pyp.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpybf204tm: /tmp/tmpybf204tm.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7uder2p1: /tmp/tmp7uder2p1.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            break;\n        }\n        if(freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvpuahu91: /tmp/tmpvpuahu91.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpducx9w_2: /tmp/tmpducx9w_2.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpcaolk5rw: /tmp/tmpcaolk5rw.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqj6nnion: /tmp/tmpqj6nnion.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] > ans) {\n \
    \           ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9mtsry7z: /tmp/tmp9mtsry7z.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[1000];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i < 1000; i++)\
    \ {\n        if (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqr06419b: /tmp/tmpqr06419b.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100000];\n    long max = 0;\n    for (long\
    \ i : lst) {\n        freq[i] = freq[i] + 1;\n        if (freq[i] > max) {\n \
    \           max = freq[i];\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpi486e75_: /tmp/tmpi486e75_.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < lst.size(); i++) {\n        if(freq[lst[i]] >=\
    \ lst[i]) {\n            ans = lst[i];\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuauyx365: /tmp/tmpuauyx365.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5rhl73nf: /tmp/tmp5rhl73nf.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst[0]) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpggbjyk1a: /tmp/tmpggbjyk1a.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8tkzrd5m: /tmp/tmp8tkzrd5m.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[1000];\n    for(long i = 0; i <\
    \ lst.size(); i++){\n        freq[lst[i]]++;\n    }\n    for(long i = 0; i < 1000;\
    \ i++){\n        if(freq[i] > 0){\n            if(freq[i] >= ans){\n         \
    \       ans = freq[i];\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprw891rii: /tmp/tmprw891rii.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdz87ferd: /tmp/tmpdz87ferd.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 1; i < 1000; i++) {\n        if(freq[i] >= freq[ans])\
    \ {\n            ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpl2cuc8fm: /tmp/tmpl2cuc8fm.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst[0]) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfcqpdtnj: /tmp/tmpfcqpdtnj.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long &i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for(long &i : freq) {\n        if(freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -7
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5xduyn6j: /tmp/tmp5xduyn6j.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpizpethjw: /tmp/tmpizpethjw.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_wc8ltc3: /tmp/tmp_wc8ltc3.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] > maxVal) {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxVal;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpoyb4s5or: /tmp/tmpoyb4s5or.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 10000; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpi115crb8: /tmp/tmpi115crb8.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfy24hr09: /tmp/tmpfy24hr09.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfxx2lz5y: /tmp/tmpfxx2lz5y.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[100];\n    long maxFreq = -1;\n\
    \    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n        if (freq[i]\
    \ > maxFreq) {\n            maxFreq = freq[i];\n            ans = i;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9k36x9cw: /tmp/tmp9k36x9cw.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n        \
    \    ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpo656n8el: /tmp/tmpo656n8el.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9etnuttc: /tmp/tmp9etnuttc.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq = freq + i;\n     \
    \   if(freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsoirpyd8: /tmp/tmpsoirpyd8.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpug1qicbl: /tmp/tmpug1qicbl.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpo2xeycfx: /tmp/tmpo2xeycfx.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpra4y46c8: /tmp/tmpra4y46c8.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq++;\n\
    \        if (freq >= i) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7wzxwu3l: /tmp/tmp7wzxwu3l.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for(long i : lst) {\n        if(freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdlys3mow: /tmp/tmpdlys3mow.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb1092hdf: /tmp/tmpb1092hdf.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpql0i5_gs: /tmp/tmpql0i5_gs.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgu159k8m: /tmp/tmpgu159k8m.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7rvnnzcf: /tmp/tmp7rvnnzcf.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp94o9ibdv: /tmp/tmp94o9ibdv.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppcwa7olj: /tmp/tmppcwa7olj.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n        if (freq > ans) {\n            ans = freq;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp89iguynk: /tmp/tmp89iguynk.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst[0]) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7ossurv4: /tmp/tmp7ossurv4.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for (long i : lst) {\n        if (maxVal <\
    \ 0 || maxVal > i) {\n            maxVal = i;\n            maxFreq = i;\n    \
    \    } else if (maxFreq < i) {\n            maxFreq = i;\n        }\n    }\n \
    \   return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3r9t9tle: /tmp/tmp3r9t9tle.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i : lst) {\n        if (freq\
    \ > i) {\n            freq = i;\n            maxVal = i;\n        }\n    }\n \
    \   return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnnvrndih: /tmp/tmpnnvrndih.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpolylf0iq: /tmp/tmpolylf0iq.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmproe91852: /tmp/tmproe91852.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  maxFreq = lst[i];\n        } else if (lst[i] == maxVal) {\n            maxFreq++;\n\
    \        }\n    }\n    if (maxFreq >= maxVal) {\n        return maxVal;\n    }\
    \ else {\n        return -1;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy5_0uqml: /tmp/tmpy5_0uqml.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxzkcr9iv: /tmp/tmpxzkcr9iv.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  maxFreq = lst[i];\n        } else if (lst[i] == maxVal) {\n            maxFreq++;\n\
    \        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprc85opqd: /tmp/tmprc85opqd.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
