name: HumanEval_152_compare
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long diff = 0;\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long sum2 = 0;\n    long max2\
    \ = 0;\n    long min2 = 0;\n    long sum3 = 0;\n    long max3 = 0;\n    long min3\
    \ = 0;\n    long sum4 = 0;\n    long max4 = 0;\n    long min4 = 0;\n    long sum5\
    \ = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long sum6 = 0;\n    long max6\
    \ = 0;\n    long min6 = 0;\n    long sum7 = 0;\n    long max7 = 0;\n    long min7\
    \ = 0;\n    long sum8 = 0;\n    long max8 = 0;\n    long min8 = 0;\n    long sum9\
    \ = 0;\n    long max9 = 0;\n    long min9 = 0;\n    long sum10 = 0;\n    long\
    \ max10 = 0;\n    long min10 = 0;\n    long sum11 = 0;\n    long max11 = 0;\n\
    \    long min11 = 0;\n    long sum12 = 0;\n    long max12 = 0;\n    long min12\
    \ = 0;\n    long sum13 = 0;\n    long max13 = 0;\n    long min13 = 0;\n    long\
    \ sum14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n    long sum15 = 0;\n\
    \    long max15 = 0;\n    long min15 = 0;\n    long sum16 = 0;\n    long max16\
    \ = 0;\n    long min16 = 0;\n    long sum17 = 0;\n    long max17 = 0;\n    long\
    \ min17 = 0;\n    long sum18 = 0;\n    long max18 = 0;\n    long min18 = 0;\n\
    \    long sum19 = 0;\n    long max19 = 0;\n    long min19 = 0;\n    long sum20\
    \ = 0;\n    long max20 = 0;\n    long min20 = 0;\n    long sum21 = 0;\n    long\
    \ max21 = 0;\n    long min21 = 0;\n    long sum22 = 0;\n    long max22 = 0;\n\
    \    long min22 = 0;\n    long sum23 = 0;\n    long max23 = 0;\n    long min23\
    \ = 0;\n    long sum24 = 0;\n    long max24 = 0;\n    long min24 = 0;\n    long\
    \ sum25 = 0;\n    long max25 = 0;\n    long min25 = 0;\n    long sum26 = 0;\n\
    \    long max26 = 0;\n    long min26 = 0;\n    long sum27 = 0;\n    long max27\
    \ = 0;\n    long min27 = 0;\n    long sum28 = 0;\n    long max28 = 0;\n    long\
    \ min28 = 0;\n    long sum29 = 0;\n    long max\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpastgumo5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpastgumo5.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpastgumo5.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        score = game[i];\n\
    \        guess = guess[i];\n        if (guess == score) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = abs(guess - score);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppic_6mwf.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppic_6mwf.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmppic_6mwf.cpp:19:24: error: invalid types\
    \ \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n \
    \  19 |         guess = guess[i];\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpm7owcr8h: /tmp/tmpm7owcr8h.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        if (game[i] ==\
    \ guess[i]) {\n            score++;\n        } else {\n            diff = abs(game[i]\
    \ - guess[i]);\n        }\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp32yv2928: /tmp/tmp32yv2928.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long diff = 0;\n    long sum\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \    }\n    for (size_t i = 0; i < guess.size(); i++) {\n        diff = abs(guess[i]\
    \ - sum);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmphqmypskw: /tmp/tmphqmypskw.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        guess = guess[i];\n\
    \        score = game[i];\n        if (guess == score) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = abs(guess - score);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfl2zg5q_.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpfl2zg5q_.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpfl2zg5q_.cpp:17:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   17 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmpfl2zg5q_.cpp:18:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   18 |         guess = guess[i];\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        score += game[i];\n        result[i]\
    \ = abs(guess[i] - score);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp2y126_qx: /tmp/tmp2y126_qx.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result;\n    long sum = 0;\n\
    \    long diff = 0;\n    long count = 0;\n    long sum2 = 0;\n    long diff2 =\
    \ 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n    long\
    \ count3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long count4 = 0;\n\
    \    long sum5 = 0;\n    long diff5 = 0;\n    long count5 = 0;\n    long sum6\
    \ = 0;\n    long diff6 = 0;\n    long count6 = 0;\n    long sum7 = 0;\n    long\
    \ diff7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n\
    \    long count8 = 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long count9\
    \ = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long count10 = 0;\n   \
    \ long sum11 = 0;\n    long diff11 = 0;\n    long count11 = 0;\n    long sum12\
    \ = 0;\n    long diff12 = 0;\n    long count12 = 0;\n    long sum13 = 0;\n   \
    \ long diff13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n    long diff14\
    \ = 0;\n    long count14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n   \
    \ long count15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long count16\
    \ = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long count17 = 0;\n   \
    \ long sum18 = 0;\n    long diff18 = 0;\n    long count18 = 0;\n    long sum19\
    \ = 0;\n    long diff19 = 0;\n    long count19 = 0;\n    long sum20 = 0;\n   \
    \ long diff20 = 0;\n    long count20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long count21 = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n   \
    \ long count22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long count23\
    \ = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long count24 = 0;\n   \
    \ long sum25 = 0;\n    long diff25 = 0;\n    long count25 = 0;\n    long sum26\
    \ = 0;\n    long diff26 = 0;\n    long count26 = 0;\n    long sum27 = 0;\n   \
    \ long diff27 = 0;\n    long count27 = 0;\n    long sum28 = 0;\n    long diff28\
    \ = 0;\n    long count28 = 0;\n    long sum29 = 0;\n    long diff29 = 0;\n\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmplt3stooq: /tmp/tmplt3stooq.cpp:106: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum += abs(game[i]\
    \ - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp_b47_haf: /tmp/tmp_b47_haf.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long sum = 0;\n    long min =\
    \ std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for(size_t i = 0; i < game.size(); ++i) {\n        sum += game[i];\n    \
    \    if(game[i] > max) {\n            max = game[i];\n        }\n        if(game[i]\
    \ < min) {\n            min = game[i];\n        }\n    }\n    for(size_t i = 0;\
    \ i < guess.size(); ++i) {\n        sum += guess[i];\n        if(guess[i] > max)\
    \ {\n            max = guess[i];\n        }\n        if(guess[i] < min) {\n  \
    \          min = guess[i];\n        }\n    }\n    for(size_t i = 0; i < game.size();\
    \ ++i) {\n        result[i] = abs(sum - game[i]);\n    }\n    for(size_t i = 0;\
    \ i < guess.size(); ++i) {\n        result[i] += abs(sum - guess[i]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpchn18inv: /tmp/tmpchn18inv.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (long i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = sum - guess[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp2c2kjome: /tmp/tmp2c2kjome.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        guess = guess[i];\n\
    \        score = game[i];\n        if (guess == score) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = abs(guess - score);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5q9it1p3.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp5q9it1p3.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp5q9it1p3.cpp:17:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   17 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmp5q9it1p3.cpp:18:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   18 |         guess = guess[i];\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n    long sum2\
    \ = 0;\n    long diff2 = 0;\n    long max2 = 0;\n    long min2 = 0;\n    long\
    \ sum3 = 0;\n    long diff3 = 0;\n    long max3 = 0;\n    long min3 = 0;\n   \
    \ long sum4 = 0;\n    long diff4 = 0;\n    long max4 = 0;\n    long min4 = 0;\n\
    \    long sum5 = 0;\n    long diff5 = 0;\n    long max5 = 0;\n    long min5 =\
    \ 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long max6 = 0;\n    long min6\
    \ = 0;\n    long sum7 = 0;\n    long diff7 = 0;\n    long max7 = 0;\n    long\
    \ min7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long max8 = 0;\n   \
    \ long min8 = 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long max9 = 0;\n\
    \    long min9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long max10\
    \ = 0;\n    long min10 = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long\
    \ max11 = 0;\n    long min11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n\
    \    long max12 = 0;\n    long min12 = 0;\n    long sum13 = 0;\n    long diff13\
    \ = 0;\n    long max13 = 0;\n    long min13 = 0;\n    long sum14 = 0;\n    long\
    \ diff14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n    long sum15 = 0;\n\
    \    long diff15 = 0;\n    long max15 = 0;\n    long min15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long max16 = 0;\n    long min16 = 0;\n    long\
    \ sum17 = 0;\n    long diff17 = 0;\n    long max17 = 0;\n    long min17 = 0;\n\
    \    long sum18 = 0;\n    long diff18 = 0;\n    long max18 = 0;\n    long min18\
    \ = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n    long max19 = 0;\n    long\
    \ min19 = 0;\n    long sum20 = 0;\n    long diff20 = 0;\n    long max20 = 0;\n\
    \    long min20 = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long max21\
    \ = 0;\n    long min21 = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long\
    \ \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyl77jxom.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyl77jxom.cpp:103:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpyl77jxom.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpb4ewwph5: /tmp/tmpb4ewwph5.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long guess = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n\
    \        if (game[i] == guess[i]) {\n            score = 0;\n        }\n     \
    \   else {\n            score = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = score;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqug535uc.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpqug535uc.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpqug535uc.cpp:19:31: error: invalid types\
    \ \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n \
    \  19 |         if (game[i] == guess[i]) {\n      |                          \
    \     ^\n/tmp/tmpqug535uc.cpp:23:42: error: invalid types \u2018long int[size_t\
    \ {aka long unsigned int}]\u2019 for array subscript\n   23 |             score\
    \ = abs(game[i] - guess[i]);\n      |                                        \
    \  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i]) {\n      \
    \      result[i] = 0;\n            score = 0;\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i]);\n            score = abs(game[i] - guess[i]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long diff\
    \ = 0;\n    for(int i = 0; i < game.size(); i++) {\n        if(game[i] != guess[i])\
    \ {\n            diff = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpqmzbaoew: /tmp/tmpqmzbaoew.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \    }\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum += guess[i];\n\
    \    }\n    for (size_t i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i]\
    \ - sum);\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmprs_k3icg: /tmp/tmprs_k3icg.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ diff = 0;\n    long sum = 0;\n    long count = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            count++;\n          \
    \  sum += game[i];\n        }\n        else {\n            diff = abs(game[i]\
    \ - guess[i]);\n            sum += diff;\n            result[i] = sum;\n     \
    \       count = 0;\n            sum = 0;\n        }\n    }\n    \n    for(long\
    \ i = 0; i < guess.size(); i++) {\n        if(game[i] != guess[i]) {\n       \
    \     diff = abs(game[i] - guess[i]);\n            sum += diff;\n            result[i]\
    \ = sum;\n        }\n    }\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp4hy_zkbj: /tmp/tmp4hy_zkbj.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guesses\
    \ = 0;\n    long scoreDiff = 0;\n    long guessesDiff = 0;\n    long maxScore\
    \ = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::max();\n\
    \    long minScore = std::numeric_limits<long>::min();\n    long minGuess = std::numeric_limits<long>::min();\n\
    \    long maxScoreDiff = std::numeric_limits<long>::max();\n    long maxGuessesDiff\
    \ = std::numeric_limits<long>::max();\n    long minScoreDiff = std::numeric_limits<long>::min();\n\
    \    long minGuessesDiff = std::numeric_limits<long>::min();\n    long maxScoreDiff2\
    \ = std::numeric_limits<long>::max();\n    long maxGuessesDiff2 = std::numeric_limits<long>::max();\n\
    \    long minScoreDiff2 = std::numeric_limits<long>::min();\n    long minGuessesDiff2\
    \ = std::numeric_limits<long>::min();\n    long maxScoreDiff3 = std::numeric_limits<long>::max();\n\
    \    long maxGuessesDiff3 = std::numeric_limits<long>::max();\n    long minScoreDiff3\
    \ = std::numeric_limits<long>::min();\n    long minGuessesDiff3 = std::numeric_limits<long>::min();\n\
    \    long maxScoreDiff4 = std::numeric_limits<long>::max();\n    long maxGuessesDiff4\
    \ = std::numeric_limits<long>::max();\n    long minScoreDiff4 = std::numeric_limits<long>::min();\n\
    \    long minGuessesDiff4 = std::numeric_limits<long>::min();\n    long maxScoreDiff5\
    \ = std::numeric_limits<long>::max();\n    long maxGuessesDiff5 = std::numeric_limits<long>::max();\n\
    \    long minScoreDiff5 = std::numeric_limits<long>::min();\n    long minGuessesDiff5\
    \ = std::numeric_limits<long>::min();\n    long maxScoreDiff6 = std::numeric_limits<long>::max();\n\
    \    long maxGuessesDiff6 = std::numeric_limits<long>::max();\n    long minScoreDiff6\
    \ = std::numeric_limits<long>::min();\n    long minGuessesDiff6 = std::numeric_limits<long>::min();\n\
    \    long maxScoreDiff7 = std::numeric_limits<long>::max();\n    long maxGuessesDiff7\
    \ = std::numeric_limits<long>::max();\n    long minScore\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsce_mxs6.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpsce_mxs6.cpp:50:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmpsce_mxs6.cpp:50:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long count = 0;\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] == guess[i]){\n            sum+=game[i];\n       \
    \     count++;\n        }\n        else{\n            diff = abs(game[i] - guess[i]);\n\
    \            sum+=diff;\n            count++;\n        }\n    }\n    for(int i\
    \ = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n            result[i]\
    \ = 0;\n        }\n        else{\n            result[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    if(count == game.size()){\n        return result;\n   \
    \ }\n    else return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        sum += game[i];\n  \
    \      if (game[i] > max) {\n            max = game[i];\n        }\n        if\
    \ (game[i] < min) {\n            min = game[i];\n        }\n    }\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i] - sum);\n\
    \    }\n    for (size_t i = 0; i < guess.size(); i++) {\n        if (result[i]\
    \ != 0) {\n            result[i] = result[i] / sum;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpjv97v8ta: /tmp/tmpjv97v8ta.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (long i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \    }\n    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i]\
    \ - sum);\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpy6daknyd: /tmp/tmpy6daknyd.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc\
    \ = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n\
    \    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp =\
    \ 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n\
    \    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long\
    \ yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc\
    \ = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg\
    \ = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk\
    \ = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long aaaa\
    \ = 0;\n    long bbbb = 0;\n    long cccc = 0;\n    long dddd = 0;\n    long eeee\
    \ = 0;\n    long ffff = 0;\n    long gggg = 0;\n    long hhhh = 0;\n    long iiii\
    \ = 0;\n    long jjjj = 0;\n    long kkkk = 0;\n    long llll = 0;\n    long mmmm\
    \ = 0;\n    long nnnn = 0;\n    long oooo = 0;\n    long pppp = 0;\n    long qqqq\
    \ = 0;\n    long rrrr = 0;\n    long ssss = 0;\n    long tttt = 0;\n    long uuuu\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg_ikaq1c.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpg_ikaq1c.cpp:110:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmpg_ikaq1c.cpp:110:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    std::vector<long> result(game.size());\n   \
    \ long sum = 0;\n    long min = 0;\n    long max = 0;\n    long diff = 0;\n  \
    \  long minDiff = std::numeric_limits<long>::max();\n    long maxDiff = std::numeric_limits<long>::min();\n\
    \    for(size_t i = 0; i < game.size(); i++) {\n        sum += game[i];\n    \
    \    if(game[i] > max) {\n            max = game[i];\n        }\n        if(game[i]\
    \ < min) {\n            min = game[i];\n        }\n    }\n    for(size_t i = 0;\
    \ i < guess.size(); i++) {\n        sum += guess[i];\n        if(guess[i] > max)\
    \ {\n            max = guess[i];\n        }\n        if(guess[i] < min) {\n  \
    \          min = guess[i];\n        }\n    }\n    for(size_t i = 0; i < game.size();\
    \ i++) {\n        diff = game[i] - guess[i];\n        if(diff > maxDiff) {\n \
    \           maxDiff = diff;\n        }\n        if(diff < minDiff) {\n       \
    \     minDiff = diff;\n        }\n    }\n    for(size_t i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(diff);\n    }\n    for(size_t i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(result[i] - sum);\n    }\n    for(size_t i =\
    \ 0; i < game.size(); i++) {\n        result[i] = abs(result[i] - max);\n    }\n\
    \    for(size_t i = 0; i < game.size(); i++) {\n        result[i] = abs(result[i]\
    \ - min);\n    }\n    for(size_t i = 0; i < game.size(); i++) {\n        result[i]\
    \ = abs(result[i] - minDiff);\n    }\n    for(size_t i = 0; i < game.size(); i++)\
    \ {\n        result[i] = abs(result[i] - maxDiff);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpbrd7_37r: /tmp/tmpbrd7_37r.cpp:71: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long min = 0;\n    long max = 0;\n    long diff = 0;\n    long\
    \ sum2 = 0;\n    long min2 = 0;\n    long max2 = 0;\n    long diff2 = 0;\n   \
    \ long sum3 = 0;\n    long min3 = 0;\n    long max3 = 0;\n    long diff3 = 0;\n\
    \    long sum4 = 0;\n    long min4 = 0;\n    long max4 = 0;\n    long diff4 =\
    \ 0;\n    long sum5 = 0;\n    long min5 = 0;\n    long max5 = 0;\n    long diff5\
    \ = 0;\n    long sum6 = 0;\n    long min6 = 0;\n    long max6 = 0;\n    long diff6\
    \ = 0;\n    long sum7 = 0;\n    long min7 = 0;\n    long max7 = 0;\n    long diff7\
    \ = 0;\n    long sum8 = 0;\n    long min8 = 0;\n    long max8 = 0;\n    long diff8\
    \ = 0;\n    long sum9 = 0;\n    long min9 = 0;\n    long max9 = 0;\n    long diff9\
    \ = 0;\n    long sum10 = 0;\n    long min10 = 0;\n    long max10 = 0;\n    long\
    \ diff10 = 0;\n    long sum11 = 0;\n    long min11 = 0;\n    long max11 = 0;\n\
    \    long diff11 = 0;\n    long sum12 = 0;\n    long min12 = 0;\n    long max12\
    \ = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n    long min13 = 0;\n    long\
    \ max13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long min14 = 0;\n\
    \    long max14 = 0;\n    long diff14 = 0;\n    long sum15 = 0;\n    long min15\
    \ = 0;\n    long max15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long\
    \ min16 = 0;\n    long max16 = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n\
    \    long min17 = 0;\n    long max17 = 0;\n    long diff17 = 0;\n    long sum18\
    \ = 0;\n    long min18 = 0;\n    long max18 = 0;\n    long diff18 = 0;\n    long\
    \ sum19 = 0;\n    long min19 = 0;\n    long max19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long min20 = 0;\n    long max20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long min21 = 0;\n    long max21 = 0;\n    long\
    \ diff21 = 0;\n    long sum22 = 0;\n    long min22 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpudmkdaio: /tmp/tmpudmkdaio.cpp:106: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        result[i]\
    \ = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpvzv3qokb: /tmp/tmpvzv3qokb.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long count = 0;\n    for (long i = 0; i < game.size(); i++) {\n\
    \        if (game[i] == guess[i]) {\n            result[i] = 0;\n            sum\
    \ += game[i];\n            count++;\n        } else {\n            result[i] =\
    \ abs(game[i] - guess[i]);\n            sum += game[i];\n        }\n    }\n  \
    \  if (count == 0) {\n        result[0] = sum;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp6nnlr5g5: /tmp/tmp6nnlr5g5.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3})), (std::vector<long>({-1, -2, -3}))) == (std::vector<long>({2, 4, 6}))'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long \n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03jt9m1n.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp03jt9m1n.cpp:112:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  112 | }\n      | ^\n/tmp/tmp03jt9m1n.cpp:112:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long maxScore = std::max(game.front(),\
    \ guess.front());\n    long minScore = std::min(game.back(), guess.back());\n\
    \    long scoreDiff = maxScore - minScore;\n    long scoreDiffAbs = std::abs(scoreDiff);\n\
    \    long scoreDiffAbsMax = std::max(scoreDiffAbs, 1);\n    long scoreDiffAbsMin\
    \ = std::min(scoreDiffAbs, 1);\n    long scoreDiffAbsMaxMin = std::min(scoreDiffAbsMax,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMin = std::min(scoreDiffAbsMaxMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMin = std::min(scoreDiffAbsMaxMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMin = std::min(scoreDiffAbsMaxMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMinMinMinMin,\
    \ scoreDiffAbsMin);\n    long scoreDiffAbsMaxMinMinMinMinMinMinMinMin = std::min(scoreDiffAbsMaxMinMinMinMinMinMinMinMin,\
    \ scoreDiffAbsMin\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk90y9xup.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpk90y9xup.cpp:19:52: error: no matching\
    \ function for call to \u2018max(long int&, int)\u2019\n   19 |     long scoreDiffAbsMax\
    \ = std::max(scoreDiffAbs, 1);\n      |                                      \
    \              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk90y9xup.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk90y9xup.cpp:19:52:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   19 |     long scoreDiffAbsMax = std::max(scoreDiffAbs,\
    \ 1);\n      |                                                    ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:4"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ sum2 = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n  \
    \  long sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long diff5 = 0;\n\
    \    long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long diff7 =\
    \ 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n    long diff9\
    \ = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11 = 0;\n    long\
    \ diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n\
    \    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n    long sum15\
    \ = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long\
    \ sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n\
    \    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22 = 0;\n    long\
    \ diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long sum24 = 0;\n\
    \    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n    long sum26\
    \ = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27 = 0;\n    long\
    \ sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long diff29 = 0;\n\
    \    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n    long diff31\
    \ = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33 = 0;\n    long\
    \ diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long sum35 = 0;\n\
    \    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n    long sum37\
    \ = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38 = 0;\n    long\
    \ sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long diff40 = 0;\n\
    \    long sum41 = 0;\n    long diff41 = 0;\n    long sum42 = 0;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpqaqx6450: /tmp/tmpqaqx6450.cpp:104: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    long max\
    \ = 0;\n    long min = std::numeric_limits<long>::max();\n    long minIndex =\
    \ -1;\n    long maxIndex = -1;\n    long minScore = std::numeric_limits<long>::max();\n\
    \    long maxScore = -std::numeric_limits<long>::max();\n    long minGuess = std::numeric_limits<long>::max();\n\
    \    long maxGuess = -std::numeric_limits<long>::max();\n    long minGuesses =\
    \ std::numeric_limits<long>::max();\n    long maxGuesses = -std::numeric_limits<long>::max();\n\
    \    long minGuesses = std::numeric_limits<long>::max();\n    long maxGuesses\
    \ = -std::numeric_limits<long>::max();\n    long minScores = std::numeric_limits<long>::max();\n\
    \    long maxScores = -std::numeric_limits<long>::max();\n    long minGuesses\
    \ = std::numeric_limits<long>::max();\n    long maxGuesses = -std::numeric_limits<long>::max();\n\
    \    long minGuesses = std::numeric_limits<long>::max();\n    long maxGuesses\
    \ = -std::numeric_limits<long>::max();\n    long minScores = std::numeric_limits<long>::max();\n\
    \    long maxScores = -std::numeric_limits<long>::max();\n    long minScores =\
    \ std::numeric_limits<long>::max();\n    long maxScores = -std::numeric_limits<long>::max();\n\
    \    long minScores = std::numeric_limits<long>::max();\n    long maxScores =\
    \ -std::numeric_limits<long>::max();\n    long minScores = std::numeric_limits<long>::max();\n\
    \    long maxScores = -std::numeric_limits<long>::max();\n    long minScores =\
    \ std::numeric_limits<long>::max();\n    long maxScores = -std::numeric_limits<long>::max();\n\
    \    long minScores = std::numeric_limits<long>::max();\n    long maxScores =\
    \ -std::numeric_limits<long>::max();\n    long minScores = std::numeric_limits<long>::max();\n\
    \    long maxScores = -std::numeric_limits<long>::max();\n    long minScores =\
    \ std::numeric_limits<long>::max();\n    long maxScores = -std::numeric_limits<long>::max();\n\
    \    long minScores = std::numeric_limits<long>::max();\n    long \n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqhfzwoho.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpqhfzwoho.cpp:26:10: error: redeclaration\
    \ of \u2018long int minGuesses\u2019\n   26 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:24:10: note: \u2018long int\
    \ minGuesses\u2019 previously declared here\n   24 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:27:10: error: redeclaration\
    \ of \u2018long int maxGuesses\u2019\n   27 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:25:10: note: \u2018long int\
    \ maxGuesses\u2019 previously declared here\n   25 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:30:10: error: redeclaration\
    \ of \u2018long int minGuesses\u2019\n   30 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:24:10: note: \u2018long int\
    \ minGuesses\u2019 previously declared here\n   24 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:31:10: error: redeclaration\
    \ of \u2018long int maxGuesses\u2019\n   31 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:25:10: note: \u2018long int\
    \ maxGuesses\u2019 previously declared here\n   25 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:32:10: error: redeclaration\
    \ of \u2018long int minGuesses\u2019\n   32 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:24:10: note: \u2018long int\
    \ minGuesses\u2019 previously declared here\n   24 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:33:10: error: redeclaration\
    \ of \u2018long int maxGuesses\u2019\n   33 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpqhfzwoho.cpp:25:10: note: \u2018long int\
    \ maxGuesses\u2019 previously de"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = sum - guess[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpom_6o6o1: /tmp/tmpom_6o6o1.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        result[i]\
    \ = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpvot9okl8: /tmp/tmpvot9okl8.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); ++i) {\n        if (game[i] == guess[i]) {\n      \
    \      score = 0;\n        } else {\n            score = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = score;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i]) {\n      \
    \      result[i] = 0;\n            score = 0;\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i]);\n            score = abs(game[i] - guess[i]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpauzue46b.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpauzue46b.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpauzue46b.cpp:70:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   70 |     long i = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:18:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   18 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:71:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   71 |     long j = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:19:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   19 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:72:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   72 |     long k = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:20:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   20 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:73:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   73 |     long l = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:21:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   21 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:74:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   74 |     long m = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:22:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   22 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:75:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   75 |     long n = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:23:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   23 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:76:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   76 |     long o = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:24:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   24 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:77:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   77 |     long p = 0;\n      |          ^\n/tmp/tmpauzue46b.cpp:25:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   25 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpauzue"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long B\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxucgwi9q.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpxucgwi9q.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpxucgwi9q.cpp:115:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  115 | }\n      | ^\n/tmp/tmpxucgwi9q.cpp:115:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        if (game[i] != guess[i]) {\n       \
    \     diff = abs(game[i] - guess[i]);\n        }\n        result[i] = diff;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpx66vwptk: /tmp/tmpx66vwptk.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long guesses = 0;\n    long games = 0;\n    long maxGuesses = guess.size();\n\
    \    long maxGames = game.size();\n    long minGuesses = std::min(game.size(),\
    \ guess.size());\n    long minGames = std::min(game.size(), guess.size());\n \
    \   long maxScore = std::max(game.size(), guess.size());\n    long minScore =\
    \ std::min(game.size(), guess.size());\n    long maxDiff = std::max(game.size(),\
    \ guess.size());\n    long minDiff = std::min(game.size(), guess.size());\n  \
    \  long maxGuessesPerGame = maxGuesses / maxGames;\n    long maxGamesPerGuess\
    \ = maxGames / maxGuesses;\n    long minGuessesPerGuess = minGuesses / minGuesses;\n\
    \    long minGamesPerGuess = minGames / minGuesses;\n    long maxScorePerGuess\
    \ = maxScore / maxGuesses;\n    long minScorePerGuess = minScore / minGuesses;\n\
    \    long maxDiffPerGuess = maxDiff / maxGuesses;\n    long minDiffPerGuess =\
    \ minDiff / minGuesses;\n    long maxGuessesPerGuess = maxGuesses / maxGuessesPerGuess;\n\
    \    long maxGamesPerGuess = maxGames / maxGamesPerGuess;\n    long minGuessesPerGuess\
    \ = minGuesses / minGamesPerGuess;\n    long minGamesPerGuess = minGames / minGamesPerGuess;\n\
    \    long maxScorePerGuess = maxScore / maxScorePerGuess;\n    long minScorePerGuess\
    \ = minScore / minScorePerGuess;\n    long maxDiffPerGuess = maxDiff / maxDiffPerGuess;\n\
    \    long minDiffPerGuess = minDiff / minDiffPerGuess;\n    long maxGuessesPerGame\
    \ = maxGuesses / maxGamesPerGuess;\n    long minGuessesPerGame = minGuesses /\
    \ minGamesPerGuess;\n    long maxScorePerGame = maxScore / maxScorePerGuess;\n\
    \    long minScorePerGame = minScore / minScorePerGuess;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppm3fzsw_.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppm3fzsw_.cpp:36:10: error: redeclaration\
    \ of \u2018long int maxGamesPerGuess\u2019\n   36 |     long maxGamesPerGuess\
    \ = maxGames / maxGamesPerGuess;\n      |          ^~~~~~~~~~~~~~~~\n/tmp/tmppm3fzsw_.cpp:28:10:\
    \ note: \u2018long int maxGamesPerGuess\u2019 previously declared here\n   28\
    \ |     long maxGamesPerGuess = maxGames / maxGuesses;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmppm3fzsw_.cpp:37:10: error: redeclaration of \u2018long int minGuessesPerGuess\u2019\
    \n   37 |     long minGuessesPerGuess = minGuesses / minGamesPerGuess;\n     \
    \ |          ^~~~~~~~~~~~~~~~~~\n/tmp/tmppm3fzsw_.cpp:29:10: note: \u2018long\
    \ int minGuessesPerGuess\u2019 previously declared here\n   29 |     long minGuessesPerGuess\
    \ = minGuesses / minGuesses;\n      |          ^~~~~~~~~~~~~~~~~~\n/tmp/tmppm3fzsw_.cpp:38:10:\
    \ error: redeclaration of \u2018long int minGamesPerGuess\u2019\n   38 |     long\
    \ minGamesPerGuess = minGames / minGamesPerGuess;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmppm3fzsw_.cpp:30:10: note: \u2018long int minGamesPerGuess\u2019 previously\
    \ declared here\n   30 |     long minGamesPerGuess = minGames / minGuesses;\n\
    \      |          ^~~~~~~~~~~~~~~~\n/tmp/tmppm3fzsw_.cpp:39:10: error: redeclaration\
    \ of \u2018long int maxScorePerGuess\u2019\n   39 |     long maxScorePerGuess\
    \ = maxScore / maxScorePerGuess;\n      |          ^~~~~~~~~~~~~~~~\n/tmp/tmppm3fzsw_.cpp:31:10:\
    \ note: \u2018long int maxScorePerGuess\u2019 previously declared here\n   31\
    \ |     long maxScorePerGuess = maxScore / maxGuesses;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmppm3fzsw_.cpp:40:10: error: redeclaration of \u2018long int minScorePerGuess\u2019\
    \n   40 |     long minScorePerGuess = minScore / minScorePerGuess;\n      |  \
    \        ^~~~~~~~~~~~~~~~\n/tmp/tmppm3fzsw_.cpp:32:10: note: \u2018long int minScorePerGuess\u2019\
    \ previously declared here\n   32 |     long minScorePerGuess = minScore / minGuesses;\n\
    \      |          ^~~~~~~~~~~~~~~~\n/tmp/tmppm3fzsw_.cpp:41:10: error: redeclaration\
    \ of \u2018long int maxDiffPerGuess\u2019\n   41 |     long maxDiffPerGuess =\
    \ maxDiff / "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (long i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpxa2s7c57: /tmp/tmpxa2s7c57.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ score = 0;\n    long maxScore = std::max(game.front(), guess.front());\n   \
    \ long minScore = std::min(game.back(), guess.back());\n    long diff = maxScore\
    \ - minScore;\n    long maxDiff = std::abs(maxScore - minScore);\n    long minDiff\
    \ = std::abs(maxScore - minScore);\n    long maxDiff2 = std::abs(maxScore - minScore);\n\
    \    long minDiff2 = std::abs(maxScore - minScore);\n    long maxDiff3 = std::abs(maxScore\
    \ - minScore);\n    long minDiff3 = std::abs(maxScore - minScore);\n    long maxDiff4\
    \ = std::abs(maxScore - minScore);\n    long minDiff4 = std::abs(maxScore - minScore);\n\
    \    long maxDiff5 = std::abs(maxScore - minScore);\n    long minDiff5 = std::abs(maxScore\
    \ - minScore);\n    long maxDiff6 = std::abs(maxScore - minScore);\n    long minDiff6\
    \ = std::abs(maxScore - minScore);\n    long maxDiff7 = std::abs(maxScore - minScore);\n\
    \    long minDiff7 = std::abs(maxScore - minScore);\n    long maxDiff8 = std::abs(maxScore\
    \ - minScore);\n    long minDiff8 = std::abs(maxScore - minScore);\n    long maxDiff9\
    \ = std::abs(maxScore - minScore);\n    long minDiff9 = std::abs(maxScore - minScore);\n\
    \    long maxDiff10 = std::abs(maxScore - minScore);\n    long minDiff10 = std::abs(maxScore\
    \ - minScore);\n    long maxDiff11 = std::abs(maxScore - minScore);\n    long\
    \ minDiff11 = std::abs(maxScore - minScore);\n    long maxDiff12 = std::abs(maxScore\
    \ - minScore);\n    long minDiff12 = std::abs(maxScore - minScore);\n    long\
    \ maxDiff13 = std::abs(maxScore - minScore);\n    long minDiff13 = std::abs(maxScore\
    \ - minScore);\n    long maxDiff14 = std::abs(maxScore - minScore);\n    long\
    \ minDiff14 = std::abs(maxScore - minScore);\n    long maxDiff15 = std::abs(maxScore\
    \ - minScore);\n    long minDiff15 = std::abs(maxScore - minScore);\n    long\
    \ maxDiff16 = std::abs(maxScore - minScore);\n    long minDiff16 = std::abs(maxScore\
    \ - \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfra1srru.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpfra1srru.cpp:52:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmpfra1srru.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long diff = 0;\n    for(size_t\
    \ i = 0; i < guess.size(); ++i) {\n        diff = std::abs(game[i] - guess[i]);\n\
    \        result[i] = diff;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n       \
    \     result[i] = 0;\n            score = 0;\n        } else {\n            score\
    \ = abs(game[i] - guess[i]);\n        }\n        result[i] = score;\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long sum2 = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3 =\
    \ 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long diff5\
    \ = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long\
    \ diff7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n  \
    \  long diff9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11\
    \ = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long\
    \ sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n\
    \    long sum15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16\
    \ = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long\
    \ diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n\
    \    long diff20 = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22\
    \ = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long\
    \ sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n\
    \    long sum26 = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27\
    \ = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long\
    \ diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n\
    \    long diff31 = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33\
    \ = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long\
    \ sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n\
    \    long sum37 = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38\
    \ = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long\
    \ diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy_3mv4wg.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpy_3mv4wg.cpp:102:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpy_3mv4wg.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        sum +=\
    \ abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmppe97b858: /tmp/tmppe97b858.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp6x6pgjh7: /tmp/tmp6x6pgjh7.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long\
    \ diff4 = 0;\n    long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n\
    \    long diff8 = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11\
    \ = 0;\n    long diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n   \
    \ long diff15 = 0;\n    long diff16 = 0;\n    long diff17 = 0;\n    long diff18\
    \ = 0;\n    long diff19 = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n   \
    \ long diff22 = 0;\n    long diff23 = 0;\n    long diff24 = 0;\n    long diff25\
    \ = 0;\n    long diff26 = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n   \
    \ long diff29 = 0;\n    long diff30 = 0;\n    long diff31 = 0;\n    long diff32\
    \ = 0;\n    long diff33 = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n   \
    \ long diff36 = 0;\n    long diff37 = 0;\n    long diff38 = 0;\n    long diff39\
    \ = 0;\n    long diff40 = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n   \
    \ long diff43 = 0;\n    long diff44 = 0;\n    long diff45 = 0;\n    long diff46\
    \ = 0;\n    long diff47 = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n   \
    \ long diff50 = 0;\n    long diff51 = 0;\n    long diff52 = 0;\n    long diff53\
    \ = 0;\n    long diff54 = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n   \
    \ long diff57 = 0;\n    long diff58 = 0;\n    long diff59 = 0;\n    long diff60\
    \ = 0;\n    long diff61 = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n   \
    \ long diff64 = 0;\n    long diff65 = 0;\n    long diff66 = 0;\n    long diff67\
    \ = 0;\n    long diff68 = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n   \
    \ long diff71 = 0;\n    long diff72 = 0;\n    long diff73 = 0;\n    long diff74\
    \ = 0;\n    long diff75 = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n   \
    \ long diff78 = 0;\n    long diff79 = 0;\n    long diff80 = 0;\n    long diff81\
    \ = 0;\n    long diff82 = 0;\n    long diff83 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwew16bem.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwew16bem.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpwew16bem.cpp:101:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  101 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6bn9pjnu.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp6bn9pjnu.cpp:69:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmp6bn9pjnu.cpp:25:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    for(long i = 0; i < guess.size(); i++) {\n        sum +=\
    \ game[i] - guess[i];\n        result[i] = sum;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpwgtrzxmz: /tmp/tmpwgtrzxmz.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpwjtd89ox: /tmp/tmpwjtd89ox.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    long max = 0;\n    long min = 0;\n    long diff = 0;\n  \
    \  long sum2 = 0;\n    long max2 = 0;\n    long min2 = 0;\n    long diff2 = 0;\n\
    \    long sum3 = 0;\n    long max3 = 0;\n    long min3 = 0;\n    long diff3 =\
    \ 0;\n    long sum4 = 0;\n    long max4 = 0;\n    long min4 = 0;\n    long diff4\
    \ = 0;\n    long sum5 = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long diff5\
    \ = 0;\n    long sum6 = 0;\n    long max6 = 0;\n    long min6 = 0;\n    long diff6\
    \ = 0;\n    long sum7 = 0;\n    long max7 = 0;\n    long min7 = 0;\n    long diff7\
    \ = 0;\n    long sum8 = 0;\n    long max8 = 0;\n    long min8 = 0;\n    long diff8\
    \ = 0;\n    long sum9 = 0;\n    long max9 = 0;\n    long min9 = 0;\n    long diff9\
    \ = 0;\n    long sum10 = 0;\n    long max10 = 0;\n    long min10 = 0;\n    long\
    \ diff10 = 0;\n    long sum11 = 0;\n    long max11 = 0;\n    long min11 = 0;\n\
    \    long diff11 = 0;\n    long sum12 = 0;\n    long max12 = 0;\n    long min12\
    \ = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n    long max13 = 0;\n    long\
    \ min13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long max14 = 0;\n\
    \    long min14 = 0;\n    long diff14 = 0;\n    long sum15 = 0;\n    long max15\
    \ = 0;\n    long min15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long\
    \ max16 = 0;\n    long min16 = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n\
    \    long max17 = 0;\n    long min17 = 0;\n    long diff17 = 0;\n    long sum18\
    \ = 0;\n    long max18 = 0;\n    long min18 = 0;\n    long diff18 = 0;\n    long\
    \ sum19 = 0;\n    long max19 = 0;\n    long min19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long max20 = 0;\n    long min20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long max21 = 0;\n    long min21 = 0;\n    long\
    \ diff21 = 0;\n    long sum22 = 0;\n    long max22 = 0;\n\n}\nint main() {\n \
    \   auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpp5z4_az9: /tmp/tmpp5z4_az9.cpp:106: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        score = game[i];\n\
    \        diff = abs(guess - score);\n        if (diff == 0) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = diff;\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0sbowsl5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp0sbowsl5.cpp:19:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   19 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0sbowsl5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0sbowsl5.cpp:19:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   19 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = sum - guess[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpcy_zn1u1: /tmp/tmpcy_zn1u1.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7l_57ur.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpw7l_57ur.cpp:69:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmpw7l_57ur.cpp:25:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n   \
    \ long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D =\
    \ 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n   \
    \ long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M =\
    \ 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n   \
    \ long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V =\
    \ 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n   \
    \ long a = 0;\n    long b = 0;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwbj9f8my.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwbj9f8my.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpwbj9f8my.cpp:71:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   71 |     long i = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:19:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   19 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:72:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   72 |     long j = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:20:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   20 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:73:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   73 |     long k = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:21:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   21 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:74:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   74 |     long l = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:22:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   22 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:75:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   75 |     long m = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:23:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   23 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:76:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   76 |     long n = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:24:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   24 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:77:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   77 |     long o = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:25:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   25 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:78:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   78 |     long p = 0;\n      |          ^\n/tmp/tmpwbj9f8my.cpp:26:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   26 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpwbj9f"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long sum1 = 0;\n    long diff1 = 0;\n    long\
    \ sum2 = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n  \
    \  long sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long diff5 = 0;\n\
    \    long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long diff7 =\
    \ 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n    long diff9\
    \ = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11 = 0;\n    long\
    \ diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n\
    \    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n    long sum15\
    \ = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long\
    \ sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n\
    \    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22 = 0;\n    long\
    \ diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long sum24 = 0;\n\
    \    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n    long sum26\
    \ = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27 = 0;\n    long\
    \ sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long diff29 = 0;\n\
    \    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n    long diff31\
    \ = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33 = 0;\n    long\
    \ diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long sum35 = 0;\n\
    \    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n    long sum37\
    \ = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38 = 0;\n    long\
    \ sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long diff40 = 0;\n\
    \    long sum41 = 0;\n    long diff41 = 0;\n    long sum42 = 0;\n\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpx5ao1kfv: /tmp/tmpx5ao1kfv.cpp:105: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for(long\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i] - guess[i];\n      \
    \  result[i] = sum;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmplflkmjtt: /tmp/tmplflkmjtt.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long min = 0;\n    long max = 0;\n    long mid\
    \ = 0;\n    long mid2 = 0;\n    long mid3 = 0;\n    long mid4 = 0;\n    long mid5\
    \ = 0;\n    long mid6 = 0;\n    long mid7 = 0;\n    long mid8 = 0;\n    long mid9\
    \ = 0;\n    long mid10 = 0;\n    long mid11 = 0;\n    long mid12 = 0;\n    long\
    \ mid13 = 0;\n    long mid14 = 0;\n    long mid15 = 0;\n    long mid16 = 0;\n\
    \    long mid17 = 0;\n    long mid18 = 0;\n    long mid19 = 0;\n    long mid20\
    \ = 0;\n    long mid21 = 0;\n    long mid22 = 0;\n    long mid23 = 0;\n    long\
    \ mid24 = 0;\n    long mid25 = 0;\n    long mid26 = 0;\n    long mid27 = 0;\n\
    \    long mid28 = 0;\n    long mid29 = 0;\n    long mid30 = 0;\n    long mid31\
    \ = 0;\n    long mid32 = 0;\n    long mid33 = 0;\n    long mid34 = 0;\n    long\
    \ mid35 = 0;\n    long mid36 = 0;\n    long mid37 = 0;\n    long mid38 = 0;\n\
    \    long mid39 = 0;\n    long mid40 = 0;\n    long mid41 = 0;\n    long mid42\
    \ = 0;\n    long mid43 = 0;\n    long mid44 = 0;\n    long mid45 = 0;\n    long\
    \ mid46 = 0;\n    long mid47 = 0;\n    long mid48 = 0;\n    long mid49 = 0;\n\
    \    long mid50 = 0;\n    long mid51 = 0;\n    long mid52 = 0;\n    long mid53\
    \ = 0;\n    long mid54 = 0;\n    long mid55 = 0;\n    long mid56 = 0;\n    long\
    \ mid57 = 0;\n    long mid58 = 0;\n    long mid59 = 0;\n    long mid60 = 0;\n\
    \    long mid61 = 0;\n    long mid62 = 0;\n    long mid63 = 0;\n    long mid64\
    \ = 0;\n    long mid65 = 0;\n    long mid66 = 0;\n    long mid67 = 0;\n    long\
    \ mid68 = 0;\n    long mid69 = 0;\n    long mid70 = 0;\n    long mid71 = 0;\n\
    \    long mid72 = 0;\n    long mid73 = 0;\n    long mid74 = 0;\n    long mid75\
    \ = 0;\n    long mid76 = 0;\n    long mid77 = 0;\n    long mid78 = 0;\n    long\
    \ mid79 = 0;\n    long mid80 = 0;\n    long mid\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpckrk3s8q.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpckrk3s8q.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpckrk3s8q.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long mid\
    \ = 0;\n    long mid2 = 0;\n    long mid3 = 0;\n    long mid4 = 0;\n    long mid5\
    \ = 0;\n    long mid6 = 0;\n    long mid7 = 0;\n    long mid8 = 0;\n    long mid9\
    \ = 0;\n    long mid10 = 0;\n    long mid11 = 0;\n    long mid12 = 0;\n    long\
    \ mid13 = 0;\n    long mid14 = 0;\n    long mid15 = 0;\n    long mid16 = 0;\n\
    \    long mid17 = 0;\n    long mid18 = 0;\n    long mid19 = 0;\n    long mid20\
    \ = 0;\n    long mid21 = 0;\n    long mid22 = 0;\n    long mid23 = 0;\n    long\
    \ mid24 = 0;\n    long mid25 = 0;\n    long mid26 = 0;\n    long mid27 = 0;\n\
    \    long mid28 = 0;\n    long mid29 = 0;\n    long mid30 = 0;\n    long mid31\
    \ = 0;\n    long mid32 = 0;\n    long mid33 = 0;\n    long mid34 = 0;\n    long\
    \ mid35 = 0;\n    long mid36 = 0;\n    long mid37 = 0;\n    long mid38 = 0;\n\
    \    long mid39 = 0;\n    long mid40 = 0;\n    long mid41 = 0;\n    long mid42\
    \ = 0;\n    long mid43 = 0;\n    long mid44 = 0;\n    long mid45 = 0;\n    long\
    \ mid46 = 0;\n    long mid47 = 0;\n    long mid48 = 0;\n    long mid49 = 0;\n\
    \    long mid50 = 0;\n    long mid51 = 0;\n    long mid52 = 0;\n    long mid53\
    \ = 0;\n    long mid54 = 0;\n    long mid55 = 0;\n    long mid56 = 0;\n    long\
    \ mid57 = 0;\n    long mid58 = 0;\n    long mid59 = 0;\n    long mid60 = 0;\n\
    \    long mid61 = 0;\n    long mid62 = 0;\n    long mid63 = 0;\n    long mid64\
    \ = 0;\n    long mid65 = 0;\n    long mid66 = 0;\n    long mid67 = 0;\n    long\
    \ mid68 = 0;\n    long mid69 = 0;\n    long mid70 = 0;\n    long mid71 = 0;\n\
    \    long mid72 = 0;\n    long mid73 = 0;\n    long mid74 = 0;\n    long mid75\
    \ = 0;\n    long mid76 = 0;\n    long mid77 = 0;\n    long mid78 = 0;\n    long\
    \ mid79 = 0;\n    long mid80 = 0;\n    long \n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7mkqlfyh.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp7mkqlfyh.cpp:101:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp7mkqlfyh.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long minDiff = std::numeric_limits<long>::max();\n\
    \    long minSum = std::numeric_limits<long>::max();\n    long minSumIndex = 0;\n\
    \    long maxSum = std::numeric_limits<long>::min();\n    long maxSumIndex = 0;\n\
    \    long minSumIndex2 = 0;\n    long maxSumIndex2 = 0;\n    long minSumIndex3\
    \ = 0;\n    long maxSumIndex3 = 0;\n    long minSumIndex4 = 0;\n    long maxSumIndex4\
    \ = 0;\n    long minSumIndex5 = 0;\n    long maxSumIndex5 = 0;\n    long minSumIndex6\
    \ = 0;\n    long maxSumIndex6 = 0;\n    long minSumIndex7 = 0;\n    long maxSumIndex7\
    \ = 0;\n    long minSumIndex8 = 0;\n    long maxSumIndex8 = 0;\n    long minSumIndex9\
    \ = 0;\n    long maxSumIndex9 = 0;\n    long minSumIndex10 = 0;\n    long maxSumIndex10\
    \ = 0;\n    long minSumIndex11 = 0;\n    long maxSumIndex11 = 0;\n    long minSumIndex12\
    \ = 0;\n    long maxSumIndex12 = 0;\n    long minSumIndex13 = 0;\n    long maxSumIndex13\
    \ = 0;\n    long minSumIndex14 = 0;\n    long maxSumIndex14 = 0;\n    long minSumIndex15\
    \ = 0;\n    long maxSumIndex15 = 0;\n    long minSumIndex16 = 0;\n    long maxSumIndex16\
    \ = 0;\n    long minSumIndex17 = 0;\n    long maxSumIndex17 = 0;\n    long minSumIndex18\
    \ = 0;\n    long maxSumIndex18 = 0;\n    long minSumIndex19 = 0;\n    long maxSumIndex19\
    \ = 0;\n    long minSumIndex20 = 0;\n    long maxSumIndex20 = 0;\n    long minSumIndex21\
    \ = 0;\n    long maxSumIndex21 = 0;\n    long minSumIndex22 = 0;\n    long maxSumIndex22\
    \ = 0;\n    long minSumIndex23 = 0;\n    long maxSumIndex23 = 0;\n    long minSumIndex24\
    \ = 0;\n    long maxSumIndex24 = 0;\n    long minSumIndex25 = 0;\n    long maxSumIndex25\
    \ = 0;\n    long minSumIndex26 = 0;\n    long maxSumIndex26 = 0;\n    long minSumIndex27\
    \ = 0;\n    long maxSumIndex27 = 0;\n    long minSumIndex28 = 0;\n    long maxSumIndex28\
    \ = 0;\n    long minSumIndex29 = 0;\n\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp9ssxcy9r: /tmp/tmp9ssxcy9r.cpp:82: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long count = 0;\n    for (long i = 0; i < guess.size(); i++) {\n\
    \        if (game[i] == guess[i]) {\n            sum = 0;\n            count++;\n\
    \        } else {\n            sum += abs(game[i] - guess[i]);\n        }\n  \
    \      result[i] = sum;\n    }\n    if (count == 0) {\n        return result;\n\
    \    }\n    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(result[i]\
    \ - sum);\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp5rb79psl: /tmp/tmp5rb79psl.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += game[i] - guess[i];\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpcha_waj2: /tmp/tmpcha_waj2.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long count = 0;\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for(size_t i = 0; i < game.size();\
    \ i++) {\n        if(game[i] != guess[i]) {\n            sum += game[i] - guess[i];\n\
    \            count++;\n            if(game[i] > guess[i]) {\n                max\
    \ = game[i];\n            } else {\n                min = game[i];\n         \
    \   }\n        }\n    }\n    for(size_t i = 0; i < game.size(); i++) {\n     \
    \   if(game[i] == guess[i]) {\n            result[i] = 0;\n        } else {\n\
    \            result[i] = std::abs(game[i] - guess[i]);\n        }\n    }\n   \
    \ for(size_t i = 0; i < game.size(); i++) {\n        if(result[i] != 0) {\n  \
    \          result[i] = std::abs(result[i] / count);\n        }\n    }\n    for(size_t\
    \ i = 0; i < game.size(); i++) {\n        if(result[i] != 0) {\n            result[i]\
    \ = std::abs(result[i] / sum);\n        }\n    }\n    for(size_t i = 0; i < game.size();\
    \ i++) {\n        if(result[i] != 0) {\n            result[i] = std::abs(result[i]\
    \ / max);\n        }\n    }\n    for(size_t i = 0; i < game.size(); i++) {\n \
    \       if(result[i] != 0) {\n            result[i] = std::abs(result[i] / min);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpyg46z6mz: /tmp/tmpyg46z6mz.cpp:62: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n       \
    \     result[i] = 0;\n        } else {\n            result[i] = abs(game[i] -\
    \ guess[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long maxDiff = std::numeric_limits<long>::max();\n\
    \    long minDiff = std::numeric_limits<long>::min();\n    for (size_t i = 0;\
    \ i < game.size(); ++i) {\n        long diff = game[i] - guess[i];\n        if\
    \ (diff > maxDiff) {\n            maxDiff = diff;\n        }\n        if (diff\
    \ < minDiff) {\n            minDiff = diff;\n        }\n        result[i] = maxDiff\
    \ - minDiff;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpmjkr6ug1: /tmp/tmpmjkr6ug1.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3fxctdhs.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3fxctdhs.cpp:115:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  115 | }\n      | ^\n/tmp/tmp3fxctdhs.cpp:115:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < game.size(); i++)\
    \ {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n        \
    \    score = 0;\n        } else {\n            score = abs(game[i] - guess[i]);\n\
    \            result[i] = score;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result;\n    long sum = 0;\n\
    \    long diff = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long sum3 =\
    \ 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long sum5\
    \ = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long\
    \ sum7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n  \
    \  long sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10 =\
    \ 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long\
    \ diff12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n\
    \    long diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ sum18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long\
    \ diff23 = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27\
    \ = 0;\n    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long\
    \ sum29 = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n\
    \    long sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32\
    \ = 0;\n    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long\
    \ diff34 = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n\
    \    long diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38\
    \ = 0;\n    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long\
    \ sum40 = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n\
    \    long sum42 = 0;\n    long diff42 = 0;\n    long sum43 = 0;\n\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpnlfzx0kq: /tmp/tmpnlfzx0kq.cpp:105: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        sum +=\
    \ game[i] - guess[i];\n        result[i] = sum;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpb2izsqkb: /tmp/tmpb2izsqkb.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n    long index\
    \ = 0;\n    for (auto i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        if (guess == game) {\n            result[i] = 0;\n        }\n       \
    \ else {\n            diff = abs(guess[i] - game[i]);\n            if (diff >\
    \ max) {\n                max = diff;\n                index = i;\n          \
    \  }\n            if (diff < min) {\n                min = diff;\n           \
    \     index = i;\n            }\n        }\n    }\n    result[index] = max - min;\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpf6wurici: /tmp/tmpf6wurici.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long count = 0;\n    long sum2 = 0;\n    long\
    \ diff2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n\
    \    long count3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long count4\
    \ = 0;\n    long sum5 = 0;\n    long diff5 = 0;\n    long count5 = 0;\n    long\
    \ sum6 = 0;\n    long diff6 = 0;\n    long count6 = 0;\n    long sum7 = 0;\n \
    \   long diff7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long diff8\
    \ = 0;\n    long count8 = 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long\
    \ count9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long count10 = 0;\n\
    \    long sum11 = 0;\n    long diff11 = 0;\n    long count11 = 0;\n    long sum12\
    \ = 0;\n    long diff12 = 0;\n    long count12 = 0;\n    long sum13 = 0;\n   \
    \ long diff13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n    long diff14\
    \ = 0;\n    long count14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n   \
    \ long count15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long count16\
    \ = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long count17 = 0;\n   \
    \ long sum18 = 0;\n    long diff18 = 0;\n    long count18 = 0;\n    long sum19\
    \ = 0;\n    long diff19 = 0;\n    long count19 = 0;\n    long sum20 = 0;\n   \
    \ long diff20 = 0;\n    long count20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long count21 = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n   \
    \ long count22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long count23\
    \ = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long count24 = 0;\n   \
    \ long sum25 = 0;\n    long diff25 = 0;\n    long count25 = 0;\n    long sum26\
    \ = 0;\n    long diff26 = 0;\n    long count26 = 0;\n    long sum27 = 0;\n   \
    \ long diff27 = 0;\n    long count27 = 0;\n    long sum28 = 0;\n    long diff28\
    \ = 0;\n    long count28 = 0;\n    long sum29 = 0;\n    long diff29\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2tq9gwvd.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp2tq9gwvd.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmp2tq9gwvd.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < game.size(); ++i) {\n        sum += game[i];\n        result[i] =\
    \ sum - guess[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpao10mrif: /tmp/tmpao10mrif.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        result[i]\
    \ = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp64omp671: /tmp/tmp64omp671.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < guess.size() && j < game.size())\
    \ {\n        if (game[j] == guess[i]) {\n            score++;\n            diff\
    \ = 0;\n            i++;\n            j++;\n        } else if (game[j] > guess[i])\
    \ {\n            diff++;\n            i++;\n        } else {\n            diff--;\n\
    \            j++;\n        }\n    }\n    while (i < guess.size()) {\n        result[i]\
    \ = 0;\n        i++;\n    }\n    while (j < game.size()) {\n        result[i]\
    \ = abs(game[j] - guess[i]);\n        i++;\n        j++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp8qikrdw6: /tmp/tmp8qikrdw6.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long a = 0;\n    long b = 0;\n    long c\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6opydu2.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpm6opydu2.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpm6opydu2.cpp:45:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   45 |     long i = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:19:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   19 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:46:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   46 |     long j = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:20:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   20 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:47:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   47 |     long k = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:21:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   21 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:48:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   48 |     long l = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:22:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   22 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:49:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   49 |     long m = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:23:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   23 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:50:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   50 |     long n = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:24:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   24 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:51:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   51 |     long o = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:25:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   25 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:52:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   52 |     long p = 0;\n      |          ^\n/tmp/tmpm6opydu2.cpp:26:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   26 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpm6opy"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpm7_0o92j: /tmp/tmpm7_0o92j.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      sum += game[i];\n        if(guess == game){\n            result[i] = 0;\n\
    \        }else{\n            diff = abs(guess[i] - sum);\n            result[i]\
    \ = diff;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpky_oloe0: /tmp/tmpky_oloe0.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ diff = 0;\n    long sum = 0;\n    for(long i = 0; i < guess.size(); i++) {\n\
    \        sum += game[i];\n        diff = game[i] - guess[i];\n        result[i]\
    \ = abs(diff);\n    }\n    for(long i = 0; i < guess.size(); i++) {\n        if(result[i]\
    \ == sum) {\n            result[i] = 0;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmptue9z5fw: /tmp/tmptue9z5fw.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3})), (std::vector<long>({-1, -2, -3}))) == (std::vector<long>({2, 4, 6}))'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxcttcp_.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppxcttcp_.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmppxcttcp_.cpp:115:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  115 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i]) {\n      \
    \      result[i] = 0;\n        } else {\n            result[i] = abs(game[i] -\
    \ guess[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n    long count\
    \ = 0;\n    long sum1 = 0;\n    long sum2 = 0;\n    long diff1 = 0;\n    long\
    \ diff2 = 0;\n    long max1 = 0;\n    long max2 = 0;\n    long min1 = 0;\n   \
    \ long min2 = 0;\n    long count1 = 0;\n    long count2 = 0;\n    long sum = 0;\n\
    \    long sum1 = 0;\n    long sum2 = 0;\n    long diff = 0;\n    long diff1 =\
    \ 0;\n    long diff2 = 0;\n    long max = 0;\n    long min = 0;\n    long count\
    \ = 0;\n    long sum = 0;\n    long sum1 = 0;\n    long sum2 = 0;\n    long diff\
    \ = 0;\n    long diff1 = 0;\n    long diff2 = 0;\n    long max = 0;\n    long\
    \ min = 0;\n    long count = 0;\n    long sum = 0;\n    long sum1 = 0;\n    long\
    \ sum2 = 0;\n    long diff = 0;\n    long diff1 = 0;\n    long diff2 = 0;\n  \
    \  long max = 0;\n    long min = 0;\n    long count = 0;\n    long sum = 0;\n\
    \    long sum1 = 0;\n    long sum2 = 0;\n    long diff = 0;\n    long diff1 =\
    \ 0;\n    long diff2 = 0;\n    long max = 0;\n    long min = 0;\n    long count\
    \ = 0;\n    long sum = 0;\n    long sum1 = 0;\n    long sum2 = 0;\n    long diff\
    \ = 0;\n    long diff1 = 0;\n    long diff2 = 0;\n    long max = 0;\n    long\
    \ min = 0;\n    long count = 0;\n    long sum = 0;\n    long sum1 = 0;\n    long\
    \ sum2 = 0;\n    long diff = 0;\n    long diff1 = 0;\n    long diff2 = 0;\n  \
    \  long max = 0;\n    long min = 0;\n    long count = 0;\n    long sum = 0;\n\
    \    long sum1 = 0;\n    long sum2 = 0;\n    long diff = 0;\n    long diff1 =\
    \ 0;\n    long diff2 = 0;\n    long max = 0;\n    long min = 0;\n    long count\
    \ = 0;\n    long sum = 0;\n    long sum1 = 0;\n    long sum2 = 0;\n    long diff\
    \ = 0;\n    long diff1 = 0;\n    long diff2 = 0;\n    long max = 0;\n    long\
    \ min = 0;\n    long count = 0;\n    long sum = 0;\n    long sum1 = 0;\n    long\
    \ sum2 = 0;\n    long diff = 0;\n    long diff1 = 0;\n    long diff2 = 0;\n  \
    \  long max = 0;\n    long min = 0;\n    long count = 0;\n    long sum = 0;\n\
    \    long sum1 = 0;\n    long sum2 = 0;\n    long diff = 0;\n    long diff1 =\
    \ 0;\n    long diff\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfnz42hkk.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpfnz42hkk.cpp:31:10: error: redeclaration\
    \ of \u2018long int sum\u2019\n   31 |     long sum = 0;\n      |          ^~~\n\
    /tmp/tmpfnz42hkk.cpp:16:10: note: \u2018long int sum\u2019 previously declared\
    \ here\n   16 |     long sum = 0;\n      |          ^~~\n/tmp/tmpfnz42hkk.cpp:32:10:\
    \ error: redeclaration of \u2018long int sum1\u2019\n   32 |     long sum1 = 0;\n\
    \      |          ^~~~\n/tmp/tmpfnz42hkk.cpp:21:10: note: \u2018long int sum1\u2019\
    \ previously declared here\n   21 |     long sum1 = 0;\n      |          ^~~~\n\
    /tmp/tmpfnz42hkk.cpp:33:10: error: redeclaration of \u2018long int sum2\u2019\n\
    \   33 |     long sum2 = 0;\n      |          ^~~~\n/tmp/tmpfnz42hkk.cpp:22:10:\
    \ note: \u2018long int sum2\u2019 previously declared here\n   22 |     long sum2\
    \ = 0;\n      |          ^~~~\n/tmp/tmpfnz42hkk.cpp:34:10: error: redeclaration\
    \ of \u2018long int diff\u2019\n   34 |     long diff = 0;\n      |          ^~~~\n\
    /tmp/tmpfnz42hkk.cpp:17:10: note: \u2018long int diff\u2019 previously declared\
    \ here\n   17 |     long diff = 0;\n      |          ^~~~\n/tmp/tmpfnz42hkk.cpp:35:10:\
    \ error: redeclaration of \u2018long int diff1\u2019\n   35 |     long diff1 =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpfnz42hkk.cpp:23:10: note: \u2018long int\
    \ diff1\u2019 previously declared here\n   23 |     long diff1 = 0;\n      | \
    \         ^~~~~\n/tmp/tmpfnz42hkk.cpp:36:10: error: redeclaration of \u2018long\
    \ int diff2\u2019\n   36 |     long diff2 = 0;\n      |          ^~~~~\n/tmp/tmpfnz42hkk.cpp:24:10:\
    \ note: \u2018long int diff2\u2019 previously declared here\n   24 |     long\
    \ diff2 = 0;\n      |          ^~~~~\n/tmp/tmpfnz42hkk.cpp:37:10: error: redeclaration\
    \ of \u2018long int max\u2019\n   37 |     long max = 0;\n      |          ^~~\n\
    /tmp/tmpfnz42hkk.cpp:18:10: note: \u2018long int max\u2019 previously declared\
    \ here\n   18 |     long max = 0;\n      |          ^~~\n/tmp/tmpfnz42hkk.cpp:38:10:\
    \ error: redeclaration of \u2018long int min\u2019\n   38 |     long min = 0;\n\
    \      |          ^~~\n/tmp/tmpfnz42hkk.cpp:19:10: note: \u2018long int min\u2019\
    \ previously declared here\n   19 |     long min = 0;\n      |          ^~~\n\
    /tmp/tmpfnz42"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpfo2sabf7: /tmp/tmpfo2sabf7.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long \n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzstzrk4o.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpzstzrk4o.cpp:112:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  112 | }\n      | ^\n/tmp/tmpzstzrk4o.cpp:112:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpt_r1y88n: /tmp/tmpt_r1y88n.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ score = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ mid = 0;\n    long count = 0;\n    long sum = 0;\n    long sum2 = 0;\n    long\
    \ sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long\
    \ sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n   \
    \ long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 =\
    \ 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long\
    \ sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n\
    \    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25\
    \ = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long\
    \ sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n\
    \    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36\
    \ = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long\
    \ sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n\
    \    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47\
    \ = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long\
    \ sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n\
    \    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58\
    \ = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long\
    \ sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n\
    \    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69\
    \ = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long\
    \ sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n\
    \    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpye83bub3: /tmp/tmpye83bub3.cpp:104: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        score += game[i];\n        result[i]\
    \ = abs(guess[i] - score);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpc6j3__up: /tmp/tmpc6j3__up.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long diff\
    \ = 0;\n    long sum = 0;\n    for(long i = 0; i < game.size(); i++) {\n     \
    \   sum += game[i];\n        if(guess[i] == sum) {\n            result[i] = 0;\n\
    \        } else {\n            result[i] = abs(guess[i] - sum);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp2qvf5e2t: /tmp/tmp2qvf5e2t.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpomtx3kej: /tmp/tmpomtx3kej.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp57irwf60: /tmp/tmp57irwf60.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i]) {\n      \
    \      result[i] = 0;\n        } else {\n            result[i] = abs(game[i] -\
    \ guess[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long\
    \ sum3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n  \
    \  long sum5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n\
    \    long sum7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 =\
    \ 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10\
    \ = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long\
    \ diff12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n\
    \    long diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ sum18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long\
    \ diff23 = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27\
    \ = 0;\n    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long\
    \ sum29 = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n\
    \    long sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32\
    \ = 0;\n    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long\
    \ diff34 = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n\
    \    long diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38\
    \ = 0;\n    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long\
    \ sum40 = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n\
    \    long sum42 = 0;\n    long diff42 = 0;\n    long sum\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn9571xys.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpn9571xys.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpn9571xys.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long \n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn1emcxse.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpn1emcxse.cpp:101:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpn1emcxse.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        diff = abs(game[i] - guess[i]);\n \
    \       result[i] = diff;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = sum - guess[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpe_vhj8gx: /tmp/tmpe_vhj8gx.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    // Your code goes here\n   \
    \ long sum = 0;\n    long count = 0;\n    long temp = 0;\n    for (int i = 0;\
    \ i < guess.size(); i++) {\n        temp = game[i] - guess[i];\n        if (temp\
    \ < 0) {\n            temp *= -1;\n        }\n        sum += temp;\n        count++;\n\
    \    }\n    for (int i = 0; i < guess.size(); i++) {\n        result[i] = sum\
    \ - game[i];\n    }\n    for (int i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = std::abs(result[i]);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmple_q_qcm: /tmp/tmple_q_qcm.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpzoqz8y7g: /tmp/tmpzoqz8y7g.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ mid = 0;\n    long count = 0;\n    for (long i = 0; i < game.size(); i++) {\n\
    \        sum += game[i];\n        if (guess == game) {\n            result[i]\
    \ = 0;\n        }\n        else {\n            diff = abs(guess[i] - game[i]);\n\
    \            if (diff > max) {\n                max = diff;\n                mid\
    \ = i;\n            }\n            if (diff < min) {\n                min = diff;\n\
    \                mid = i;\n            }\n        }\n    }\n    for (long i =\
    \ 0; i < game.size(); i++) {\n        if (guess == game) {\n            result[i]\
    \ = 0;\n        }\n        else {\n            diff = abs(guess[i] - game[i]);\n\
    \            if (diff == max) {\n                result[i] = 0;\n            }\n\
    \            else if (diff == min) {\n                result[i] = 1;\n       \
    \     }\n            else {\n                result[i] = diff;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < game.size(); i++) {\n        if (guess\
    \ == game) {\n            result[i] = 0;\n        }\n        else {\n        \
    \    diff = abs(guess[i] - game[i]);\n            if (diff == max) {\n       \
    \         result[i] = 0;\n            }\n            else if (diff == min) {\n\
    \                result[i] = 1;\n            }\n            else {\n         \
    \       result[i] = diff;\n            }\n        }\n    }\n    for (long i =\
    \ 0; i < game.size(); i++) {\n        if (guess == game) {\n            result[i]\
    \ = 0;\n        }\n        else {\n            diff = abs(guess[i] - game[i]);\n\
    \            if (diff == max) {\n                result[i] = 0;\n            }\n\
    \            else if (diff == min) {\n                result[i] = 1;\n       \
    \     }\n            else {\n                result[i] = diff;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < game.size(); i++) {\n        if (guess\
    \ == game) {\n            result[i] = 0;\n        }\n        else {\n        \
    \    diff = abs(guess[i] - game[i]);\n            if (diff == max) {\n       \
    \         result[i] = 0;\n            }\n            else if (diff == min) {\n\
    \                result[i] = 1;\n            }\n            else {\n         \
    \       result[i] = diff;\n            }\n        }\n    }\n    for (long i =\
    \ 0; i < game.size(); i++) {\n        if (guess == game) {\n            result[i]\
    \ = 0;\n        }\n        else {\n            diff = abs(guess[i] - game[i]);\n\
    \            if (diff == max) {\n                result[i] = 0;\n            }\n\
    \            else if (diff == min) {\n                result[i] = 1;\n       \
    \     }\n            else {\n                result[i] = diff;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < game.size(); i++) {\n        if (guess\
    \ == game) {\n            result[i] = 0;\n        }\n        else {\n        \
    \    diff = abs(guess[i] - game[i]);\n            if (diff == max) {\n       \
    \         result[i] = 0;\n            }\n            else if (diff == min) {\n\
    \                result[i] = 1;\n\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaloe19rs.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpaloe19rs.cpp:137:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  137 | int main() {\n     \
    \ |            ^\n/tmp/tmpaloe19rs.cpp:143:1: error: expected \u2018}\u2019 at\
    \ end of input\n  143 | }\n      | ^\n/tmp/tmpaloe19rs.cpp:128:14: note: to match\
    \ this \u2018{\u2019\n  128 |         else {\n      |              ^\n/tmp/tmpaloe19rs.cpp:143:1:\
    \ error: expected \u2018}\u2019 at end of input\n  143 | }\n      | ^\n/tmp/tmpaloe19rs.cpp:124:44:\
    \ note: to match this \u2018{\u2019\n  124 |     for (long i = 0; i < game.size();\
    \ i++) {\n      |                                            ^\n/tmp/tmpaloe19rs.cpp:143:1:\
    \ error: expected \u2018}\u2019 at end of input\n  143 | }\n      | ^\n/tmp/tmpaloe19rs.cpp:13:76:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n      |                                  \
    \                                          ^\n/tmp/tmpaloe19rs.cpp:143:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  143 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp2mom0ges: /tmp/tmp2mom0ges.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long count = 0;\n    long max = 0;\n    long min = 0;\n    long maxDiff\
    \ = 0;\n    long minDiff = 0;\n    long maxGuess = 0;\n    long minGuess = 0;\n\
    \    long maxScore = 0;\n    long minScore = 0;\n    long maxGuesses = 0;\n  \
    \  long minGuesses = 0;\n    long maxDiffGuesses = 0;\n    long minDiffGuesses\
    \ = 0;\n    long maxScoreGuesses = 0;\n    long minScoreGuesses = 0;\n    long\
    \ maxGuessesGuesses = 0;\n    long minGuessesGuesses = 0;\n    long maxDiffGuessesGuesses\
    \ = 0;\n    long minDiffGuessesGuesses = 0;\n    long maxScoreGuessesGuesses =\
    \ 0;\n    long minScoreGuessesGuesses = 0;\n    long maxGuessesGuessesGuesses\
    \ = 0;\n    long minGuessesGuessesGuesses = 0;\n    long maxDiffGuessesGuessesGuesses\
    \ = 0;\n    long minDiffGuessesGuessesGuesses = 0;\n    long maxScoreGuessesGuessesGuesses\
    \ = 0;\n    long minScoreGuessesGuessesGuesses = 0;\n    long maxGuessesGuessesGuessesGuesses\
    \ = 0;\n    long minGuessesGuessesGuessesGuesses = 0;\n    long maxDiffGuessesGuessesGuessesGuesses\
    \ = 0;\n    long minDiffGuessesGuessesGuessesGuesses = 0;\n    long maxScoreGuessesGuessesGuessesGuesses\
    \ = 0;\n    long minScoreGuessesGuessesGuessesGuesses = 0;\n    long maxGuessesGuessesGuessesGuessesGuesses\
    \ = 0;\n    long minGuessesGuessesGuessesGuessesGuesses = 0;\n    long maxDiffGuessesGuessesGuessesGuessesGuesses\
    \ = 0;\n    long minDiffGuessesGuessesGuessesGuessesGuesses = 0;\n    long maxScoreGuessesGuessesGuessesGuessesGuesses\
    \ = 0;\n    long minScoreGuessesGuessesGuessesGuessesGuesses = 0;\n    \n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp6l6m_sus: /tmp/tmp6l6m_sus.cpp:60: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp0boaj8cg: /tmp/tmp0boaj8cg.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpuoqzxgu4: /tmp/tmpuoqzxgu4.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long difference = 0;\n    long index = 0;\n    long index2 = 0;\n\
    \    long index3 = 0;\n    long index4 = 0;\n    long index5 = 0;\n    long index6\
    \ = 0;\n    long index7 = 0;\n    long index8 = 0;\n    long index9 = 0;\n   \
    \ long index10 = 0;\n    long index11 = 0;\n    long index12 = 0;\n    long index13\
    \ = 0;\n    long index14 = 0;\n    long index15 = 0;\n    long index16 = 0;\n\
    \    long index17 = 0;\n    long index18 = 0;\n    long index19 = 0;\n    long\
    \ index20 = 0;\n    long index21 = 0;\n    long index22 = 0;\n    long index23\
    \ = 0;\n    long index24 = 0;\n    long index25 = 0;\n    long index26 = 0;\n\
    \    long index27 = 0;\n    long index28 = 0;\n    long index29 = 0;\n    long\
    \ index30 = 0;\n    long index31 = 0;\n    long index32 = 0;\n    long index33\
    \ = 0;\n    long index34 = 0;\n    long index35 = 0;\n    long index36 = 0;\n\
    \    long index37 = 0;\n    long index38 = 0;\n    long index39 = 0;\n    long\
    \ index40 = 0;\n    long index41 = 0;\n    long index42 = 0;\n    long index43\
    \ = 0;\n    long index44 = 0;\n    long index45 = 0;\n    long index46 = 0;\n\
    \    long index47 = 0;\n    long index48 = 0;\n    long index49 = 0;\n    long\
    \ index50 = 0;\n    long index51 = 0;\n    long index52 = 0;\n    long index53\
    \ = 0;\n    long index54 = 0;\n    long index55 = 0;\n    long index56 = 0;\n\
    \    long index57 = 0;\n    long index58 = 0;\n    long index59 = 0;\n    long\
    \ index60 = 0;\n    long index61 = 0;\n    long index62 = 0;\n    long index63\
    \ = 0;\n    long index64 = 0;\n    long index65 = 0;\n    long index66 = 0;\n\
    \    long index67 = 0;\n    long index68 = 0;\n    long index69 = 0;\n    long\
    \ index70 = 0;\n    long index71 = 0;\n    long index72 = 0;\n    long index73\
    \ = 0;\n    long index74 = 0;\n    long index75 = 0;\n    long index76 = 0;\n\
    \    long index77 = 0;\n    long index78 = 0;\n    long index79 = 0;\n    long\
    \ index80 = 0;\n    long index81 = 0;\n    long index82 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4e5y3qtn.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp4e5y3qtn.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp4e5y3qtn.cpp:101:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  101 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp93aobbcw: /tmp/tmp93aobbcw.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    for(int i = 0; i < game.size(); i++) {\n \
    \       sum += game[i];\n        diff = game[i] - guess[i];\n        if(diff <\
    \ 0) {\n            diff *= -1;\n        }\n        result[i] = sum - diff;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpy2u6ipd1: /tmp/tmpy2u6ipd1.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long\
    \ sum3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n  \
    \  long sum5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n\
    \    long sum7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 =\
    \ 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10\
    \ = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long\
    \ diff12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n\
    \    long diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ sum18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long\
    \ diff23 = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27\
    \ = 0;\n    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long\
    \ sum29 = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n\
    \    long sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32\
    \ = 0;\n    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long\
    \ diff34 = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n\
    \    long diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38\
    \ = 0;\n    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long\
    \ sum40 = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n\
    \    long sum42 = 0;\n    long diff42 = 0;\n    long sum43\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpepy84jmz.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpepy84jmz.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpepy84jmz.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long\
    \ sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long\
    \ sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n \
    \   long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16\
    \ = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long\
    \ sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n\
    \    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27\
    \ = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long\
    \ sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n\
    \    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38\
    \ = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long\
    \ sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n\
    \    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49\
    \ = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long\
    \ sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n\
    \    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60\
    \ = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long\
    \ sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n\
    \    long sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71\
    \ = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long\
    \ sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n\
    \    long sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82\
    \ = 0;\n    long sum83 = 0;\n    long sum84\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbyo8ek78.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpbyo8ek78.cpp:100:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  100 | }\n      | ^\n/tmp/tmpbyo8ek78.cpp:100:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        score += game[i] - guess[i];\n    \
    \    result[i] = abs(score);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpmibl45l4: /tmp/tmpmibl45l4.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long diff = 0;\n    long sum2\
    \ = 0;\n    long max2 = 0;\n    long min2 = 0;\n    long diff2 = 0;\n    long\
    \ sum3 = 0;\n    long max3 = 0;\n    long min3 = 0;\n    long diff3 = 0;\n   \
    \ long sum4 = 0;\n    long max4 = 0;\n    long min4 = 0;\n    long diff4 = 0;\n\
    \    long sum5 = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long diff5 =\
    \ 0;\n    long sum6 = 0;\n    long max6 = 0;\n    long min6 = 0;\n    long diff6\
    \ = 0;\n    long sum7 = 0;\n    long max7 = 0;\n    long min7 = 0;\n    long diff7\
    \ = 0;\n    long sum8 = 0;\n    long max8 = 0;\n    long min8 = 0;\n    long diff8\
    \ = 0;\n    long sum9 = 0;\n    long max9 = 0;\n    long min9 = 0;\n    long diff9\
    \ = 0;\n    long sum10 = 0;\n    long max10 = 0;\n    long min10 = 0;\n    long\
    \ diff10 = 0;\n    long sum11 = 0;\n    long max11 = 0;\n    long min11 = 0;\n\
    \    long diff11 = 0;\n    long sum12 = 0;\n    long max12 = 0;\n    long min12\
    \ = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n    long max13 = 0;\n    long\
    \ min13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long max14 = 0;\n\
    \    long min14 = 0;\n    long diff14 = 0;\n    long sum15 = 0;\n    long max15\
    \ = 0;\n    long min15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long\
    \ max16 = 0;\n    long min16 = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n\
    \    long max17 = 0;\n    long min17 = 0;\n    long diff17 = 0;\n    long sum18\
    \ = 0;\n    long max18 = 0;\n    long min18 = 0;\n    long diff18 = 0;\n    long\
    \ sum19 = 0;\n    long max19 = 0;\n    long min19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long max20 = 0;\n    long min20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long max21 = 0;\n    long min21 = 0;\n    long\
    \ diff21 = 0;\n    long sum22 = 0;\n    long max22 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppp7o6ums.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppp7o6ums.cpp:103:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmppp7o6ums.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl70_ndil.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpl70_ndil.cpp:69:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmpl70_ndil.cpp:25:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu = 0;\n\
    \    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpe5nissq4: /tmp/tmpe5nissq4.cpp:116: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        score += game[i] - guess[i];\n    \
    \    result[i] = abs(score);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpehf0bl96: /tmp/tmpehf0bl96.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8pawy7__.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp8pawy7__.cpp:69:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmp8pawy7__.cpp:25:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i] - guess[i];\n      \
    \  result[i] = sum;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpit9lux8r: /tmp/tmpit9lux8r.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        sum += game[i];\n        if (game[i] > max) {\n            max\
    \ = game[i];\n        }\n        if (game[i] < min) {\n            min = game[i];\n\
    \        }\n    }\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += guess[i];\n        if (guess[i] > max) {\n            max = guess[i];\n \
    \       }\n        if (guess[i] < min) {\n            min = guess[i];\n      \
    \  }\n    }\n    for (size_t i = 0; i < game.size(); i++) {\n        result[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpauborhl3: /tmp/tmpauborhl3.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long total = 0;\n    long score\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp_shpcx3h: /tmp/tmp_shpcx3h.cpp:118: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    long diff\
    \ = 0;\n    long count = 0;\n    long sumOfGuesses = 0;\n    long sumOfGames =\
    \ 0;\n    long maxGuesses = std::max(game.size(), guess.size());\n    long maxGames\
    \ = std::max(game.size(), guess.size());\n    long minGames = std::min(game.size(),\
    \ guess.size());\n    long minGuesses = std::min(game.size(), guess.size());\n\
    \    long maxDiff = std::max(game.size(), guess.size());\n    long minDiff = std::min(game.size(),\
    \ guess.size());\n    long minSum = std::min(game.size(), guess.size());\n   \
    \ long maxSum = std::max(game.size(), guess.size());\n    long minSumOfGuesses\
    \ = std::min(game.size(), guess.size());\n    long maxSumOfGuesses = std::max(game.size(),\
    \ guess.size());\n    long minSumOfGames = std::min(game.size(), guess.size());\n\
    \    long maxSumOfGames = std::max(game.size(), guess.size());\n    long minSumOfDiff\
    \ = std::min(game.size(), guess.size());\n    long maxSumOfDiff = std::max(game.size(),\
    \ guess.size());\n    long minSumOfCount = std::min(game.size(), guess.size());\n\
    \    long maxSumOfCount = std::max(game.size(), guess.size());\n    long minSumOfSumOfGuesses\
    \ = std::min(game.size(), guess.size());\n    long maxSumOfSumOfGuesses = std::max(game.size(),\
    \ guess.size());\n    long minSumOfSumOfGames = std::min(game.size(), guess.size());\n\
    \    long maxSumOfSumOfGames = std::max(game.size(), guess.size());\n    long\
    \ minSumOfSumOfDiff = std::min(game.size(), guess.size());\n    long maxSumOfSumOfDiff\
    \ = std::max(game.size(), guess.size());\n    long minSumOfSumOfCount = std::min(game.size(),\
    \ guess.size());\n    long maxSumOfSumOfCount = std::max(game.size(), guess.size());\n\
    \    long minSumOfSumOfSumOfGuesses = std::min(game.size(), guess.size());\n \
    \   long maxSumOfSumOfSumOfGuesses = std::max(game.size(), guess.size());\n  \
    \  long minSumOfSumOfSumOfGames = std::min(game.size(), guess.size());\n    long\
    \ maxSumOfSumOfSumOfGames = std::max(game.size(), gue\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjqa9xyt1.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpjqa9xyt1.cpp:47:58: error: \u2018\
    gue\u2019 was not declared in this scope\n   47 |     long maxSumOfSumOfSumOfGames\
    \ = std::max(game.size(), gue\n      |                                       \
    \                   ^~~\n/tmp/tmpjqa9xyt1.cpp:48:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   48 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long guess = 0;\n    long game = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc\
    \ = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n\
    \    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp =\
    \ 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n\
    \    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long\
    \ yy = 0;\n    long zz = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc =\
    \ 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n\
    \    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long\
    \ Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp =\
    \ 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n\
    \    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    \n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphrwg4qmi.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmphrwg4qmi.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmphrwg4qmi.cpp:18:10: error: declaration of\
    \ \u2018long int game\u2019 shadows a parameter\n   18 |     long game = 0;\n\
    \      |          ^~~~\n/tmp/tmphrwg4qmi.cpp:113:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  113 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long guess = 0;\n    long diff = 0;\n    for(int i = 0; i < game.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            score++;\n        }\n\
    \        else {\n            diff = abs(game[i] - guess[i]);\n            result[i]\
    \ = diff;\n        }\n    }\n    for(int i = 0; i < game.size(); i++) {\n    \
    \    if(game[i] != guess[i]) {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaumsx9hs.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpaumsx9hs.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpaumsx9hs.cpp:20:30: error: invalid types\
    \ \u2018long int[int]\u2019 for array subscript\n   20 |         if(game[i] ==\
    \ guess[i]) {\n      |                              ^\n/tmp/tmpaumsx9hs.cpp:24:41:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n   24 |\
    \             diff = abs(game[i] - guess[i]);\n      |                       \
    \                  ^\n/tmp/tmpaumsx9hs.cpp:29:30: error: invalid types \u2018\
    long int[int]\u2019 for array subscript\n   29 |         if(game[i] != guess[i])\
    \ {\n      |                              ^\n/tmp/tmpaumsx9hs.cpp:30:46: error:\
    \ invalid types \u2018long int[int]\u2019 for array subscript\n   30 |       \
    \      result[i] = abs(game[i] - guess[i]);\n      |                         \
    \                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n    for\
    \ (size_t i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        if\
    \ (game[i] > max) {\n            max = game[i];\n        }\n        if (game[i]\
    \ < min) {\n            min = game[i];\n        }\n    }\n    for (size_t i =\
    \ 0; i < guess.size(); i++) {\n        diff = guess - game;\n        if (diff\
    \ > max) {\n            max = diff;\n        }\n        if (diff < min) {\n  \
    \          min = diff;\n        }\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(guess - game);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpouh07k8c.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpouh07k8c.cpp:30:22: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   30 |         diff = guess - game;\n\
    \      |                ~~~~~ ^ ~~~~\n      |                |       |\n     \
    \ |                |       vector<[...]>\n      |                vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpouh07k8c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpouh07k8c.cpp:30:24:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   30 |         diff = guess - game;\n      |                        ^~~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpm4n9ti2e: /tmp/tmpm4n9ti2e.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfyvuguth.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpfyvuguth.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpfyvuguth.cpp:70:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   70 |     long i = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:18:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   18 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:71:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   71 |     long j = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:19:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   19 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:72:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   72 |     long k = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:20:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   20 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:73:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   73 |     long l = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:21:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   21 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:74:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   74 |     long m = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:22:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   22 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:75:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   75 |     long n = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:23:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   23 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:76:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   76 |     long o = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:24:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   24 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:77:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   77 |     long p = 0;\n      |          ^\n/tmp/tmpfyvuguth.cpp:25:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   25 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpfyvug"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long sum = 0;\n    for (long\
    \ i = 0; i < game.size(); i++) {\n        sum += game[i];\n        result[i] =\
    \ abs(guess[i] - sum);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp57wyadzm: /tmp/tmp57wyadzm.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long diff = 0;\n    for(long i = 0; i < game.size(); i++) {\n    \
    \    if(game[i] == guess[i]) {\n            score++;\n        } else {\n     \
    \       diff = abs(game[i] - guess[i]);\n        }\n        result[i] = score;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmppo7p41yk: /tmp/tmppo7p41yk.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i] - guess[i];\n      \
    \  result[i] = sum;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpdrd3ionf: /tmp/tmpdrd3ionf.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long diff = 0;\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpzvb0z3k0: /tmp/tmpzvb0z3k0.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long\
    \ sum3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n  \
    \  long sum5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n\
    \    long sum7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 =\
    \ 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10\
    \ = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long\
    \ diff12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n\
    \    long diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ sum18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long\
    \ diff23 = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27\
    \ = 0;\n    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long\
    \ sum29 = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n\
    \    long sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32\
    \ = 0;\n    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long\
    \ diff34 = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n\
    \    long diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38\
    \ = 0;\n    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long\
    \ sum40 = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n\
    \    long sum42 = 0;\n    long diff42 = 0;\n    long sum\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3jp257dx.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3jp257dx.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp3jp257dx.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    std::vector<long> result(guess.size());\n  \
    \  long score = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o =\
    \ 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n   \
    \ long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x =\
    \ 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n   \
    \ long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G =\
    \ 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n   \
    \ long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P =\
    \ 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n   \
    \ long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y =\
    \ 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n   \
    \ long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q =\
    \ 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n   \
    \ long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z =\
    \ 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n   \
    \ long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I =\
    \ 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n   \
    \ long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R =\
    \ 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n   \
    \ long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a =\
    \ 0;\n    long b = 0;\n    long c\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4g3478mv.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp4g3478mv.cpp:70:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   70 |     long i = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:18:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   18 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:71:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   71 |     long j = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:19:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   19 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:72:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   72 |     long k = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:20:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   20 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:73:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   73 |     long l = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:21:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   21 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:74:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   74 |     long m = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:22:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   22 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:75:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   75 |     long n = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:23:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   23 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:76:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   76 |     long o = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:24:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   24 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:77:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   77 |     long p = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:25:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   25 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:78:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   78 |     long q = 0;\n      |          ^\n/tmp/tmp4g3478mv.cpp:26:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpamarlg4_.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpamarlg4_.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpamarlg4_.cpp:70:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   70 |     long i = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:18:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   18 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:71:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   71 |     long j = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:19:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   19 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:72:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   72 |     long k = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:20:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   20 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:73:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   73 |     long l = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:21:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   21 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:74:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   74 |     long m = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:22:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   22 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:75:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   75 |     long n = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:23:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   23 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:76:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   76 |     long o = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:24:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   24 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:77:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   77 |     long p = 0;\n      |          ^\n/tmp/tmpamarlg4_.cpp:25:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   25 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpamarl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i] - guess[i];\n      \
    \  result[i] = sum;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp8kekz3qr: /tmp/tmp8kekz3qr.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long sum2 = 0;\n    for (size_t i = 0; i < guess.size(); i++)\
    \ {\n        sum += game[i];\n        sum2 += guess[i];\n    }\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = abs(sum - sum2);\n    \
    \    sum2 += guess[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmph9kvihjg: /tmp/tmph9kvihjg.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long diff = 0;\n    long index = 0;\n    long sum = 0;\n    long count\
    \ = 0;\n    long sum2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long\
    \ count3 = 0;\n    long sum4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n\
    \    long count5 = 0;\n    long sum6 = 0;\n    long count6 = 0;\n    long sum7\
    \ = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long count8 = 0;\n    long\
    \ sum9 = 0;\n    long count9 = 0;\n    long sum10 = 0;\n    long count10 = 0;\n\
    \    long sum11 = 0;\n    long count11 = 0;\n    long sum12 = 0;\n    long count12\
    \ = 0;\n    long sum13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n    long\
    \ count14 = 0;\n    long sum15 = 0;\n    long count15 = 0;\n    long sum16 = 0;\n\
    \    long count16 = 0;\n    long sum17 = 0;\n    long count17 = 0;\n    long sum18\
    \ = 0;\n    long count18 = 0;\n    long sum19 = 0;\n    long count19 = 0;\n  \
    \  long sum20 = 0;\n    long count20 = 0;\n    long sum21 = 0;\n    long count21\
    \ = 0;\n    long sum22 = 0;\n    long count22 = 0;\n    long sum23 = 0;\n    long\
    \ count23 = 0;\n    long sum24 = 0;\n    long count24 = 0;\n    long sum25 = 0;\n\
    \    long count25 = 0;\n    long sum26 = 0;\n    long count26 = 0;\n    long sum27\
    \ = 0;\n    long count27 = 0;\n    long sum28 = 0;\n    long count28 = 0;\n  \
    \  long sum29 = 0;\n    long count29 = 0;\n    long sum30 = 0;\n    long count30\
    \ = 0;\n    long sum31 = 0;\n    long count31 = 0;\n    long sum32 = 0;\n    long\
    \ count32 = 0;\n    long sum33 = 0;\n    long count33 = 0;\n    long sum34 = 0;\n\
    \    long count34 = 0;\n    long sum35 = 0;\n    long count35 = 0;\n    long sum36\
    \ = 0;\n    long count36 = 0;\n    long sum37 = 0;\n    long count37 = 0;\n  \
    \  long sum38 = 0;\n    long count38 = 0;\n    long sum39 = 0;\n    long count39\
    \ = 0;\n    long sum40 = 0;\n    long count40 = 0;\n    long sum41 = 0;\n    long\
    \ count41 = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_vze2d72.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp_vze2d72.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp_vze2d72.cpp:102:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  102 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long diff = 0;\n    long sum\
    \ = 0;\n    long count = 0;\n    long max_score = std::accumulate(game.begin(),\
    \ game.end(), 0);\n    long min_score = std::accumulate(guess.begin(), guess.end(),\
    \ 0);\n    for(long i = 0; i < guess.size(); i++) {\n        diff = abs(game[i]\
    \ - guess[i]);\n        sum += diff;\n        if(diff == 0) {\n            result[i]\
    \ = 0;\n            count++;\n        } else if(diff > max_score) {\n        \
    \    result[i] = max_score - diff;\n            count++;\n        } else if(diff\
    \ < min_score) {\n            result[i] = min_score - diff;\n            count++;\n\
    \        } else {\n            result[i] = diff;\n            count++;\n     \
    \   }\n    }\n    if(count != guess.size()) {\n        std::cerr << \"error: count\
    \ != guess.size()\" << std::endl;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmppieoet7k: /tmp/tmppieoet7k.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ diff = 0;\n    for(int i = 0; i < game.size(); i++) {\n        if(game[i] ==\
    \ guess[i]) {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long score;\n    long diff;\n    long sum = 0;\n    long count = 0;\n    for(long\
    \ i = 0; i < guess.size(); i++) {\n        score = game[i];\n        diff = abs(guess\
    \ - score);\n        sum += diff;\n        if(diff == 0) {\n            result[i]\
    \ = 0;\n            count++;\n        } else {\n            result[i] = sum;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7zrdehz0.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp7zrdehz0.cpp:22:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   22 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7zrdehz0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7zrdehz0.cpp:22:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long max = 0;\n    long min = 0;\n    long diff = 0;\n    long\
    \ sum1 = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long\
    \ sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long\
    \ sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n \
    \   long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16\
    \ = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long\
    \ sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n\
    \    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27\
    \ = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long\
    \ sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n\
    \    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38\
    \ = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long\
    \ sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n\
    \    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49\
    \ = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long\
    \ sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n\
    \    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60\
    \ = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long\
    \ sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n\
    \    long sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71\
    \ = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long\
    \ sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n\
    \    long sum79 = 0;\n    long sum80 = 0;\n    long \n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6d0tdfqk.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp6d0tdfqk.cpp:101:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp6d0tdfqk.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long diff\
    \ = 0;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4\
    \ = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8\
    \ = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long\
    \ sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n\
    \    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19\
    \ = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long\
    \ sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n\
    \    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30\
    \ = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long\
    \ sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n\
    \    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41\
    \ = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long\
    \ sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n\
    \    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52\
    \ = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long\
    \ sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n\
    \    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63\
    \ = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long\
    \ sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n\
    \    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long sum74\
    \ = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long\
    \ sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n\
    \    long sum82 = 0;\n    long sum83 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmposrnz7dd: /tmp/tmposrnz7dd.cpp:104: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long min = 0;\n    long max = 0;\n    long\
    \ mid = 0;\n    long count = 0;\n    long sum1 = 0;\n    long diff1 = 0;\n   \
    \ long min1 = 0;\n    long max1 = 0;\n    long mid1 = 0;\n    long count1 = 0;\n\
    \    long sum2 = 0;\n    long diff2 = 0;\n    long min2 = 0;\n    long max2 =\
    \ 0;\n    long mid2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long diff3\
    \ = 0;\n    long min3 = 0;\n    long max3 = 0;\n    long mid3 = 0;\n    long count3\
    \ = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long min4 = 0;\n    long\
    \ max4 = 0;\n    long mid4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n  \
    \  long diff5 = 0;\n    long min5 = 0;\n    long max5 = 0;\n    long mid5 = 0;\n\
    \    long count5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long min6\
    \ = 0;\n    long max6 = 0;\n    long mid6 = 0;\n    long count6 = 0;\n    long\
    \ sum7 = 0;\n    long diff7 = 0;\n    long min7 = 0;\n    long max7 = 0;\n   \
    \ long mid7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n\
    \    long min8 = 0;\n    long max8 = 0;\n    long mid8 = 0;\n    long count8 =\
    \ 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long min9 = 0;\n    long max9\
    \ = 0;\n    long mid9 = 0;\n    long count9 = 0;\n    long sum10 = 0;\n    long\
    \ diff10 = 0;\n    long min10 = 0;\n    long max10 = 0;\n    long mid10 = 0;\n\
    \    long count10 = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long min11\
    \ = 0;\n    long max11 = 0;\n    long mid11 = 0;\n    long count11 = 0;\n    long\
    \ sum12 = 0;\n    long diff12 = 0;\n    long min12 = 0;\n    long max12 = 0;\n\
    \    long mid12 = 0;\n    long count12 = 0;\n    long sum13 = 0;\n    long diff13\
    \ = 0;\n    long min13 = 0;\n    long max13 = 0;\n    long mid13 = 0;\n    long\
    \ count13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n    long min14 = 0;\n\
    \    long max14 = 0;\n    long mid14 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpdrwos0ic: /tmp/tmpdrwos0ic.cpp:109: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long guess = 0;\n    long diff = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    long mid = 0;\n    long mid2 = 0;\n    long mid3 = 0;\n    long mid4\
    \ = 0;\n    long mid5 = 0;\n    long mid6 = 0;\n    long mid7 = 0;\n    long mid8\
    \ = 0;\n    long mid9 = 0;\n    long mid10 = 0;\n    long mid11 = 0;\n    long\
    \ mid12 = 0;\n    long mid13 = 0;\n    long mid14 = 0;\n    long mid15 = 0;\n\
    \    long mid16 = 0;\n    long mid17 = 0;\n    long mid18 = 0;\n    long mid19\
    \ = 0;\n    long mid20 = 0;\n    long mid21 = 0;\n    long mid22 = 0;\n    long\
    \ mid23 = 0;\n    long mid24 = 0;\n    long mid25 = 0;\n    long mid26 = 0;\n\
    \    long mid27 = 0;\n    long mid28 = 0;\n    long mid29 = 0;\n    long mid30\
    \ = 0;\n    long mid31 = 0;\n    long mid32 = 0;\n    long mid33 = 0;\n    long\
    \ mid34 = 0;\n    long mid35 = 0;\n    long mid36 = 0;\n    long mid37 = 0;\n\
    \    long mid38 = 0;\n    long mid39 = 0;\n    long mid40 = 0;\n    long mid41\
    \ = 0;\n    long mid42 = 0;\n    long mid43 = 0;\n    long mid44 = 0;\n    long\
    \ mid45 = 0;\n    long mid46 = 0;\n    long mid47 = 0;\n    long mid48 = 0;\n\
    \    long mid49 = 0;\n    long mid50 = 0;\n    long mid51 = 0;\n    long mid52\
    \ = 0;\n    long mid53 = 0;\n    long mid54 = 0;\n    long mid55 = 0;\n    long\
    \ mid56 = 0;\n    long mid57 = 0;\n    long mid58 = 0;\n    long mid59 = 0;\n\
    \    long mid60 = 0;\n    long mid61 = 0;\n    long mid62 = 0;\n    long mid63\
    \ = 0;\n    long mid64 = 0;\n    long mid65 = 0;\n    long mid66 = 0;\n    long\
    \ mid67 = 0;\n    long mid68 = 0;\n    long mid69 = 0;\n    long mid70 = 0;\n\
    \    long mid71 = 0;\n    long mid72 = 0;\n    long mid73 = 0;\n    long mid74\
    \ = 0;\n    long mid75 = 0;\n    long mid76 = 0;\n    long mid77 = 0;\n    long\
    \ mid78 = 0;\n    long mid79 = 0;\n    long mid80\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wf6uc2i.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp7wf6uc2i.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp7wf6uc2i.cpp:101:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp7wf6uc2i.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long diff = 0;\n    long count\
    \ = 0;\n    long sum2 = 0;\n    long max2 = 0;\n    long min2 = 0;\n    long diff2\
    \ = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long max3 = 0;\n    long\
    \ min3 = 0;\n    long diff3 = 0;\n    long count3 = 0;\n    long sum4 = 0;\n \
    \   long max4 = 0;\n    long min4 = 0;\n    long diff4 = 0;\n    long count4 =\
    \ 0;\n    long sum5 = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long diff5\
    \ = 0;\n    long count5 = 0;\n    long sum6 = 0;\n    long max6 = 0;\n    long\
    \ min6 = 0;\n    long diff6 = 0;\n    long count6 = 0;\n    long sum7 = 0;\n \
    \   long max7 = 0;\n    long min7 = 0;\n    long diff7 = 0;\n    long count7 =\
    \ 0;\n    long sum8 = 0;\n    long max8 = 0;\n    long min8 = 0;\n    long diff8\
    \ = 0;\n    long count8 = 0;\n    long sum9 = 0;\n    long max9 = 0;\n    long\
    \ min9 = 0;\n    long diff9 = 0;\n    long count9 = 0;\n    long sum10 = 0;\n\
    \    long max10 = 0;\n    long min10 = 0;\n    long diff10 = 0;\n    long count10\
    \ = 0;\n    long sum11 = 0;\n    long max11 = 0;\n    long min11 = 0;\n    long\
    \ diff11 = 0;\n    long count11 = 0;\n    long sum12 = 0;\n    long max12 = 0;\n\
    \    long min12 = 0;\n    long diff12 = 0;\n    long count12 = 0;\n    long sum13\
    \ = 0;\n    long max13 = 0;\n    long min13 = 0;\n    long diff13 = 0;\n    long\
    \ count13 = 0;\n    long sum14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n\
    \    long diff14 = 0;\n    long count14 = 0;\n    long sum15 = 0;\n    long max15\
    \ = 0;\n    long min15 = 0;\n    long diff15 = 0;\n    long count15 = 0;\n   \
    \ long sum16 = 0;\n    long max16 = 0;\n    long min16 = 0;\n    long diff16 =\
    \ 0;\n    long count16 = 0;\n    long sum17 = 0;\n    long max17 = 0;\n    long\
    \ min17 = 0;\n    long diff17 = 0;\n    long count17 = 0;\n    long sum18 = 0;\n\
    \    long max18 = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzavay17.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpdzavay17.cpp:104:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmpdzavay17.cpp:104:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    long diff = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n \
    \       if (game[i] != guess[i]) {\n            diff = abs(game[i] - guess[i]);\n\
    \            result[i] = diff;\n        } else {\n            result[i] = 0;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9k2u1d98.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp9k2u1d98.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp9k2u1d98.cpp:19:31: error: invalid types\
    \ \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n \
    \  19 |         if (game[i] != guess[i]) {\n      |                          \
    \     ^\n/tmp/tmp9k2u1d98.cpp:20:41: error: invalid types \u2018long int[size_t\
    \ {aka long unsigned int}]\u2019 for array subscript\n   20 |             diff\
    \ = abs(game[i] - guess[i]);\n      |                                        \
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n\
    \    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n\
    \    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12\
    \ = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long\
    \ sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n\
    \    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23\
    \ = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long\
    \ sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n\
    \    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34\
    \ = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long\
    \ sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n\
    \    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45\
    \ = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long\
    \ sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n\
    \    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56\
    \ = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long\
    \ sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n\
    \    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67\
    \ = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long\
    \ sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n\
    \    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78\
    \ = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long\
    \ sum82 = 0;\n    long sum83 = 0;\n    long sum\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5o76a3ho.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp5o76a3ho.cpp:100:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  100 | }\n      | ^\n/tmp/tmp5o76a3ho.cpp:100:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5yq6jrw.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpe5yq6jrw.cpp:69:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmpe5yq6jrw.cpp:25:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    for\
    \ (int i = 0; i < game.size(); i++) {\n        sum += game[i];\n        sum2 +=\
    \ game[i] * game[i];\n    }\n    for (int i = 0; i < guess.size(); i++) {\n  \
    \      diff += abs(guess[i] - sum);\n        diff2 += abs(guess[i] * guess[i]\
    \ - sum2);\n    }\n    for (int i = 0; i < game.size(); i++) {\n        result[i]\
    \ = diff;\n    }\n    for (int i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = diff2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpm04cg4va: /tmp/tmpm04cg4va.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < game.size()\
    \ && j < guess.size()) {\n        if (game[i] == guess[j]) {\n            score++;\n\
    \            i++;\n            j++;\n        } else if (game[i] > guess[j]) {\n\
    \            score++;\n            diff++;\n            i++;\n        } else {\n\
    \            score++;\n            diff++;\n            j++;\n        }\n    }\n\
    \    while (i < game.size()) {\n        result[i] = score;\n        i++;\n   \
    \ }\n    while (j < guess.size()) {\n        result[j] = diff;\n        j++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmptliw7em7: /tmp/tmptliw7em7.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long \n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpacfbe5pk.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpacfbe5pk.cpp:112:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  112 | }\n      | ^\n/tmp/tmpacfbe5pk.cpp:112:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    for(long i = 0; i < guess.size(); i++) {\n\
    \        sum += game[i];\n        diff = abs(guess[i] - sum);\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpxvai9xm6: /tmp/tmpxvai9xm6.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guesses\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpwtkqfk6i: /tmp/tmpwtkqfk6i.cpp:118: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpnftfu2y6: /tmp/tmpnftfu2y6.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ score = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long\
    \ ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag =\
    \ 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n\
    \    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long\
    \ ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at =\
    \ 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n\
    \    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long\
    \ bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg =\
    \ 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n\
    \    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long\
    \ bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt =\
    \ 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n\
    \    long by = 0;\n    long bz = 0;\n    long ca = 0;\n    long cb = 0;\n    long\
    \ cc = 0;\n    long cd = 0;\n    long ce = 0;\n    long cf = 0;\n    long cg =\
    \ 0;\n    long ch = 0;\n    long ci = 0;\n    long cj = 0;\n    long ck = 0;\n\
    \    long cl = 0;\n    long cm = 0;\n    long cn = 0;\n    long co = 0;\n    long\
    \ cp = 0;\n    long cq = 0;\n    long cr = 0;\n    long cs = 0;\n    long ct =\
    \ 0;\n    long cu = 0;\n    long cv = 0;\n    long cw = 0;\n    long cx = 0;\n\
    \    long cy = 0;\n    long cz = 0;\n    long da = 0;\n    \n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpapleejmv: /tmp/tmpapleejmv.cpp:119: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvo5fbzr9.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpvo5fbzr9.cpp:69:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmpvo5fbzr9.cpp:25:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long min = 0;\n    long max = 0;\n    long min2 = 0;\n    long\
    \ max2 = 0;\n    long min3 = 0;\n    long max3 = 0;\n    long min4 = 0;\n    long\
    \ max4 = 0;\n    long min5 = 0;\n    long max5 = 0;\n    long min6 = 0;\n    long\
    \ max6 = 0;\n    long min7 = 0;\n    long max7 = 0;\n    long min8 = 0;\n    long\
    \ max8 = 0;\n    long min9 = 0;\n    long max9 = 0;\n    long min10 = 0;\n   \
    \ long max10 = 0;\n    long min11 = 0;\n    long max11 = 0;\n    long min12 =\
    \ 0;\n    long max12 = 0;\n    long min13 = 0;\n    long max13 = 0;\n    long\
    \ min14 = 0;\n    long max14 = 0;\n    long min15 = 0;\n    long max15 = 0;\n\
    \    long min16 = 0;\n    long max16 = 0;\n    long min17 = 0;\n    long max17\
    \ = 0;\n    long min18 = 0;\n    long max18 = 0;\n    long min19 = 0;\n    long\
    \ max19 = 0;\n    long min20 = 0;\n    long max20 = 0;\n    long min21 = 0;\n\
    \    long max21 = 0;\n    long min22 = 0;\n    long max22 = 0;\n    long min23\
    \ = 0;\n    long max23 = 0;\n    long min24 = 0;\n    long max24 = 0;\n    long\
    \ min25 = 0;\n    long max25 = 0;\n    long min26 = 0;\n    long max26 = 0;\n\
    \    long min27 = 0;\n    long max27 = 0;\n    long min28 = 0;\n    long max28\
    \ = 0;\n    long min29 = 0;\n    long max29 = 0;\n    long min30 = 0;\n    long\
    \ max30 = 0;\n    long min31 = 0;\n    long max31 = 0;\n    long min32 = 0;\n\
    \    long max32 = 0;\n    long min33 = 0;\n    long max33 = 0;\n    long min34\
    \ = 0;\n    long max34 = 0;\n    long min35 = 0;\n    long max35 = 0;\n    long\
    \ min36 = 0;\n    long max36 = 0;\n    long min37 = 0;\n    long max37 = 0;\n\
    \    long min38 = 0;\n    long max38 = 0;\n    long min39 = 0;\n    long max39\
    \ = 0;\n    long min40 = 0;\n    long max40 = 0;\n    long min41 = 0;\n    long\
    \ max41 = 0;\n    long min42 = 0;\n    long max42\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzqdknd6b.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpzqdknd6b.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpzqdknd6b.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long score = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp8dty8vf4: /tmp/tmp8dty8vf4.cpp:115: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guess\
    \ = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        guess = guess[i];\n\
    \        score = game[i];\n        if (guess == score) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = abs(guess - score);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwb0dson2.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwb0dson2.cpp:16:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   16 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpwb0dson2.cpp:17:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   17 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmpwb0dson2.cpp:18:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   18 |         guess = guess[i];\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long\
    \ sum3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n  \
    \  long sum5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n\
    \    long sum7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 =\
    \ 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10\
    \ = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long\
    \ diff12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n\
    \    long diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ sum18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long\
    \ diff23 = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27\
    \ = 0;\n    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long\
    \ sum29 = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n\
    \    long sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32\
    \ = 0;\n    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long\
    \ diff34 = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n\
    \    long diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38\
    \ = 0;\n    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long\
    \ sum40 = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n\
    \    long sum42 = 0;\n    long diff42 = 0;\n    long sum\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp96aq6d6j.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp96aq6d6j.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp96aq6d6j.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n       \
    \     score = 0;\n        } else {\n            score = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = score;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n\
    \    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n\
    \    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12\
    \ = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long\
    \ sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n\
    \    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23\
    \ = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long\
    \ sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n\
    \    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34\
    \ = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long\
    \ sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n\
    \    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45\
    \ = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long\
    \ sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n\
    \    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56\
    \ = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long\
    \ sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n\
    \    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67\
    \ = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long\
    \ sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n\
    \    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78\
    \ = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long\
    \ sum82 = 0;\n    long sum83 = 0;\n    long sum\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnm294lk.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppnm294lk.cpp:100:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  100 | }\n      | ^\n/tmp/tmppnm294lk.cpp:100:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long sum = 0;\n    long sum2\
    \ = 0;\n    long diff = 0;\n    long diff2 = 0;\n    for (long i = 0; i < game.size();\
    \ i++) {\n        sum += game[i];\n        sum2 += guess[i];\n        diff = abs(sum\
    \ - sum2);\n        diff2 = abs(sum - sum2);\n        if (sum == sum2) {\n   \
    \         result[i] = 0;\n        } else {\n            result[i] = diff;\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp20_8mcdt: /tmp/tmp20_8mcdt.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        result[i]\
    \ = abs(guess[i] - sum);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpvdwikn99: /tmp/tmpvdwikn99.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    for (int i = 0; i < game.size(); i++) {\n        score = game[i];\n\
    \        diff = abs(guess[i] - score);\n        if (guess[i] == score) {\n   \
    \         result[i] = 0;\n        } else {\n            result[i] = diff;\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long count = 0;\n    long diff = 0;\n    long max = 0;\n    long\
    \ min = 0;\n    long min_index = 0;\n    long max_index = 0;\n    long min_diff\
    \ = 0;\n    long max_diff = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n\
    \    long min_count = 0;\n    long max_count = 0;\n    long min_diff = 0;\n  \
    \  long max_diff = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n    long\
    \ min_count = 0;\n    long max_count = 0;\n    long min_diff = 0;\n    long max_diff\
    \ = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n    long min_count = 0;\n\
    \    long max_count = 0;\n    long min_diff = 0;\n    long max_diff = 0;\n   \
    \ long min_sum = 0;\n    long max_sum = 0;\n    long min_count = 0;\n    long\
    \ max_count = 0;\n    long min_diff = 0;\n    long max_diff = 0;\n    long min_sum\
    \ = 0;\n    long max_sum = 0;\n    long min_count = 0;\n    long max_count = 0;\n\
    \    long min_diff = 0;\n    long max_diff = 0;\n    long min_sum = 0;\n    long\
    \ max_sum = 0;\n    long min_count = 0;\n    long max_count = 0;\n    long min_diff\
    \ = 0;\n    long max_diff = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n\
    \    long min_count = 0;\n    long max_count = 0;\n    long min_diff = 0;\n  \
    \  long max_diff = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n    long\
    \ min_count = 0;\n    long max_count = 0;\n    long min_diff = 0;\n    long max_diff\
    \ = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n    long min_count = 0;\n\
    \    long max_count = 0;\n    long min_diff = 0;\n    long max_diff = 0;\n   \
    \ long min_sum = 0;\n    long max_sum = 0;\n    long min_count = 0;\n    long\
    \ max_count = 0;\n    long min_diff = 0;\n    long max_diff = 0;\n    long min_sum\
    \ = 0;\n    long max_sum = 0;\n    long min_count = 0;\n    long max_count = 0;\n\
    \    long min_diff = 0;\n    long max_diff = 0;\n    long min_sum = 0;\n    long\
    \ max_sum = 0;\n    long min_count = 0;\n    long max_count = 0;\n    long min_diff\
    \ = 0;\n    long max_diff = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n\
    \    long min_count = 0;\n    long max_count = 0;\n    long min_diff = 0;\n  \
    \  long max_diff = 0;\n    long min_sum = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp41xki60z.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp41xki60z.cpp:29:10: error: redeclaration\
    \ of \u2018long int min_diff\u2019\n   29 |     long min_diff = 0;\n      |  \
    \        ^~~~~~~~\n/tmp/tmp41xki60z.cpp:23:10: note: \u2018long int min_diff\u2019\
    \ previously declared here\n   23 |     long min_diff = 0;\n      |          ^~~~~~~~\n\
    /tmp/tmp41xki60z.cpp:30:10: error: redeclaration of \u2018long int max_diff\u2019\
    \n   30 |     long max_diff = 0;\n      |          ^~~~~~~~\n/tmp/tmp41xki60z.cpp:24:10:\
    \ note: \u2018long int max_diff\u2019 previously declared here\n   24 |     long\
    \ max_diff = 0;\n      |          ^~~~~~~~\n/tmp/tmp41xki60z.cpp:31:10: error:\
    \ redeclaration of \u2018long int min_sum\u2019\n   31 |     long min_sum = 0;\n\
    \      |          ^~~~~~~\n/tmp/tmp41xki60z.cpp:25:10: note: \u2018long int min_sum\u2019\
    \ previously declared here\n   25 |     long min_sum = 0;\n      |          ^~~~~~~\n\
    /tmp/tmp41xki60z.cpp:32:10: error: redeclaration of \u2018long int max_sum\u2019\
    \n   32 |     long max_sum = 0;\n      |          ^~~~~~~\n/tmp/tmp41xki60z.cpp:26:10:\
    \ note: \u2018long int max_sum\u2019 previously declared here\n   26 |     long\
    \ max_sum = 0;\n      |          ^~~~~~~\n/tmp/tmp41xki60z.cpp:33:10: error: redeclaration\
    \ of \u2018long int min_count\u2019\n   33 |     long min_count = 0;\n      |\
    \          ^~~~~~~~~\n/tmp/tmp41xki60z.cpp:27:10: note: \u2018long int min_count\u2019\
    \ previously declared here\n   27 |     long min_count = 0;\n      |         \
    \ ^~~~~~~~~\n/tmp/tmp41xki60z.cpp:34:10: error: redeclaration of \u2018long int\
    \ max_count\u2019\n   34 |     long max_count = 0;\n      |          ^~~~~~~~~\n\
    /tmp/tmp41xki60z.cpp:28:10: note: \u2018long int max_count\u2019 previously declared\
    \ here\n   28 |     long max_count = 0;\n      |          ^~~~~~~~~\n/tmp/tmp41xki60z.cpp:35:10:\
    \ error: redeclaration of \u2018long int min_diff\u2019\n   35 |     long min_diff\
    \ = 0;\n      |          ^~~~~~~~\n/tmp/tmp41xki60z.cpp:23:10: note: \u2018long\
    \ int min_diff\u2019 previously declared here\n   23 |     long min_diff = 0;\n\
    \      |          ^~~~~~~~\n/tmp/tmp41xki60z.cpp:36:10: error: redeclaration of\
    \ \u2018long int max_diff\u2019\n   36 | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long guess = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6az994fj.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp6az994fj.cpp:17:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   17 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp6az994fj.cpp:115:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  115 | }\n      | ^\n/tmp/tmp6az994fj.cpp:115:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long sum = 0;\n    long sum2\
    \ = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6\
    \ = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10\
    \ = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long\
    \ sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n\
    \    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21\
    \ = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long\
    \ sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n\
    \    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32\
    \ = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long\
    \ sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n\
    \    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43\
    \ = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long\
    \ sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n\
    \    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54\
    \ = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long\
    \ sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n\
    \    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65\
    \ = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long\
    \ sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n\
    \    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76\
    \ = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long\
    \ sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum83 = 0;\n\
    \    long sum84 = 0;\n    long sum85\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkb2v21v0.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpkb2v21v0.cpp:100:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  100 | }\n      | ^\n/tmp/tmpkb2v21v0.cpp:100:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long max = 0;\n    for (long i = 0; i < game.size(); i++) {\n\
    \        sum += game[i];\n        if (sum > max) {\n            max = sum;\n \
    \       }\n    }\n    for (long i = 0; i < guess.size(); i++) {\n        sum +=\
    \ guess[i];\n        if (sum > max) {\n            max = sum;\n        }\n   \
    \ }\n    for (long i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i]\
    \ - max);\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmptrxvo9r1: /tmp/tmptrxvo9r1.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long guesses\
    \ = 0;\n    long maxScore = std::max(game.size(), guess.size());\n    long maxGuesses\
    \ = std::max(game.size(), guess.size());\n    long minScore = std::min(game.size(),\
    \ guess.size());\n    long minGuesses = std::min(game.size(), guess.size());\n\
    \    long minDiff = std::min(game.size(), guess.size());\n    long maxDiff = std::max(game.size(),\
    \ guess.size());\n    long diff = 0;\n    long diffCount = 0;\n    long diffCount2\
    \ = 0;\n    long diffCount3 = 0;\n    long diffCount4 = 0;\n    long diffCount5\
    \ = 0;\n    long diffCount6 = 0;\n    long diffCount7 = 0;\n    long diffCount8\
    \ = 0;\n    long diffCount9 = 0;\n    long diffCount10 = 0;\n    long diffCount11\
    \ = 0;\n    long diffCount12 = 0;\n    long diffCount13 = 0;\n    long diffCount14\
    \ = 0;\n    long diffCount15 = 0;\n    long diffCount16 = 0;\n    long diffCount17\
    \ = 0;\n    long diffCount18 = 0;\n    long diffCount19 = 0;\n    long diffCount20\
    \ = 0;\n    long diffCount21 = 0;\n    long diffCount22 = 0;\n    long diffCount23\
    \ = 0;\n    long diffCount24 = 0;\n    long diffCount25 = 0;\n    long diffCount26\
    \ = 0;\n    long diffCount27 = 0;\n    long diffCount28 = 0;\n    long diffCount29\
    \ = 0;\n    long diffCount30 = 0;\n    long diffCount31 = 0;\n    long diffCount32\
    \ = 0;\n    long diffCount33 = 0;\n    long diffCount34 = 0;\n    long diffCount35\
    \ = 0;\n    long diffCount36 = 0;\n    long diffCount37 = 0;\n    long diffCount38\
    \ = 0;\n    long diffCount39 = 0;\n    long diffCount40 = 0;\n    long diffCount41\
    \ = 0;\n    long diffCount42 = 0;\n    long diffCount43 = 0;\n    long diffCount44\
    \ = 0;\n    long diffCount45 = 0;\n    long diffCount46 = 0;\n    long diffCount47\
    \ = 0;\n    long diffCount48 = 0;\n    long diffCount49 = 0;\n    long diffCount50\
    \ = 0;\n    long diffCount51 = 0;\n    long diffCount52 = 0;\n    long diffCount53\
    \ = 0;\n    long diffCount54 = 0;\n    long diffCount55 = 0;\n    long diffCount56\
    \ = 0;\n    long diffCount57 = 0;\n    long diffCount\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp13spqmhm.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp13spqmhm.cpp:82:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmp13spqmhm.cpp:82:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    // Your code goes here\n   \
    \ long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += game[i] - guess[i];\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpyrg02wgo: /tmp/tmpyrg02wgo.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(game.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3\
    \ = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long\
    \ diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n  \
    \  long diff7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n\
    \    long diff9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11\
    \ = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long\
    \ sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n\
    \    long sum15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16\
    \ = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long\
    \ diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n\
    \    long diff20 = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22\
    \ = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long\
    \ sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n\
    \    long sum26 = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27\
    \ = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long\
    \ diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n\
    \    long diff31 = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33\
    \ = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long\
    \ sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n\
    \    long sum37 = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38\
    \ = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long\
    \ diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp_pro62cv: /tmp/tmp_pro62cv.cpp:105: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i]) {\n      \
    \      result[i] = 0;\n        } else {\n            result[i] = abs(game[i] -\
    \ guess[i]);\n        }\n        score += game[i];\n    }\n    for (size_t i =\
    \ 0; i < guess.size(); i++) {\n        result[i] += abs(game[i] - score);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpp8p3vjoo: /tmp/tmpp8p3vjoo.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    std::vector<long> result(guess.size());\n   \
    \ long sum = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        sum +=\
    \ game[i];\n        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp7z5pou96: /tmp/tmp7z5pou96.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long temp = 0;\n    long count = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long sum2 = 0;\n    long diff2\
    \ = 0;\n    long temp2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long\
    \ diff3 = 0;\n    long temp3 = 0;\n    long count3 = 0;\n    long sum4 = 0;\n\
    \    long diff4 = 0;\n    long temp4 = 0;\n    long count4 = 0;\n    long sum5\
    \ = 0;\n    long diff5 = 0;\n    long temp5 = 0;\n    long count5 = 0;\n    long\
    \ sum6 = 0;\n    long diff6 = 0;\n    long temp6 = 0;\n    long count6 = 0;\n\
    \    long sum7 = 0;\n    long diff7 = 0;\n    long temp7 = 0;\n    long count7\
    \ = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long temp8 = 0;\n    long\
    \ count8 = 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long temp9 = 0;\n\
    \    long count9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long temp10\
    \ = 0;\n    long count10 = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n   \
    \ long temp11 = 0;\n    long count11 = 0;\n    long sum12 = 0;\n    long diff12\
    \ = 0;\n    long temp12 = 0;\n    long count12 = 0;\n    long sum13 = 0;\n   \
    \ long diff13 = 0;\n    long temp13 = 0;\n    long count13 = 0;\n    long sum14\
    \ = 0;\n    long diff14 = 0;\n    long temp14 = 0;\n    long count14 = 0;\n  \
    \  long sum15 = 0;\n    long diff15 = 0;\n    long temp15 = 0;\n    long count15\
    \ = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long temp16 = 0;\n    long\
    \ count16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long temp17 = 0;\n\
    \    long count17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n    long temp18\
    \ = 0;\n    long count18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n   \
    \ long temp19 = 0;\n    long count19 = 0;\n    long sum20 = 0;\n    long diff20\
    \ = 0;\n    long temp20 = 0;\n    long count20 = 0;\n    long sum21 = 0;\n   \
    \ long diff21 = 0;\n    long temp21 = 0;\n    long count21 = 0;\n\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmplj5lzp22: /tmp/tmplj5lzp22.cpp:107: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa2l95z2y.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpa2l95z2y.cpp:69:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   69 |     long i = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:17:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   17 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:70:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   70 |     long j = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   18 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:71:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   71 |     long k = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:19:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   19 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:72:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   72 |     long l = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:73:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   73 |     long m = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:21:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   21 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:74:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   74 |     long n = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:22:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   22 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:75:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   75 |     long o = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:23:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   23 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:76:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   76 |     long p = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:24:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   24 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:77:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   77 |     long q = 0;\n      |          ^\n/tmp/tmpa2l95z2y.cpp:25:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ score = 0;\n    long diff = 0;\n    long sum = 0;\n    long count = 0;\n   \
    \ long max = 0;\n    long min = 0;\n    long sum2 = 0;\n    long min2 = 0;\n \
    \   long max2 = 0;\n    long min3 = 0;\n    long max3 = 0;\n    long min4 = 0;\n\
    \    long max4 = 0;\n    long min5 = 0;\n    long max5 = 0;\n    long min6 = 0;\n\
    \    long max6 = 0;\n    long min7 = 0;\n    long max7 = 0;\n    long min8 = 0;\n\
    \    long max8 = 0;\n    long min9 = 0;\n    long max9 = 0;\n    long min10 =\
    \ 0;\n    long max10 = 0;\n    long min11 = 0;\n    long max11 = 0;\n    long\
    \ min12 = 0;\n    long max12 = 0;\n    long min13 = 0;\n    long max13 = 0;\n\
    \    long min14 = 0;\n    long max14 = 0;\n    long min15 = 0;\n    long max15\
    \ = 0;\n    long min16 = 0;\n    long max16 = 0;\n    long min17 = 0;\n    long\
    \ max17 = 0;\n    long min18 = 0;\n    long max18 = 0;\n    long min19 = 0;\n\
    \    long max19 = 0;\n    long min20 = 0;\n    long max20 = 0;\n    long min21\
    \ = 0;\n    long max21 = 0;\n    long min22 = 0;\n    long max22 = 0;\n    long\
    \ min23 = 0;\n    long max23 = 0;\n    long min24 = 0;\n    long max24 = 0;\n\
    \    long min25 = 0;\n    long max25 = 0;\n    long min26 = 0;\n    long max26\
    \ = 0;\n    long min27 = 0;\n    long max27 = 0;\n    long min28 = 0;\n    long\
    \ max28 = 0;\n    long min29 = 0;\n    long max29 = 0;\n    long min30 = 0;\n\
    \    long max30 = 0;\n    long min31 = 0;\n    long max31 = 0;\n    long min32\
    \ = 0;\n    long max32 = 0;\n    long min33 = 0;\n    long max33 = 0;\n    long\
    \ min34 = 0;\n    long max34 = 0;\n    long min35 = 0;\n    long max35 = 0;\n\
    \    long min36 = 0;\n    long max36 = 0;\n    long min37 = 0;\n    long max37\
    \ = 0;\n    long min38 = 0;\n    long max38 = 0;\n    long min39 = 0;\n    long\
    \ max39 = 0;\n    long min40 = 0;\n    long max40 = 0;\n    long min\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8m_uqmx.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpb8m_uqmx.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpb8m_uqmx.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (long\
    \ i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i]) {\n      \
    \      score = 0;\n        } else {\n            score = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = score;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff = abs(game[i]\
    \ - guess[i]);\n        if(diff == 0) {\n            result[i] = 0;\n        }\
    \ else {\n            result[i] = diff;\n        }\n        score += diff;\n \
    \   }\n    if(score == 0) {\n        return result;\n    } else {\n        return\
    \ result;\n    }\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        sum += game[i];\n        result[i] =\
    \ sum - guess[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpu1veriuj: /tmp/tmpu1veriuj.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        score += game[i] - guess[i];\n    \
    \    result[i] = abs(score);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmp8gyh1pni: /tmp/tmp8gyh1pni.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    std::vector<long> result(guess.size());\n  \
    \  long score = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        score\
    \ += game[i];\n        result[i] = abs(guess[i] - score);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpnzwx2g92: /tmp/tmpnzwx2g92.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < game.size(); ++i) {\n        diff = abs(game[i] - guess[i]);\n  \
    \      result[i] = diff;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n\
    \    long sum83 = 0;\n    long sum84 = 0;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpf9zluwhq: /tmp/tmpf9zluwhq.cpp:103: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long score = 0;\n    long guesses\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < game.size() && j < guess.size())\
    \ {\n        if (game[i] == guess[j]) {\n            score++;\n            guesses++;\n\
    \            i++;\n            j++;\n        } else if (game[i] > guess[j]) {\n\
    \            score++;\n            i++;\n        } else {\n            score++;\n\
    \            j++;\n        }\n    }\n    while (i < game.size()) {\n        result[i]\
    \ = 0;\n        i++;\n    }\n    while (j < guess.size()) {\n        result[i]\
    \ = 0;\n        j++;\n    }\n    if (guesses == game.size()) {\n        for (long\
    \ i = 0; i < game.size(); i++) {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpdp1t8_t5: /tmp/tmpdp1t8_t5.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyxz2osmu.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyxz2osmu.cpp:70:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   70 |     long i = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:18:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   18 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:71:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   71 |     long j = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:19:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   19 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:72:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   72 |     long k = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:20:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   20 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:73:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   73 |     long l = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:21:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   21 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:74:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   74 |     long m = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:22:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   22 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:75:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   75 |     long n = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:23:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   23 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:76:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   76 |     long o = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:24:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   24 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:77:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   77 |     long p = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:25:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   25 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:78:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   78 |     long q = 0;\n      |          ^\n/tmp/tmpyxz2osmu.cpp:26:10:\
    \ note: \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    long min\
    \ = 0;\n    long max = 0;\n    long mindiff = 0;\n    long maxdiff = 0;\n    long\
    \ mindiff2 = 0;\n    long maxdiff2 = 0;\n    long mindiff3 = 0;\n    long maxdiff3\
    \ = 0;\n    long mindiff4 = 0;\n    long maxdiff4 = 0;\n    long mindiff5 = 0;\n\
    \    long maxdiff5 = 0;\n    long mindiff6 = 0;\n    long maxdiff6 = 0;\n    long\
    \ mindiff7 = 0;\n    long maxdiff7 = 0;\n    long mindiff8 = 0;\n    long maxdiff8\
    \ = 0;\n    long mindiff9 = 0;\n    long maxdiff9 = 0;\n    long mindiff10 = 0;\n\
    \    long maxdiff10 = 0;\n    long mindiff11 = 0;\n    long maxdiff11 = 0;\n \
    \   long mindiff12 = 0;\n    long maxdiff12 = 0;\n    long mindiff13 = 0;\n  \
    \  long maxdiff13 = 0;\n    long mindiff14 = 0;\n    long maxdiff14 = 0;\n   \
    \ long mindiff15 = 0;\n    long maxdiff15 = 0;\n    long mindiff16 = 0;\n    long\
    \ maxdiff16 = 0;\n    long mindiff17 = 0;\n    long maxdiff17 = 0;\n    long mindiff18\
    \ = 0;\n    long maxdiff18 = 0;\n    long mindiff19 = 0;\n    long maxdiff19 =\
    \ 0;\n    long mindiff20 = 0;\n    long maxdiff20 = 0;\n    long mindiff21 = 0;\n\
    \    long maxdiff21 = 0;\n    long mindiff22 = 0;\n    long maxdiff22 = 0;\n \
    \   long mindiff23 = 0;\n    long maxdiff23 = 0;\n    long mindiff24 = 0;\n  \
    \  long maxdiff24 = 0;\n    long mindiff25 = 0;\n    long maxdiff25 = 0;\n   \
    \ long mindiff26 = 0;\n    long maxdiff26 = 0;\n    long mindiff27 = 0;\n    long\
    \ maxdiff27 = 0;\n    long mindiff28 = 0;\n    long maxdiff28 = 0;\n    long mindiff29\
    \ = 0;\n    long maxdiff29 = 0;\n    long mindiff30 = 0;\n    long maxdiff30 =\
    \ 0;\n    long mindiff31 = 0;\n    long maxdiff31 = 0;\n    long mindiff32 = 0;\n\
    \    long maxdiff32 = 0;\n    long mindiff33 = 0;\n    long maxdiff33 = 0;\n \
    \   long mindiff34 = 0;\n    long maxdiff34 = 0;\n    long mindiff35 = 0;\n  \
    \  long maxdiff35 = 0;\n    long mindiff36 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpn8ba1fft: /tmp/tmpn8ba1fft.cpp:93: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long sum = 0;\n    for (long\
    \ i = 0; i < guess.size(); i++) {\n        sum += abs(game[i] - guess[i]);\n \
    \       result[i] = sum;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpgwcrtn0i: /tmp/tmpgwcrtn0i.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    long sum\
    \ = 0;\n    long diff = 0;\n    long min = 0;\n    long max = 0;\n    long mid\
    \ = 0;\n    long mid2 = 0;\n    long mid3 = 0;\n    long mid4 = 0;\n    long mid5\
    \ = 0;\n    long mid6 = 0;\n    long mid7 = 0;\n    long mid8 = 0;\n    long mid9\
    \ = 0;\n    long mid10 = 0;\n    long mid11 = 0;\n    long mid12 = 0;\n    long\
    \ mid13 = 0;\n    long mid14 = 0;\n    long mid15 = 0;\n    long mid16 = 0;\n\
    \    long mid17 = 0;\n    long mid18 = 0;\n    long mid19 = 0;\n    long mid20\
    \ = 0;\n    long mid21 = 0;\n    long mid22 = 0;\n    long mid23 = 0;\n    long\
    \ mid24 = 0;\n    long mid25 = 0;\n    long mid26 = 0;\n    long mid27 = 0;\n\
    \    long mid28 = 0;\n    long mid29 = 0;\n    long mid30 = 0;\n    long mid31\
    \ = 0;\n    long mid32 = 0;\n    long mid33 = 0;\n    long mid34 = 0;\n    long\
    \ mid35 = 0;\n    long mid36 = 0;\n    long mid37 = 0;\n    long mid38 = 0;\n\
    \    long mid39 = 0;\n    long mid40 = 0;\n    long mid41 = 0;\n    long mid42\
    \ = 0;\n    long mid43 = 0;\n    long mid44 = 0;\n    long mid45 = 0;\n    long\
    \ mid46 = 0;\n    long mid47 = 0;\n    long mid48 = 0;\n    long mid49 = 0;\n\
    \    long mid50 = 0;\n    long mid51 = 0;\n    long mid52 = 0;\n    long mid53\
    \ = 0;\n    long mid54 = 0;\n    long mid55 = 0;\n    long mid56 = 0;\n    long\
    \ mid57 = 0;\n    long mid58 = 0;\n    long mid59 = 0;\n    long mid60 = 0;\n\
    \    long mid61 = 0;\n    long mid62 = 0;\n    long mid63 = 0;\n    long mid64\
    \ = 0;\n    long mid65 = 0;\n    long mid66 = 0;\n    long mid67 = 0;\n    long\
    \ mid68 = 0;\n    long mid69 = 0;\n    long mid70 = 0;\n    long mid71 = 0;\n\
    \    long mid72 = 0;\n    long mid73 = 0;\n    long mid74 = 0;\n    long mid75\
    \ = 0;\n    long mid76 = 0;\n    long mid77 = 0;\n    long mid78 = 0;\n    long\
    \ mid79 = 0;\n    long mid80 = 0;\n    long mid\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0u85h_ne.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp0u85h_ne.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp0u85h_ne.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long diff = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long\
    \ sum3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n  \
    \  long sum5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n\
    \    long sum7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 =\
    \ 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10\
    \ = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long\
    \ diff12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n\
    \    long diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ sum18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long\
    \ diff23 = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27\
    \ = 0;\n    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long\
    \ sum29 = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n\
    \    long sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32\
    \ = 0;\n    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long\
    \ diff34 = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n\
    \    long diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38\
    \ = 0;\n    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long\
    \ sum40 = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n\
    \    long sum42 = 0;\n    long diff42 = 0;\n    long sum\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw3mt53mr.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpw3mt53mr.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpw3mt53mr.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpmktn4omh: /tmp/tmpmktn4omh.cpp:118: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    long sum = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long sum2 = 0;\n\
    \    long diff2 = 0;\n    long k2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n\
    \    long k3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long k4 = 0;\n\
    \    long sum5 = 0;\n    long diff5 = 0;\n    long k5 = 0;\n    long sum6 = 0;\n\
    \    long diff6 = 0;\n    long k6 = 0;\n    long sum7 = 0;\n    long diff7 = 0;\n\
    \    long k7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long k8 = 0;\n\
    \    long sum9 = 0;\n    long diff9 = 0;\n    long k9 = 0;\n    long sum10 = 0;\n\
    \    long diff10 = 0;\n    long k10 = 0;\n    long sum11 = 0;\n    long diff11\
    \ = 0;\n    long k11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long\
    \ k12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long k13 = 0;\n   \
    \ long sum14 = 0;\n    long diff14 = 0;\n    long k14 = 0;\n    long sum15 = 0;\n\
    \    long diff15 = 0;\n    long k15 = 0;\n    long sum16 = 0;\n    long diff16\
    \ = 0;\n    long k16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ k17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n    long k18 = 0;\n   \
    \ long sum19 = 0;\n    long diff19 = 0;\n    long k19 = 0;\n    long sum20 = 0;\n\
    \    long diff20 = 0;\n    long k20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long k21 = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long\
    \ k22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long k23 = 0;\n   \
    \ long sum24 = 0;\n    long diff24 = 0;\n    long k24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long k25 = 0;\n    long sum26 = 0;\n    long diff26\
    \ = 0;\n    long k26 = 0;\n    long sum27 = 0;\n    long diff27 = 0;\n    long\
    \ k27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long k28 = 0;\n   \
    \ long sum29 = 0;\n\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: "tmpyn1pfrh3: /tmp/tmpyn1pfrh3.cpp:106: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
