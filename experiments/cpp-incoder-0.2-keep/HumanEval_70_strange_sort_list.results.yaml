name: HumanEval_70_strange_sort_list
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2bu8lywh: /tmp/tmp2bu8lywh.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    if (min != max) {\n\
    \        result.push_back(max);\n        result.push_back(min);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjkgfz717: /tmp/tmpjkgfz717.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptiol480f: /tmp/tmptiol480f.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        }\n  \
    \      if (i == max) {\n            lst2.push_back(max);\n        }\n        lst2.push_back(i);\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4gwo8jg6: /tmp/tmp4gwo8jg6.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy03atoh1: /tmp/tmpy03atoh1.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    if (min != max) {\n \
    \       result.push_back(min);\n        result.push_back(max);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn2pgmguw: /tmp/tmpn2pgmguw.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    if (min != max) {\n        result.push_back(min);\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo0kzfsi9: /tmp/tmpo0kzfsi9.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           long temp = min;\n            min = i;\n            while (temp !=\
    \ i) {\n                res.push_back(temp);\n                temp = temp + 1;\n\
    \            }\n        } else if (i > max) {\n            long temp = max;\n\
    \            max = i;\n            while (temp != i) {\n                res.push_back(temp);\n\
    \                temp = temp - 1;\n            }\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptwv5ibj4: /tmp/tmptwv5ibj4.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmplw391igk: /tmp/tmplw391igk.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    long\
    \ min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n\
    \    long mid3 = mid / 3;\n    long mid4 = mid / 4;\n    long mid5 = mid / 5;\n\
    \    long mid6 = mid / 6;\n    long mid7 = mid / 7;\n    long mid8 = mid / 8;\n\
    \    long mid9 = mid / 9;\n    long mid10 = mid / 10;\n    long mid11 = mid /\
    \ 11;\n    long mid12 = mid / 12;\n    long mid13 = mid / 13;\n    long mid14\
    \ = mid / 14;\n    long mid15 = mid / 15;\n    long mid16 = mid / 16;\n    long\
    \ mid17 = mid / 17;\n    long mid18 = mid / 18;\n    long mid19 = mid / 19;\n\
    \    long mid20 = mid / 20;\n    long mid21 = mid / 21;\n    long mid22 = mid\
    \ / 22;\n    long mid23 = mid / 23;\n    long mid24 = mid / 24;\n    long mid25\
    \ = mid / 25;\n    long mid26 = mid / 26;\n    long mid27 = mid / 27;\n    long\
    \ mid28 = mid / 28;\n    long mid29 = mid / 29;\n    long mid30 = mid / 30;\n\
    \    long mid31 = mid / 31;\n    long mid32 = mid / 32;\n    long mid33 = mid\
    \ / 33;\n    long mid34 = mid / 34;\n    long mid35 = mid / 35;\n    long mid36\
    \ = mid / 36;\n    long mid37 = mid / 37;\n    long mid38 = mid / 38;\n    long\
    \ mid39 = mid / 39;\n    long mid40 = mid / 40;\n    long mid41 = mid / 41;\n\
    \    long mid42 = mid / 42;\n    long mid43 = mid / 43;\n    long mid44 = mid\
    \ / 44;\n    long mid45 = mid / 45;\n    long mid46 = mid / 46;\n    long mid47\
    \ = mid / 47;\n    long \n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphypjtwv1.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphypjtwv1.cpp:64:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmphypjtwv1.cpp:64:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n \
    \   long min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid + (max\
    \ - min) / 2;\n    long mid3 = mid2 + (max - min) / 2;\n    long mid4 = mid3 +\
    \ (max - min) / 2;\n    long mid5 = mid4 + (max - min) / 2;\n    long mid6 = mid5\
    \ + (max - min) / 2;\n    long mid7 = mid6 + (max - min) / 2;\n    long mid8 =\
    \ mid7 + (max - min) / 2;\n    long mid9 = mid8 + (max - min) / 2;\n    long mid10\
    \ = mid9 + (max - min) / 2;\n    long mid11 = mid10 + (max - min) / 2;\n    long\
    \ mid12 = mid11 + (max - min) / 2;\n    long mid13 = mid12 + (max - min) / 2;\n\
    \    long mid14 = mid13 + (max - min) / 2;\n    long mid15 = mid14 + (max - min)\
    \ / 2;\n    long mid16 = mid15 + (max - min) / 2;\n    long mid17 = mid16 + (max\
    \ - min) / 2;\n    long mid18 = mid17 + (max - min) / 2;\n    long mid19 = mid18\
    \ + (max - min) / 2;\n    long mid20 = mid19 + (max - min) / 2;\n    long mid21\
    \ = mid20 + (max - min) / 2;\n    long mid22 = mid21 + (max - min) / 2;\n    long\
    \ mid23 = mid22 + (max - min) / 2;\n    long mid24 = mid23 + (max - min) / 2;\n\
    \    long mid25 = mid24 + (max - min) / 2;\n    long mid26 = mid25 + (max - min)\
    \ / 2;\n    long mid27 = mid26 + (max - min) / 2;\n    long mid28 = mid27 + (max\
    \ - min) / 2;\n    long mid29 = mid28 + (max - min) / 2;\n    long mid30 = mid29\
    \ + (max - min) / 2;\n    long mid31 = mid30 + (max - min) / 2;\n    long mid32\
    \ = mid31 + (max - min) / 2;\n    long mid33 = mid32 + (max - min) / 2;\n    long\
    \ mid34 = mid33 + (max - min) / 2;\n    long mid35 = mid34 + (max - min) / 2;\n\
    \    long mid36 = mid35 + (max - min) / 2;\n    long mid37 = mid36\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdg8jbxhi.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdg8jbxhi.cpp:53:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpdg8jbxhi.cpp:53:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy_6t2nea: /tmp/tmpy_6t2nea.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq_v1s4x2: /tmp/tmpq_v1s4x2.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    lst2.push_back(min);\n    lst2.push_back(mid);\n   \
    \ lst2.push_back(max);\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptsnv3nt8: /tmp/tmptsnv3nt8.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    res.push_back(min);\n\
    \    res.push_back(mid);\n    res.push_back(max);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbya7m2mc: /tmp/tmpbya7m2mc.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5a2pr8am: /tmp/tmp5a2pr8am.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa3aoksyg: /tmp/tmpa3aoksyg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp98gc076p: /tmp/tmp98gc076p.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaflaxn8g: /tmp/tmpaflaxn8g.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n        } else if (i > max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwmdszjhy: /tmp/tmpwmdszjhy.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     ans.push_back(min);\n        } else if (i == max) {\n            ans.push_back(max);\n\
    \        } else {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpan6nmqn6: /tmp/tmpan6nmqn6.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr7q9r65u: /tmp/tmpr7q9r65u.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long mid2 = mid + (max - min) / 2;\n    long mid3 = mid2 +\
    \ (max - min) / 2;\n    long mid4 = mid3 + (max - min) / 2;\n    long mid5 = mid4\
    \ + (max - min) / 2;\n    long mid6 = mid5 + (max - min) / 2;\n    long mid7 =\
    \ mid6 + (max - min) / 2;\n    long mid8 = mid7 + (max - min) / 2;\n    long mid9\
    \ = mid8 + (max - min) / 2;\n    long mid10 = mid9 + (max - min) / 2;\n    long\
    \ mid11 = mid10 + (max - min) / 2;\n    long mid12 = mid11 + (max - min) / 2;\n\
    \    long mid13 = mid12 + (max - min) / 2;\n    long mid14 = mid13 + (max - min)\
    \ / 2;\n    long mid15 = mid14 + (max - min) / 2;\n    long mid16 = mid15 + (max\
    \ - min) / 2;\n    long mid17 = mid16 + (max - min) / 2;\n    long mid18 = mid17\
    \ + (max - min) / 2;\n    long mid19 = mid18 + (max - min) / 2;\n    long mid20\
    \ = mid19 + (max - min) / 2;\n    long mid21 = mid20 + (max - min) / 2;\n    long\
    \ mid22 = mid21 + (max - min) / 2;\n    long mid23 = mid22 + (max - min) / 2;\n\
    \    long mid24 = mid23 + (max - min) / 2;\n    long mid25 = mid24 + (max - min)\
    \ / 2;\n    long mid26 = mid25 + (max - min) / 2;\n    long mid27 = mid26 + (max\
    \ - min) / 2;\n    long mid28 = mid27 + (max - min) / 2;\n    long mid29 = mid28\
    \ + (max - min) / 2;\n    long mid30 = mid29 + (max - min) / 2;\n    long mid31\
    \ = mid30 + (max - min) / 2;\n    long mid32 = mid31 + (max - min) / 2;\n    long\
    \ mid33 = mid32 + (max - min) / 2;\n    long mid34 = mid33 + (max - min) / 2;\n\
    \    long mid35 = mid34 + (max - min) / 2;\n    long mid36 = mid35 + (max - min)\
    \ / 2;\n    long mid37 = mid36 + (max - min) / 2;\n    long mid38 = mid37\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp0qf30clb.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0qf30clb.cpp:52:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmp0qf30clb.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> lst2;\n    long minval = lst.front();\n\
    \    long maxval = lst.back();\n    long midval;\n    long mid;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        midval = lst[i];\n        mid = minval;\n\
    \        minval = midval;\n        for (long j = i + 1; j < lst.size(); j++) {\n\
    \            if (midval > lst[j]) {\n                mid = midval;\n         \
    \       midval = lst[j];\n            }\n        }\n        lst2.push_back(mid);\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppja_m4w0: /tmp/tmppja_m4w0.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long minValue = std::numeric_limits<long>::min();\n\
    \    long maxValue = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < minValue) {\n            result.push_back(minValue);\n  \
    \          minValue = i;\n        } else if (i > maxValue) {\n            result.push_back(maxValue);\n\
    \            maxValue = i;\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    if (minValue != maxValue) {\n        result.push_back(minValue);\n\
    \        result.push_back(maxValue);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwbcovi5b: /tmp/tmpwbcovi5b.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : lst) {\n        if (i < min) {\n       \
    \     mid = min;\n            min = i;\n        } else if (i > max) {\n      \
    \      mid = max;\n            max = i;\n        } else {\n            mid = i;\n\
    \        }\n        ans.push_back(mid);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzdmhxm5w: /tmp/tmpzdmhxm5w.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    for (long i : lst) {\n        result.push_back(i);\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpinznezru: /tmp/tmpinznezru.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long minValue = lst[0];\n\
    \    long maxValue = lst[0];\n    for (long i : lst) {\n        if (i < minValue)\
    \ {\n            minValue = i;\n        }\n        if (i > maxValue) {\n     \
    \       maxValue = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == minValue) {\n            result.push_back(minValue);\n        } else if\
    \ (i == maxValue) {\n            result.push_back(maxValue);\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpajwvv74n: /tmp/tmpajwvv74n.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpef4dqvb4: /tmp/tmpef4dqvb4.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> sorted_lst;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     sorted_lst.push_back(min);\n        } else if (i == max) {\n           \
    \ sorted_lst.push_back(max);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpptbgbi8p: /tmp/tmpptbgbi8p.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> lst2;\n    for(long i=0;i<lst.size();i++){\n\
    \        for(long j=i+1;j<lst.size();j++){\n            if(lst[i]>lst[j]){\n \
    \               long temp = lst[i];\n                lst[i] = lst[j];\n      \
    \          lst[j] = temp;\n            }\n        }\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphj2dai0_: /tmp/tmphj2dai0_.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2(lst.size());\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ min_val = std::numeric_limits<long>::min();\n        long max_val = std::numeric_limits<long>::max();\n\
    \        for (long j = 0; j < lst.size(); j++) {\n            if (lst[j] < min_val)\
    \ {\n                min_val = lst[j];\n            }\n            if (lst[j]\
    \ > max_val) {\n                max_val = lst[j];\n            }\n        }\n\
    \        lst2[i] = min_val;\n        lst2[i] = max_val;\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdqe8hfyo: /tmp/tmpdqe8hfyo.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfm4zaapg: /tmp/tmpfm4zaapg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for(long i : lst)\n    {\n        if(i<min)\n\
    \        {\n            min=i;\n        }\n        if(i>max)\n        {\n    \
    \        max=i;\n        }\n    }\n    for(long i=min;i<=max;i++)\n    {\n   \
    \     result.push_back(i);\n    }\n    for(long i=max;i>min;i--)\n    {\n    \
    \    result.push_back(i);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe8_ju1co: /tmp/tmpe8_ju1co.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp32g58wx5: /tmp/tmp32g58wx5.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1n23y2eq: /tmp/tmp1n23y2eq.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpptih2z5h: /tmp/tmpptih2z5h.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            lst2.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            lst2.push_back(max);\n\
    \            max = i;\n        } else {\n            lst2.push_back(i);\n    \
    \    }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmprv0hzr_s: /tmp/tmprv0hzr_s.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbhbql_vd: /tmp/tmpbhbql_vd.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmps7esbyiu: /tmp/tmps7esbyiu.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    for (long i : lst)\
    \ {\n        if (i < mid) {\n            result.push_back(i);\n        }\n   \
    \     if (i > mid) {\n            result.push_back(mid);\n        }\n    }\n \
    \   for (long i : result) {\n        result.push_back(i);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmps5ezfcf4: /tmp/tmps5ezfcf4.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            res.push_back(min);\n        } else if (i == max)\
    \ {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi5ttgjao: /tmp/tmpi5ttgjao.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> lst2;\n    long min;\n    long max;\n\
    \    long mid;\n    for(long i = 0; i < lst.size(); i++){\n        min = lst[i];\n\
    \        max = lst[i];\n        for(long j = i + 1; j < lst.size(); j++){\n  \
    \          if(lst[j] < min){\n                min = lst[j];\n            }\n \
    \           if(lst[j] > max){\n                max = lst[j];\n            }\n\
    \        }\n        mid = (min + max) / 2;\n        lst2.push_back(mid);\n   \
    \ }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqw9_xla4: /tmp/tmpqw9_xla4.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpknrayqa2: /tmp/tmpknrayqa2.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9x1lj2pc: /tmp/tmp9x1lj2pc.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            ans.push_back(min);\n        } else\
    \ if (i == max) {\n            ans.push_back(max);\n        } else {\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4b_9h0hg: /tmp/tmp4b_9h0hg.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> sorted_lst;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     sorted_lst.push_back(min);\n        } else if (i == max) {\n           \
    \ sorted_lst.push_back(max);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9q263kzu: /tmp/tmp9q263kzu.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1elyfpqv: /tmp/tmp1elyfpqv.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpefswfkjn: /tmp/tmpefswfkjn.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp50zrmawr: /tmp/tmp50zrmawr.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long midValue = minValue + (maxValue - minValue) / 2;\n    long midIndex\
    \ = 0;\n    long minIndex = 0;\n    long maxIndex = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] < midValue) {\n            result.push_back(lst[i]);\n\
    \            minIndex = i;\n        } else if (lst[i] > midValue) {\n        \
    \    result.push_back(lst[i]);\n            maxIndex = i;\n        } else {\n\
    \            result.push_back(midValue);\n            midIndex++;\n        }\n\
    \    }\n    for (long i = 0; i < midIndex; i++) {\n        result.push_back(midValue);\n\
    \    }\n    for (long i = minIndex; i < maxIndex; i++) {\n        result.push_back(lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4b_nzlne: /tmp/tmp4b_nzlne.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> lst2;\n    long minval = lst[0];\n   \
    \ long maxval = lst[0];\n    for (long i : lst) {\n        if (i < minval) {\n\
    \            minval = i;\n        }\n        if (i > maxval) {\n            maxval\
    \ = i;\n        }\n    }\n    long midval = (minval + maxval) / 2;\n    long midpos\
    \ = 0;\n    for (long i : lst) {\n        if (i == midval) {\n            midpos\
    \ = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n   \
    \     if (i == midval) {\n            midpos = i;\n        }\n    }\n    long\
    \ midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n        \
    \    midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst)\
    \ {\n        if (i == midval) {\n            midpos = i;\n        }\n    }\n \
    \   long midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n \
    \           midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long\
    \ i : lst) {\n        if (i == midval) {\n            midpos = i;\n        }\n\
    \    }\n    long midpos = 0;\n    for (long i : lst) {\n        if (i == midval)\
    \ {\n            midpos = i;\n        }\n    }\n    long midpos = 0;\n    for\
    \ (long i : lst) {\n        if (i == midval) {\n            midpos = i;\n    \
    \    }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n        if (i ==\
    \ midval) {\n            midpos = i;\n        }\n    }\n    long midpos = 0;\n\
    \    for (long i : lst) {\n        if (i == midval) {\n            midpos = i;\n\
    \        }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n        if\
    \ (i == midval) {\n            midpos = i;\n        }\n    }\n    long midpos\
    \ = 0;\n    for (long i : lst) {\n        if (i == midval) {\n            midpos\
    \ = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n   \
    \     if (i == midval) {\n            midpos = i;\n        }\n    }\n    long\
    \ midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n        \
    \    midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst)\
    \ {\n        if (i == midval) {\n            midpos = i;\n        }\n    }\n \
    \   long midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n \
    \           midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long\
    \ i \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8g7artpp.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8g7artpp.cpp:30:10: error: redeclaration of \u2018long\
    \ int midpos\u2019\n   30 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:24:10:\
    \ note: \u2018long int midpos\u2019 previously declared here\n   24 |     long\
    \ midpos = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:36:10: error: redeclaration\
    \ of \u2018long int midpos\u2019\n   36 |     long midpos = 0;\n      |      \
    \    ^~~~~~\n/tmp/tmp8g7artpp.cpp:24:10: note: \u2018long int midpos\u2019 previously\
    \ declared here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:42:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   42 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:48:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   48 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmp8g7artpp.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:54:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   54 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:60:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   60 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmp8g7artpp.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:66:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   66 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmp8g7artpp.cpp:72:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   72 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmp8g7artpp.cpp:24:10: note: \u2018long int midpos\u2019 pr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphq_rv21f: /tmp/tmphq_rv21f.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n \
    \   for (long i : lst) {\n        if (i < min) {\n            long temp = min;\n\
    \            min = i;\n            while (min != temp) {\n                res.push_back(temp);\n\
    \                temp = temp + 1;\n            }\n        }\n        if (i > max)\
    \ {\n            long temp = max;\n            max = i;\n            while (max\
    \ != temp) {\n                res.push_back(temp);\n                temp = temp\
    \ + 1;\n            }\n        }\n    }\n    res.push_back(min);\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbg00bu8a: /tmp/tmpbg00bu8a.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid = min + (max - min) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   } else if (i > mid) {\n            result.push_back(mid);\n        } else\
    \ {\n            result.push_back(mid);\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpddenpjug: /tmp/tmpddenpjug.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        } else if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ } else if (i == max) {\n            res.push_back(i);\n        } else {\n  \
    \          res.push_back(i);\n            res.push_back(max);\n            res.push_back(min);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuego3ngq: /tmp/tmpuego3ngq.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n \
    \   for (long i : lst) {\n        if (i == max) {\n            long j = max -\
    \ 1;\n            while (j > 0 && lst[j] == i) {\n                res.push_back(lst[j--]);\n\
    \            }\n        } else if (i == min) {\n            long j = min + 1;\n\
    \            while (j < lst.size() && lst[j] == i) {\n                res.push_back(lst[j++]);\n\
    \            }\n        } else {\n            long j = min + 1;\n            while\
    \ (j < lst.size() && lst[j] == i) {\n                res.push_back(lst[j++]);\n\
    \            }\n            j = max - 1;\n            while (j > 0 && lst[j] ==\
    \ i) {\n                res.push_back(lst[j--]);\n            }\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp03hpfcfy: /tmp/tmp03hpfcfy.cpp:53: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpukwjhxc0: /tmp/tmpukwjhxc0.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkzii06bn: /tmp/tmpkzii06bn.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpngqr80jv: /tmp/tmpngqr80jv.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid = 0;\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        } else if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   } else if (i > mid) {\n            result.push_back(mid);\n        } else\
    \ {\n            result.push_back(mid);\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_7lg48z7: /tmp/tmp_7lg48z7.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4r_rdlm3: /tmp/tmp4r_rdlm3.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long minval = std::numeric_limits<long>::min();\n    long maxval\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < minval) {\n            result.push_back(minval);\n            minval = i;\n\
    \        } else if (i > maxval) {\n            result.push_back(maxval);\n   \
    \         maxval = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqmvwba36: /tmp/tmpqmvwba36.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcxnv43s9: /tmp/tmpcxnv43s9.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    for (long i : lst) {\n        result.push_back(i);\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf_wqfdlj: /tmp/tmpf_wqfdlj.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> ans;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = min + (max - min) / 2;\n    for (long i : lst)\
    \ {\n        if (i < mid) {\n            ans.push_back(i);\n        }\n    }\n\
    \    for (long i : lst) {\n        if (i > mid) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7yzizrm9: /tmp/tmp7yzizrm9.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7ykje7yq: /tmp/tmp7ykje7yq.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnpao9eej: /tmp/tmpnpao9eej.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi0r3675b: /tmp/tmpi0r3675b.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long minval = *std::min_element(lst.begin(), lst.end());\n    long\
    \ maxval = *std::max_element(lst.begin(), lst.end());\n    long midval = minval\
    \ + maxval / 2;\n    long midval2 = minval + maxval / 2;\n    long midval3 = minval\
    \ + maxval / 2;\n    long midval4 = minval + maxval / 2;\n    long midval5 = minval\
    \ + maxval / 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval\
    \ + maxval / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval\
    \ + maxval / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 =\
    \ minval + maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13\
    \ = minval + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15\
    \ = minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = minval + maxval / 2;\n    long midval35\
    \ = minval\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpam40d9a5.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpam40d9a5.cpp:49:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpam40d9a5.cpp:49:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpglxcywy7: /tmp/tmpglxcywy7.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    for (long i : lst) {\n        if (i < mid) {\n   \
    \         left = i;\n        }\n        if (i > mid) {\n            right = i;\n\
    \        }\n    }\n    ans.push_back(left);\n    ans.push_back(right);\n    ans.push_back(min);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp784b44jl: /tmp/tmp784b44jl.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long minVal = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxVal = *std::max_element(lst.begin(), lst.end());\n\
    \    long midVal = (minVal + maxVal) / 2;\n    long midVal2 = minVal;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < midVal) {\n      \
    \      ans.push_back(midVal2);\n            midVal2 = midVal;\n            midVal\
    \ = lst[i];\n        } else if (lst[i] > midVal) {\n            midVal2 = midVal;\n\
    \            midVal = lst[i];\n        } else {\n            midVal2 = lst[i];\n\
    \        }\n    }\n    ans.push_back(midVal2);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3uh3mvt5: /tmp/tmp3uh3mvt5.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    lst2.push_back(min);\n\
    \    lst2.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n\
    \            lst2.push_back(i);\n        }\n        if (i > max) {\n         \
    \   lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqpyq34l0: /tmp/tmpqpyq34l0.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp67o9v1if: /tmp/tmp67o9v1if.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for(long i : lst){\n        if(i<min){\n      \
    \      min=i;\n        }\n        if(i>max){\n            max=i;\n        }\n\
    \    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n     \
    \   }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpd4qeyt57.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd4qeyt57.cpp:129:1: error: expected \u2018(\u2019 before\
    \ \u2018}\u2019 token\n  129 | }\n      | ^\n      | (\n/tmp/tmpd4qeyt57.cpp:130:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  130 | int main() {\n      |            ^\n/tmp/tmpd4qeyt57.cpp:141:1: error:\
    \ expected \u2018}\u2019 at end of input\n  141 | }\n      | ^\n/tmp/tmpd4qeyt57.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpd4qeyt57.cpp:141:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  141 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> ans;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = (min + max) / 2;\n    for (long i : lst) {\n  \
    \      if (i < mid) {\n            ans.push_back(i);\n        }\n        if (i\
    \ > mid) {\n            ans.push_back(mid);\n        }\n    }\n    ans.push_back(mid);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw7r3mv0l: /tmp/tmpw7r3mv0l.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7500vrx8: /tmp/tmp7500vrx8.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            res.push_back(min);\n        } else if (i == max)\
    \ {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9n9p1iqr: /tmp/tmp9n9p1iqr.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long max\
    \ = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max - min)\
    \ / 2;\n    long mid2 = mid + (max - min) / 2;\n    long mid3 = mid2 + (max -\
    \ min) / 2;\n    long mid4 = mid3 + (max - min) / 2;\n    long mid5 = mid4 + (max\
    \ - min) / 2;\n    long mid6 = mid5 + (max - min) / 2;\n    long mid7 = mid6 +\
    \ (max - min) / 2;\n    long mid8 = mid7 + (max - min) / 2;\n    long mid9 = mid8\
    \ + (max - min) / 2;\n    long mid10 = mid9 + (max - min) / 2;\n    long mid11\
    \ = mid10 + (max - min) / 2;\n    long mid12 = mid11 + (max - min) / 2;\n    long\
    \ mid13 = mid12 + (max - min) / 2;\n    long mid14 = mid13 + (max - min) / 2;\n\
    \    long mid15 = mid14 + (max - min) / 2;\n    long mid16 = mid15 + (max - min)\
    \ / 2;\n    long mid17 = mid16 + (max - min) / 2;\n    long mid18 = mid17 + (max\
    \ - min) / 2;\n    long mid19 = mid18 + (max - min) / 2;\n    long mid20 = mid19\
    \ + (max - min) / 2;\n    long mid21 = mid20 + (max - min) / 2;\n    long mid22\
    \ = mid21 + (max - min) / 2;\n    long mid23 = mid22 + (max - min) / 2;\n    long\
    \ mid24 = mid23 + (max - min) / 2;\n    long mid25 = mid24 + (max - min) / 2;\n\
    \    long mid26 = mid25 + (max - min) / 2;\n    long mid27 = mid26 + (max - min)\
    \ / 2;\n    long mid28 = mid27 + (max - min) / 2;\n    long mid29 = mid28 + (max\
    \ - min) / 2;\n    long mid30 = mid29 + (max - min) / 2;\n    long mid31 = mid30\
    \ + (max - min) / 2;\n    long mid32 = mid31 + (max - min) / 2;\n    long mid33\
    \ = mid32 + (max - min) / 2;\n    long mid34 = mid33 + (max - min) / 2;\n    long\
    \ mid35 = mid34 + (max - min) / 2;\n    long mid36 = mid35 + (max - min) / 2;\n\
    \    long mid37 = mid36 + (max - min) / 2;\n    long mid38 = mid37\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpl2ajtb4i.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpl2ajtb4i.cpp:52:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmpl2ajtb4i.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf5u5qrhs: /tmp/tmpf5u5qrhs.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzj_zbopb: /tmp/tmpzj_zbopb.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwlv7yrc1: /tmp/tmpwlv7yrc1.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9o77nvk9: /tmp/tmp9o77nvk9.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi6tui5dx: /tmp/tmpi6tui5dx.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4njxheoy: /tmp/tmp4njxheoy.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = std::numeric_limits<long>::min();\n    long\
    \ max_val = std::numeric_limits<long>::max();\n    for (long i : lst) {\n    \
    \    if (i < min_val) {\n            sorted_lst.push_back(i);\n        } else\
    \ if (i > max_val) {\n            sorted_lst.push_back(max_val);\n        } else\
    \ {\n            sorted_lst.push_back(min_val);\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmqtsilzm: /tmp/tmpmqtsilzm.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    long mid;\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            min = i;\n        }\n        if (i > max) {\n     \
    \       max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    res.push_back(min);\n\
    \    res.push_back(mid);\n    res.push_back(max);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu2mihh2v: /tmp/tmpu2mihh2v.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long minv = std::numeric_limits<long>::min();\n    long maxv = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < minv) {\n            minv = i;\n  \
    \      } else if (i > maxv) {\n            maxv = i;\n        }\n    }\n    for\
    \ (long i = minv; i <= maxv; i++) {\n        res.push_back(i);\n    }\n    for\
    \ (long i = maxv; i >= minv; i--) {\n        res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  res.push_back(min);\n        } else if (i == max) {\n            res.push_back(max);\n\
    \        } else {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppt_ozfcb: /tmp/tmppt_ozfcb.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            res.push_back(min);\n        } else\
    \ if (i == max) {\n            res.push_back(max);\n        } else {\n       \
    \     res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpifu8264w: /tmp/tmpifu8264w.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    long mid = 0;\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            ans.push_back(min);\n            min = i;\n  \
    \      } else if (i > max) {\n            ans.push_back(max);\n            max\
    \ = i;\n        } else {\n            mid = i;\n        }\n    }\n    ans.push_back(min);\n\
    \    ans.push_back(max);\n    ans.push_back(mid);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2w8tpo8o: /tmp/tmp2w8tpo8o.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            long temp = min;\n         \
    \   min = i;\n            while (temp != i) {\n                res.push_back(temp);\n\
    \                temp = temp + 1;\n            }\n        }\n        if (i > max)\
    \ {\n            long temp = max;\n            max = i;\n            while (temp\
    \ != i) {\n                res.push_back(temp);\n                temp = temp -\
    \ 1;\n            }\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxvjc_8nw: /tmp/tmpxvjc_8nw.cpp:49: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> ans;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    ans.push_back(min);\n            min = i;\n        }\n        if (i > max)\
    \ {\n            ans.push_back(max);\n            max = i;\n        }\n    }\n\
    \    ans.push_back(min);\n    ans.push_back(max);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg4jh7ha7: /tmp/tmpg4jh7ha7.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0u__9nxd: /tmp/tmp0u__9nxd.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long minval = *std::min_element(lst.begin(), lst.end());\n    long\
    \ maxval = *std::max_element(lst.begin(), lst.end());\n    long midval = minval\
    \ + maxval / 2;\n    long midval2 = minval + maxval / 2;\n    long midval3 = minval\
    \ + maxval / 2;\n    long midval4 = minval + maxval / 2;\n    long midval5 = minval\
    \ + maxval / 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval\
    \ + maxval / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval\
    \ + maxval / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 =\
    \ minval + maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13\
    \ = minval + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15\
    \ = minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = minval + maxval / 2;\n    long midval35\
    \ = minval\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdgezv5qz.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdgezv5qz.cpp:49:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpdgezv5qz.cpp:49:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(max\
    \ - i);\n        }\n    }\n    res.push_back(min);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp53awlsm_: /tmp/tmp53awlsm_.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqjk4ecib: /tmp/tmpqjk4ecib.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : lst) {\n        if (i < min) {\n       \
    \     min = i;\n        } else if (i > max) {\n            max = i;\n        }\n\
    \    }\n    mid = (min + max) / 2;\n    for (long i : lst) {\n        if (i <\
    \ mid) {\n            lst2.push_back(i);\n        } else if (i > mid) {\n    \
    \        lst2.push_back(max - i);\n        } else {\n            lst2.push_back(min\
    \ - i);\n        }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxh5qvjdn: /tmp/tmpxh5qvjdn.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvjr4klyn: /tmp/tmpvjr4klyn.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    long left = min;\n    long right = max;\n    while (left\
    \ < right) {\n        while (left < right && lst[left] < mid) {\n            left++;\n\
    \        }\n        while (left < right && lst[right] > mid) {\n            right--;\n\
    \        }\n        if (left < right) {\n            result.push_back(lst[left]);\n\
    \            left++;\n            right--;\n        }\n    }\n    for (long i\
    \ : result) {\n        lst.push_back(i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8nhbysad: /tmp/tmp8nhbysad.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    long temp;\n    for (long i : lst) {\n        if (i\
    \ < mid) {\n            temp = i;\n        } else {\n            temp = mid;\n\
    \        }\n        result.push_back(temp);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl7e559ka: /tmp/tmpl7e559ka.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        min = std::min(min, i);\n        max = std::max(max,\
    \ i);\n    }\n    for (long i : lst) {\n        ans.push_back(i);\n    }\n   \
    \ for (long i = min; i <= max; i++) {\n        std::swap(ans.back(), ans.back()\
    \ + ans.size());\n        ans.push_back(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7sqthu9x.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7sqthu9x.cpp:22:54: error: no matching function for call\
    \ to \u2018swap(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&,\
    \ long unsigned int)\u2019\n   22 |         std::swap(ans.back(), ans.back() +\
    \ ans.size());\n      |                                                      ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7sqthu9x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7sqthu9x.cpp:22:54:\
    \ note:   deduced conflicting types for parameter \u2018_Tp\u2019 (\u2018long\
    \ int\u2019 and \u2018long unsigned int\u2019)\n   22 |         std::swap(ans.back(),\
    \ ans.back() + ans.size());\n      |                                         \
    \             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long middleValue = maxValue - minValue;\n    long middleIndex = lst.size()\
    \ / 2;\n    long middle = lst[middleIndex];\n    long temp;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] < middle) {\n            temp\
    \ = lst[i];\n            lst[i] = middleValue;\n            middleValue = temp;\n\
    \        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > middle) {\n            temp = lst[i];\n            lst[i] = middleValue;\n\
    \            middleValue = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < middleValue) {\n            temp = lst[i];\n  \
    \          lst[i] = minValue;\n            minValue = temp;\n        }\n    }\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > middleValue)\
    \ {\n            temp = lst[i];\n            lst[i] = minValue;\n            minValue\
    \ = temp;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] < minValue) {\n            temp = lst[i];\n            lst[i]\
    \ = minValue;\n            minValue = temp;\n        }\n    }\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] > minValue) {\n            temp\
    \ = lst[i];\n            lst[i] = minValue;\n            minValue = temp;\n  \
    \      }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ < maxValue) {\n            temp = lst[i];\n            lst[i] = maxValue;\n\
    \            maxValue = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > maxValue) {\n            temp = lst[i];\n     \
    \       lst[i] = maxValue;\n            maxValue = temp;\n        }\n    }\n \
    \   for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < middleValue)\
    \ {\n            temp = lst[i];\n            lst[i] = middleValue;\n         \
    \   middleValue = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > middleValue) {\n            temp = lst[i];\n  \
    \          lst[i] = middleValue;\n            middleValue = temp;\n        }\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < middleValue)\
    \ {\n            temp = lst[i];\n            lst[i] = minValue;\n            minValue\
    \ = temp;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] > middleValue) {\n            temp = lst[i];\n            lst[i]\
    \ = minValue;\n            minValue = temp;\n        }\n    }\n    for (long \n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9wsnro1g.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9wsnro1g.cpp:104:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmp9wsnro1g.cpp:103:14: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n  103 |     for (long\n \
    \     |              ^\n      |              ;\n  104 | }\n      | ~         \
    \    \n/tmp/tmp9wsnro1g.cpp:104:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  104 | }\n      | ^\n/tmp/tmp9wsnro1g.cpp:103:14: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n  103 |     for (long\n      |   \
    \           ^\n      |              ;\n  104 | }\n      | ~             \n/tmp/tmp9wsnro1g.cpp:104:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  104 | }\n \
    \     | ^\n/tmp/tmp9wsnro1g.cpp:103:14: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  103 |     for (long\n      |         ~    ^\n      |        \
    \      )\n  104 | }\n      | ~             \n/tmp/tmp9wsnro1g.cpp:104:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  104 | }\n      | ^\n\
    /tmp/tmp9wsnro1g.cpp:104:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp44q7yfxr: /tmp/tmp44q7yfxr.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    ans.push_back(min);\n            min = i;\n        }\n        if (i > max)\
    \ {\n            ans.push_back(max);\n            max = i;\n        }\n    }\n\
    \    ans.push_back(min);\n    ans.push_back(max);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvabq8hsp: /tmp/tmpvabq8hsp.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min;\n    long max;\n   \
    \ long temp;\n    for(long i = 0; i < lst.size(); i++){\n        min = max = lst[i];\n\
    \        for(long j = i + 1; j < lst.size(); j++){\n            if(lst[j] < min){\n\
    \                min = lst[j];\n            }\n            if(lst[j] > max){\n\
    \                max = lst[j];\n            }\n        }\n        temp = min;\n\
    \        min = max;\n        max = temp;\n        result.push_back(min);\n   \
    \     result.push_back(max);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3g654rds: /tmp/tmp3g654rds.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprv11bumq.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprv11bumq.cpp:139:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  139 | int main() {\n      |     \
    \       ^\n/tmp/tmprv11bumq.cpp:150:1: error: expected \u2018}\u2019 at end of\
    \ input\n  150 | }\n      | ^\n/tmp/tmprv11bumq.cpp:10:60: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmprv11bumq.cpp:150:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  150 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9yiy8we5: /tmp/tmp9yiy8we5.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp31odm36o: /tmp/tmp31odm36o.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq2661qo7: /tmp/tmpq2661qo7.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqi59u28p: /tmp/tmpqi59u28p.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for(long i : lst) {\n        if(i<min) {\n  \
    \          min=i;\n        }\n        if(i>max) {\n            max=i;\n      \
    \  }\n    }\n    for(long i : lst) {\n        if(i<min) {\n            result.push_back(min);\n\
    \            min=i;\n        }\n        if(i>max) {\n            result.push_back(max);\n\
    \            max=i;\n        }\n    }\n    result.push_back(min);\n    result.push_back(max);\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqey4layd: /tmp/tmpqey4layd.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    for (long i : lst) {\n        result.push_back(i);\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgqu69bam: /tmp/tmpgqu69bam.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuxumniv1: /tmp/tmpuxumniv1.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    long mid;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        mid = (min + max) / 2;\n        if (lst[i] < mid) {\n           \
    \ min = mid;\n        } else {\n            max = mid;\n        }\n    }\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n  \
    \      if (lst[i] < mid) {\n            result.push_back(mid);\n            min\
    \ = mid;\n        } else {\n            result.push_back(mid);\n            max\
    \ = mid;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpepbbmnx3: /tmp/tmpepbbmnx3.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \    long max_val = *std::max_element(lst.begin(), lst.end());\n    long min_val_2\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    long max_val_2 = *std::max_element(lst.begin()\
    \ + 1, lst.end());\n    long min_val_3 = *std::min_element(lst.begin() + 2, lst.end());\n\
    \    long max_val_3 = *std::max_element(lst.begin() + 2, lst.end());\n    long\
    \ min_val_4 = *std::min_element(lst.begin() + 3, lst.end());\n    long max_val_4\
    \ = *std::max_element(lst.begin() + 3, lst.end());\n    long min_val_5 = *std::min_element(lst.begin()\
    \ + 4, lst.end());\n    long max_val_5 = *std::max_element(lst.begin() + 4, lst.end());\n\
    \    long min_val_6 = *std::min_element(lst.begin() + 5, lst.end());\n    long\
    \ max_val_6 = *std::max_element(lst.begin() + 5, lst.end());\n    long min_val_7\
    \ = *std::min_element(lst.begin() + 6, lst.end());\n    long max_val_7 = *std::max_element(lst.begin()\
    \ + 6, lst.end());\n    long min_val_8 = *std::min_element(lst.begin() + 7, lst.end());\n\
    \    long max_val_8 = *std::max_element(lst.begin() + 7, lst.end());\n    long\
    \ min_val_9 = *std::min_element(lst.begin() + 8, lst.end());\n    long max_val_9\
    \ = *std::max_element(lst.begin() + 8, lst.end());\n    long min_val_10 = *std::min_element(lst.begin()\
    \ + 9, lst.end());\n    long max_val_10 = *std::max_element(lst.begin() + 9, lst.end());\n\
    \    long min_val_11 = *std::min_element(lst.begin() + 10, lst.end());\n    long\
    \ max_val_11 = *std::max_element(lst.begin() + 10, lst.end());\n    long min_val_12\
    \ = *std::min_element(lst.begin() + 11, lst.end());\n    long max_val_12 = *std::max_element(lst.begin()\
    \ + 11, lst.end());\n    long min_val_13 = *std::min_element(lst.begin() + 12,\
    \ lst.end());\n    long max_val_13 = *std::max_element(lst.begin() + 12, lst.end());\n\
    \    long min_val_14 = *std::min_element(lst.\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1lpqf0po.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1lpqf0po.cpp:39:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   39 | }\n      | ^\n/tmp/tmp1lpqf0po.cpp:39:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long minv = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxv = *std::max_element(lst.begin(), lst.end());\n  \
    \  for (long i : lst) {\n        if (i < minv) res.push_back(minv);\n        else\
    \ if (i > maxv) res.push_back(maxv);\n        else if (i == minv) res.push_back(minv);\n\
    \        else if (i == maxv) res.push_back(maxv);\n        else res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdebm_v4i: /tmp/tmpdebm_v4i.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxufd1u4g: /tmp/tmpxufd1u4g.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc3xtgtpv: /tmp/tmpc3xtgtpv.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (auto i : lst) {\n        mid = (min + max) / 2;\n\
    \        if (i < mid) {\n            min = mid;\n        } else if (i > mid) {\n\
    \            max = mid;\n        } else {\n            res.push_back(i);\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpci8yq12g: /tmp/tmpci8yq12g.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyum9pc62: /tmp/tmpyum9pc62.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmtohtn60: /tmp/tmpmtohtn60.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for(long i : lst){\n        if(i<min){\n      \
    \      min=i;\n        }\n        if(i>max){\n            max=i;\n        }\n\
    \    }\n    long mid = min+max/2;\n    for(long i : lst){\n        if(i<mid){\n\
    \            res.push_back(i);\n        }\n    }\n    for(long i : lst){\n   \
    \     if(i>mid){\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy7k60e0l: /tmp/tmpy7k60e0l.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            res.push_back(min);\n\
    \        } else if (i == max) {\n            res.push_back(max);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptd_6slt4: /tmp/tmptd_6slt4.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code goes here\n    std::vector<long> res;\n    res.reserve(lst.size());\n \
    \   for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmfofjq2w: /tmp/tmpmfofjq2w.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4sgl9hy: /tmp/tmpf4sgl9hy.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n \
    \   long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\
    \ {\n            min_val = i;\n        }\n        if (i > max_val) {\n       \
    \     max_val = i;\n        }\n    }\n    long mid = min_val + max_val / 2;\n\
    \    for (long i : lst) {\n        if (i < mid) {\n            sorted_lst.push_back(i);\n\
    \        } else if (i > mid) {\n            sorted_lst.push_back(mid);\n     \
    \       sorted_lst.push_back(i);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_nparoip: /tmp/tmp_nparoip.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpisdhr9y8: /tmp/tmpisdhr9y8.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    long min = lst.front();\n    long max = lst.back();\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            sorted_lst.push_back(min);\n\
    \        } else if (i == max) {\n            sorted_lst.push_back(max);\n    \
    \    } else {\n            sorted_lst.push_back(i);\n        }\n    }\n    return\
    \ sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcxvnqeil: /tmp/tmpcxvnqeil.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    if (min < max) {\n        result.push_back(min);\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmu5j6eln: /tmp/tmpmu5j6eln.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long middleValue = minValue + maxValue / 2;\n    long middleIndex = lst.size()\
    \ / 2;\n    long middle = middleValue;\n    long temp;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (i == middleIndex) {\n            temp = middleValue;\n\
    \            middleValue = middleIndex;\n            middleIndex = i;\n      \
    \      middle = temp;\n        }\n        if (lst[i] < middle) {\n           \
    \ result.push_back(lst[i]);\n        }\n    }\n    result.push_back(middleValue);\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppd5exoxz: /tmp/tmppd5exoxz.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmph5087qvq: /tmp/tmph5087qvq.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> sorted_lst;\n    sorted_lst.push_back(lst[0]);\n\
    \    sorted_lst.push_back(lst[1]);\n    sorted_lst.push_back(lst[2]);\n    sorted_lst.push_back(lst[3]);\n\
    \    sorted_lst.push_back(lst[4]);\n    sorted_lst.push_back(lst[5]);\n    sorted_lst.push_back(lst[6]);\n\
    \    sorted_lst.push_back(lst[7]);\n    sorted_lst.push_back(lst[8]);\n    sorted_lst.push_back(lst[9]);\n\
    \    sorted_lst.push_back(lst[10]);\n    sorted_lst.push_back(lst[11]);\n    sorted_lst.push_back(lst[12]);\n\
    \    sorted_lst.push_back(lst[13]);\n    sorted_lst.push_back(lst[14]);\n    sorted_lst.push_back(lst[15]);\n\
    \    sorted_lst.push_back(lst[16]);\n    sorted_lst.push_back(lst[17]);\n    sorted_lst.push_back(lst[18]);\n\
    \    sorted_lst.push_back(lst[19]);\n    sorted_lst.push_back(lst[20]);\n    sorted_lst.push_back(lst[21]);\n\
    \    sorted_lst.push_back(lst[22]);\n    sorted_lst.push_back(lst[23]);\n    sorted_lst.push_back(lst[24]);\n\
    \    sorted_lst.push_back(lst[25]);\n    sorted_lst.push_back(lst[26]);\n    sorted_lst.push_back(lst[27]);\n\
    \    sorted_lst.push_back(lst[28]);\n    sorted_lst.push_back(lst[29]);\n    sorted_lst.push_back(lst[30]);\n\
    \    sorted_lst.push_back(lst[31]);\n    sorted_lst.push_back(lst[32]);\n    sorted_lst.push_back(lst[33]);\n\
    \    sorted_lst.push_back(lst[34]);\n    sorted_lst.push_back(lst[35]);\n    sorted_lst.push_back(lst[36]);\n\
    \    sorted_lst.push_back(lst[37]);\n    sorted_lst.push_back(lst[38]);\n    sorted_lst.push_back(lst[39]);\n\
    \    sorted_lst.push_back(lst[40]);\n    sorted_lst.push_back(lst[41]);\n    sorted_lst.push_back(lst[42]);\n\
    \    sorted_lst.push_back(lst[43]);\n    sorted_lst.push_back(lst[44]);\n    sorted_lst.push_back(lst[45]);\n\
    \    sorted_lst.push_back(lst[46]);\n    sorted_lst.push_back(lst[47]);\n    sorted_lst.push_back(lst[48]);\n\
    \    sorted_lst.push_back(lst[49]);\n    sorted_lst.push_back(lst[50]);\n    sorted_l\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpgfeaw9cz.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgfeaw9cz.cpp:64:5: error: \u2018sorted_l\u2019 was not\
    \ declared in this scope; did you mean \u2018sorted_lst\u2019?\n   64 |     sorted_l\n\
    \      |     ^~~~~~~~\n      |     sorted_lst\n/tmp/tmpgfeaw9cz.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   65 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcwjqozx7: /tmp/tmpcwjqozx7.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min;\n    long max;\n    long temp;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        min = lst[i];\n        max = lst[i];\n       \
    \ for (long j = i + 1; j < lst.size(); j++) {\n            if (lst[j] < min) {\n\
    \                min = lst[j];\n            }\n            if (lst[j] > max) {\n\
    \                max = lst[j];\n            }\n        }\n        temp = min;\n\
    \        min = max;\n        max = temp;\n        lst2.push_back(min);\n     \
    \   lst2.push_back(max);\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa4dcjctg: /tmp/tmpa4dcjctg.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr_2_038i: /tmp/tmpr_2_038i.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8f5cwizi: /tmp/tmp8f5cwizi.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkg8a2fpn: /tmp/tmpkg8a2fpn.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppqcs8dot: /tmp/tmppqcs8dot.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmps_x6c3hu: /tmp/tmps_x6c3hu.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long minv = std::numeric_limits<long>::min();\n    long maxv = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < minv) {\n            minv = i;\n  \
    \      } else if (i > maxv) {\n            maxv = i;\n        }\n    }\n    res.push_back(minv);\n\
    \    res.push_back(maxv);\n    for (long i : lst) {\n        if (i < minv) {\n\
    \            minv = i;\n        } else if (i > maxv) {\n            maxv = i;\n\
    \        }\n    }\n    res.push_back(minv);\n    res.push_back(maxv);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1_u91pg4: /tmp/tmp1_u91pg4.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoy1e6wqx: /tmp/tmpoy1e6wqx.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long minval = std::numeric_limits<long>::max();\n    long maxval =\
    \ std::numeric_limits<long>::min();\n    for (long i : lst) {\n        minval\
    \ = std::min(minval, i);\n        maxval = std::max(maxval, i);\n    }\n    long\
    \ mid = minval + maxval / 2;\n    long midval = minval + maxval / 2;\n    long\
    \ midval2 = minval + maxval / 2;\n    long midval3 = minval + maxval / 2;\n  \
    \  long midval4 = minval + maxval / 2;\n    long midval5 = minval + maxval / 2;\n\
    \    long midval6 = minval + maxval / 2;\n    long midval7 = minval + maxval /\
    \ 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval + maxval\
    \ / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 = minval +\
    \ maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13 = minval\
    \ + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15 =\
    \ minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = min\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjk60rxne.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjk60rxne.cpp:51:21: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   51 |     long midval33\
    \ = min\n      |                     ^~~\n      |                     std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjk60rxne.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpjk60rxne.cpp:52:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   52 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.empty()) {\n        return res;\n    }\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ } else if (i == max) {\n            res.push_back(i);\n        } else {\n  \
    \          res.push_back(i);\n            res.push_back(max);\n        }\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphvbjy8nz: /tmp/tmphvbjy8nz.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n \
    \   for (long i : lst) {\n        if (i == min) {\n            i = max;\n    \
    \    }\n        if (i == max) {\n            i = min;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz2_yn7q7: /tmp/tmpz2_yn7q7.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw6znkpry: /tmp/tmpw6znkpry.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4cyio6v2: /tmp/tmp4cyio6v2.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsvgzngwv: /tmp/tmpsvgzngwv.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4tezido2: /tmp/tmp4tezido2.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx39g5z5j: /tmp/tmpx39g5z5j.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    if (min != max) {\n        result.push_back(min);\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_84njk_i: /tmp/tmp_84njk_i.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid;\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   }\n        if (i > mid) {\n            result.push_back(mid);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzx8lu2dy: /tmp/tmpzx8lu2dy.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        min = std::min(min, i);\n        max = std::max(max,\
    \ i);\n    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \        } else if (i > max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfee5jd15: /tmp/tmpfee5jd15.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp56q3x4v3: /tmp/tmp56q3x4v3.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long minval = lst[0];\n    long maxval = lst[0];\n    for (long i\
    \ : lst) {\n        if (i < minval) {\n            minval = i;\n        }\n  \
    \      if (i > maxval) {\n            maxval = i;\n        }\n    }\n    long\
    \ midval = minval;\n    while (midval < maxval) {\n        long midval2 = midval;\n\
    \        long midval3 = midval;\n        long midval4 = midval;\n        long\
    \ midval5 = midval;\n        long midval6 = midval;\n        long midval7 = midval;\n\
    \        long midval8 = midval;\n        long midval9 = midval;\n        long\
    \ midval10 = midval;\n        long midval11 = midval;\n        long midval12 =\
    \ midval;\n        long midval13 = midval;\n        long midval14 = midval;\n\
    \        long midval15 = midval;\n        long midval16 = midval;\n        long\
    \ midval17 = midval;\n        long midval18 = midval;\n        long midval19 =\
    \ midval;\n        long midval20 = midval;\n        long midval21 = midval;\n\
    \        long midval22 = midval;\n        long midval23 = midval;\n        long\
    \ midval24 = midval;\n        long midval25 = midval;\n        long midval26 =\
    \ midval;\n        long midval27 = midval;\n        long midval28 = midval;\n\
    \        long midval29 = midval;\n        long midval30 = midval;\n        long\
    \ midval31 = midval;\n        long midval32 = midval;\n        long midval33 =\
    \ midval;\n        long midval34 = midval;\n        long midval35 = midval;\n\
    \        long midval36 = midval;\n        long midval37 = midval;\n        long\
    \ midval38 = midval;\n        long midval39 = midval;\n        long midval40 =\
    \ midval;\n        long midval41 = midval;\n        long midval42 = midval;\n\
    \        long midval43 = midval;\n        long midval44 = midval;\n        long\
    \ midval45 = midval;\n        long midval46 = midval;\n        long midval47 =\
    \ midval;\n        long midval48 = midval;\n        long midval49 = midval;\n\
    \        long midval50 = midval;\n        long midval51 = midval;\n        long\
    \ midval52 = \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6dvcribj.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6dvcribj.cpp:75:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmp6dvcribj.cpp:76:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   76 | int main() {\n      |            ^\n/tmp/tmp6dvcribj.cpp:87:1: error:\
    \ expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmp6dvcribj.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmp6dvcribj.cpp:87:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n\
    \    long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\
    \ {\n            min_val = i;\n        }\n        if (i > max_val) {\n       \
    \     max_val = i;\n        }\n    }\n    long mid = (min_val + max_val) / 2;\n\
    \    for (long i : lst) {\n        if (i < mid) {\n            sorted_lst.push_back(i);\n\
    \        } else if (i > mid) {\n            sorted_lst.push_back(max_val);\n \
    \       } else {\n            sorted_lst.push_back(min_val);\n        }\n    }\n\
    \    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeagxdmil: /tmp/tmpeagxdmil.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxpivgbr4: /tmp/tmpxpivgbr4.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvmw55esz: /tmp/tmpvmw55esz.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx8jzfp3c: /tmp/tmpx8jzfp3c.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i < min) {\n         \
    \   result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ugh3fg0: /tmp/tmp1ugh3fg0.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc0j8xoef: /tmp/tmpc0j8xoef.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmieveq1t: /tmp/tmpmieveq1t.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long minValue = lst[0];\n\
    \    long maxValue = lst[0];\n    for (long i : lst) {\n        if (i < minValue)\
    \ {\n            minValue = i;\n        }\n        if (i > maxValue) {\n     \
    \       maxValue = i;\n        }\n    }\n    long midValue = minValue + maxValue\
    \ / 2;\n    long leftValue = minValue;\n    long rightValue = maxValue;\n    while\
    \ (leftValue < rightValue) {\n        while (leftValue < midValue && rightValue\
    \ > midValue) {\n            result.push_back(leftValue);\n            leftValue++;\n\
    \        }\n        while (leftValue < midValue && rightValue < midValue) {\n\
    \            result.push_back(rightValue);\n            rightValue--;\n      \
    \  }\n        while (leftValue > midValue && rightValue > midValue) {\n      \
    \      result.push_back(leftValue);\n            leftValue--;\n        }\n   \
    \     while (leftValue > midValue && rightValue < midValue) {\n            result.push_back(rightValue);\n\
    \            rightValue++;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpizv60qfw: /tmp/tmpizv60qfw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n \
    \   long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            res.push_back(min);\n        } else if (i == max)\
    \ {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkjwaexr_: /tmp/tmpkjwaexr_.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfdf6tpje: /tmp/tmpfdf6tpje.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_j869wc3: /tmp/tmp_j869wc3.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : lst) {\n        mid = (min + max) / 2;\n\
    \        if (i < mid) {\n            min = mid;\n        } else {\n          \
    \  max = mid;\n        }\n        ans.push_back(i);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzxyiyd7d: /tmp/tmpzxyiyd7d.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           long temp = min;\n            min = i;\n            while (min !=\
    \ temp) {\n                res.push_back(temp);\n                temp = temp -\
    \ 1;\n            }\n        }\n        if (i > max) {\n            long temp\
    \ = max;\n            max = i;\n            while (max != temp) {\n          \
    \      res.push_back(temp);\n                temp = temp + 1;\n            }\n\
    \        }\n    }\n    res.push_back(min);\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf8cpij63: /tmp/tmpf8cpij63.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2(lst.size());\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ min_val = i;\n        long max_val = i;\n        for (long j = i + 1; j < lst.size();\
    \ j++) {\n            if (lst[j] < lst[min_val]) {\n                min_val =\
    \ j;\n            }\n            if (lst[j] > lst[max_val]) {\n              \
    \  max_val = j;\n            }\n        }\n        lst2[i] = lst[min_val];\n \
    \       lst2[i] = lst[max_val];\n    }\n    return lst2;\n}\nint main() {\n  \
    \  auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqjb_91cc: /tmp/tmpqjb_91cc.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4bvtpy3i: /tmp/tmp4bvtpy3i.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzaz90sfo: /tmp/tmpzaz90sfo.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpigaz0jmh: /tmp/tmpigaz0jmh.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi29pm1x3: /tmp/tmpi29pm1x3.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0bh7bju2: /tmp/tmp0bh7bju2.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long minval = *std::min_element(lst.begin(), lst.end());\n    long\
    \ maxval = *std::max_element(lst.begin(), lst.end());\n    long midval = minval\
    \ + maxval / 2;\n    long midval2 = minval + maxval / 2;\n    long midval3 = minval\
    \ + maxval / 2;\n    long midval4 = minval + maxval / 2;\n    long midval5 = minval\
    \ + maxval / 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval\
    \ + maxval / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval\
    \ + maxval / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 =\
    \ minval + maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13\
    \ = minval + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15\
    \ = minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = minval + maxval / 2;\n    long midval35\
    \ = minval + \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmtz5sxt0.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmtz5sxt0.cpp:49:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpmtz5sxt0.cpp:49:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf6krzddr: /tmp/tmpf6krzddr.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        } else\
    \ if (i == max) {\n            lst2.push_back(max);\n        } else {\n      \
    \      lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz_3aqzjn: /tmp/tmpz_3aqzjn.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9c63o_l1: /tmp/tmp9c63o_l1.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n     \
    \       result.push_back(i);\n        }\n        if (i > mid) {\n            result.push_back(mid);\n\
    \        }\n        mid = min + (max - min) / 2;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphmapy0tt: /tmp/tmphmapy0tt.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx_wktjm9: /tmp/tmpx_wktjm9.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long max\
    \ = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max - min)\
    \ / 2;\n    for (long i : lst) {\n        if (i < mid) {\n            res.push_back(i);\n\
    \        } else if (i > mid) {\n            res.push_back(mid);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt8vzem90: /tmp/tmpt8vzem90.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp591kn8i_: /tmp/tmp591kn8i_.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2q5vn5u3: /tmp/tmp2q5vn5u3.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ogs76cw: /tmp/tmp9ogs76cw.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptdaaoj9l.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptdaaoj9l.cpp:139:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  139 | int main() {\n      |     \
    \       ^\n/tmp/tmptdaaoj9l.cpp:150:1: error: expected \u2018}\u2019 at end of\
    \ input\n  150 | }\n      | ^\n/tmp/tmptdaaoj9l.cpp:10:60: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmptdaaoj9l.cpp:150:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  150 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq6lf0w4u: /tmp/tmpq6lf0w4u.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6znrvex_: /tmp/tmp6znrvex_.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    lst2.push_back(min);\n    lst2.push_back(mid);\n    lst2.push_back(max);\n\
    \    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6trjwcvh: /tmp/tmp6trjwcvh.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvmmyig19: /tmp/tmpvmmyig19.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst1;\n    std::vector<long> lst2;\n    std::vector<long> lst3;\n    std::vector<long>\
    \ lst4;\n    std::vector<long> lst5;\n    std::vector<long> lst6;\n    std::vector<long>\
    \ lst7;\n    std::vector<long> lst8;\n    std::vector<long> lst9;\n    std::vector<long>\
    \ lst10;\n    std::vector<long> lst11;\n    std::vector<long> lst12;\n    std::vector<long>\
    \ lst13;\n    std::vector<long> lst14;\n    std::vector<long> lst15;\n    std::vector<long>\
    \ lst16;\n    std::vector<long> lst17;\n    std::vector<long> lst18;\n    std::vector<long>\
    \ lst19;\n    std::vector<long> lst20;\n    std::vector<long> lst21;\n    std::vector<long>\
    \ lst22;\n    std::vector<long> lst23;\n    std::vector<long> lst24;\n    std::vector<long>\
    \ lst25;\n    std::vector<long> lst26;\n    std::vector<long> lst27;\n    std::vector<long>\
    \ lst28;\n    std::vector<long> lst29;\n    std::vector<long> lst30;\n    std::vector<long>\
    \ lst31;\n    std::vector<long> lst32;\n    std::vector<long> lst33;\n    std::vector<long>\
    \ lst34;\n    std::vector<long> lst35;\n    std::vector<long> lst36;\n    std::vector<long>\
    \ lst37;\n    std::vector<long> lst38;\n    std::vector<long> lst39;\n    std::vector<long>\
    \ lst40;\n    std::vector<long> lst41;\n    std::vector<long> lst42;\n    std::vector<long>\
    \ lst43;\n    std::vector<long> lst44;\n    std::vector<long> lst45;\n    std::vector<long>\
    \ lst46;\n    std::vector<long> lst47;\n    std::vector<long> lst48;\n    std::vector<long>\
    \ lst49;\n    std::vector<long> lst50;\n    std::vector<long> lst51;\n    std::vector<long>\
    \ lst52;\n    std::vector<long> lst53;\n    std::vector<long> lst54;\n    std::vector<long>\
    \ lst55;\n    std::vector<long> lst56;\n    std::vector<long> lst57;\n    std::vector<long>\
    \ lst58;\n    std::vector<long> lst59;\n    std::vector<long> lst60;\n    std::vector<long>\
    \ lst61;\n    std::vector<long> lst62;\n    std::vector<long> lst63;\n    std::vector<long>\
    \ lst64;\n    std::vector<long> lst65;\n    std::vector<long> lst66;\n    std::vector<long>\
    \ \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdpg40hdo.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdpg40hdo.cpp:78:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   78 | }\n      | ^\n/tmp/tmpdpg40hdo.cpp:78:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i == min) {\n\
    \            res.push_back(i);\n        } else if (i == max) {\n            res.push_back(i);\n\
    \        } else {\n            res.push_back(i);\n            res.push_back(min\
    \ + 1);\n            res.push_back(max - 1);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpag12aq0c: /tmp/tmpag12aq0c.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcnwkx43f: /tmp/tmpcnwkx43f.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    long\
    \ min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i == min) {\n            res.push_back(min);\n\
    \        } else if (i == max) {\n            res.push_back(max);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgus_kg5b: /tmp/tmpgus_kg5b.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuyicps17: /tmp/tmpuyicps17.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid = 0;\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        } else if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   } else if (i > mid) {\n            result.push_back(mid);\n        } else\
    \ {\n            result.push_back(mid);\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmplrgavxcy: /tmp/tmplrgavxcy.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    long temp = min;\n    while (min <= max) {\n        if (mid\
    \ < lst[temp]) {\n            result.push_back(temp);\n            mid = mid +\
    \ 1;\n            temp++;\n        } else {\n            result.push_back(temp);\n\
    \            mid = mid - 1;\n            temp--;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmps70wnib1: /tmp/tmps70wnib1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj079i6mj: /tmp/tmpj079i6mj.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
