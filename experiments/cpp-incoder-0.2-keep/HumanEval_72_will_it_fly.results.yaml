language: cpp
name: HumanEval_72_will_it_fly
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++17\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n      \
    \  if (sum > w) {\n            return false;\n        }\n    }\n    max_sum =\
    \ sum;\n    sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum +=\
    \ q[i];\n        if (sum > w) {\n            return false;\n        }\n    }\n\
    \    return sum == max_sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmkz0gpxm: /tmp/tmpmkz0gpxm.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6gw1vbjh: /tmp/tmp6gw1vbjh.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpeu80_q2a: /tmp/tmpeu80_q2a.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5q9cd5wm: /tmp/tmp5q9cd5wm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc3z0getb: /tmp/tmpc3z0getb.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_sum = sum - w;\n    for(long i : q)\
    \ {\n        if(i > max_sum) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpqs8tem8q: /tmp/tmpqs8tem8q.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    long\
    \ max = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max = std::max(max,\
    \ q[i]);\n    }\n    return sum == max;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprhkeocwt: /tmp/tmprhkeocwt.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpi5xhjmlv: /tmp/tmpi5xhjmlv.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n \
    \       if (sum > max_sum) {\n            max_sum = sum;\n            max_weight\
    \ = w;\n        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpm1d7ufxp: /tmp/tmpm1d7ufxp.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // Your code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) max\
    \ = q[i];\n    }\n    long mid = max / 2;\n    long sum2 = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        if(q[i] > mid) {\n            sum2 += q[i];\n\
    \        }\n    }\n    return sum2 <= w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpgc1nku5s: /tmp/tmpgc1nku5s.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_a1cpfr.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm_a1cpfr.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_weight_index = 0;\n    for (long i : q) {\n        if (i ==\
    \ max_weight) {\n            max_weight_index = q.size() - i - 1;\n          \
    \  break;\n        }\n    }\n    if (max_weight_index == 0) {\n        return\
    \ false;\n    }\n    long max_weight_value = max_weight;\n    for (long i = max_weight_index;\
    \ i >= 0; i--) {\n        long value = max_weight_value;\n        for (long j\
    \ = i; j < q.size(); j++) {\n            value += q[j];\n            if (value\
    \ > max_weight) {\n                max_weight = value;\n                max_weight_index\
    \ = j;\n            }\n        }\n    }\n    return max_weight_index == q.size()\
    \ - 1;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7i_ac_2m: /tmp/tmp7i_ac_2m.cpp:51: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] >\
    \ max_weight) return false;\n        max_weight -= q[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpkfol7ihg: /tmp/tmpkfol7ihg.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsznadqyi: /tmp/tmpsznadqyi.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    long max_weight = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        max_weight = std::max(max_weight, q[i]);\n    }\n    return max_sum ==\
    \ max_weight;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp2r4_zjx8: /tmp/tmp2r4_zjx8.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long maxSum = sum;\n    long maxSumIndex = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if (sum > maxSum) {\n  \
    \          maxSum = sum;\n            maxSumIndex = i;\n        }\n    }\n   \
    \ if (maxSumIndex == q.size() - 1) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpfxqfzrix: /tmp/tmpfxqfzrix.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i : q) {\n        sum\
    \ += i;\n    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum\
    \ = sum;\n    for (long i : q) {\n        max_sum = std::max(max_sum, i);\n  \
    \  }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1u7vg38o: /tmp/tmp1u7vg38o.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_possible = std::pow(w, q.size());\n\
    \    for (auto i : q) {\n        if (i > max_possible) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5rcuran5: /tmp/tmp5rcuran5.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpzh9og121: /tmp/tmpzh9og121.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_sum = w;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp78l2diz9: /tmp/tmp78l2diz9.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++){\n  \
    \      if(q[i] > max_weight){\n            max_weight = q[i];\n        }\n   \
    \ }\n    for(long i = 0; i < q.size(); i++){\n        if(q[i] != max_weight){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpdzkd2cb9: /tmp/tmpdzkd2cb9.cpp:38: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \    }\n    if(max_sum < w) return false;\n    long mid = max_sum / 2;\n    long\
    \ left = max_sum - mid;\n    long right = w - max_sum;\n    long mid2 = max_sum\
    \ / 2;\n    long left2 = w - max_sum;\n    long right2 = max_sum - mid2;\n   \
    \ long mid3 = max_sum / 2;\n    long left3 = w - max_sum;\n    long right3 = max_sum\
    \ - mid3;\n    long mid4 = max_sum / 2;\n    long left4 = w - max_sum;\n    long\
    \ right4 = max_sum - mid4;\n    long mid5 = max_sum / 2;\n    long left5 = w -\
    \ max_sum;\n    long right5 = max_sum - mid5;\n    long mid6 = max_sum / 2;\n\
    \    long left6 = w - max_sum;\n    long right6 = max_sum - mid6;\n    long mid7\
    \ = max_sum / 2;\n    long left7 = w - max_sum;\n    long right7 = max_sum - mid7;\n\
    \    long mid8 = max_sum / 2;\n    long left8 = w - max_sum;\n    long right8\
    \ = max_sum - mid8;\n    long mid9 = max_sum / 2;\n    long left9 = w - max_sum;\n\
    \    long right9 = max_sum - mid9;\n    long mid10 = max_sum / 2;\n    long left10\
    \ = w - max_sum;\n    long right10 = max_sum - mid10;\n    long mid11 = max_sum\
    \ / 2;\n    long left11 = w - max_sum;\n    long right11 = max_sum - mid11;\n\
    \    long mid12 = max_sum / 2;\n    long left12 = w - max_sum;\n    long right12\
    \ = max_sum - mid12;\n    long mid13 = max_sum / 2;\n    long left13 = w - max_sum;\n\
    \    long right13 = max_sum - mid13;\n    long mid14 = max_sum / 2;\n    long\
    \ left14 = w - max_sum;\n    long right14 = max_sum - mid14;\n    long mid15 =\
    \ max_sum / 2;\n    long left15 = w - max_sum;\n    long right15 = max_sum - mid15;\n\
    \    long mid16 = max_sum / 2;\n    long left16 = w - max_sum;\n    long right16\
    \ = max_sum\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfvm2foy_.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpfvm2foy_.cpp:74:1: error: expected \u2018,\u2019\
    \ or \u2018;\u2019 before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmpfvm2foy_.cpp:74:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660134534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = w;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpfdxgkbkz: /tmp/tmpfdxgkbkz.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl1sh7mtz: /tmp/tmpl1sh7mtz.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long max_sum = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n    }\n    if (max_sum\
    \ < w) return false;\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        sum += q[i];\n        if (sum > w) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp99skmeq2: /tmp/tmp99skmeq2.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w && std::equal(q.begin(), q.end(),\
    \ q.rbegin());\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp2tn03v6r: /tmp/tmp2tn03v6r.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n  \
    \          max_sum = sum;\n        }\n    }\n    return max_sum == w;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp8vvaqtbx: /tmp/tmp8vvaqtbx.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp9l5wg570: /tmp/tmp9l5wg570.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] >\
    \ max_weight) return false;\n        max_weight -= q[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpkfol7ihg: /tmp/tmpkfol7ihg.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum - w;\n\
    \    long max_weight = 0;\n    for (auto i : q) {\n        max_weight = std::max(max_weight,\
    \ i);\n    }\n    if (max_sum < max_weight) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7rswry1j: /tmp/tmp7rswry1j.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max) {\n \
    \           max = sum;\n        }\n    }\n    if(sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp747dordl: /tmp/tmp747dordl.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++11\n    long sum = 0;\n    long max = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    if (sum == w) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp1com04id: /tmp/tmp1com04id.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    return max_weight <= w;\n}\nint main() {\n   \
    \ auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2,\
    \ 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpjywrjm3k: /tmp/tmpjywrjm3k.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_sum = sum;\n    for(long i : q) {\n\
    \        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum == sum;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpull20f7t: /tmp/tmpull20f7t.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsnfd6m0u: /tmp/tmpsnfd6m0u.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpe4mm2vg_: /tmp/tmpe4mm2vg_.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == sum;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpmhm5ctzl: /tmp/tmpmhm5ctzl.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp94o82ant: /tmp/tmp94o82ant.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long maxSum = sum;\n  \
    \  for (long i : q) {\n        maxSum = std::max(maxSum, i);\n    }\n    return\
    \ maxSum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7_ltzsoq: /tmp/tmp7_ltzsoq.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp3ccdgnav: /tmp/tmp3ccdgnav.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum - w;\n\
    \    long max_weight = 0;\n    for (auto i : q) {\n        max_weight = max(max_weight,\
    \ i);\n    }\n    if (max_sum < max_weight) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8wgz_a7.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpb8wgz_a7.cpp:25:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_weight = max(max_weight, i);\n      |                      ^~~\n   \
    \   |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb8wgz_a7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max) {\n            max = q[i];\n        }\n    }\n    if(max < w) {\n   \
    \     return false;\n    }\n    long mid = max / 2;\n    long left = 0;\n    long\
    \ right = 0;\n    long midSum = 0;\n    for(long i = 0; i < q.size(); i++) {\n\
    \        if(q[i] > mid) {\n            midSum += q[i];\n            if(q[i] >\
    \ left) {\n                left = q[i];\n            }\n        } else {\n   \
    \         midSum += q[i];\n            if(q[i] > right) {\n                right\
    \ = q[i];\n            }\n        }\n    }\n    if(midSum < w) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp72e7xxaz: /tmp/tmp72e7xxaz.cpp:56: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return q[0] == w;\n    if (q[n/2] == w)\n        return will_it_fly(q,\
    \ w);\n    if (q[n/2] + q[n/2-1] == w)\n        return will_it_fly(q, w);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7ja7mps9: /tmp/tmp7ja7mps9.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            max_weight = sum;\n\
    \        }\n    }\n    if(max_weight == 0) {\n        return true;\n    }\n  \
    \  for(auto i : q) {\n        if(i != q[q.size() - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4801k5t: /tmp/tmpb4801k5t.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsqw1t5g0: /tmp/tmpsqw1t5g0.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpvc9oeovf: /tmp/tmpvc9oeovf.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpf8wejide: /tmp/tmpf8wejide.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++11\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n       \
    \ if(sum > w) {\n            return false;\n        }\n        max_sum = std::max(max_sum,\
    \ sum);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmppez7601o: /tmp/tmppez7601o.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum - w;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max_sum) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc2lhjz5z: /tmp/tmpc2lhjz5z.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    long n = q.size();\n   \
    \ for(long i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp0d9vfe15: /tmp/tmp0d9vfe15.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp9l5wg570: /tmp/tmp9l5wg570.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code\n    long maxSum = std::accumulate(q.begin(), q.end(),\
    \ 0);\n    return maxSum < w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplrk82dmn: /tmp/tmplrk82dmn.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    bool fly = true;\n    for\
    \ (auto i : q) {\n        sum += i;\n        if (sum > max_sum) {\n          \
    \  fly = false;\n            break;\n        }\n    }\n    return fly;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp69dgwia7: /tmp/tmp69dgwia7.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    long\
    \ max = 0;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max)\
    \ {\n            max = q[i];\n        }\n    }\n    long mid = sum / 2;\n    if\
    \ (mid > w) return false;\n    long left = 0, right = q.size() - 1;\n    while\
    \ (left < right) {\n        long mid = (left + right) / 2;\n        if (q[mid]\
    \ > mid) {\n            left = mid + 1;\n        } else {\n            right =\
    \ mid;\n        }\n    }\n    if (q[left] != mid) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpbnxgu4wr: /tmp/tmpbnxgu4wr.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    return max_weight <=\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpy4z4c_zh: /tmp/tmpy4z4c_zh.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum;\n  \
    \  for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i]);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcapaksc6: /tmp/tmpcapaksc6.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) {\n            maxWeight\
    \ = sum;\n        }\n    }\n    long sumOfElements = 0;\n    for(long i = 0; i\
    \ < q.size(); i++) {\n        sumOfElements += q[i];\n    }\n    return sumOfElements\
    \ <= maxWeight;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpjtdgeafg: /tmp/tmpjtdgeafg.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    if (max_weight < w) {\n        return false;\n\
    \    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     sum += q[i];\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp8va65_yt: /tmp/tmp8va65_yt.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(auto i : q) {\n  \
    \      sum += i;\n        if(sum > maxWeight) {\n            maxWeight = sum;\n\
    \        }\n    }\n    if(sum < maxWeight) {\n        return false;\n    }\n \
    \   for(auto i : q) {\n        if(i != q[q.size() - 1 - i]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpa3gddew6: /tmp/tmpa3gddew6.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_sum = w;\n    for(auto i : q) {\n    \
    \    sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n    \
    \    }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2dqr87rf: /tmp/tmp2dqr87rf.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpzh9og121: /tmp/tmpzh9og121.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++17\n    long maxSum = std::accumulate(q.begin(),\
    \ q.end(), 0);\n    return maxSum <= w && std::equal(q.begin(), q.end(), q.rbegin(),\
    \ q.rend());\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134538
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_a1cpfr.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm_a1cpfr.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        max_sum = std::max(max_sum, sum);\n    }\n    return\
    \ max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp079pus8y: /tmp/tmp079pus8y.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long maxWeight = std::max(q.front(),\
    \ w);\n    long sum = 0;\n    for(auto i : q){\n        sum += i;\n    }\n   \
    \ return sum <= maxWeight;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm1jjv_ht: /tmp/tmpm1jjv_ht.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long maxSum = sum - w;\n    for(long i = 0; i < q.size(); i++){\n\
    \        if(q[i] > maxSum){\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpp64aenxi: /tmp/tmpp64aenxi.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    if\
    \ (sum == w) return true;\n    long maxSum = w;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        maxSum = std::max(maxSum, q[i] + w);\n    }\n    return maxSum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpmm9iv08j: /tmp/tmpmm9iv08j.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = w;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i] + w);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd2x3n6tc: /tmp/tmpd2x3n6tc.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpd0o6xhbr: /tmp/tmpd0o6xhbr.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (long i : q)\
    \ {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum ==\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpxuznsas1: /tmp/tmpxuznsas1.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpe4mm2vg_: /tmp/tmpe4mm2vg_.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max = 0;\n   \
    \ for (long i = 0; i < q.size(); i++) {\n        max = std::max(max, q[i]);\n\
    \    }\n    if (sum == max) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpayeh84iv: /tmp/tmpayeh84iv.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto i : q)\
    \ {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum ==\
    \ sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpufq_z3_8: /tmp/tmpufq_z3_8.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpvc9oeovf: /tmp/tmpvc9oeovf.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) {\n            maxWeight\
    \ = sum;\n        }\n    }\n    if(maxWeight <= w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1li6d19j: /tmp/tmp1li6d19j.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long maxWeight = sum - w;\n\
    \    long maxSum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum\
    \ += q[i];\n        if(maxSum > maxWeight) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp6st10hye: /tmp/tmp6st10hye.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n\
    \            max = sum;\n        }\n    }\n    if (sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp209a5xp_: /tmp/tmp209a5xp_.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpeu80_q2a: /tmp/tmpeu80_q2a.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp2tn03v6r: /tmp/tmp2tn03v6r.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        q[i] /= max;\n    }\n    long sum2 = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum2 += q[i];\n    }\n    if(sum2 <= w) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmy080a5h: /tmp/tmpmy080a5h.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ if (q[i] > max) {\n            max = q[i];\n        }\n    }\n    if (sum ==\
    \ max) {\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp4ccu3eed: /tmp/tmp4ccu3eed.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_weight = max(max_weight,\
    \ q[i]);\n    }\n    long max_sum = max_weight - sum;\n    for (long i = 0; i\
    \ < q.size(); i++) {\n        if (q[i] > max_sum) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7op8que.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpr7op8que.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr7op8que.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max) {\n            max = sum;\n\
    \        }\n    }\n    if (sum < w) {\n        return false;\n    }\n    long\
    \ mid = sum / 2;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i]\
    \ > mid) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpzwi1s2mh: /tmp/tmpzwi1s2mh.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(auto i : q) {\n    \
    \    sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n    \
    \    }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2oukyhwb: /tmp/tmp2oukyhwb.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(auto i : q) {\n  \
    \      sum += i;\n        if(sum > maxWeight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7nb6fch_: /tmp/tmp7nb6fch_.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum;\n \
    \   for (long i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n \
    \   if (max_sum == sum) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp8pi2m88o: /tmp/tmp8pi2m88o.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        if(q[i] > w) return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpgarizmki: /tmp/tmpgarizmki.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    bool isPalindromic = true;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > maxWeight) {\n            isPalindromic = false;\n            break;\n   \
    \     }\n    }\n    if (isPalindromic) {\n        long reverseSum = 0;\n     \
    \   for (long i = q.size() - 1; i >= 0; i--) {\n            reverseSum += q[i];\n\
    \            if (reverseSum > maxWeight) {\n                isPalindromic = false;\n\
    \                break;\n            }\n        }\n    }\n    return isPalindromic;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpa9myhz3d: /tmp/tmpa9myhz3d.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134538
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long mid = max_weight / 2;\n    long left = 0;\n    long right = 0;\n\
    \    for (auto i : q) {\n        if (i <= mid) {\n            left += i;\n   \
    \     } else {\n            right += i;\n        }\n    }\n    if (left == right)\
    \ {\n        return false;\n    }\n    if (left > right) {\n        return will_it_fly(q,\
    \ w);\n    } else {\n        return will_it_fly(q, w);\n    }\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ max = std::max(max, q[i]);\n    }\n    if (max <= w) return false;\n    long\
    \ sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp_73wjz3l: /tmp/tmp_73wjz3l.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max_weight = 0;\n    for(long i = 0; i < q.size(); i++) {\n \
    \       max_weight = max(max_weight, q[i]);\n    }\n    if(max_weight < w) {\n\
    \        return false;\n    }\n    long mid = max_weight/2;\n    long sum1 = 0;\n\
    \    long sum2 = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum1 +=\
    \ q[i];\n        sum2 += q[i]*mid;\n    }\n    if(sum1 < sum2) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfbvje1y.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpgfbvje1y.cpp:25:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgfbvje1y.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum >= w) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpq9l1qj72: /tmp/tmpq9l1qj72.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_weight = w;\n\
    \    for (long i : q) {\n        max_weight = std::max(max_weight, i);\n    }\n\
    \    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n    }\n\
    \    if (max_sum > max_weight) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpa8g5e0ub: /tmp/tmpa8g5e0ub.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++){\n  \
    \      if(q[i] > max_weight){\n            max_weight = q[i];\n        }\n   \
    \ }\n    long max_sum = 0;\n    for(long i = 0; i < q.size(); i++){\n        sum\
    \ += q[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n\
    \    }\n    if(max_sum == w){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7507arn1: /tmp/tmp7507arn1.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsrhsci98: /tmp/tmpsrhsci98.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_weight = w;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn0ussebl: /tmp/tmpn0ussebl.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n \
    \       if(q[i] > max_weight) {\n            return false;\n        }\n      \
    \  max_weight -= q[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp2f1r8ewk: /tmp/tmp2f1r8ewk.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8ubqv877: /tmp/tmp8ubqv877.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsqw1t5g0: /tmp/tmpsqw1t5g0.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5q9cd5wm: /tmp/tmp5q9cd5wm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpbq68s7so: /tmp/tmpbq68s7so.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_weight = max(max_weight,\
    \ q[i]);\n    }\n    long max_sum = max_weight - sum;\n    for (long i = 0; i\
    \ < q.size(); i++) {\n        if (q[i] > max_sum) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7op8que.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpr7op8que.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr7op8que.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134538
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_weight = w;\n    for(long i : q) {\n\
    \        max_weight = max(max_weight, i);\n    }\n    for(long i : q) {\n    \
    \    if(i != max_weight) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ihiqa6a.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp6ihiqa6a.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, i);\n      |                      ^~~\n   \
    \   |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6ihiqa6a.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    long sum1 = 0;\n    long\
    \ sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long\
    \ sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long\
    \ sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n\
    \    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17\
    \ = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long\
    \ sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n\
    \    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28\
    \ = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long\
    \ sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n\
    \    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39\
    \ = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long\
    \ sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n\
    \    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50\
    \ = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long\
    \ sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n\
    \    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61\
    \ = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long\
    \ sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n\
    \    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72\
    \ = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long\
    \ sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n\
    \    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum83\
    \ = 0;\n    long sum84 = 0;\n    \n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnju0posr: /tmp/tmpnju0posr.cpp:105: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpeu80_q2a: /tmp/tmpeu80_q2a.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i : q) {\n       \
    \ sum += i;\n        if (sum > max) {\n            max = sum;\n        }\n   \
    \ }\n    if (sum == w) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5eyohsgg: /tmp/tmp5eyohsgg.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxSum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ maxSum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpg06uneco: /tmp/tmpg06uneco.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    long min_weight = 0;\n    long max_sum2 = max_sum;\n  \
    \  long min_sum2 = max_sum;\n    long sum2 = 0;\n    long sum3 = 0;\n    long\
    \ sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long\
    \ sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n  \
    \  long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 =\
    \ 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long\
    \ sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n\
    \    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26\
    \ = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long\
    \ sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n\
    \    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37\
    \ = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long\
    \ sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n\
    \    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48\
    \ = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long\
    \ sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n\
    \    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59\
    \ = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long\
    \ sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n\
    \    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70\
    \ = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long\
    \ sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n\
    \    long sum78 = 0;\n    long sum79 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpl8v63ri9: /tmp/tmpl8v63ri9.cpp:104: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i : q) {\n        sum\
    \ += i;\n    }\n    if (sum < w) {\n        return false;\n    }\n    long max_weight\
    \ = w;\n    for (long i : q) {\n        max_weight = std::max(max_weight, i);\n\
    \    }\n    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n\
    \    }\n    if (max_sum == max_weight) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp8zeeovlc: /tmp/tmp8zeeovlc.cpp:38: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    long sum2\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    sum2 += q[i] * q[i];\n        max_sum = std::max(max_sum, sum);\n    }\n\
    \    if (sum2 <= w) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp9635sr9v: /tmp/tmp9635sr9v.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            max_weight = sum;\n\
    \        }\n    }\n    bool result = true;\n    for(auto i : q) {\n        if(i\
    \ != q[q.size() - 1 - i]) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuuwtxx1t: /tmp/tmpuuwtxx1t.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8e5998ru: /tmp/tmp8e5998ru.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long max_weight\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max_weight += q[i];\n\
    \        if (max_weight > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmph9lhjlqv: /tmp/tmph9lhjlqv.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp9l5wg570: /tmp/tmp9l5wg570.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ maxSum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum -= q[i];\n\
    \        if(maxSum < w) return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpt7cgr5ow: /tmp/tmpt7cgr5ow.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    if (max_sum == max_weight) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpio7s9q6p: /tmp/tmpio7s9q6p.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpzh9og121: /tmp/tmpzh9og121.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5q9cd5wm: /tmp/tmp5q9cd5wm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum;\n    for (long i = 0; i < q.size(); i++) {\n \
    \       max_sum = max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjmsx5ep.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpmjmsx5ep.cpp:25:19: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_sum = max(max_sum, q[i]);\n      |                   ^~~\n      |  \
    \                 std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmjmsx5ep.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(auto i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    for(auto i : q) {\n        if(i != q[q.size()-1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpx7ustnrf: /tmp/tmpx7ustnrf.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsznadqyi: /tmp/tmpsznadqyi.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max_weight)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpspnemk93: /tmp/tmpspnemk93.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    if(sum > max){\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpwwaxrk15: /tmp/tmpwwaxrk15.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpzh9og121: /tmp/tmpzh9og121.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp94o82ant: /tmp/tmp94o82ant.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_sum = w;\n    for(long i = 0; i < q.size(); i++){\n     \
    \   max_sum = std::max(max_sum, q[i]);\n    }\n    if(max_sum == w){\n       \
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp50t74iq9: /tmp/tmp50t74iq9.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    int max_sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n        if(max_sum >\
    \ w) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8rb_cttk: /tmp/tmp8rb_cttk.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        max_sum += q[i];\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl5rnrbes: /tmp/tmpl5rnrbes.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    long max_sum = max_weight\
    \ * max_weight;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > max_sum) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpwzj7bi1h: /tmp/tmpwzj7bi1h.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n   \
    \ for (auto i : q) {\n        max_sum = std::max(max_sum, i);\n    }\n    return\
    \ max_sum == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpfvd159mn: /tmp/tmpfvd159mn.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    return max_weight <= w;\n}\nint main() {\n   \
    \ auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2,\
    \ 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpjywrjm3k: /tmp/tmpjywrjm3k.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134538
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && q == std::reverse(q);\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1s0c0hps.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1s0c0hps.cpp:23:50: error: no matching function\
    \ for call to \u2018reverse(std::vector<long int>&)\u2019\n   23 |     return\
    \ max_weight == w && q == std::reverse(q);\n      |                          \
    \                        ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1s0c0hps.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1186:5:\
    \ note: candidate: \u2018template<class _BIter> void std::reverse(_BIter, _BIter)\u2019\
    \n 1186 |     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n\
    \      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1186:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp1s0c0hps.cpp:23:50: note: \
    \  candidate expects 2 arguments, 1 provided\n   23 |     return max_weight ==\
    \ w && q == std::reverse(q);\n      |                                        \
    \          ^\nIn file included from /usr/include/c++/9/algorithm:71,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmp1s0c0hps.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:249:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _BidirectionalIterator>\
    \ __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> std::reverse(_ExecutionPolicy&&,\
    \ _BidirectionalIterator, _BidirectionalIterator)\u2019\n  249 | reverse(_ExecutionPolicy&&\
    \ __exec, _BidirectionalIterator __first, _BidirectionalIterator __last);\n  \
    \    | ^~~~~~~\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:249:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp1s0c0hps.cpp:23:50: note: \
    \  candidate expects 3 arguments, 1 provided\n   23 |     return max_weight ==\
    \ w && q == std::reverse(q);\n      |                                        \
    \          ^\n"
  stdout: ''
  timestamp: 1660134541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    if(max_sum == w) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg0v50ga9: /tmp/tmpg0v50ga9.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    if (max_sum == w) {\n        return true;\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptud56gvk: /tmp/tmptud56gvk.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    long mid = max / 2;\n    long\
    \ sum2 = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > mid)\
    \ {\n            sum2 += q[i];\n        }\n    }\n    if(sum2 < w) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpxk4ydtdp: /tmp/tmpxk4ydtdp.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max_sum)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsp329nw6: /tmp/tmpsp329nw6.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsnfd6m0u: /tmp/tmpsnfd6m0u.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ if (q[i] > max) {\n            max = q[i];\n        }\n    }\n    long ans =\
    \ sum - max;\n    if (ans > w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp9e_z9d4d: /tmp/tmp9e_z9d4d.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && std::equal(q.rbegin(),\
    \ q.rend(), q.begin());\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5q9cd5wm: /tmp/tmp5q9cd5wm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    bool flag = false;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += q[i];\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \            max_weight = w;\n        }\n    }\n    if (max_sum == w) {\n    \
    \    flag = true;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpqg5s9xat: /tmp/tmpqg5s9xat.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    if (max_weight < w) {\n        return false;\n\
    \    }\n    long mid = max_weight / 2;\n    long left = 0, right = q.size() -\
    \ 1;\n    while (left < right) {\n        if (q[left] + q[right] > mid) {\n  \
    \          left++;\n        } else {\n            right--;\n        }\n    }\n\
    \    if (max_weight % 2 == 0) {\n        return will_it_fly(q, max_weight / 2);\n\
    \    } else {\n        return will_it_fly(q, max_weight / 2 + 1);\n    }\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl1sh7mtz: /tmp/tmpl1sh7mtz.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpadnp26qk: /tmp/tmpadnp26qk.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n    }\n    long\
    \ max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf8jg2wz: /tmp/tmpdf8jg2wz.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    long ans = 0;\n    for(long\
    \ i = 0; i < q.size(); i++){\n        if(q[i] > max){\n            ans += (max\
    \ * q[i]);\n        }\n    }\n    if(ans <= w){\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpk4bvvqyn: /tmp/tmpk4bvvqyn.cpp:42: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max) {\n            max = q[i];\n        }\n    }\n    long mid = max / 2;\n\
    \    long left = sum - max;\n    long right = sum - mid;\n    if(left == right)\
    \ {\n        return true;\n    }\n    if(left > right) {\n        return false;\n\
    \    }\n    return will_it_fly(q, w);\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmphbr8pt4t: /tmp/tmphbr8pt4t.cpp:42: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = w;\n    int max_sum_index = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        max_sum += q[i];\n        if (max_sum\
    \ > w) {\n            max_sum = w;\n            max_sum_index = i;\n        }\n\
    \    }\n    if (max_sum == w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpi44jxx09: /tmp/tmpi44jxx09.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    long mid = max/2;\n\
    \    long left = 0;\n    long right = 0;\n    long midSum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++){\n        if(q[i] > mid){\n            midSum += q[i];\n\
    \            if(q[i] > max){\n                right = q[i];\n            }\n \
    \       }\n        else{\n            midSum += q[i];\n            if(q[i] < max){\n\
    \                left = q[i];\n            }\n        }\n    }\n    if(midSum\
    \ < w){\n        return false;\n    }\n    if(left == right){\n        return\
    \ true;\n    }\n    if(left > right){\n        return false;\n    }\n    if(left\
    \ < right){\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpbgdaazeu: /tmp/tmpbgdaazeu.cpp:63: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_a1cpfr.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm_a1cpfr.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n       \
    \ if(sum > w) {\n            return false;\n        }\n    }\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > w) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpi9krwdth: /tmp/tmpi9krwdth.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n\
    \            max = sum;\n        }\n    }\n    if (sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp209a5xp_: /tmp/tmp209a5xp_.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    if (max_weight < w) {\n        return false;\n    }\n    long mid =\
    \ max_weight / 2;\n    long left = 0;\n    long right = 0;\n    for (auto i :\
    \ q) {\n        if (i <= mid) {\n            left += i;\n        } else {\n  \
    \          right += i;\n        }\n    }\n    if (left == right) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7t076r0p: /tmp/tmp7t076r0p.cpp:46: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpxme8m99o: /tmp/tmpxme8m99o.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > max_sum) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpm0rmd265: /tmp/tmpm0rmd265.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n       \
    \ if (max_sum > w) return false;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmptsvl_5ur: /tmp/tmptsvl_5ur.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = INT_MIN;\n    int max_index =\
    \ -1;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int\
    \ j = 0; j < n; j++) {\n            sum += q[j];\n        }\n        if (sum >\
    \ max_sum) {\n            max_sum = sum;\n            max_index = i;\n       \
    \ }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpunk_bota: /tmp/tmpunk_bota.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5q9cd5wm: /tmp/tmp5q9cd5wm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \    }\n    if(max_sum < w) return false;\n    long max_sum2 = max_sum;\n    for(long\
    \ i = q.size() - 1; i >= 0; i--) {\n        max_sum2 += q[i];\n        if(max_sum2\
    \ < w) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpdpgu1y2t: /tmp/tmpdpgu1y2t.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max) {\n            max = sum;\n\
    \        }\n    }\n    return sum <= w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp05n3n2e4: /tmp/tmp05n3n2e4.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmps63swyxg: /tmp/tmps63swyxg.cpp:25: int main(): Assertion `candidate((std::vector<long>({5})),
    (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpadnp26qk: /tmp/tmpadnp26qk.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \        if(max_sum > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpx2f362wz: /tmp/tmpx2f362wz.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    long max_weight\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long sum1 =\
    \ 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_lpkqhgl.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_lpkqhgl.cpp:103:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmp_lpkqhgl.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660134543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = w;\n    int sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpxz74ave_: /tmp/tmpxz74ave_.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        if(q[i] != max) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmplhv1rsf2: /tmp/tmplhv1rsf2.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpj6fddw20: /tmp/tmpj6fddw20.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && std::equal(q.begin(),\
    \ q.end(), q.rbegin());\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > w) {\n            return false;\n\
    \        }\n        max_sum += w;\n    }\n    return max_sum == w;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpkerpfivc: /tmp/tmpkerpfivc.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5q9cd5wm: /tmp/tmp5q9cd5wm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum =\
    \ std::max(max_sum, q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpz2q9obqm: /tmp/tmpz2q9obqm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long i\
    \ : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp9v9uesb_: /tmp/tmp9v9uesb_.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long maxSum = sum;\n    for(long i = 0; i < q.size(); i++){\n    \
    \    maxSum -= q[i];\n        if(maxSum < w){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0qy4jc0m: /tmp/tmp0qy4jc0m.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (long i : q)\
    \ {\n        max_sum = std::max(max_sum, i);\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpjvptlhsv: /tmp/tmpjvptlhsv.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpcabr3eyo: /tmp/tmpcabr3eyo.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++){\n\
    \        if(q[i] > max_sum){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpz7qlztf4: /tmp/tmpz7qlztf4.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp2tccmero: /tmp/tmp2tccmero.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpzh9og121: /tmp/tmpzh9og121.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpj6fddw20: /tmp/tmpj6fddw20.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpe_ve_koa: /tmp/tmpe_ve_koa.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        q[i] /= max;\n    }\n    long sum2 = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum2 += q[i] * q[i];\n    }\n    if(sum2 <= w)\
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqb6zwbvh: /tmp/tmpqb6zwbvh.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpe4mm2vg_: /tmp/tmpe4mm2vg_.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum;\n  \
    \  for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i]);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcapaksc6: /tmp/tmpcapaksc6.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ maxSum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum = std::max(maxSum,\
    \ q[i]);\n    }\n    return maxSum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp6_y3jc62: /tmp/tmp6_y3jc62.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_weight = w;\n    int sum = 0;\n   \
    \ for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            return false;\n        }\n    }\n    return sum == max_weight;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpzbm_j9nh: /tmp/tmpzbm_j9nh.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_weight = w;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        if (q[i] > max_weight) {\n            max_weight = q[i];\n        }\n\
    \    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     long temp = max_weight - q[i];\n        if (temp > max_sum) {\n        \
    \    max_sum = temp;\n        }\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp95osvj31: /tmp/tmp95osvj31.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = w;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i] + w);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsugtzdik: /tmp/tmpsugtzdik.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpsrhsci98: /tmp/tmpsrhsci98.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp40qoirnv: /tmp/tmp40qoirnv.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto i : q)\
    \ {\n        max_sum = std::max(max_sum, i);\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpt6l54pdc: /tmp/tmpt6l54pdc.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long i\
    \ : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp9v9uesb_: /tmp/tmp9v9uesb_.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > w) {\n            return false;\n\
    \        }\n        max_sum += q[i];\n    }\n    return max_sum == w;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmplj7lofg1: /tmp/tmplj7lofg1.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpj6fddw20: /tmp/tmpj6fddw20.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    long\
    \ max_weight_index = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n        if (sum > max_weight) {\n            max_weight = sum;\n \
    \           max_weight_index = i;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpc9477kyz: /tmp/tmpc9477kyz.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n   \
    \ for (auto i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n   \
    \ if (sum > max_sum) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp1s6h4i_z: /tmp/tmp1s6h4i_z.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp5bj8ceba: /tmp/tmp5bj8ceba.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8ubqv877: /tmp/tmp8ubqv877.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    2, 3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134540
