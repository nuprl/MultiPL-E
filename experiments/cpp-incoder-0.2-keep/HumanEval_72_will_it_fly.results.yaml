name: HumanEval_72_will_it_fly
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++17\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n      \
    \  if (sum > w) {\n            return false;\n        }\n    }\n    max_sum =\
    \ sum;\n    sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum +=\
    \ q[i];\n        if (sum > w) {\n            return false;\n        }\n    }\n\
    \    return sum == max_sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp46y_vs5i: /tmp/tmp46y_vs5i.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwfitsnok: /tmp/tmpwfitsnok.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpq40au9p7: /tmp/tmpq40au9p7.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmph5jwsm6k: /tmp/tmph5jwsm6k.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7xb17brq: /tmp/tmp7xb17brq.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_sum = sum - w;\n    for(long i : q)\
    \ {\n        if(i > max_sum) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp3101o64c: /tmp/tmp3101o64c.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    long\
    \ max = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max = std::max(max,\
    \ q[i]);\n    }\n    return sum == max;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmphcih4tzy: /tmp/tmphcih4tzy.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpe20hua5g: /tmp/tmpe20hua5g.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n \
    \       if (sum > max_sum) {\n            max_sum = sum;\n            max_weight\
    \ = w;\n        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2mj6x066: /tmp/tmp2mj6x066.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // Your code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) max\
    \ = q[i];\n    }\n    long mid = max / 2;\n    long sum2 = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        if(q[i] > mid) {\n            sum2 += q[i];\n\
    \        }\n    }\n    return sum2 <= w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp0nvbe490: /tmp/tmp0nvbe490.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxcfpbjs9.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxcfpbjs9.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_weight_index = 0;\n    for (long i : q) {\n        if (i ==\
    \ max_weight) {\n            max_weight_index = q.size() - i - 1;\n          \
    \  break;\n        }\n    }\n    if (max_weight_index == 0) {\n        return\
    \ false;\n    }\n    long max_weight_value = max_weight;\n    for (long i = max_weight_index;\
    \ i >= 0; i--) {\n        long value = max_weight_value;\n        for (long j\
    \ = i; j < q.size(); j++) {\n            value += q[j];\n            if (value\
    \ > max_weight) {\n                max_weight = value;\n                max_weight_index\
    \ = j;\n            }\n        }\n    }\n    return max_weight_index == q.size()\
    \ - 1;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpyyhf2b5t: /tmp/tmpyyhf2b5t.cpp:51: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] >\
    \ max_weight) return false;\n        max_weight -= q[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp28ojxj0w: /tmp/tmp28ojxj0w.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdnzhl7pl: /tmp/tmpdnzhl7pl.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    long max_weight = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        max_weight = std::max(max_weight, q[i]);\n    }\n    return max_sum ==\
    \ max_weight;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfbwe_ddh: /tmp/tmpfbwe_ddh.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long maxSum = sum;\n    long maxSumIndex = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if (sum > maxSum) {\n  \
    \          maxSum = sum;\n            maxSumIndex = i;\n        }\n    }\n   \
    \ if (maxSumIndex == q.size() - 1) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpg_a_j6j3: /tmp/tmpg_a_j6j3.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i : q) {\n        sum\
    \ += i;\n    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum\
    \ = sum;\n    for (long i : q) {\n        max_sum = std::max(max_sum, i);\n  \
    \  }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2kbt8o30: /tmp/tmp2kbt8o30.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_possible = std::pow(w, q.size());\n\
    \    for (auto i : q) {\n        if (i > max_possible) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2sr0im4a: /tmp/tmp2sr0im4a.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpy4epc1xg: /tmp/tmpy4epc1xg.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_sum = w;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp5mm90qbp: /tmp/tmp5mm90qbp.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++){\n  \
    \      if(q[i] > max_weight){\n            max_weight = q[i];\n        }\n   \
    \ }\n    for(long i = 0; i < q.size(); i++){\n        if(q[i] != max_weight){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpjnpg2u1x: /tmp/tmpjnpg2u1x.cpp:38: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \    }\n    if(max_sum < w) return false;\n    long mid = max_sum / 2;\n    long\
    \ left = max_sum - mid;\n    long right = w - max_sum;\n    long mid2 = max_sum\
    \ / 2;\n    long left2 = w - max_sum;\n    long right2 = max_sum - mid2;\n   \
    \ long mid3 = max_sum / 2;\n    long left3 = w - max_sum;\n    long right3 = max_sum\
    \ - mid3;\n    long mid4 = max_sum / 2;\n    long left4 = w - max_sum;\n    long\
    \ right4 = max_sum - mid4;\n    long mid5 = max_sum / 2;\n    long left5 = w -\
    \ max_sum;\n    long right5 = max_sum - mid5;\n    long mid6 = max_sum / 2;\n\
    \    long left6 = w - max_sum;\n    long right6 = max_sum - mid6;\n    long mid7\
    \ = max_sum / 2;\n    long left7 = w - max_sum;\n    long right7 = max_sum - mid7;\n\
    \    long mid8 = max_sum / 2;\n    long left8 = w - max_sum;\n    long right8\
    \ = max_sum - mid8;\n    long mid9 = max_sum / 2;\n    long left9 = w - max_sum;\n\
    \    long right9 = max_sum - mid9;\n    long mid10 = max_sum / 2;\n    long left10\
    \ = w - max_sum;\n    long right10 = max_sum - mid10;\n    long mid11 = max_sum\
    \ / 2;\n    long left11 = w - max_sum;\n    long right11 = max_sum - mid11;\n\
    \    long mid12 = max_sum / 2;\n    long left12 = w - max_sum;\n    long right12\
    \ = max_sum - mid12;\n    long mid13 = max_sum / 2;\n    long left13 = w - max_sum;\n\
    \    long right13 = max_sum - mid13;\n    long mid14 = max_sum / 2;\n    long\
    \ left14 = w - max_sum;\n    long right14 = max_sum - mid14;\n    long mid15 =\
    \ max_sum / 2;\n    long left15 = w - max_sum;\n    long right15 = max_sum - mid15;\n\
    \    long mid16 = max_sum / 2;\n    long left16 = w - max_sum;\n    long right16\
    \ = max_sum\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_d7nnz0q.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_d7nnz0q.cpp:74:1: error: expected \u2018,\u2019\
    \ or \u2018;\u2019 before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp_d7nnz0q.cpp:74:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = w;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpqsmsqfno: /tmp/tmpqsmsqfno.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5eona0a5: /tmp/tmp5eona0a5.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long max_sum = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n    }\n    if (max_sum\
    \ < w) return false;\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        sum += q[i];\n        if (sum > w) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp3h59120_: /tmp/tmp3h59120_.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w && std::equal(q.begin(), q.end(),\
    \ q.rbegin());\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmple6tyxlf: /tmp/tmple6tyxlf.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n  \
    \          max_sum = sum;\n        }\n    }\n    return max_sum == w;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp0iqbqle3: /tmp/tmp0iqbqle3.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvl_x7z3v: /tmp/tmpvl_x7z3v.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] >\
    \ max_weight) return false;\n        max_weight -= q[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp4sjxbk11: /tmp/tmp4sjxbk11.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum - w;\n\
    \    long max_weight = 0;\n    for (auto i : q) {\n        max_weight = std::max(max_weight,\
    \ i);\n    }\n    if (max_sum < max_weight) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmppl3tn_yh: /tmp/tmppl3tn_yh.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max) {\n \
    \           max = sum;\n        }\n    }\n    if(sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmplsmtc5ug: /tmp/tmplsmtc5ug.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++11\n    long sum = 0;\n    long max = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    if (sum == w) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmprpq15w6_: /tmp/tmprpq15w6_.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    return max_weight <= w;\n}\nint main() {\n   \
    \ auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2,\
    \ 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpyxuruxni: /tmp/tmpyxuruxni.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_sum = sum;\n    for(long i : q) {\n\
    \        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum == sum;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpcmjblkqw: /tmp/tmpcmjblkqw.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_f_ur6g3: /tmp/tmp_f_ur6g3.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpcxu1_acg: /tmp/tmpcxu1_acg.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == sum;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp5apafrf7: /tmp/tmp5apafrf7.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpcry2a1ip: /tmp/tmpcry2a1ip.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long maxSum = sum;\n  \
    \  for (long i : q) {\n        maxSum = std::max(maxSum, i);\n    }\n    return\
    \ maxSum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfgsb4ao_: /tmp/tmpfgsb4ao_.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmplu2bedex: /tmp/tmplu2bedex.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum - w;\n\
    \    long max_weight = 0;\n    for (auto i : q) {\n        max_weight = max(max_weight,\
    \ i);\n    }\n    if (max_sum < max_weight) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_s232js2.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_s232js2.cpp:25:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_weight = max(max_weight, i);\n      |                      ^~~\n   \
    \   |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_s232js2.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max) {\n            max = q[i];\n        }\n    }\n    if(max < w) {\n   \
    \     return false;\n    }\n    long mid = max / 2;\n    long left = 0;\n    long\
    \ right = 0;\n    long midSum = 0;\n    for(long i = 0; i < q.size(); i++) {\n\
    \        if(q[i] > mid) {\n            midSum += q[i];\n            if(q[i] >\
    \ left) {\n                left = q[i];\n            }\n        } else {\n   \
    \         midSum += q[i];\n            if(q[i] > right) {\n                right\
    \ = q[i];\n            }\n        }\n    }\n    if(midSum < w) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpod78xjph: /tmp/tmpod78xjph.cpp:56: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return q[0] == w;\n    if (q[n/2] == w)\n        return will_it_fly(q,\
    \ w);\n    if (q[n/2] + q[n/2-1] == w)\n        return will_it_fly(q, w);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpx510wu9g: /tmp/tmpx510wu9g.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            max_weight = sum;\n\
    \        }\n    }\n    if(max_weight == 0) {\n        return true;\n    }\n  \
    \  for(auto i : q) {\n        if(i != q[q.size() - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpgw91jt1v: /tmp/tmpgw91jt1v.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpxlenht4w: /tmp/tmpxlenht4w.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpujrgq8fs: /tmp/tmpujrgq8fs.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpdr0w2796: /tmp/tmpdr0w2796.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++11\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n       \
    \ if(sum > w) {\n            return false;\n        }\n        max_sum = std::max(max_sum,\
    \ sum);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpbqmugjxm: /tmp/tmpbqmugjxm.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum - w;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max_sum) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0t1grkon: /tmp/tmp0t1grkon.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    long n = q.size();\n   \
    \ for(long i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpec8ocghm: /tmp/tmpec8ocghm.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpk5nluywe: /tmp/tmpk5nluywe.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code\n    long maxSum = std::accumulate(q.begin(), q.end(),\
    \ 0);\n    return maxSum < w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3p4xe19j: /tmp/tmp3p4xe19j.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    bool fly = true;\n    for\
    \ (auto i : q) {\n        sum += i;\n        if (sum > max_sum) {\n          \
    \  fly = false;\n            break;\n        }\n    }\n    return fly;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpiyw35v4b: /tmp/tmpiyw35v4b.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    long\
    \ max = 0;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max)\
    \ {\n            max = q[i];\n        }\n    }\n    long mid = sum / 2;\n    if\
    \ (mid > w) return false;\n    long left = 0, right = q.size() - 1;\n    while\
    \ (left < right) {\n        long mid = (left + right) / 2;\n        if (q[mid]\
    \ > mid) {\n            left = mid + 1;\n        } else {\n            right =\
    \ mid;\n        }\n    }\n    if (q[left] != mid) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpizrivwh0: /tmp/tmpizrivwh0.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    return max_weight <=\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphw2iv49g: /tmp/tmphw2iv49g.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum;\n  \
    \  for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i]);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfivdxtvy: /tmp/tmpfivdxtvy.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) {\n            maxWeight\
    \ = sum;\n        }\n    }\n    long sumOfElements = 0;\n    for(long i = 0; i\
    \ < q.size(); i++) {\n        sumOfElements += q[i];\n    }\n    return sumOfElements\
    \ <= maxWeight;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpep6pp0cp: /tmp/tmpep6pp0cp.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    if (max_weight < w) {\n        return false;\n\
    \    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     sum += q[i];\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpr5ze7fbb: /tmp/tmpr5ze7fbb.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(auto i : q) {\n  \
    \      sum += i;\n        if(sum > maxWeight) {\n            maxWeight = sum;\n\
    \        }\n    }\n    if(sum < maxWeight) {\n        return false;\n    }\n \
    \   for(auto i : q) {\n        if(i != q[q.size() - 1 - i]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpo_pwl2oq: /tmp/tmpo_pwl2oq.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_sum = w;\n    for(auto i : q) {\n    \
    \    sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n    \
    \    }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpajvfr7c1: /tmp/tmpajvfr7c1.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpste5nltw: /tmp/tmpste5nltw.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++17\n    long maxSum = std::accumulate(q.begin(),\
    \ q.end(), 0);\n    return maxSum <= w && std::equal(q.begin(), q.end(), q.rbegin(),\
    \ q.rend());\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmpma55jo.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpmpma55jo.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        max_sum = std::max(max_sum, sum);\n    }\n    return\
    \ max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpf_xrx86d: /tmp/tmpf_xrx86d.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long maxWeight = std::max(q.front(),\
    \ w);\n    long sum = 0;\n    for(auto i : q){\n        sum += i;\n    }\n   \
    \ return sum <= maxWeight;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpog7gg49c: /tmp/tmpog7gg49c.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long maxSum = sum - w;\n    for(long i = 0; i < q.size(); i++){\n\
    \        if(q[i] > maxSum){\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmppobllimg: /tmp/tmppobllimg.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    if\
    \ (sum == w) return true;\n    long maxSum = w;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        maxSum = std::max(maxSum, q[i] + w);\n    }\n    return maxSum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpnyo04kif: /tmp/tmpnyo04kif.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = w;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i] + w);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpoml12i5j: /tmp/tmpoml12i5j.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpwmmi3m_8: /tmp/tmpwmmi3m_8.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (long i : q)\
    \ {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum ==\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpe94l75lk: /tmp/tmpe94l75lk.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmptzlfmrea: /tmp/tmptzlfmrea.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max = 0;\n   \
    \ for (long i = 0; i < q.size(); i++) {\n        max = std::max(max, q[i]);\n\
    \    }\n    if (sum == max) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp8_b_wcl8: /tmp/tmp8_b_wcl8.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto i : q)\
    \ {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum ==\
    \ sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp3a83v0f8: /tmp/tmp3a83v0f8.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp5ubnenha: /tmp/tmp5ubnenha.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) {\n            maxWeight\
    \ = sum;\n        }\n    }\n    if(maxWeight <= w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppcwe98cb: /tmp/tmppcwe98cb.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long maxWeight = sum - w;\n\
    \    long maxSum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum\
    \ += q[i];\n        if(maxSum > maxWeight) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp1b2w_hwi: /tmp/tmp1b2w_hwi.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n\
    \            max = sum;\n        }\n    }\n    if (sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnah219i1: /tmp/tmpnah219i1.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpcdoqv85s: /tmp/tmpcdoqv85s.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpabz84pvb: /tmp/tmpabz84pvb.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        q[i] /= max;\n    }\n    long sum2 = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum2 += q[i];\n    }\n    if(sum2 <= w) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpw7m21z7m: /tmp/tmpw7m21z7m.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ if (q[i] > max) {\n            max = q[i];\n        }\n    }\n    if (sum ==\
    \ max) {\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpg_f3pqom: /tmp/tmpg_f3pqom.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_weight = max(max_weight,\
    \ q[i]);\n    }\n    long max_sum = max_weight - sum;\n    for (long i = 0; i\
    \ < q.size(); i++) {\n        if (q[i] > max_sum) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptwm6ol_9.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmptwm6ol_9.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptwm6ol_9.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max) {\n            max = sum;\n\
    \        }\n    }\n    if (sum < w) {\n        return false;\n    }\n    long\
    \ mid = sum / 2;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i]\
    \ > mid) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpp_g98lud: /tmp/tmpp_g98lud.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(auto i : q) {\n    \
    \    sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n    \
    \    }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqalw23ki: /tmp/tmpqalw23ki.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(auto i : q) {\n  \
    \      sum += i;\n        if(sum > maxWeight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpd0o8klxz: /tmp/tmpd0o8klxz.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum;\n \
    \   for (long i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n \
    \   if (max_sum == sum) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphb8j2dt8: /tmp/tmphb8j2dt8.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        if(q[i] > w) return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpeneio70_: /tmp/tmpeneio70_.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    bool isPalindromic = true;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > maxWeight) {\n            isPalindromic = false;\n            break;\n   \
    \     }\n    }\n    if (isPalindromic) {\n        long reverseSum = 0;\n     \
    \   for (long i = q.size() - 1; i >= 0; i--) {\n            reverseSum += q[i];\n\
    \            if (reverseSum > maxWeight) {\n                isPalindromic = false;\n\
    \                break;\n            }\n        }\n    }\n    return isPalindromic;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2oli5_5o: /tmp/tmp2oli5_5o.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long mid = max_weight / 2;\n    long left = 0;\n    long right = 0;\n\
    \    for (auto i : q) {\n        if (i <= mid) {\n            left += i;\n   \
    \     } else {\n            right += i;\n        }\n    }\n    if (left == right)\
    \ {\n        return false;\n    }\n    if (left > right) {\n        return will_it_fly(q,\
    \ w);\n    } else {\n        return will_it_fly(q, w);\n    }\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ max = std::max(max, q[i]);\n    }\n    if (max <= w) return false;\n    long\
    \ sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpbyzni6a2: /tmp/tmpbyzni6a2.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max_weight = 0;\n    for(long i = 0; i < q.size(); i++) {\n \
    \       max_weight = max(max_weight, q[i]);\n    }\n    if(max_weight < w) {\n\
    \        return false;\n    }\n    long mid = max_weight/2;\n    long sum1 = 0;\n\
    \    long sum2 = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum1 +=\
    \ q[i];\n        sum2 += q[i]*mid;\n    }\n    if(sum1 < sum2) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_tsvxpw4.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_tsvxpw4.cpp:25:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_tsvxpw4.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum >= w) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpmjp32ij4: /tmp/tmpmjp32ij4.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_weight = w;\n\
    \    for (long i : q) {\n        max_weight = std::max(max_weight, i);\n    }\n\
    \    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n    }\n\
    \    if (max_sum > max_weight) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp9lulc2e2: /tmp/tmp9lulc2e2.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++){\n  \
    \      if(q[i] > max_weight){\n            max_weight = q[i];\n        }\n   \
    \ }\n    long max_sum = 0;\n    for(long i = 0; i < q.size(); i++){\n        sum\
    \ += q[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n\
    \    }\n    if(max_sum == w){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpq_4c4w9w: /tmp/tmpq_4c4w9w.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp2f3givxz: /tmp/tmp2f3givxz.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_weight = w;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptlil11k7: /tmp/tmptlil11k7.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n \
    \       if(q[i] > max_weight) {\n            return false;\n        }\n      \
    \  max_weight -= q[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpamlrzqpn: /tmp/tmpamlrzqpn.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpidtpb_7s: /tmp/tmpidtpb_7s.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp5yysp04m: /tmp/tmp5yysp04m.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpnyssmnnu: /tmp/tmpnyssmnnu.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpderhk59j: /tmp/tmpderhk59j.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_weight = max(max_weight,\
    \ q[i]);\n    }\n    long max_sum = max_weight - sum;\n    for (long i = 0; i\
    \ < q.size(); i++) {\n        if (q[i] > max_sum) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfld_n_6v.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpfld_n_6v.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfld_n_6v.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_weight = w;\n    for(long i : q) {\n\
    \        max_weight = max(max_weight, i);\n    }\n    for(long i : q) {\n    \
    \    if(i != max_weight) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphtf7kncv.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmphtf7kncv.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, i);\n      |                      ^~~\n   \
    \   |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphtf7kncv.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    long sum1 = 0;\n    long\
    \ sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long\
    \ sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long\
    \ sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n\
    \    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17\
    \ = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long\
    \ sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n\
    \    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28\
    \ = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long\
    \ sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n\
    \    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39\
    \ = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long\
    \ sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n\
    \    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50\
    \ = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long\
    \ sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n\
    \    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61\
    \ = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long\
    \ sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n\
    \    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72\
    \ = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long\
    \ sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n\
    \    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum83\
    \ = 0;\n    long sum84 = 0;\n    \n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfx5rzh3r: /tmp/tmpfx5rzh3r.cpp:105: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp70zb_cln: /tmp/tmp70zb_cln.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i : q) {\n       \
    \ sum += i;\n        if (sum > max) {\n            max = sum;\n        }\n   \
    \ }\n    if (sum == w) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp28vgsglr: /tmp/tmp28vgsglr.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxSum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ maxSum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpwmi52a7g: /tmp/tmpwmi52a7g.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    long min_weight = 0;\n    long max_sum2 = max_sum;\n  \
    \  long min_sum2 = max_sum;\n    long sum2 = 0;\n    long sum3 = 0;\n    long\
    \ sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long\
    \ sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n  \
    \  long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 =\
    \ 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long\
    \ sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n\
    \    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26\
    \ = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long\
    \ sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n\
    \    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37\
    \ = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long\
    \ sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n\
    \    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48\
    \ = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long\
    \ sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n\
    \    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59\
    \ = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long\
    \ sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n\
    \    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70\
    \ = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long\
    \ sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n\
    \    long sum78 = 0;\n    long sum79 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpn8kifvwk: /tmp/tmpn8kifvwk.cpp:104: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i : q) {\n        sum\
    \ += i;\n    }\n    if (sum < w) {\n        return false;\n    }\n    long max_weight\
    \ = w;\n    for (long i : q) {\n        max_weight = std::max(max_weight, i);\n\
    \    }\n    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n\
    \    }\n    if (max_sum == max_weight) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpe9i0btw0: /tmp/tmpe9i0btw0.cpp:38: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    long sum2\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    sum2 += q[i] * q[i];\n        max_sum = std::max(max_sum, sum);\n    }\n\
    \    if (sum2 <= w) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2lue4kzl: /tmp/tmp2lue4kzl.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            max_weight = sum;\n\
    \        }\n    }\n    bool result = true;\n    for(auto i : q) {\n        if(i\
    \ != q[q.size() - 1 - i]) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmm_6sw17: /tmp/tmpmm_6sw17.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt3nj0jl_: /tmp/tmpt3nj0jl_.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long max_weight\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max_weight += q[i];\n\
    \        if (max_weight > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpa3eyt2fq: /tmp/tmpa3eyt2fq.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpydmkszcj: /tmp/tmpydmkszcj.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ maxSum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum -= q[i];\n\
    \        if(maxSum < w) return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpiplk4dcx: /tmp/tmpiplk4dcx.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    if (max_sum == max_weight) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpw34lhaa2: /tmp/tmpw34lhaa2.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpblb7pwnp: /tmp/tmpblb7pwnp.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvkdtwtz7: /tmp/tmpvkdtwtz7.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum;\n    for (long i = 0; i < q.size(); i++) {\n \
    \       max_sum = max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphfwdflpw.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmphfwdflpw.cpp:25:19: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_sum = max(max_sum, q[i]);\n      |                   ^~~\n      |  \
    \                 std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphfwdflpw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(auto i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    for(auto i : q) {\n        if(i != q[q.size()-1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpbtz8nfkh: /tmp/tmpbtz8nfkh.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpoxsw3_10: /tmp/tmpoxsw3_10.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max_weight)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpn6qf3zz7: /tmp/tmpn6qf3zz7.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    if(sum > max){\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpmglohp1d: /tmp/tmpmglohp1d.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphnutyzg_: /tmp/tmphnutyzg_.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpg4y5l28p: /tmp/tmpg4y5l28p.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_sum = w;\n    for(long i = 0; i < q.size(); i++){\n     \
    \   max_sum = std::max(max_sum, q[i]);\n    }\n    if(max_sum == w){\n       \
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp3rcohnez: /tmp/tmp3rcohnez.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    int max_sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n        if(max_sum >\
    \ w) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp7cclaeje: /tmp/tmp7cclaeje.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        max_sum += q[i];\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp29rtdnui: /tmp/tmp29rtdnui.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    long max_sum = max_weight\
    \ * max_weight;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > max_sum) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpq0mcpd3z: /tmp/tmpq0mcpd3z.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n   \
    \ for (auto i : q) {\n        max_sum = std::max(max_sum, i);\n    }\n    return\
    \ max_sum == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpwa5sfq5q: /tmp/tmpwa5sfq5q.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    return max_weight <= w;\n}\nint main() {\n   \
    \ auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2,\
    \ 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpd6begnyh: /tmp/tmpd6begnyh.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && q == std::reverse(q);\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8jdfr4zy.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp8jdfr4zy.cpp:23:50: error: no matching function\
    \ for call to \u2018reverse(std::vector<long int>&)\u2019\n   23 |     return\
    \ max_weight == w && q == std::reverse(q);\n      |                          \
    \                        ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8jdfr4zy.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1186:5:\
    \ note: candidate: \u2018template<class _BIter> void std::reverse(_BIter, _BIter)\u2019\
    \n 1186 |     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n\
    \      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1186:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp8jdfr4zy.cpp:23:50: note: \
    \  candidate expects 2 arguments, 1 provided\n   23 |     return max_weight ==\
    \ w && q == std::reverse(q);\n      |                                        \
    \          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    if(max_sum == w) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbc9b8b76: /tmp/tmpbc9b8b76.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    if (max_sum == w) {\n        return true;\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwi_1paix: /tmp/tmpwi_1paix.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    long mid = max / 2;\n    long\
    \ sum2 = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > mid)\
    \ {\n            sum2 += q[i];\n        }\n    }\n    if(sum2 < w) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpf0iamsfh: /tmp/tmpf0iamsfh.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max_sum)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp2oi2jcg5: /tmp/tmp2oi2jcg5.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp8jjogefn: /tmp/tmp8jjogefn.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ if (q[i] > max) {\n            max = q[i];\n        }\n    }\n    long ans =\
    \ sum - max;\n    if (ans > w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpjd5dl8dr: /tmp/tmpjd5dl8dr.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && std::equal(q.rbegin(),\
    \ q.rend(), q.begin());\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpzmyrqqz5: /tmp/tmpzmyrqqz5.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    bool flag = false;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += q[i];\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \            max_weight = w;\n        }\n    }\n    if (max_sum == w) {\n    \
    \    flag = true;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpc6e23v4m: /tmp/tmpc6e23v4m.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    if (max_weight < w) {\n        return false;\n\
    \    }\n    long mid = max_weight / 2;\n    long left = 0, right = q.size() -\
    \ 1;\n    while (left < right) {\n        if (q[left] + q[right] > mid) {\n  \
    \          left++;\n        } else {\n            right--;\n        }\n    }\n\
    \    if (max_weight % 2 == 0) {\n        return will_it_fly(q, max_weight / 2);\n\
    \    } else {\n        return will_it_fly(q, max_weight / 2 + 1);\n    }\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbcwxkfov: /tmp/tmpbcwxkfov.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmkh0f0ir: /tmp/tmpmkh0f0ir.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n    }\n    long\
    \ max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpeuffke3c: /tmp/tmpeuffke3c.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    long ans = 0;\n    for(long\
    \ i = 0; i < q.size(); i++){\n        if(q[i] > max){\n            ans += (max\
    \ * q[i]);\n        }\n    }\n    if(ans <= w){\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp4o4mhp9c: /tmp/tmp4o4mhp9c.cpp:42: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max) {\n            max = q[i];\n        }\n    }\n    long mid = max / 2;\n\
    \    long left = sum - max;\n    long right = sum - mid;\n    if(left == right)\
    \ {\n        return true;\n    }\n    if(left > right) {\n        return false;\n\
    \    }\n    return will_it_fly(q, w);\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbg176jp8: /tmp/tmpbg176jp8.cpp:42: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = w;\n    int max_sum_index = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        max_sum += q[i];\n        if (max_sum\
    \ > w) {\n            max_sum = w;\n            max_sum_index = i;\n        }\n\
    \    }\n    if (max_sum == w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvpxv6jb6: /tmp/tmpvpxv6jb6.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    long mid = max/2;\n\
    \    long left = 0;\n    long right = 0;\n    long midSum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++){\n        if(q[i] > mid){\n            midSum += q[i];\n\
    \            if(q[i] > max){\n                right = q[i];\n            }\n \
    \       }\n        else{\n            midSum += q[i];\n            if(q[i] < max){\n\
    \                left = q[i];\n            }\n        }\n    }\n    if(midSum\
    \ < w){\n        return false;\n    }\n    if(left == right){\n        return\
    \ true;\n    }\n    if(left > right){\n        return false;\n    }\n    if(left\
    \ < right){\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmppdzy2iux: /tmp/tmppdzy2iux.cpp:63: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpktajgw8e.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpktajgw8e.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n       \
    \ if(sum > w) {\n            return false;\n        }\n    }\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > w) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpxumq4bpu: /tmp/tmpxumq4bpu.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n\
    \            max = sum;\n        }\n    }\n    if (sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpktp8ljl7: /tmp/tmpktp8ljl7.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    if (max_weight < w) {\n        return false;\n    }\n    long mid =\
    \ max_weight / 2;\n    long left = 0;\n    long right = 0;\n    for (auto i :\
    \ q) {\n        if (i <= mid) {\n            left += i;\n        } else {\n  \
    \          right += i;\n        }\n    }\n    if (left == right) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpf8xsp4sk: /tmp/tmpf8xsp4sk.cpp:46: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp9j4sbowd: /tmp/tmp9j4sbowd.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > max_sum) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp5xi7bx6v: /tmp/tmp5xi7bx6v.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n       \
    \ if (max_sum > w) return false;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp4cxyvm8b: /tmp/tmp4cxyvm8b.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = INT_MIN;\n    int max_index =\
    \ -1;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int\
    \ j = 0; j < n; j++) {\n            sum += q[j];\n        }\n        if (sum >\
    \ max_sum) {\n            max_sum = sum;\n            max_index = i;\n       \
    \ }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpp_lxdg2k: /tmp/tmpp_lxdg2k.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpgdv_q04y: /tmp/tmpgdv_q04y.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \    }\n    if(max_sum < w) return false;\n    long max_sum2 = max_sum;\n    for(long\
    \ i = q.size() - 1; i >= 0; i--) {\n        max_sum2 += q[i];\n        if(max_sum2\
    \ < w) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmphqr9yzun: /tmp/tmphqr9yzun.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max) {\n            max = sum;\n\
    \        }\n    }\n    return sum <= w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwuqaoxgr: /tmp/tmpwuqaoxgr.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpslh6cch9: /tmp/tmpslh6cch9.cpp:25: int main(): Assertion `candidate((std::vector<long>({5})),\
    \ (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_re0i7a4: /tmp/tmp_re0i7a4.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \        if(max_sum > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp7goxel1m: /tmp/tmp7goxel1m.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    long max_weight\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long sum1 =\
    \ 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjyf6ffa6.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpjyf6ffa6.cpp:103:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpjyf6ffa6.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = w;\n    int sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpautlyxt8: /tmp/tmpautlyxt8.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        if(q[i] != max) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp6xr7tpl0: /tmp/tmp6xr7tpl0.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpngslan0m: /tmp/tmpngslan0m.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && std::equal(q.begin(),\
    \ q.end(), q.rbegin());\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > w) {\n            return false;\n\
    \        }\n        max_sum += w;\n    }\n    return max_sum == w;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpg99xo_8o: /tmp/tmpg99xo_8o.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmptl9nax20: /tmp/tmptl9nax20.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum =\
    \ std::max(max_sum, q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmph7ypp_ck: /tmp/tmph7ypp_ck.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long i\
    \ : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpag4d7k3f: /tmp/tmpag4d7k3f.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long maxSum = sum;\n    for(long i = 0; i < q.size(); i++){\n    \
    \    maxSum -= q[i];\n        if(maxSum < w){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpi0u0xodi: /tmp/tmpi0u0xodi.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (long i : q)\
    \ {\n        max_sum = std::max(max_sum, i);\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvzyomfq1: /tmp/tmpvzyomfq1.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp1yhx_bab: /tmp/tmp1yhx_bab.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++){\n\
    \        if(q[i] > max_sum){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp7f1jtlta: /tmp/tmp7f1jtlta.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpsg9h36ys: /tmp/tmpsg9h36ys.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpk1_dznwe: /tmp/tmpk1_dznwe.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpe2mh9iut: /tmp/tmpe2mh9iut.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpqsamrprk: /tmp/tmpqsamrprk.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        q[i] /= max;\n    }\n    long sum2 = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum2 += q[i] * q[i];\n    }\n    if(sum2 <= w)\
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpc4w2m0lc: /tmp/tmpc4w2m0lc.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpbaip00oo: /tmp/tmpbaip00oo.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum;\n  \
    \  for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i]);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8m9bfia3: /tmp/tmp8m9bfia3.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ maxSum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum = std::max(maxSum,\
    \ q[i]);\n    }\n    return maxSum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpnveak4pe: /tmp/tmpnveak4pe.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_weight = w;\n    int sum = 0;\n   \
    \ for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            return false;\n        }\n    }\n    return sum == max_weight;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpxhx498tp: /tmp/tmpxhx498tp.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_weight = w;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        if (q[i] > max_weight) {\n            max_weight = q[i];\n        }\n\
    \    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     long temp = max_weight - q[i];\n        if (temp > max_sum) {\n        \
    \    max_sum = temp;\n        }\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3rdp4s8o: /tmp/tmp3rdp4s8o.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = w;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i] + w);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmprgarnhd1: /tmp/tmprgarnhd1.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmphh8oo0u0: /tmp/tmphh8oo0u0.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxnep5h__: /tmp/tmpxnep5h__.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto i : q)\
    \ {\n        max_sum = std::max(max_sum, i);\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpxqwk_bdi: /tmp/tmpxqwk_bdi.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long i\
    \ : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfklndzwn: /tmp/tmpfklndzwn.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > w) {\n            return false;\n\
    \        }\n        max_sum += q[i];\n    }\n    return max_sum == w;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp66m61yuv: /tmp/tmp66m61yuv.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmplm8671u8: /tmp/tmplm8671u8.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    long\
    \ max_weight_index = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n        if (sum > max_weight) {\n            max_weight = sum;\n \
    \           max_weight_index = i;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpykhto36_: /tmp/tmpykhto36_.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n   \
    \ for (auto i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n   \
    \ if (sum > max_sum) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkomqc573: /tmp/tmpkomqc573.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp89w16zuu: /tmp/tmp89w16zuu.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpeb1f27ed: /tmp/tmpeb1f27ed.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
