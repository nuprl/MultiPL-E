name: HumanEval_72_will_it_fly
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++17\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n      \
    \  if (sum > w) {\n            return false;\n        }\n    }\n    max_sum =\
    \ sum;\n    sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum +=\
    \ q[i];\n        if (sum > w) {\n            return false;\n        }\n    }\n\
    \    return sum == max_sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyz6xk31y: /tmp/tmpyz6xk31y.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0y2hf_nh: /tmp/tmp0y2hf_nh.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpu2lh901u: /tmp/tmpu2lh901u.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2r4x8110: /tmp/tmp2r4x8110.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo5f2ykze: /tmp/tmpo5f2ykze.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_sum = sum - w;\n    for(long i : q)\
    \ {\n        if(i > max_sum) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpyo5jpjog: /tmp/tmpyo5jpjog.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    long\
    \ max = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max = std::max(max,\
    \ q[i]);\n    }\n    return sum == max;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfnsdkbl5: /tmp/tmpfnsdkbl5.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_bv8zb84: /tmp/tmp_bv8zb84.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n \
    \       if (sum > max_sum) {\n            max_sum = sum;\n            max_weight\
    \ = w;\n        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp_nj_6me9: /tmp/tmp_nj_6me9.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // Your code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) max\
    \ = q[i];\n    }\n    long mid = max / 2;\n    long sum2 = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        if(q[i] > mid) {\n            sum2 += q[i];\n\
    \        }\n    }\n    return sum2 <= w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp37y5ym89: /tmp/tmp37y5ym89.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplsout2ae.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmplsout2ae.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_weight_index = 0;\n    for (long i : q) {\n        if (i ==\
    \ max_weight) {\n            max_weight_index = q.size() - i - 1;\n          \
    \  break;\n        }\n    }\n    if (max_weight_index == 0) {\n        return\
    \ false;\n    }\n    long max_weight_value = max_weight;\n    for (long i = max_weight_index;\
    \ i >= 0; i--) {\n        long value = max_weight_value;\n        for (long j\
    \ = i; j < q.size(); j++) {\n            value += q[j];\n            if (value\
    \ > max_weight) {\n                max_weight = value;\n                max_weight_index\
    \ = j;\n            }\n        }\n    }\n    return max_weight_index == q.size()\
    \ - 1;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp8md44v9g: /tmp/tmp8md44v9g.cpp:51: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] >\
    \ max_weight) return false;\n        max_weight -= q[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpsqtvcojx: /tmp/tmpsqtvcojx.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdrky76ww: /tmp/tmpdrky76ww.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    long max_weight = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        max_weight = std::max(max_weight, q[i]);\n    }\n    return max_sum ==\
    \ max_weight;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpql7wh25w: /tmp/tmpql7wh25w.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long maxSum = sum;\n    long maxSumIndex = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if (sum > maxSum) {\n  \
    \          maxSum = sum;\n            maxSumIndex = i;\n        }\n    }\n   \
    \ if (maxSumIndex == q.size() - 1) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp6a9a65xs: /tmp/tmp6a9a65xs.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i : q) {\n        sum\
    \ += i;\n    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum\
    \ = sum;\n    for (long i : q) {\n        max_sum = std::max(max_sum, i);\n  \
    \  }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpzsdclvvx: /tmp/tmpzsdclvvx.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_possible = std::pow(w, q.size());\n\
    \    for (auto i : q) {\n        if (i > max_possible) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp7_8fqwzb: /tmp/tmp7_8fqwzb.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpitu6rp89: /tmp/tmpitu6rp89.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_sum = w;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpi3ottycg: /tmp/tmpi3ottycg.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++){\n  \
    \      if(q[i] > max_weight){\n            max_weight = q[i];\n        }\n   \
    \ }\n    for(long i = 0; i < q.size(); i++){\n        if(q[i] != max_weight){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp5igm17og: /tmp/tmp5igm17og.cpp:38: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \    }\n    if(max_sum < w) return false;\n    long mid = max_sum / 2;\n    long\
    \ left = max_sum - mid;\n    long right = w - max_sum;\n    long mid2 = max_sum\
    \ / 2;\n    long left2 = w - max_sum;\n    long right2 = max_sum - mid2;\n   \
    \ long mid3 = max_sum / 2;\n    long left3 = w - max_sum;\n    long right3 = max_sum\
    \ - mid3;\n    long mid4 = max_sum / 2;\n    long left4 = w - max_sum;\n    long\
    \ right4 = max_sum - mid4;\n    long mid5 = max_sum / 2;\n    long left5 = w -\
    \ max_sum;\n    long right5 = max_sum - mid5;\n    long mid6 = max_sum / 2;\n\
    \    long left6 = w - max_sum;\n    long right6 = max_sum - mid6;\n    long mid7\
    \ = max_sum / 2;\n    long left7 = w - max_sum;\n    long right7 = max_sum - mid7;\n\
    \    long mid8 = max_sum / 2;\n    long left8 = w - max_sum;\n    long right8\
    \ = max_sum - mid8;\n    long mid9 = max_sum / 2;\n    long left9 = w - max_sum;\n\
    \    long right9 = max_sum - mid9;\n    long mid10 = max_sum / 2;\n    long left10\
    \ = w - max_sum;\n    long right10 = max_sum - mid10;\n    long mid11 = max_sum\
    \ / 2;\n    long left11 = w - max_sum;\n    long right11 = max_sum - mid11;\n\
    \    long mid12 = max_sum / 2;\n    long left12 = w - max_sum;\n    long right12\
    \ = max_sum - mid12;\n    long mid13 = max_sum / 2;\n    long left13 = w - max_sum;\n\
    \    long right13 = max_sum - mid13;\n    long mid14 = max_sum / 2;\n    long\
    \ left14 = w - max_sum;\n    long right14 = max_sum - mid14;\n    long mid15 =\
    \ max_sum / 2;\n    long left15 = w - max_sum;\n    long right15 = max_sum - mid15;\n\
    \    long mid16 = max_sum / 2;\n    long left16 = w - max_sum;\n    long right16\
    \ = max_sum\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0hqmoe8w.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0hqmoe8w.cpp:74:1: error: expected \u2018,\u2019\
    \ or \u2018;\u2019 before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp0hqmoe8w.cpp:74:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = w;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpby4nodk3: /tmp/tmpby4nodk3.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpi7dc5rw7: /tmp/tmpi7dc5rw7.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long max_sum = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n    }\n    if (max_sum\
    \ < w) return false;\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        sum += q[i];\n        if (sum > w) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmph17o3dvg: /tmp/tmph17o3dvg.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w && std::equal(q.begin(), q.end(),\
    \ q.rbegin());\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpiyjx9h_1: /tmp/tmpiyjx9h_1.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n  \
    \          max_sum = sum;\n        }\n    }\n    return max_sum == w;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpsrh56pub: /tmp/tmpsrh56pub.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpl9m2blta: /tmp/tmpl9m2blta.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] >\
    \ max_weight) return false;\n        max_weight -= q[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp7pppnkid: /tmp/tmp7pppnkid.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum - w;\n\
    \    long max_weight = 0;\n    for (auto i : q) {\n        max_weight = std::max(max_weight,\
    \ i);\n    }\n    if (max_sum < max_weight) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp6rvl6k8p: /tmp/tmp6rvl6k8p.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max) {\n \
    \           max = sum;\n        }\n    }\n    if(sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpu1bubmhj: /tmp/tmpu1bubmhj.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++11\n    long sum = 0;\n    long max = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    if (sum == w) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpwl2vly4v: /tmp/tmpwl2vly4v.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    return max_weight <= w;\n}\nint main() {\n   \
    \ auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2,\
    \ 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpm1gbqiv1: /tmp/tmpm1gbqiv1.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_sum = sum;\n    for(long i : q) {\n\
    \        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum == sum;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpblavl477: /tmp/tmpblavl477.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpuil3j9db: /tmp/tmpuil3j9db.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpz0d6el6t: /tmp/tmpz0d6el6t.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == sum;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp72gn9w77: /tmp/tmp72gn9w77.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpaicqyk9h: /tmp/tmpaicqyk9h.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long maxSum = sum;\n  \
    \  for (long i : q) {\n        maxSum = std::max(maxSum, i);\n    }\n    return\
    \ maxSum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp8niz_akn: /tmp/tmp8niz_akn.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp3fy1psp5: /tmp/tmp3fy1psp5.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum - w;\n\
    \    long max_weight = 0;\n    for (auto i : q) {\n        max_weight = max(max_weight,\
    \ i);\n    }\n    if (max_sum < max_weight) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe9fja8a3.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpe9fja8a3.cpp:25:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_weight = max(max_weight, i);\n      |                      ^~~\n   \
    \   |                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe9fja8a3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max) {\n            max = q[i];\n        }\n    }\n    if(max < w) {\n   \
    \     return false;\n    }\n    long mid = max / 2;\n    long left = 0;\n    long\
    \ right = 0;\n    long midSum = 0;\n    for(long i = 0; i < q.size(); i++) {\n\
    \        if(q[i] > mid) {\n            midSum += q[i];\n            if(q[i] >\
    \ left) {\n                left = q[i];\n            }\n        } else {\n   \
    \         midSum += q[i];\n            if(q[i] > right) {\n                right\
    \ = q[i];\n            }\n        }\n    }\n    if(midSum < w) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmprkb4tp3t: /tmp/tmprkb4tp3t.cpp:56: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return q[0] == w;\n    if (q[n/2] == w)\n        return will_it_fly(q,\
    \ w);\n    if (q[n/2] + q[n/2-1] == w)\n        return will_it_fly(q, w);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmplocptvkq: /tmp/tmplocptvkq.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            max_weight = sum;\n\
    \        }\n    }\n    if(max_weight == 0) {\n        return true;\n    }\n  \
    \  for(auto i : q) {\n        if(i != q[q.size() - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_auhdqio: /tmp/tmp_auhdqio.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp5e8n4zti: /tmp/tmp5e8n4zti.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpdc7gryiq: /tmp/tmpdc7gryiq.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmprsw78yz4: /tmp/tmprsw78yz4.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++11\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n       \
    \ if(sum > w) {\n            return false;\n        }\n        max_sum = std::max(max_sum,\
    \ sum);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpw71tmg2y: /tmp/tmpw71tmg2y.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum - w;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max_sum) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmps_65ngd7: /tmp/tmps_65ngd7.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    long n = q.size();\n   \
    \ for(long i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpt_kzcah4: /tmp/tmpt_kzcah4.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp9vk42l8h: /tmp/tmp9vk42l8h.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code\n    long maxSum = std::accumulate(q.begin(), q.end(),\
    \ 0);\n    return maxSum < w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpc05j9i3b: /tmp/tmpc05j9i3b.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    bool fly = true;\n    for\
    \ (auto i : q) {\n        sum += i;\n        if (sum > max_sum) {\n          \
    \  fly = false;\n            break;\n        }\n    }\n    return fly;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpez1hq4la: /tmp/tmpez1hq4la.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    long\
    \ max = 0;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max)\
    \ {\n            max = q[i];\n        }\n    }\n    long mid = sum / 2;\n    if\
    \ (mid > w) return false;\n    long left = 0, right = q.size() - 1;\n    while\
    \ (left < right) {\n        long mid = (left + right) / 2;\n        if (q[mid]\
    \ > mid) {\n            left = mid + 1;\n        } else {\n            right =\
    \ mid;\n        }\n    }\n    if (q[left] != mid) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp4q8dmy46: /tmp/tmp4q8dmy46.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    return max_weight <=\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2ybe375r: /tmp/tmp2ybe375r.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum;\n  \
    \  for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i]);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp79x9rxti: /tmp/tmp79x9rxti.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) {\n            maxWeight\
    \ = sum;\n        }\n    }\n    long sumOfElements = 0;\n    for(long i = 0; i\
    \ < q.size(); i++) {\n        sumOfElements += q[i];\n    }\n    return sumOfElements\
    \ <= maxWeight;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpdsnpj8ag: /tmp/tmpdsnpj8ag.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    if (max_weight < w) {\n        return false;\n\
    \    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     sum += q[i];\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpz2yte_o9: /tmp/tmpz2yte_o9.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(auto i : q) {\n  \
    \      sum += i;\n        if(sum > maxWeight) {\n            maxWeight = sum;\n\
    \        }\n    }\n    if(sum < maxWeight) {\n        return false;\n    }\n \
    \   for(auto i : q) {\n        if(i != q[q.size() - 1 - i]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpelrlj9cz: /tmp/tmpelrlj9cz.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_sum = w;\n    for(auto i : q) {\n    \
    \    sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n    \
    \    }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqyu78tmz: /tmp/tmpqyu78tmz.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpn55he73d: /tmp/tmpn55he73d.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++17\n    long maxSum = std::accumulate(q.begin(),\
    \ q.end(), 0);\n    return maxSum <= w && std::equal(q.begin(), q.end(), q.rbegin(),\
    \ q.rend());\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpg7kjyx7e.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpg7kjyx7e.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        max_sum = std::max(max_sum, sum);\n    }\n    return\
    \ max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpl94islav: /tmp/tmpl94islav.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long maxWeight = std::max(q.front(),\
    \ w);\n    long sum = 0;\n    for(auto i : q){\n        sum += i;\n    }\n   \
    \ return sum <= maxWeight;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq_ru9per: /tmp/tmpq_ru9per.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long maxSum = sum - w;\n    for(long i = 0; i < q.size(); i++){\n\
    \        if(q[i] > maxSum){\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpo0n8smyd: /tmp/tmpo0n8smyd.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n    if\
    \ (sum == w) return true;\n    long maxSum = w;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        maxSum = std::max(maxSum, q[i] + w);\n    }\n    return maxSum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpaosrn4aw: /tmp/tmpaosrn4aw.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = w;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i] + w);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2nhrxbbw: /tmp/tmp2nhrxbbw.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpk03n5xbo: /tmp/tmpk03n5xbo.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (long i : q)\
    \ {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum ==\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkhik7fe4: /tmp/tmpkhik7fe4.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpmijvktql: /tmp/tmpmijvktql.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max = 0;\n   \
    \ for (long i = 0; i < q.size(); i++) {\n        max = std::max(max, q[i]);\n\
    \    }\n    if (sum == max) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphskwm2_6: /tmp/tmphskwm2_6.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto i : q)\
    \ {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum ==\
    \ sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpqgyuky69: /tmp/tmpqgyuky69.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp6x8h3qd_: /tmp/tmp6x8h3qd_.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) {\n            maxWeight\
    \ = sum;\n        }\n    }\n    if(maxWeight <= w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa5avs0zb: /tmp/tmpa5avs0zb.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long maxWeight = sum - w;\n\
    \    long maxSum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum\
    \ += q[i];\n        if(maxSum > maxWeight) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpjo7v5sfd: /tmp/tmpjo7v5sfd.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n\
    \            max = sum;\n        }\n    }\n    if (sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwo3jyhoy: /tmp/tmpwo3jyhoy.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkowhoqrj: /tmp/tmpkowhoqrj.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmplsxynj24: /tmp/tmplsxynj24.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        q[i] /= max;\n    }\n    long sum2 = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum2 += q[i];\n    }\n    if(sum2 <= w) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx512qhji: /tmp/tmpx512qhji.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ if (q[i] > max) {\n            max = q[i];\n        }\n    }\n    if (sum ==\
    \ max) {\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp6jpihona: /tmp/tmp6jpihona.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_weight = max(max_weight,\
    \ q[i]);\n    }\n    long max_sum = max_weight - sum;\n    for (long i = 0; i\
    \ < q.size(); i++) {\n        if (q[i] > max_sum) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkmc6r3uy.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpkmc6r3uy.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkmc6r3uy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max) {\n            max = sum;\n\
    \        }\n    }\n    if (sum < w) {\n        return false;\n    }\n    long\
    \ mid = sum / 2;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i]\
    \ > mid) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2_ivy_gc: /tmp/tmp2_ivy_gc.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(auto i : q) {\n    \
    \    sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n    \
    \    }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2lnwmay8: /tmp/tmp2lnwmay8.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(auto i : q) {\n  \
    \      sum += i;\n        if(sum > maxWeight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpjk006rqa: /tmp/tmpjk006rqa.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum;\n \
    \   for (long i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n \
    \   if (max_sum == sum) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvdwn33x2: /tmp/tmpvdwn33x2.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        if(q[i] > w) return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp_odfwkpn: /tmp/tmp_odfwkpn.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    bool isPalindromic = true;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > maxWeight) {\n            isPalindromic = false;\n            break;\n   \
    \     }\n    }\n    if (isPalindromic) {\n        long reverseSum = 0;\n     \
    \   for (long i = q.size() - 1; i >= 0; i--) {\n            reverseSum += q[i];\n\
    \            if (reverseSum > maxWeight) {\n                isPalindromic = false;\n\
    \                break;\n            }\n        }\n    }\n    return isPalindromic;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpg2d5p9hb: /tmp/tmpg2d5p9hb.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long mid = max_weight / 2;\n    long left = 0;\n    long right = 0;\n\
    \    for (auto i : q) {\n        if (i <= mid) {\n            left += i;\n   \
    \     } else {\n            right += i;\n        }\n    }\n    if (left == right)\
    \ {\n        return false;\n    }\n    if (left > right) {\n        return will_it_fly(q,\
    \ w);\n    } else {\n        return will_it_fly(q, w);\n    }\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ max = std::max(max, q[i]);\n    }\n    if (max <= w) return false;\n    long\
    \ sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp8vlcskse: /tmp/tmp8vlcskse.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max_weight = 0;\n    for(long i = 0; i < q.size(); i++) {\n \
    \       max_weight = max(max_weight, q[i]);\n    }\n    if(max_weight < w) {\n\
    \        return false;\n    }\n    long mid = max_weight/2;\n    long sum1 = 0;\n\
    \    long sum2 = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum1 +=\
    \ q[i];\n        sum2 += q[i]*mid;\n    }\n    if(sum1 < sum2) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpshn1_0zk.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpshn1_0zk.cpp:25:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpshn1_0zk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum >= w) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpw356mr69: /tmp/tmpw356mr69.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_weight = w;\n\
    \    for (long i : q) {\n        max_weight = std::max(max_weight, i);\n    }\n\
    \    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n    }\n\
    \    if (max_sum > max_weight) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpww2ft_ix: /tmp/tmpww2ft_ix.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++){\n  \
    \      if(q[i] > max_weight){\n            max_weight = q[i];\n        }\n   \
    \ }\n    long max_sum = 0;\n    for(long i = 0; i < q.size(); i++){\n        sum\
    \ += q[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n\
    \    }\n    if(max_sum == w){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpujuctzbz: /tmp/tmpujuctzbz.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpeyu7aaue: /tmp/tmpeyu7aaue.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max_weight = w;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9k4wejva: /tmp/tmp9k4wejva.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max_weight = w;\n    for(long i = 0; i < q.size(); i++) {\n \
    \       if(q[i] > max_weight) {\n            return false;\n        }\n      \
    \  max_weight -= q[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpjkx04r58: /tmp/tmpjkx04r58.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpforf6qz3: /tmp/tmpforf6qz3.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpw8liaxu_: /tmp/tmpw8liaxu_.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp400u6tz1: /tmp/tmp400u6tz1.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp8a6ml9f_: /tmp/tmp8a6ml9f_.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_weight = max(max_weight,\
    \ q[i]);\n    }\n    long max_sum = max_weight - sum;\n    for (long i = 0; i\
    \ < q.size(); i++) {\n        if (q[i] > max_sum) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm3xz6ar8.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm3xz6ar8.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm3xz6ar8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    long max_weight = w;\n    for(long i : q) {\n\
    \        max_weight = max(max_weight, i);\n    }\n    for(long i : q) {\n    \
    \    if(i != max_weight) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa2f9o5cy.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpa2f9o5cy.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, i);\n      |                      ^~~\n   \
    \   |                      std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa2f9o5cy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    long sum1 = 0;\n    long\
    \ sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long\
    \ sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long\
    \ sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n\
    \    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17\
    \ = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long\
    \ sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n\
    \    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28\
    \ = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long\
    \ sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n\
    \    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39\
    \ = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long\
    \ sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n\
    \    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50\
    \ = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long\
    \ sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n\
    \    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61\
    \ = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long\
    \ sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n\
    \    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72\
    \ = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long\
    \ sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n\
    \    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum83\
    \ = 0;\n    long sum84 = 0;\n    \n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmprquvljas: /tmp/tmprquvljas.cpp:105: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpef0of05p: /tmp/tmpef0of05p.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i : q) {\n       \
    \ sum += i;\n        if (sum > max) {\n            max = sum;\n        }\n   \
    \ }\n    if (sum == w) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp64_0zh5n: /tmp/tmp64_0zh5n.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxSum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ maxSum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpp1vtsyyw: /tmp/tmpp1vtsyyw.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    long min_weight = 0;\n    long max_sum2 = max_sum;\n  \
    \  long min_sum2 = max_sum;\n    long sum2 = 0;\n    long sum3 = 0;\n    long\
    \ sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long\
    \ sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n  \
    \  long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 =\
    \ 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long\
    \ sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n\
    \    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26\
    \ = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long\
    \ sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n\
    \    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37\
    \ = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long\
    \ sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n\
    \    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48\
    \ = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long\
    \ sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n\
    \    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59\
    \ = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long\
    \ sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n\
    \    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70\
    \ = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long\
    \ sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n\
    \    long sum78 = 0;\n    long sum79 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpm38updek: /tmp/tmpm38updek.cpp:104: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i : q) {\n        sum\
    \ += i;\n    }\n    if (sum < w) {\n        return false;\n    }\n    long max_weight\
    \ = w;\n    for (long i : q) {\n        max_weight = std::max(max_weight, i);\n\
    \    }\n    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n\
    \    }\n    if (max_sum == max_weight) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpsliawvw7: /tmp/tmpsliawvw7.cpp:38: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    long sum2\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    sum2 += q[i] * q[i];\n        max_sum = std::max(max_sum, sum);\n    }\n\
    \    if (sum2 <= w) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpy49iq8f0: /tmp/tmpy49iq8f0.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i : q) {\n \
    \       sum += i;\n        if(sum > max_weight) {\n            max_weight = sum;\n\
    \        }\n    }\n    bool result = true;\n    for(auto i : q) {\n        if(i\
    \ != q[q.size() - 1 - i]) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdz8ags4a: /tmp/tmpdz8ags4a.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpys1irppk: /tmp/tmpys1irppk.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long max_weight\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max_weight += q[i];\n\
    \        if (max_weight > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp3asquicy: /tmp/tmp3asquicy.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpn324y6vn: /tmp/tmpn324y6vn.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ maxSum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum -= q[i];\n\
    \        if(maxSum < w) return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp5fxea6lj: /tmp/tmp5fxea6lj.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    if (max_sum == max_weight) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp34yiq5h3: /tmp/tmp34yiq5h3.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkpcwfrwa: /tmp/tmpkpcwfrwa.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpgklo1c2q: /tmp/tmpgklo1c2q.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum;\n    for (long i = 0; i < q.size(); i++) {\n \
    \       max_sum = max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp5gom7i_f.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp5gom7i_f.cpp:25:19: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_sum = max(max_sum, q[i]);\n      |                   ^~~\n      |  \
    \                 std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5gom7i_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(auto i : q) {\n        sum += i;\n    }\n \
    \   if(sum < w) return false;\n    for(auto i : q) {\n        if(i != q[q.size()-1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpu1jc8_d3: /tmp/tmpu1jc8_d3.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > maxWeight) return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmphje8kgje: /tmp/tmphje8kgje.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max_weight)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp2op9q6bu: /tmp/tmp2op9q6bu.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    if(sum > max){\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp539_2pyj: /tmp/tmp539_2pyj.cpp:36: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2q50svua: /tmp/tmp2q50svua.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp4dcuskn1: /tmp/tmp4dcuskn1.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_sum = w;\n    for(long i = 0; i < q.size(); i++){\n     \
    \   max_sum = std::max(max_sum, q[i]);\n    }\n    if(max_sum == w){\n       \
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpbksdnkge: /tmp/tmpbksdnkge.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    int max_sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n        if(max_sum >\
    \ w) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpzno9a23d: /tmp/tmpzno9a23d.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        max_sum += q[i];\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpujg2lsoo: /tmp/tmpujg2lsoo.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    long max_sum = max_weight\
    \ * max_weight;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > max_sum) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpgea5k8oy: /tmp/tmpgea5k8oy.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n   \
    \ for (auto i : q) {\n        max_sum = std::max(max_sum, i);\n    }\n    return\
    \ max_sum == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpys53rs_f: /tmp/tmpys53rs_f.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    return max_weight <= w;\n}\nint main() {\n   \
    \ auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2,\
    \ 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp70jlqg5z: /tmp/tmp70jlqg5z.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && q == std::reverse(q);\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvxt9rx5h.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpvxt9rx5h.cpp:23:50: error: no matching function\
    \ for call to \u2018reverse(std::vector<long int>&)\u2019\n   23 |     return\
    \ max_weight == w && q == std::reverse(q);\n      |                          \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxt9rx5h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1180:5:\
    \ note: candidate: \u2018template<class _BIter> void std::reverse(_BIter, _BIter)\u2019\
    \n 1180 |     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n\
    \      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1180:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpvxt9rx5h.cpp:23:50:\
    \ note:   candidate expects 2 arguments, 1 provided\n   23 |     return max_weight\
    \ == w && q == std::reverse(q);\n      |                                     \
    \             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    if(max_sum == w) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9oe3vnrw: /tmp/tmp9oe3vnrw.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    if (max_sum == w) {\n        return true;\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppmz5x2xw: /tmp/tmppmz5x2xw.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    long mid = max / 2;\n    long\
    \ sum2 = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > mid)\
    \ {\n            sum2 += q[i];\n        }\n    }\n    if(sum2 < w) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpk9qpashq: /tmp/tmpk9qpashq.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        if (q[i] > max_sum)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpmswvqmg5: /tmp/tmpmswvqmg5.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp3s58ch_p: /tmp/tmp3s58ch_p.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ if (q[i] > max) {\n            max = q[i];\n        }\n    }\n    long ans =\
    \ sum - max;\n    if (ans > w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpau6_0ryy: /tmp/tmpau6_0ryy.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && std::equal(q.rbegin(),\
    \ q.rend(), q.begin());\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkhzjorkw: /tmp/tmpkhzjorkw.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    long\
    \ max_weight = 0;\n    bool flag = false;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += q[i];\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \            max_weight = w;\n        }\n    }\n    if (max_sum == w) {\n    \
    \    flag = true;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmprt89scd6: /tmp/tmprt89scd6.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    if (max_weight < w) {\n        return false;\n\
    \    }\n    long mid = max_weight / 2;\n    long left = 0, right = q.size() -\
    \ 1;\n    while (left < right) {\n        if (q[left] + q[right] > mid) {\n  \
    \          left++;\n        } else {\n            right--;\n        }\n    }\n\
    \    if (max_weight % 2 == 0) {\n        return will_it_fly(q, max_weight / 2);\n\
    \    } else {\n        return will_it_fly(q, max_weight / 2 + 1);\n    }\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3_a1mx9v: /tmp/tmp3_a1mx9v.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcjj1lqya: /tmp/tmpcjj1lqya.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n    }\n    long\
    \ max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmph3wqle09: /tmp/tmph3wqle09.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    long ans = 0;\n    for(long\
    \ i = 0; i < q.size(); i++){\n        if(q[i] > max){\n            ans += (max\
    \ * q[i]);\n        }\n    }\n    if(ans <= w){\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpt9z7xkw2: /tmp/tmpt9z7xkw2.cpp:42: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max) {\n            max = q[i];\n        }\n    }\n    long mid = max / 2;\n\
    \    long left = sum - max;\n    long right = sum - mid;\n    if(left == right)\
    \ {\n        return true;\n    }\n    if(left > right) {\n        return false;\n\
    \    }\n    return will_it_fly(q, w);\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmps4t3hd2s: /tmp/tmps4t3hd2s.cpp:42: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = w;\n    int max_sum_index = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        max_sum += q[i];\n        if (max_sum\
    \ > w) {\n            max_sum = w;\n            max_sum_index = i;\n        }\n\
    \    }\n    if (max_sum == w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpru9qa3_s: /tmp/tmpru9qa3_s.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i = 0; i < q.size(); i++){\n        if(q[i]\
    \ > max){\n            max = q[i];\n        }\n    }\n    long mid = max/2;\n\
    \    long left = 0;\n    long right = 0;\n    long midSum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++){\n        if(q[i] > mid){\n            midSum += q[i];\n\
    \            if(q[i] > max){\n                right = q[i];\n            }\n \
    \       }\n        else{\n            midSum += q[i];\n            if(q[i] < max){\n\
    \                left = q[i];\n            }\n        }\n    }\n    if(midSum\
    \ < w){\n        return false;\n    }\n    if(left == right){\n        return\
    \ true;\n    }\n    if(left > right){\n        return false;\n    }\n    if(left\
    \ < right){\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmposkk5brz: /tmp/tmposkk5brz.cpp:63: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1umjy7re.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1umjy7re.cpp:16:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   16 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // write your code in C++14\n    long max_sum = 0;\n    long sum =\
    \ 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n       \
    \ if(sum > w) {\n            return false;\n        }\n    }\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > w) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpduuxbxg8: /tmp/tmpduuxbxg8.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n\
    \            max = sum;\n        }\n    }\n    if (sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn3g1teke: /tmp/tmpn3g1teke.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == 0) {\n        return true;\n \
    \   }\n    if (max_weight < w) {\n        return false;\n    }\n    long mid =\
    \ max_weight / 2;\n    long left = 0;\n    long right = 0;\n    for (auto i :\
    \ q) {\n        if (i <= mid) {\n            left += i;\n        } else {\n  \
    \          right += i;\n        }\n    }\n    if (left == right) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvxl2rk5a: /tmp/tmpvxl2rk5a.cpp:46: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight) {\n  \
    \          max_weight = sum;\n        }\n    }\n    if (max_weight == 0) {\n \
    \       return true;\n    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n        }\n    }\n    return max_sum == max_weight;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpq7636m6f: /tmp/tmpq7636m6f.cpp:37: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = sum\
    \ - w;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > max_sum) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp1kgew1fa: /tmp/tmp1kgew1fa.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n       \
    \ if (max_sum > w) return false;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpmv4ek3h8: /tmp/tmpmv4ek3h8.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = INT_MIN;\n    int max_index =\
    \ -1;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int\
    \ j = 0; j < n; j++) {\n            sum += q[j];\n        }\n        if (sum >\
    \ max_sum) {\n            max_sum = sum;\n            max_index = i;\n       \
    \ }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpbjczztcj: /tmp/tmpbjczztcj.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpn906_z5z: /tmp/tmpn906_z5z.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \    }\n    if(max_sum < w) return false;\n    long max_sum2 = max_sum;\n    for(long\
    \ i = q.size() - 1; i >= 0; i--) {\n        max_sum2 += q[i];\n        if(max_sum2\
    \ < w) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpsonu5ouv: /tmp/tmpsonu5ouv.cpp:35: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > max) {\n            max = sum;\n\
    \        }\n    }\n    return sum <= w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n\
    \    assert(candidate((std::vector<long>({5})), (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpz0gifw2d: /tmp/tmpz0gifw2d.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum < w && std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpc3wwpqx9: /tmp/tmpc3wwpqx9.cpp:25: int main(): Assertion `candidate((std::vector<long>({5})),\
    \ (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    if (max_weight == w) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgkofa12t: /tmp/tmpgkofa12t.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \        if(max_sum > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpo_nx0z65: /tmp/tmpo_nx0z65.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    long max_weight\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long sum1 =\
    \ 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5\
    \ = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9\
    \ = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long\
    \ sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n\
    \    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20\
    \ = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long\
    \ sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n\
    \    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31\
    \ = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long\
    \ sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n\
    \    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42\
    \ = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long\
    \ sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n\
    \    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53\
    \ = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long\
    \ sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n\
    \    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64\
    \ = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long\
    \ sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n\
    \    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75\
    \ = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long\
    \ sum79 = 0;\n    long sum80 = 0;\n    long sum\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpal9n93m7.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpal9n93m7.cpp:103:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpal9n93m7.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_sum = w;\n    int sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpyk0ig6oz: /tmp/tmpyk0ig6oz.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        if(q[i] != max) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpnj7h05yn: /tmp/tmpnj7h05yn.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_by5xw30: /tmp/tmp_by5xw30.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) {\n            max_weight =\
    \ sum;\n        }\n    }\n    return max_weight == w && std::equal(q.begin(),\
    \ q.end(), q.rbegin());\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if (sum > w) {\n            return false;\n\
    \        }\n        max_sum += w;\n    }\n    return max_sum == w;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphhcu15v3: /tmp/tmphhcu15v3.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n    long sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpc_iujnmv: /tmp/tmpc_iujnmv.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum =\
    \ std::max(max_sum, q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2rt3fz51: /tmp/tmp2rt3fz51.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long i\
    \ : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkjr0z2b_: /tmp/tmpkjr0z2b_.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long maxSum = sum;\n    for(long i = 0; i < q.size(); i++){\n    \
    \    maxSum -= q[i];\n        if(maxSum < w){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsqtq0502: /tmp/tmpsqtq0502.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (long i : q)\
    \ {\n        max_sum = std::max(max_sum, i);\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp8ffvng5b: /tmp/tmp8ffvng5b.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpgvehxpze: /tmp/tmpgvehxpze.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        sum += q[i];\n    }\n    if(sum < w){\n        return false;\n\
    \    }\n    long max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++){\n\
    \        if(q[i] > max_sum){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphpixu4rv: /tmp/tmphpixu4rv.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i : q) {\n\
    \        sum += i;\n        if (sum > max_weight) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpmkiahfnm: /tmp/tmpmkiahfnm.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpz2hqc_nn: /tmp/tmpz2hqc_nn.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmptm6h0qif: /tmp/tmptm6h0qif.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long max_sum = 0;\n    long sum = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpcvy7a3jt: /tmp/tmpcvy7a3jt.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n\
    \            max = q[i];\n        }\n    }\n    for(long i = 0; i < q.size();\
    \ i++) {\n        q[i] /= max;\n    }\n    long sum2 = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum2 += q[i] * q[i];\n    }\n    if(sum2 <= w)\
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvhvciv0v: /tmp/tmpvhvciv0v.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpazq3x3f4: /tmp/tmpazq3x3f4.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum = sum;\n  \
    \  for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum, q[i]);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuf_091td: /tmp/tmpuf_091td.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ maxSum = sum;\n    for(long i = 0; i < q.size(); i++) {\n        maxSum = std::max(maxSum,\
    \ q[i]);\n    }\n    return maxSum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpy228wyat: /tmp/tmpy228wyat.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    int max_weight = w;\n    int sum = 0;\n   \
    \ for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            return false;\n        }\n    }\n    return sum == max_weight;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp230eyvjn: /tmp/tmp230eyvjn.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_weight = w;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        if (q[i] > max_weight) {\n            max_weight = q[i];\n        }\n\
    \    }\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n   \
    \     long temp = max_weight - q[i];\n        if (temp > max_sum) {\n        \
    \    max_sum = temp;\n        }\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpm0x2beoe: /tmp/tmpm0x2beoe.cpp:43: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = w;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i] + w);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp2j4etvlg: /tmp/tmp2j4etvlg.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_kx7tr0k: /tmp/tmp_kx7tr0k.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n    }\n    if(sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})),\
    \ (5)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwivlds3y: /tmp/tmpwivlds3y.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto i : q)\
    \ {\n        max_sum = std::max(max_sum, i);\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpsq_31eq_: /tmp/tmpsq_31eq_.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long i\
    \ : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpe92_6aih: /tmp/tmpe92_6aih.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++) {\n        sum += q[i];\n        if(sum > w) {\n            return false;\n\
    \        }\n        max_sum += q[i];\n    }\n    return max_sum == w;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpjbhln07b: /tmp/tmpjbhln07b.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q) {\n   \
    \     sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n  \
    \      }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp0le7oxe8: /tmp/tmp0le7oxe8.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    // code here\n    long sum = 0;\n    long max_weight = 0;\n    long\
    \ max_weight_index = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n        if (sum > max_weight) {\n            max_weight = sum;\n \
    \           max_weight_index = i;\n        }\n    }\n    if (max_weight <= w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp0k2mc0aq: /tmp/tmp0k2mc0aq.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n\
    \    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n   \
    \ for (auto i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n   \
    \ if (sum > max_sum) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp2fuq2sa4: /tmp/tmp2fuq2sa4.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n    return\
    \ max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true));\n    assert(candidate((std::vector<long>({1, 2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({3, 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3})), (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp4klzk5gs: /tmp/tmp4klzk5gs.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2})), (5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1,\
    \ 2], 5) \u279E False \n// # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3],\
    \ 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long\
    \ w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum = w;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i]);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({3, 2, 3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, 2})), (5)) == (false));\n\
    \    assert(candidate((std::vector<long>({3})), (5)) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 3})), (1)) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({5})), (5)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpz0spek1b: /tmp/tmpz0spek1b.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 3})), (9)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
