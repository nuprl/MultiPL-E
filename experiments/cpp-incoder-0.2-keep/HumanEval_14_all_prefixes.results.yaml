language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppbcpi5xo: /tmp/tmppbcpi5xo.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ i++) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < prefixes.size(); j++) {\n            if (prefixes[j].length()\
    \ > prefix.length()) {\n                prefixes[j] = prefix;\n            }\n\
    \        }\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpo2mrsxq7: /tmp/tmpo2mrsxq7.cpp:26: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141212
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp78ps2lzs: /tmp/tmp78ps2lzs.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i] ==\
    \ string[0]) {\n            prefix = prefix + string[i];\n        } else {\n \
    \           prefixes.push_back(prefix);\n            prefix = string[i];\n   \
    \     }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpnfvsmvmh: /tmp/tmpnfvsmvmh.cpp:22: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        std::string\
    \ new_prefix = prefix + string[0];\n        prefixes.push_back(new_prefix);\n\
    \        prefix = new_prefix;\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpa202_nlr: /tmp/tmpa202_nlr.cpp:19: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppz5zi99j: /tmp/tmppz5zi99j.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp_jprw1ff: /tmp/tmp_jprw1ff.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq3nfv1uw: /tmp/tmpq3nfv1uw.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsghi7cj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdsghi7cj.cpp:11:69: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   11 |         prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                     ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb94qvatu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb94qvatu.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpf86smf12: /tmp/tmpf86smf12.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd12bqab8: /tmp/tmpd12bqab8.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2b12zvea: /tmp/tmp2b12zvea.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp8o4fzmkj: /tmp/tmp8o4fzmkj.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpyrmzk9y2: /tmp/tmpyrmzk9y2.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp4w7zj1tj: /tmp/tmp4w7zj1tj.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp78ps2lzs: /tmp/tmp78ps2lzs.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2b12zvea: /tmp/tmp2b12zvea.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    for (int j = i; j < string.length(); ++j) {\n      prefixes.push_back(string);\n\
    \    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpj94w4x4v: /tmp/tmpj94w4x4v.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmprc2bwmrx: /tmp/tmprc2bwmrx.cpp:22: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp8o4fzmkj: /tmp/tmp8o4fzmkj.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq3nfv1uw: /tmp/tmpq3nfv1uw.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    std::string prefix = prefixes[i\
    \ - 1];\n    prefixes.push_back(prefix + string[i]);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpb_7r1313: /tmp/tmpb_7r1313.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp8o4fzmkj: /tmp/tmp8o4fzmkj.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix += string[i];\n\
    \        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3dv50lzk: /tmp/tmp3dv50lzk.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(i, string[0]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gc97jqe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp8gc97jqe.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[0]));\n      |              \
    \                             ^\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string(i, string[i]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrde7w5h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpqrde7w5h.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[i]));\n      |              \
    \                             ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpon222442: /tmp/tmpon222442.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpeauqigb4: /tmp/tmpeauqigb4.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb94qvatu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb94qvatu.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpga22cpmd: /tmp/tmpga22cpmd.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rcvl7ho.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7rcvl7ho.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmp7rcvl7ho.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpf44cwj07: /tmp/tmpf44cwj07.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq3nfv1uw: /tmp/tmpq3nfv1uw.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.size(); i++) {\n        // Add prefix to list of prefixes\
    \ if current prefix is not empty\n        if (string[i] != \"\") {\n         \
    \   prefixes.push_back(string);\n            break;\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzsc7fw2u.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpzsc7fw2u.cpp:13:26: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   13 |     \
    \    if (string[i] != \"\") {\n      |                          ^~\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7hx_yir8: /tmp/tmp7hx_yir8.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb94qvatu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb94qvatu.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2b12zvea: /tmp/tmp2b12zvea.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Loop through all possible prefixes of string\n    for (int i = 1;\
    \ i < string.length(); i++) {\n        // If current prefix is not the empty string\n\
    \        if (string[i - 1] != \"\") {\n            // Add current prefix to list\
    \ of prefixes\n            prefixes.push_back(string[i - 1]);\n            //\
    \ Add all prefixes of current prefix to list of prefixes\n            prefixes.insert(prefixes.end(),\
    \ all_prefixes(string[i - 1]).begin(), all_prefixes(string[i - 1]).end());\n \
    \       }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnc3ngvzb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnc3ngvzb.cpp:13:30: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   13 |     \
    \    if (string[i - 1] != \"\") {\n      |                              ^~\n/tmp/tmpnc3ngvzb.cpp:15:45:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   15 |             prefixes.push_back(string[i - 1]);\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnc3ngvzb.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_"
  stdout: ''
  timestamp: 1660141205
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2b12zvea: /tmp/tmp2b12zvea.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rcvl7ho.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7rcvl7ho.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmp7rcvl7ho.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2b12zvea: /tmp/tmp2b12zvea.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmprc2bwmrx: /tmp/tmprc2bwmrx.cpp:22: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string[0] +\
    \ string[i]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8rk3uhj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpd8rk3uhj.cpp:10:45: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   10 |     prefixes.push_back(string[0] + string[i]);\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd8rk3uhj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |             "
  stdout: ''
  timestamp: 1660141205
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i) + string[i]);\n  }\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxuqx6ct.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpuxuqx6ct.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i) +\
    \ string[i]);\n      |                                                       \
    \          ^\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp78ps2lzs: /tmp/tmp78ps2lzs.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpyrmzk9y2: /tmp/tmpyrmzk9y2.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb94qvatu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb94qvatu.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp4w7zj1tj: /tmp/tmp4w7zj1tj.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.size(); i++) {\n        // Iterate through all possible suffixes\
    \ of the string\n        for (int j = i; j < string.size(); j++) {\n         \
    \   // Append the prefix and suffix to the list of prefixes\n            prefixes.push_back(string.substr(0,\
    \ i) + string.substr(i, j));\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpfsm5kl2z: /tmp/tmpfsm5kl2z.cpp:22: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpon222442: /tmp/tmpon222442.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    std::string prefix = prefixes[i\
    \ - 1];\n    std::string suffix = string.substr(i);\n    prefixes.push_back(prefix\
    \ + suffix);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp06etjn4z: /tmp/tmp06etjn4z.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2b12zvea: /tmp/tmp2b12zvea.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq3nfv1uw: /tmp/tmpq3nfv1uw.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (true) {\n        std::string\
    \ new_prefix = prefix;\n        new_prefix.insert(0, 1, 'a');\n        \n    \
    \    if (new_prefix == string) {\n            break;\n        }\n        \n  \
    \      prefixes.push_back(new_prefix);\n        prefix = new_prefix;\n    }\n\
    \    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141212
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7hx_yir8: /tmp/tmp7hx_yir8.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpf86smf12: /tmp/tmpf86smf12.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmprc2bwmrx: /tmp/tmprc2bwmrx.cpp:22: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppz5zi99j: /tmp/tmppz5zi99j.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb94qvatu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb94qvatu.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rcvl7ho.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7rcvl7ho.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmp7rcvl7ho.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_length = string.length();\n    \n    for (size_t i =\
    \ 1; i < prefix_length; ++i) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpt2z_tl90: /tmp/tmpt2z_tl90.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppz5zi99j: /tmp/tmppz5zi99j.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string[i\
    \ - 1]) + string[i]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45qx4042.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp45qx4042.cpp:10:44: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     prefixes.push_back(string(string[i -\
    \ 1]) + string[i]);\n      |                                            ^\n"
  stdout: ''
  timestamp: 1660141207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpk_3tg_ea: /tmp/tmpk_3tg_ea.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppbcpi5xo: /tmp/tmppbcpi5xo.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq3nfv1uw: /tmp/tmpq3nfv1uw.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.size() > 1) {\n    size_t pos = string.rfind(string[0]);\n    if (pos\
    \ == string::npos) {\n      prefixes.push_back(string);\n      break;\n    }\n\
    \    string prefix = string.substr(0, pos);\n    string suffix = string.substr(pos\
    \ + 1);\n    prefixes.push_back(prefix);\n    string = suffix;\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqesc55_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmppqesc55_.cpp:11:16: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   11 |     if (pos ==\
    \ string::npos) {\n      |                ^~~~~~\n/tmp/tmppqesc55_.cpp:15:11:\
    \ error: expected \u2018;\u2019 before \u2018prefix\u2019\n   15 |     string\
    \ prefix = string.substr(0, pos);\n      |           ^~~~~~~\n      |        \
    \   ;\n/tmp/tmppqesc55_.cpp:16:11: error: expected \u2018;\u2019 before \u2018\
    suffix\u2019\n   16 |     string suffix = string.substr(pos + 1);\n      |   \
    \        ^~~~~~~\n      |           ;\n/tmp/tmppqesc55_.cpp:17:24: error: \u2018\
    prefix\u2019 was not declared in this scope; did you mean \u2018prefixes\u2019\
    ?\n   17 |     prefixes.push_back(prefix);\n      |                        ^~~~~~\n\
    \      |                        prefixes\n/tmp/tmppqesc55_.cpp:18:14: error: \u2018\
    suffix\u2019 was not declared in this scope\n   18 |     string = suffix;\n  \
    \    |              ^~~~~~\n"
  stdout: ''
  timestamp: 1660141207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_length = string.length();\n    \n    while (prefix_length\
    \ > 1) {\n        size_t prefix_index = prefix_length - 1;\n        \n       \
    \ while (prefix_index > 0 && string[prefix_index - 1] == string[prefix_index])\
    \ {\n            prefix_index--;\n        }\n        \n        prefixes.push_back(string[prefix_index]);\n\
    \        prefix_length = prefix_index;\n    }\n    \n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3gofmsaf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp3gofmsaf.cpp:19:48: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   19 |         prefixes.push_back(string[prefix_index]);\n\
    \      |                                                ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3gofmsaf.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocat"
  stdout: ''
  timestamp: 1660141207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppbcpi5xo: /tmp/tmppbcpi5xo.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd12bqab8: /tmp/tmpd12bqab8.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb94qvatu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb94qvatu.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for(int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpgp9nriuv: /tmp/tmpgp9nriuv.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        std::string\
    \ new_prefix = prefix + string[0];\n        prefixes.push_back(new_prefix);\n\
    \        prefix = new_prefix;\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpa202_nlr: /tmp/tmpa202_nlr.cpp:19: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141213
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        std::string prefix\
    \ = prefixes[i - 1];\n        std::string suffix = string.substr(i);\n       \
    \ \n        prefixes.push_back(prefix + suffix);\n    }\n    \n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpe_03by6d: /tmp/tmpe_03by6d.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7hx_yir8: /tmp/tmp7hx_yir8.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpyrmzk9y2: /tmp/tmpyrmzk9y2.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq3nfv1uw: /tmp/tmpq3nfv1uw.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppbcpi5xo: /tmp/tmppbcpi5xo.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpeauqigb4: /tmp/tmpeauqigb4.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp_jprw1ff: /tmp/tmp_jprw1ff.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(i, string[0]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gc97jqe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp8gc97jqe.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[0]));\n      |              \
    \                             ^\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpeauqigb4: /tmp/tmpeauqigb4.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp78ps2lzs: /tmp/tmp78ps2lzs.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppz5zi99j: /tmp/tmppz5zi99j.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppz5zi99j: /tmp/tmppz5zi99j.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp1_0ev0vi: /tmp/tmp1_0ev0vi.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ ++i) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < i; ++j) {\n            prefix += string.substr(j, 1);\n\
    \        }\n        \n        prefixes.push_back(prefix);\n    }\n    \n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp34o1nlxb: /tmp/tmp34o1nlxb.cpp:26: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppbcpi5xo: /tmp/tmppbcpi5xo.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ ++i) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < prefixes.size(); ++j) {\n            prefixes[j] +=\
    \ prefix;\n        }\n    }\n    \n    return prefixes;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpyzbp2neb: /tmp/tmpyzbp2neb.cpp:24: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp5zkhpkp: /tmp/tmpp5zkhpkp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rcvl7ho.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7rcvl7ho.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmp7rcvl7ho.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  stdout: ''
  timestamp: 1660141205
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp78ps2lzs: /tmp/tmp78ps2lzs.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wt5q7rj: /tmp/tmp3wt5q7rj.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6x2tpmbz: /tmp/tmp6x2tpmbz.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpd007zd96: /tmp/tmpd007zd96.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({"a", "as", "asd", "asdf", "asdfg", "asdfgh"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141206
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141213
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnj1u206.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpwnj1u206.cpp:10:69: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |         prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                     ^\n"
  stdout: ''
  timestamp: 1660141208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141206
