name: HumanEval_14_all_prefixes
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpq1a41qto: /tmp/tmpq1a41qto.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmptjqhvbgo: /tmp/tmptjqhvbgo.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ i++) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < prefixes.size(); j++) {\n            if (prefixes[j].length()\
    \ > prefix.length()) {\n                prefixes[j] = prefix;\n            }\n\
    \        }\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmph0b4swt2: /tmp/tmph0b4swt2.cpp:26: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpuqty32be: /tmp/tmpuqty32be.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpebum_eet: /tmp/tmpebum_eet.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpq2mk13xl: /tmp/tmpq2mk13xl.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpmw91bbv2: /tmp/tmpmw91bbv2.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i] ==\
    \ string[0]) {\n            prefix = prefix + string[i];\n        } else {\n \
    \           prefixes.push_back(prefix);\n            prefix = string[i];\n   \
    \     }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjq5osf8y: /tmp/tmpjq5osf8y.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpqlgbjisw: /tmp/tmpqlgbjisw.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpug6yx5cl: /tmp/tmpug6yx5cl.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp5rhft67p: /tmp/tmp5rhft67p.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        std::string\
    \ new_prefix = prefix + string[0];\n        prefixes.push_back(new_prefix);\n\
    \        prefix = new_prefix;\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpfk8teslr: /tmp/tmpfk8teslr.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpf0c_dd_z: /tmp/tmpf0c_dd_z.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpgw5bynxi: /tmp/tmpgw5bynxi.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp04t84bbf: /tmp/tmp04t84bbf.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprrggkvax: /tmp/tmprrggkvax.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg_i3jxtv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpg_i3jxtv.cpp:11:69: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   11 |         prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6oqzvem3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6oqzvem3.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp45ohw3cu: /tmp/tmp45ohw3cu.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpu31eshqe: /tmp/tmpu31eshqe.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpa7xnyxrm: /tmp/tmpa7xnyxrm.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7b1u0y0d: /tmp/tmp7b1u0y0d.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpoig1zq1j: /tmp/tmpoig1zq1j.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp12c1sbbx: /tmp/tmp12c1sbbx.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1ha3rvzl: /tmp/tmp1ha3rvzl.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpbvpdxdj1: /tmp/tmpbvpdxdj1.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjksvk38v: /tmp/tmpjksvk38v.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphve32y1g: /tmp/tmphve32y1g.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpgvsnyjl7: /tmp/tmpgvsnyjl7.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3b91vjn0: /tmp/tmp3b91vjn0.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpw6k0tv2k: /tmp/tmpw6k0tv2k.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphrs6s9c0: /tmp/tmphrs6s9c0.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpfrq726rz: /tmp/tmpfrq726rz.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3tqpy2dj: /tmp/tmp3tqpy2dj.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpm1on9be4: /tmp/tmpm1on9be4.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp0jn0v09h: /tmp/tmp0jn0v09h.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpvwrp1lpe: /tmp/tmpvwrp1lpe.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    for (int j = i; j < string.length(); ++j) {\n      prefixes.push_back(string);\n\
    \    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp0qlv8lrv: /tmp/tmp0qlv8lrv.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_km387g5: /tmp/tmp_km387g5.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1zbhqzdf: /tmp/tmp1zbhqzdf.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpv_wfdyvi: /tmp/tmpv_wfdyvi.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpng29vddc: /tmp/tmpng29vddc.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpkvxr1yhe: /tmp/tmpkvxr1yhe.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpuakmwx4a: /tmp/tmpuakmwx4a.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    std::string prefix = prefixes[i\
    \ - 1];\n    prefixes.push_back(prefix + string[i]);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpemkshbn9: /tmp/tmpemkshbn9.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3sayz6wn: /tmp/tmp3sayz6wn.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpylxx6638: /tmp/tmpylxx6638.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix += string[i];\n\
    \        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp4va1ejeg: /tmp/tmp4va1ejeg.cpp:21: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(i, string[0]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmrayubb1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpmrayubb1.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[0]));\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string(i, string[i]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi2617qfo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpi2617qfo.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[i]));\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprc5kr7x2: /tmp/tmprc5kr7x2.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7zslwmmf: /tmp/tmp7zslwmmf.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmporeq86t5: /tmp/tmporeq86t5.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpx4r_cdq4: /tmp/tmpx4r_cdq4.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpw__ra8p1: /tmp/tmpw__ra8p1.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2oit4awp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2oit4awp.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyvlhccy7: /tmp/tmpyvlhccy7.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5945hzt7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp5945hzt7.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmp5945hzt7.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpfb15v284: /tmp/tmpfb15v284.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpr81wozpb: /tmp/tmpr81wozpb.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.size(); i++) {\n        // Add prefix to list of prefixes\
    \ if current prefix is not empty\n        if (string[i] != \"\") {\n         \
    \   prefixes.push_back(string);\n            break;\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb3vftgdc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb3vftgdc.cpp:13:26: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   13 |     \
    \    if (string[i] != \"\") {\n      |                          ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphyd7_r1r: /tmp/tmphyd7_r1r.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1_wbxfsm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp1_wbxfsm.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_bdvwsti: /tmp/tmp_bdvwsti.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpsr5zbc3k: /tmp/tmpsr5zbc3k.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Loop through all possible prefixes of string\n    for (int i = 1;\
    \ i < string.length(); i++) {\n        // If current prefix is not the empty string\n\
    \        if (string[i - 1] != \"\") {\n            // Add current prefix to list\
    \ of prefixes\n            prefixes.push_back(string[i - 1]);\n            //\
    \ Add all prefixes of current prefix to list of prefixes\n            prefixes.insert(prefixes.end(),\
    \ all_prefixes(string[i - 1]).begin(), all_prefixes(string[i - 1]).end());\n \
    \       }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyp1zuttk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpyp1zuttk.cpp:13:30: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   13 |     \
    \    if (string[i - 1] != \"\") {\n      |                              ^~\n/tmp/tmpyp1zuttk.cpp:15:45:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   15 |             prefixes.push_back(string[i - 1]);\n      |            \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpyp1zuttk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::bas"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpxwvzgxh_: /tmp/tmpxwvzgxh_.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpmbrioaqv: /tmp/tmpmbrioaqv.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpk9txb9gq: /tmp/tmpk9txb9gq.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6boa_tm6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6boa_tm6.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmp6boa_tm6.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplh928lrs: /tmp/tmplh928lrs.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpa_41e622: /tmp/tmpa_41e622.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphma_75wg: /tmp/tmphma_75wg.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp6ozkisan: /tmp/tmp6ozkisan.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string[0] +\
    \ string[i]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbl7wh5pt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbl7wh5pt.cpp:10:45: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   10 |     prefixes.push_back(string[0] + string[i]);\n      |            \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpbl7wh5pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i) + string[i]);\n  }\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmeezsrs4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpmeezsrs4.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i) +\
    \ string[i]);\n      |                                                       \
    \          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpy4pyftge: /tmp/tmpy4pyftge.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3fca5i6l: /tmp/tmp3fca5i6l.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxka3lnxx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpxka3lnxx.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp4lmgiqju: /tmp/tmp4lmgiqju.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.size(); i++) {\n        // Iterate through all possible suffixes\
    \ of the string\n        for (int j = i; j < string.size(); j++) {\n         \
    \   // Append the prefix and suffix to the list of prefixes\n            prefixes.push_back(string.substr(0,\
    \ i) + string.substr(i, j));\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpxrrfl7u5: /tmp/tmpxrrfl7u5.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpepdrdt60: /tmp/tmpepdrdt60.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpk9reyzft: /tmp/tmpk9reyzft.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2jfpdmrl: /tmp/tmp2jfpdmrl.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    std::string prefix = prefixes[i\
    \ - 1];\n    std::string suffix = string.substr(i);\n    prefixes.push_back(prefix\
    \ + suffix);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprws2rb46: /tmp/tmprws2rb46.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpqwnijsve: /tmp/tmpqwnijsve.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp8zr1e513: /tmp/tmp8zr1e513.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpslj4ar27: /tmp/tmpslj4ar27.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (true) {\n        std::string\
    \ new_prefix = prefix;\n        new_prefix.insert(0, 1, 'a');\n        \n    \
    \    if (new_prefix == string) {\n            break;\n        }\n        \n  \
    \      prefixes.push_back(new_prefix);\n        prefix = new_prefix;\n    }\n\
    \    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3hk3t2h5: /tmp/tmp3hk3t2h5.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpn3if9p4e: /tmp/tmpn3if9p4e.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpek4gh0jy: /tmp/tmpek4gh0jy.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpiy_m97x2: /tmp/tmpiy_m97x2.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpwb6q9idz: /tmp/tmpwb6q9idz.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpayduec6y: /tmp/tmpayduec6y.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpwgta_kbg: /tmp/tmpwgta_kbg.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3_79xuk6: /tmp/tmp3_79xuk6.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmppj0ru_97: /tmp/tmppj0ru_97.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_8zfxohl: /tmp/tmp_8zfxohl.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3tk92q6_: /tmp/tmp3tk92q6_.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ip1f62u.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0ip1f62u.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnz62dnpl.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnz62dnpl.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmpnz62dnpl.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_length = string.length();\n    \n    for (size_t i =\
    \ 1; i < prefix_length; ++i) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplvfwaosw: /tmp/tmplvfwaosw.cpp:20: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpmj9vnv97: /tmp/tmpmj9vnv97.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string[i\
    \ - 1]) + string[i]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwky1wd25.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpwky1wd25.cpp:10:44: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     prefixes.push_back(string(string[i -\
    \ 1]) + string[i]);\n      |                                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpkohe9ql6: /tmp/tmpkohe9ql6.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7n9yf0mr: /tmp/tmp7n9yf0mr.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpww9gjunj: /tmp/tmpww9gjunj.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpnn36n2st: /tmp/tmpnn36n2st.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjjzjtw6c: /tmp/tmpjjzjtw6c.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.size() > 1) {\n    size_t pos = string.rfind(string[0]);\n    if (pos\
    \ == string::npos) {\n      prefixes.push_back(string);\n      break;\n    }\n\
    \    string prefix = string.substr(0, pos);\n    string suffix = string.substr(pos\
    \ + 1);\n    prefixes.push_back(prefix);\n    string = suffix;\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw_pfbyvj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpw_pfbyvj.cpp:11:16: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   11 |     if (pos ==\
    \ string::npos) {\n      |                ^~~~~~\n/tmp/tmpw_pfbyvj.cpp:15:11:\
    \ error: expected \u2018;\u2019 before \u2018prefix\u2019\n   15 |     string\
    \ prefix = string.substr(0, pos);\n      |           ^~~~~~~\n      |        \
    \   ;\n/tmp/tmpw_pfbyvj.cpp:16:11: error: expected \u2018;\u2019 before \u2018\
    suffix\u2019\n   16 |     string suffix = string.substr(pos + 1);\n      |   \
    \        ^~~~~~~\n      |           ;\n/tmp/tmpw_pfbyvj.cpp:17:24: error: \u2018\
    prefix\u2019 was not declared in this scope; did you mean \u2018prefixes\u2019\
    ?\n   17 |     prefixes.push_back(prefix);\n      |                        ^~~~~~\n\
    \      |                        prefixes\n/tmp/tmpw_pfbyvj.cpp:18:14: error: \u2018\
    suffix\u2019 was not declared in this scope\n   18 |     string = suffix;\n  \
    \    |              ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpelzd_dcz: /tmp/tmpelzd_dcz.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_length = string.length();\n    \n    while (prefix_length\
    \ > 1) {\n        size_t prefix_index = prefix_length - 1;\n        \n       \
    \ while (prefix_index > 0 && string[prefix_index - 1] == string[prefix_index])\
    \ {\n            prefix_index--;\n        }\n        \n        prefixes.push_back(string[prefix_index]);\n\
    \        prefix_length = prefix_index;\n    }\n    \n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjiqcwt4q.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpjiqcwt4q.cpp:19:48: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   19 |         prefixes.push_back(string[prefix_index]);\n\
    \      |                                                ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpjiqcwt4q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known co"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_gjyaffd: /tmp/tmp_gjyaffd.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpe4m55ow9: /tmp/tmpe4m55ow9.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpiuzol4qk: /tmp/tmpiuzol4qk.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp73gfzo0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpp73gfzo0.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for(int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpuvtnf914: /tmp/tmpuvtnf914.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        std::string\
    \ new_prefix = prefix + string[0];\n        prefixes.push_back(new_prefix);\n\
    \        prefix = new_prefix;\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpmaxmvfa2: /tmp/tmpmaxmvfa2.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        std::string prefix\
    \ = prefixes[i - 1];\n        std::string suffix = string.substr(i);\n       \
    \ \n        prefixes.push_back(prefix + suffix);\n    }\n    \n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpt__8qi59: /tmp/tmpt__8qi59.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp07isd_cm: /tmp/tmp07isd_cm.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp18lft_rq: /tmp/tmp18lft_rq.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpje5_kgen: /tmp/tmpje5_kgen.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpcnlj0po7: /tmp/tmpcnlj0po7.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjuhq_tf2: /tmp/tmpjuhq_tf2.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpa8io4q2p: /tmp/tmpa8io4q2p.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmppm71sqqn: /tmp/tmppm71sqqn.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpx2upr_c2: /tmp/tmpx2upr_c2.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyolbz89u: /tmp/tmpyolbz89u.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpv8arse5i: /tmp/tmpv8arse5i.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpox_rtxvy: /tmp/tmpox_rtxvy.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(i, string[0]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvv764kvb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpvv764kvb.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[0]));\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjvay9nmw: /tmp/tmpjvay9nmw.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpths6bgnh: /tmp/tmpths6bgnh.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpdbqydryi: /tmp/tmpdbqydryi.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpvw76tgxl: /tmp/tmpvw76tgxl.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpry48vl3c: /tmp/tmpry48vl3c.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp39pxnb7x: /tmp/tmp39pxnb7x.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ ++i) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < i; ++j) {\n            prefix += string.substr(j, 1);\n\
    \        }\n        \n        prefixes.push_back(prefix);\n    }\n    \n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpcxgs83u7: /tmp/tmpcxgs83u7.cpp:26: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpglj2oftz: /tmp/tmpglj2oftz.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpq4i_u97z: /tmp/tmpq4i_u97z.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ ++i) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < prefixes.size(); ++j) {\n            prefixes[j] +=\
    \ prefix;\n        }\n    }\n    \n    return prefixes;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp5xce61qq: /tmp/tmp5xce61qq.cpp:24: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpkzhmiilo: /tmp/tmpkzhmiilo.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1x2g5n6p: /tmp/tmp1x2g5n6p.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvyv38v0z.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpvyv38v0z.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmpvyv38v0z.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp0kyoequ8: /tmp/tmp0kyoequ8.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp5wbovohj: /tmp/tmp5wbovohj.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7ibk1r4a: /tmp/tmp7ibk1r4a.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpztkguqtj: /tmp/tmpztkguqtj.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp5tn8_efj: /tmp/tmp5tn8_efj.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpbqzxu46r: /tmp/tmpbqzxu46r.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpy1lphiwe: /tmp/tmpy1lphiwe.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2123jufm: /tmp/tmp2123jufm.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplj9kzwm5: /tmp/tmplj9kzwm5.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3ef82bj1: /tmp/tmp3ef82bj1.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9eqwl1mv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9eqwl1mv.cpp:10:69: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |         prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
