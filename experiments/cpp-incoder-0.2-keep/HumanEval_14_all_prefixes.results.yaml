name: HumanEval_14_all_prefixes
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpcb581zgk: /tmp/tmpcb581zgk.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2tqfwhna: /tmp/tmp2tqfwhna.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ i++) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < prefixes.size(); j++) {\n            if (prefixes[j].length()\
    \ > prefix.length()) {\n                prefixes[j] = prefix;\n            }\n\
    \        }\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpwm0h8iy3: /tmp/tmpwm0h8iy3.cpp:26: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplrk67vxx: /tmp/tmplrk67vxx.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpeef1qc7v: /tmp/tmpeef1qc7v.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpq40dcqv4: /tmp/tmpq40dcqv4.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpekcf4lsb: /tmp/tmpekcf4lsb.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i] ==\
    \ string[0]) {\n            prefix = prefix + string[i];\n        } else {\n \
    \           prefixes.push_back(prefix);\n            prefix = string[i];\n   \
    \     }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_4l5_yke: /tmp/tmp_4l5_yke.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphwc4hrbl: /tmp/tmphwc4hrbl.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpco6apqx5: /tmp/tmpco6apqx5.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpvak6tabb: /tmp/tmpvak6tabb.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        std::string\
    \ new_prefix = prefix + string[0];\n        prefixes.push_back(new_prefix);\n\
    \        prefix = new_prefix;\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpoyjfsq5e: /tmp/tmpoyjfsq5e.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpgw3u7tno: /tmp/tmpgw3u7tno.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpp3eec8_5: /tmp/tmpp3eec8_5.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1odqf18r: /tmp/tmp1odqf18r.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpuna7_c4n: /tmp/tmpuna7_c4n.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbsiou2a_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbsiou2a_.cpp:11:69: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   11 |         prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gvakoyg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp5gvakoyg.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp479y1xhm: /tmp/tmp479y1xhm.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpkr9m8_o2: /tmp/tmpkr9m8_o2.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpbsakpxrg: /tmp/tmpbsakpxrg.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7er10icj: /tmp/tmp7er10icj.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2lq04b_m: /tmp/tmp2lq04b_m.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmppsms9ly_: /tmp/tmppsms9ly_.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjr9m9kk1: /tmp/tmpjr9m9kk1.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpveuo_gcq: /tmp/tmpveuo_gcq.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpky1cfbtq: /tmp/tmpky1cfbtq.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpatfeaj54: /tmp/tmpatfeaj54.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1tlr6ggv: /tmp/tmp1tlr6ggv.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpzb4gysjy: /tmp/tmpzb4gysjy.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp8epm2afm: /tmp/tmp8epm2afm.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprd6qnzb0: /tmp/tmprd6qnzb0.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpwuzu1dvk: /tmp/tmpwuzu1dvk.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpef74ellx: /tmp/tmpef74ellx.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp055k7z3d: /tmp/tmp055k7z3d.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpa4jdcj9g: /tmp/tmpa4jdcj9g.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpekxtc__d: /tmp/tmpekxtc__d.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    for (int j = i; j < string.length(); ++j) {\n      prefixes.push_back(string);\n\
    \    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2sr_7s_7: /tmp/tmp2sr_7s_7.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpsioqzcig: /tmp/tmpsioqzcig.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyzyxif5s: /tmp/tmpyzyxif5s.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpqp54dc7g: /tmp/tmpqp54dc7g.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjb_fssvg: /tmp/tmpjb_fssvg.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpk081ef5c: /tmp/tmpk081ef5c.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpmwe8_gav: /tmp/tmpmwe8_gav.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    std::string prefix = prefixes[i\
    \ - 1];\n    prefixes.push_back(prefix + string[i]);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpogyesztt: /tmp/tmpogyesztt.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpqmdad8do: /tmp/tmpqmdad8do.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2_fxc6c3: /tmp/tmp2_fxc6c3.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix += string[i];\n\
    \        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpzj57gspb: /tmp/tmpzj57gspb.cpp:21: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(i, string[0]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpki2fbyxk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpki2fbyxk.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[0]));\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string(i, string[i]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp69zzz9lr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp69zzz9lr.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[i]));\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3hgeq033: /tmp/tmp3hgeq033.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpd8kc78kf: /tmp/tmpd8kc78kf.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpq9zcclr0: /tmp/tmpq9zcclr0.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpnlw_qzpw: /tmp/tmpnlw_qzpw.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjewmx29o: /tmp/tmpjewmx29o.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk7qjli9g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpk7qjli9g.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpu4fzsub9: /tmp/tmpu4fzsub9.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvyxwozaa.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpvyxwozaa.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmpvyxwozaa.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpeux2ab72: /tmp/tmpeux2ab72.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpcpz2dxr6: /tmp/tmpcpz2dxr6.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.size(); i++) {\n        // Add prefix to list of prefixes\
    \ if current prefix is not empty\n        if (string[i] != \"\") {\n         \
    \   prefixes.push_back(string);\n            break;\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp3nlgkbz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpp3nlgkbz.cpp:13:26: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   13 |     \
    \    if (string[i] != \"\") {\n      |                          ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpto8gblrl: /tmp/tmpto8gblrl.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpabg_ds2x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpabg_ds2x.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphm5h2c8q: /tmp/tmphm5h2c8q.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpvql1yh7s: /tmp/tmpvql1yh7s.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Loop through all possible prefixes of string\n    for (int i = 1;\
    \ i < string.length(); i++) {\n        // If current prefix is not the empty string\n\
    \        if (string[i - 1] != \"\") {\n            // Add current prefix to list\
    \ of prefixes\n            prefixes.push_back(string[i - 1]);\n            //\
    \ Add all prefixes of current prefix to list of prefixes\n            prefixes.insert(prefixes.end(),\
    \ all_prefixes(string[i - 1]).begin(), all_prefixes(string[i - 1]).end());\n \
    \       }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt_tk06uy.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpt_tk06uy.cpp:13:30: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   13 |     \
    \    if (string[i - 1] != \"\") {\n      |                              ^~\n/tmp/tmpt_tk06uy.cpp:15:45:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   15 |             prefixes.push_back(string[i - 1]);\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpt_tk06uy.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpt_tk06uy.cpp:17:71: error: could not convert \u2018string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)(i\
    \ - 1)))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   17 |             prefixes.insert(prefixes.end(), all_prefixes(string[i -\
    \ 1]).begin(), all_prefixes(string[i - 1]).end());\n      |                  \
    \                                                     ^\n      |             \
    \                                                          |\n      |        \
    \                                                               __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n/tmp/tmpt_tk06uy.cpp:17:108: error: could not\
    \ convert \u2018string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)(i\
    \ - 1)))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   17 |             prefixes.insert(prefixes.end(), all_prefixes(string[i -\
    \ 1]).begin(), all_prefixes(string[i - 1]).end());\n      |                  \
    \                                                                            \
    \              ^\n      |                                                    \
    \                                                        |\n      |          \
    \                                                                            \
    \                      __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\
    \ {aka char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpvad6dq3p: /tmp/tmpvad6dq3p.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_adp4_ob: /tmp/tmp_adp4_ob.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpth7hmo5l: /tmp/tmpth7hmo5l.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa8d8dty6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpa8d8dty6.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmpa8d8dty6.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_in83oql: /tmp/tmp_in83oql.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpttx8ayw9: /tmp/tmpttx8ayw9.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmptj4o145h: /tmp/tmptj4o145h.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpnyyj4jyo: /tmp/tmpnyyj4jyo.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string[0] +\
    \ string[i]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphn47u_6m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmphn47u_6m.cpp:10:45: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   10 |     prefixes.push_back(string[0] + string[i]);\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmphn47u_6m.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i) + string[i]);\n  }\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ykwnwcg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp1ykwnwcg.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i) +\
    \ string[i]);\n      |                                                       \
    \          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp9sm0gc1q: /tmp/tmp9sm0gc1q.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpl7umw10c: /tmp/tmpl7umw10c.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph1epywk2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmph1epywk2.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpo0vtn1a5: /tmp/tmpo0vtn1a5.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.size(); i++) {\n        // Iterate through all possible suffixes\
    \ of the string\n        for (int j = i; j < string.size(); j++) {\n         \
    \   // Append the prefix and suffix to the list of prefixes\n            prefixes.push_back(string.substr(0,\
    \ i) + string.substr(i, j));\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmph7490ts7: /tmp/tmph7490ts7.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpf7qgna2p: /tmp/tmpf7qgna2p.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprpn1d2cf: /tmp/tmprpn1d2cf.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7lnfx8zq: /tmp/tmp7lnfx8zq.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    std::string prefix = prefixes[i\
    \ - 1];\n    std::string suffix = string.substr(i);\n    prefixes.push_back(prefix\
    \ + suffix);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpr0wbqus2: /tmp/tmpr0wbqus2.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphvnjf8xu: /tmp/tmphvnjf8xu.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp4t1025di: /tmp/tmp4t1025di.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2i6kbbrf: /tmp/tmp2i6kbbrf.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (true) {\n        std::string\
    \ new_prefix = prefix;\n        new_prefix.insert(0, 1, 'a');\n        \n    \
    \    if (new_prefix == string) {\n            break;\n        }\n        \n  \
    \      prefixes.push_back(new_prefix);\n        prefix = new_prefix;\n    }\n\
    \    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpja_3nqno: /tmp/tmpja_3nqno.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphwnk4a5t: /tmp/tmphwnk4a5t.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplh6t12r9: /tmp/tmplh6t12r9.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpy9lry50p: /tmp/tmpy9lry50p.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp9m054tcf: /tmp/tmp9m054tcf.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp8ufuh9ym: /tmp/tmp8ufuh9ym.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = prefix + string[i];\n        } else {\n            prefixes.push_back(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpm5r4ikns: /tmp/tmpm5r4ikns.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp50u8ubvi: /tmp/tmp50u8ubvi.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmptw9xbr04: /tmp/tmptw9xbr04.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprcbyhl9d: /tmp/tmprcbyhl9d.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpz4a42hzr: /tmp/tmpz4a42hzr.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfd1rmhb1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfd1rmhb1.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxxi2m2p.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpuxxi2m2p.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmpuxxi2m2p.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_length = string.length();\n    \n    for (size_t i =\
    \ 1; i < prefix_length; ++i) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpasador2x: /tmp/tmpasador2x.cpp:20: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpopy3cusj: /tmp/tmpopy3cusj.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string[i\
    \ - 1]) + string[i]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbs1_l5u4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbs1_l5u4.cpp:10:44: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     prefixes.push_back(string(string[i -\
    \ 1]) + string[i]);\n      |                                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpc6pcjd63: /tmp/tmpc6pcjd63.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_sfqmmak: /tmp/tmp_sfqmmak.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpzg1mi1mt: /tmp/tmpzg1mi1mt.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpgbceha5b: /tmp/tmpgbceha5b.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpye8e56av: /tmp/tmpye8e56av.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.size() > 1) {\n    size_t pos = string.rfind(string[0]);\n    if (pos\
    \ == string::npos) {\n      prefixes.push_back(string);\n      break;\n    }\n\
    \    string prefix = string.substr(0, pos);\n    string suffix = string.substr(pos\
    \ + 1);\n    prefixes.push_back(prefix);\n    string = suffix;\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpovfn0vpm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpovfn0vpm.cpp:11:16: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   11 |     if (pos ==\
    \ string::npos) {\n      |                ^~~~~~\n/tmp/tmpovfn0vpm.cpp:15:11:\
    \ error: expected \u2018;\u2019 before \u2018prefix\u2019\n   15 |     string\
    \ prefix = string.substr(0, pos);\n      |           ^~~~~~~\n      |        \
    \   ;\n/tmp/tmpovfn0vpm.cpp:16:11: error: expected \u2018;\u2019 before \u2018\
    suffix\u2019\n   16 |     string suffix = string.substr(pos + 1);\n      |   \
    \        ^~~~~~~\n      |           ;\n/tmp/tmpovfn0vpm.cpp:17:24: error: \u2018\
    prefix\u2019 was not declared in this scope; did you mean \u2018prefixes\u2019\
    ?\n   17 |     prefixes.push_back(prefix);\n      |                        ^~~~~~\n\
    \      |                        prefixes\n/tmp/tmpovfn0vpm.cpp:18:14: error: \u2018\
    suffix\u2019 was not declared in this scope\n   18 |     string = suffix;\n  \
    \    |              ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpf_1l2ph2: /tmp/tmpf_1l2ph2.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_length = string.length();\n    \n    while (prefix_length\
    \ > 1) {\n        size_t prefix_index = prefix_length - 1;\n        \n       \
    \ while (prefix_index > 0 && string[prefix_index - 1] == string[prefix_index])\
    \ {\n            prefix_index--;\n        }\n        \n        prefixes.push_back(string[prefix_index]);\n\
    \        prefix_length = prefix_index;\n    }\n    \n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2a_zgwul.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2a_zgwul.cpp:19:48: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   19 |         prefixes.push_back(string[prefix_index]);\n\
    \      |                                                ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2a_zgwul.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpge7pasds: /tmp/tmpge7pasds.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplnnxavhb: /tmp/tmplnnxavhb.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpg1lw188j: /tmp/tmpg1lw188j.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_17eoue.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb_17eoue.cpp:10:65: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |     prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for(int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpszrcsorc: /tmp/tmpszrcsorc.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        std::string\
    \ new_prefix = prefix + string[0];\n        prefixes.push_back(new_prefix);\n\
    \        prefix = new_prefix;\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3ygte736: /tmp/tmp3ygte736.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        std::string prefix\
    \ = prefixes[i - 1];\n        std::string suffix = string.substr(i);\n       \
    \ \n        prefixes.push_back(prefix + suffix);\n    }\n    \n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpil7t1gwz: /tmp/tmpil7t1gwz.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp8l59pf2r: /tmp/tmp8l59pf2r.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjl6up77l: /tmp/tmpjl6up77l.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmppakqmao3: /tmp/tmppakqmao3.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpttkocvsg: /tmp/tmpttkocvsg.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpa3l5tukr: /tmp/tmpa3l5tukr.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyfg0yfjz: /tmp/tmpyfg0yfjz.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpelitfk2d: /tmp/tmpelitfk2d.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjn5g1kg4: /tmp/tmpjn5g1kg4.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_0_igqng: /tmp/tmp_0_igqng.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp9k5wrzsh: /tmp/tmp9k5wrzsh.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3uu5xyfl: /tmp/tmp3uu5xyfl.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(i, string[0]));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5ryv2xg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpq5ryv2xg.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[0]));\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpbc_8hb5n: /tmp/tmpbc_8hb5n.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyv3adyhe: /tmp/tmpyv3adyhe.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpi0lic0db: /tmp/tmpi0lic0db.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        prefixes.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp0ret1uz6: /tmp/tmp0ret1uz6.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmppn_rscu_: /tmp/tmppn_rscu_.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp18vmw9tf: /tmp/tmp18vmw9tf.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ ++i) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < i; ++j) {\n            prefix += string.substr(j, 1);\n\
    \        }\n        \n        prefixes.push_back(prefix);\n    }\n    \n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp8dd1g83c: /tmp/tmp8dd1g83c.cpp:26: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp6hddzvgb: /tmp/tmp6hddzvgb.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2ywec6mt: /tmp/tmp2ywec6mt.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t len = string.length();\n    \n    for (size_t i = 1; i < len;\
    \ ++i) {\n        std::string prefix = string.substr(0, i);\n        \n      \
    \  for (size_t j = 0; j < prefixes.size(); ++j) {\n            prefixes[j] +=\
    \ prefix;\n        }\n    }\n    \n    return prefixes;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpoqkd_u2j: /tmp/tmpoqkd_u2j.cpp:24: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpx5mqwoic: /tmp/tmpx5mqwoic.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpju6uuqs7: /tmp/tmpju6uuqs7.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkdw9haj4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpkdw9haj4.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |     string prefix = string.substr(0,\
    \ string.length() - 1);\n      |           ^~~~~~~\n      |           ;\n/tmp/tmpkdw9haj4.cpp:11:24:\
    \ error: \u2018prefix\u2019 was not declared in this scope; did you mean \u2018\
    prefixes\u2019?\n   11 |     prefixes.push_back(prefix);\n      |            \
    \            ^~~~~~\n      |                        prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmppje086a4: /tmp/tmppje086a4.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpwnbe70f1: /tmp/tmpwnbe70f1.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpxyjo5_2a: /tmp/tmpxyjo5_2a.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplt3kx5ve: /tmp/tmplt3kx5ve.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprzc9zbzv: /tmp/tmprzc9zbzv.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp6pff_iyc: /tmp/tmp6pff_iyc.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpxuzldd41: /tmp/tmpxuzldd41.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp0ob3ahqu: /tmp/tmp0ob3ahqu.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); ++i) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp73btm169: /tmp/tmp73btm169.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpajld7jtf: /tmp/tmpajld7jtf.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n    string += string[i];\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmymt_g1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpsmymt_g1.cpp:10:69: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   10 |         prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \      |                                                                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    for (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix +\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
