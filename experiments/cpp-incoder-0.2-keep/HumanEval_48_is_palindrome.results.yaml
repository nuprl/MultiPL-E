name: HumanEval_48_is_palindrome
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reverse(text.rbegin(),\
    \ text.rend());\n    return text == reverse;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    if (len <= 1)\n        return true;\n    int mid = len / 2;\n    for (int\
    \ i = 0; i < mid; i++) {\n        if (text[i] != text[len - 1 - i])\n        \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool isPalindrome = true;\n\
    \    int length = text.length();\n    for (int i = 0; i < length / 2; i++) {\n\
    \        if (text[i] != text[length - i - 1]) {\n            isPalindrome = false;\n\
    \            break;\n        }\n    }\n    return isPalindrome;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text.size() < 2)\n \
    \       return true;\n    std::string reverse = text;\n    reverse.resize(text.size()\
    \ / 2);\n    std::reverse(reverse.begin(), reverse.end());\n    return text ==\
    \ reverse;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpetzdpnri: /tmp/tmpetzdpnri.cpp:23: int main(): Assertion `candidate((\"\
    aba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len-1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text == \"\") {\n  \
    \      return true;\n    }\n    int len = text.length();\n    int mid = len /\
    \ 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   if (n < 2) return true;\n    int mid = n / 2;\n    for (int i = 0; i < mid;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reverse(text.rbegin(),\
    \ text.rend());\n    return text == reverse;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    if (len <= 1) return true;\n    int mid = len / 2;\n    for (int i = 0; i\
    \ < mid; i++) {\n        if (text[i] != text[len - i - 1]) return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    bool isPalindrome = true;\n    for (int i = 0; i\
    \ < mid; i++) {\n        if (text[i] != text[len - i - 1]) {\n            isPalindrome\
    \ = false;\n            break;\n        }\n    }\n    return isPalindrome;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool is_palindrome = true;\n\
    \    int length = text.length();\n    int i = 0;\n    int j = length - 1;\n  \
    \  while (i < j) {\n        if (text[i] != text[j]) {\n            is_palindrome\
    \ = false;\n            break;\n        }\n        i++;\n        j--;\n    }\n\
    \    return is_palindrome;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len-1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text.size() < 2)\n \
    \       return true;\n    int i = 0;\n    int j = text.size() - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j])\n            return false;\n    \
    \    i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    bool flag = true;\n    for (int i = 0; i < mid; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int\
    \ j = len - 1;\n    while (i < mid) {\n        if (text[i] != text[j]) {\n   \
    \         return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text.size() < 2) return\
    \ true;\n    char first = text[0];\n    char last = text[0];\n    for (int i =\
    \ 1; i < text.size(); i++) {\n        if (text[i] != first) {\n            return\
    \ false;\n        }\n        first = text[i];\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"))\
    \ == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuetfycyk: /tmp/tmpuetfycyk.cpp:27: int main(): Assertion `candidate((\"\
    aba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int\
    \ j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            flag = false;\n            break;\n     \
    \   }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_jfd8w_a: /tmp/tmp_jfd8w_a.cpp:271: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i <\
    \ j) {\n        if (text[i] != text[j]) {\n            return false;\n       \
    \ }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text == \"\") {\n  \
    \      return true;\n    }\n    int length = text.length();\n    for (int i =\
    \ 0; i < length / 2; i++) {\n        if (text[i] != text[length - i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Your code goes here\n\
    \    int n = text.size();\n    int mid = n/2;\n    for(int i=0;i<n;i++){\n   \
    \     if(text[i]!=text[mid]){\n            return false;\n        }\n        mid--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq8nfcn8e: /tmp/tmpq8nfcn8e.cpp:27: int main(): Assertion `candidate((\"\
    aba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n/2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text.size() < 2)\n \
    \       return true;\n    int len = text.size();\n    int mid = len / 2;\n   \
    \ for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - 1 - i])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            flag = false;\n            break;\n     \
    \   }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reverse(text.rbegin(),\
    \ text.rend());\n    return text == reverse;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len-1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string rev;\n    rev.reserve(text.size());\n\
    \    for (auto &c : text) {\n        rev.push_back(c);\n    }\n    return std::equal(rev.begin(),\
    \ rev.end(), rev.rbegin());\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    \n    for(int i=0;i<text.size();i++){\n        if(text[i]!=text[(text.size()-1)-i]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    int len = text.length();\n    int mid = len / 2;\n    bool flag = true;\n\
    \    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - i - 1])\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reverse(text.rbegin(),\
    \ text.rend());\n    return text == reverse;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Your code goes here\n\
    \    int len = text.length();\n    int mid = len / 2;\n    int rev = 0;\n    for\
    \ (int i = 0; i < mid; i++) {\n        rev = (rev * 10) + (text[i] - '0');\n \
    \   }\n    if (rev == text[mid]) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpks76fvzg: /tmp/tmpks76fvzg.cpp:28: int main(): Assertion `candidate((\"\
    aba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string rev;\n    rev.reserve(text.size());\n\
    \    for (auto &c : text) {\n        rev.push_back(c);\n    }\n    rev.resize(text.size());\n\
    \    rev.reverse_copy(rev.begin(), rev.end());\n    return text == rev;\n}\nint\
    \ main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"))\
    \ == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_638dx4.cpp: In function \u2018bool is_palindrome(std::string)\u2019\
    :\n/tmp/tmpk_638dx4.cpp:19:9: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018reverse_copy\u2019\
    \n   19 |     rev.reverse_copy(rev.begin(), rev.end());\n      |         ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    if (len <= 1)\n        return true;\n    int mid = len / 2;\n    for (int\
    \ i = 0; i < mid; i++)\n        if (text[i] != text[len - 1 - i])\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reverse(text.rbegin(),\
    \ text.rend());\n    return text == reverse;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text.size() < 2)\n \
    \       return true;\n    std::string revText = text;\n    revText.erase(revText.begin(),\
    \ revText.end() - 1);\n    return text == revText;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsdbi1un_: /tmp/tmpsdbi1un_.cpp:22: int main(): Assertion `candidate((\"\
    aba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            flag = false;\n            break;\n     \
    \   }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    bool flag = true;\n    for (int i = 0; i < mid; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    if (len <= 1) {\n        return true;\n    }\n    int mid = len / 2;\n  \
    \  for (int i = 0; i < mid; ++i) {\n        if (text[i] != text[len - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if (text.size() < 2) return\
    \ true;\n    std::string reverse = text;\n    reverse.resize(text.size() / 2);\n\
    \    std::reverse(text.begin(), text.end());\n    return text == reverse;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9y7sap8l: /tmp/tmp9y7sap8l.cpp:22: int main(): Assertion `candidate((\"\
    aba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    bool isPalindrome = true;\n    for (int i = 0; i\
    \ < mid; i++) {\n        if (text[i] != text[len - i - 1]) {\n            isPalindrome\
    \ = false;\n            break;\n        }\n    }\n    return isPalindrome;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    bool isPalindrome = true;\n    for (int i = 0; i\
    \ < mid; i++) {\n        if (text[i] != text[len - i - 1]) {\n            isPalindrome\
    \ = false;\n            break;\n        }\n    }\n    return isPalindrome;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   if (n < 2) return true;\n    int mid = n / 2;\n    for (int i = 0; i < mid;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string rev;\n    rev.reserve(text.size());\n\
    \    for (auto &c : text) {\n        rev.push_back(c);\n    }\n    rev.resize(text.size());\n\
    \    std::reverse(rev.begin(), rev.end());\n    return text == rev;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    std::string left = text.substr(0, mid);\n    std::string\
    \ right = text.substr(mid, len);\n    return left == right;\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprukam7td: /tmp/tmprukam7td.cpp:22: int main(): Assertion `candidate((\"\
    aba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Your code here\n    int\
    \ len = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int j = len\
    \ - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] != text[j]) {\n \
    \           return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    std::string reverse = \"\";\n    for (int i = 0; i < n; i++) {\n        reverse\
    \ += text[i];\n    }\n    return text == reverse;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1c5n32kr: /tmp/tmp1c5n32kr.cpp:25: int main(): Assertion `candidate((\"\
    zbcd\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    if (len <= 1) return true;\n    int mid = len / 2;\n    for (int i = 0; i\
    \ < mid; i++) {\n        if (text[i] != text[len - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n/2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int\
    \ j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reverse(text.rbegin(),\
    \ text.rend());\n    return text == reverse;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string rev_text = text;\n\
    \    rev_text.resize(text.size());\n    std::reverse(rev_text.begin(), rev_text.end());\n\
    \    return text == rev_text;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n-i-1]) {\n            flag = false;\n            break;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.size();\n \
    \   for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Your code goes here\n\
    \    int len = text.length();\n    for(int i=len/2-1; i>=0; i--){\n        if(text[i]\
    \ != text[len-i-1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
