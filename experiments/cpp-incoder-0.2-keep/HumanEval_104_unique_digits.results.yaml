name: HumanEval_104_unique_digits
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    for (long\
    \ long i : ans) {\n        if (sum % i == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmprf92xoly: /tmp/tmprf92xoly.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long digit =\
    \ 0;\n    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n  \
    \      digit = sum % 10;\n        if(digit == 0) ans.push_back(x[i]);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpi4gn07s9: /tmp/tmpi4gn07s9.cpp:24: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long digit =\
    \ 0;\n    for (auto i : x) {\n        sum += i;\n        digit = sum % 10;\n \
    \       if (digit % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpfpho25ep: /tmp/tmpfpho25ep.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_uv5_ao9: /tmp/tmp_uv5_ao9.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> ans;\n    long long sum\
    \ = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long long\
    \ i : x){\n        if(i % 2 == 0){\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        if(sum % i != 0){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long i : ans){\n\
    \        if(sum % i == 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : ans){\n        if(sum % i != 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        if(sum % i == 0){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long i : ans){\n\
    \        if(sum % i != 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        if(sum % i != 0){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long i : ans){\n\
    \        if(sum % i == 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : ans){\n        if(sum % i != 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        if(sum % i == 0){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long i : ans){\n\
    \        if(sum % i != 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        if(sum % i != 0){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long i : ans){\n\
    \        if(sum % i == 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : ans){\n        if(sum % i != 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        if(sum % i == 0){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long i : ans){\n\
    \        if(sum % \n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj9gxjpke.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj9gxjpke.cpp:110:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmpj9gxjpke.cpp:109:17:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  109 |         if(sum\
    \ %\n      |           ~     ^\n      |                 )\n  110 | }\n      |\
    \ ~                \n/tmp/tmpj9gxjpke.cpp:110:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmpj9gxjpke.cpp:111:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  111 | int main() {\n      |            ^\n/tmp/tmpj9gxjpke.cpp:117:1: error:\
    \ expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpj9gxjpke.cpp:11:54:\
    \ note: to match this \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long>\
    \ x) {\n      |                                                      ^\n/tmp/tmpj9gxjpke.cpp:117:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  117 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long sum = 0;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n       \
    \ if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n        }\n    }\n   \
    \ for(long long i = 0; i < ans.size(); i++) {\n        ans[i] /= 10;\n    }\n\
    \    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ox3eb4j.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6ox3eb4j.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp6ox3eb4j.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    long sum = 0;\n\
    \    for(long i : x){\n        sum += i;\n    }\n    for(long i : x){\n      \
    \  if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n    }\n    sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpwahpzd6r: /tmp/tmpwahpzd6r.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpe6u901mz: /tmp/tmpe6u901mz.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpu8v1gul2: /tmp/tmpu8v1gul2.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp2ss5_pfu: /tmp/tmp2ss5_pfu.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long sum = 0;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n       \
    \ if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphhao5r_e.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphhao5r_e.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmphhao5r_e.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> result;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    for (long\
    \ long i : result) {\n        if (sum % i == 0) {\n            result.erase(std::remove(result.begin(),\
    \ result.end(), i), result.end());\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmprswjx_g4: /tmp/tmprswjx_g4.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for(long long i : x){\n        sum += i;\n        count += 1;\n    }\n\
    \    long long mod = sum % 10;\n    for(long long i : x){\n        sum += i;\n\
    \        count += 1;\n        if(sum % 10 == mod){\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpif51lroa: /tmp/tmpif51lroa.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long i : x)\
    \ {\n        sum += i;\n    }\n    for (long i : x) {\n        if (i % 2 == 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    long long ans_size =\
    \ ans.size();\n    for (long i = 0; i < ans_size; i++) {\n        long long sum\
    \ = 0;\n        for (long j : ans) {\n            sum += j;\n        }\n     \
    \   if (sum % 2 == 0) {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpcsrlbpw4: /tmp/tmpcsrlbpw4.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    for (long long i = 0; i < ans_size; i++) {\n   \
    \     long long sum = 0;\n        for (long long j : ans) {\n            sum +=\
    \ j;\n        }\n        if (sum % 2 == 0) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpkvr1thkj: /tmp/tmpkvr1thkj.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            continue;\n       \
    \ }\n        ans.push_back(i);\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqokbth_o: /tmp/tmpqokbth_o.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpoamg7nw9: /tmp/tmpoamg7nw9.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(i % 2 != 0){\n            long long sum2 = sum - i;\n      \
    \      if(sum2 % 2 == 0){\n                ans.push_back(i);\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpeswbt1oc: /tmp/tmpeswbt1oc.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp3yq1hqay: /tmp/tmp3yq1hqay.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmps_9p6fw9: /tmp/tmps_9p6fw9.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long temp = sum\
    \ - i;\n        if (temp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmphvknopl6: /tmp/tmphvknopl6.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpk622s2z0: /tmp/tmpk622s2z0.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum / 10;\n    for (long long i : ans) {\n        if (i != an) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0c1mnvs1: /tmp/tmp0c1mnvs1.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long i : x)\
    \ {\n        sum += i;\n    }\n    for (long i : x) {\n        if (i % 2 == 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    for (long i : ans) {\n\
    \        if (sum % i == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpfvqdhq31: /tmp/tmpfvqdhq31.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_wqost49: /tmp/tmp_wqost49.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpz13o6wjr: /tmp/tmpz13o6wjr.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    long long\
    \ ans = 0;\n    for (long long i : x) {\n        ans += i % 10 * pow(10, (ans\
    \ + mod / 10) % 10);\n    }\n    for (long long i : x) {\n        if (ans % i\
    \ == 0) {\n            ans /= i;\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuea18jl6.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuea18jl6.cpp:18:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   18 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpuea18jl6.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpuea18jl6.cpp:20:38: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   20 |         ans += i % 10 * pow(10, (ans + mod / 10) % 10);\n      |  \
    \                                ~~~ ^ ~~~~~~~~\n      |                     \
    \             |         |\n      |                                  |        \
    \ long long int\n      |                                  std::vector<long int>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpuea18jl6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ no"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for (long long i : x) {\n        sum += i;\n        count += 1;\n  \
    \  }\n    long long mod = sum % 10;\n    for (long long i : x) {\n        if (i\
    \ % 10 != mod) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpavdw8tfm: /tmp/tmpavdw8tfm.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for (long long i : x) {\n        sum += i;\n        count += 1;\n  \
    \  }\n    for (long long i : x) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    if (count != sum) {\n        return ans;\n    }\n    ans.clear();\n\
    \    for (long long i : x) {\n        if (i % 2 != 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmppxc0_yc2: /tmp/tmppxc0_yc2.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum / 10;\n    for (long long i : ans) {\n        if (i != an) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpix8l3rjh: /tmp/tmpix8l3rjh.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : x) {\n        if(i % 2 != 0) {\n            long long sum = 0;\n       \
    \     for(long long j : ans) {\n                sum += j;\n            }\n   \
    \         if(sum % 2 == 0) {\n                ans.push_back(i);\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_0wmtsr6: /tmp/tmp_0wmtsr6.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    for (long long i = 0; i < ans_size; i++) {\n   \
    \     long long sum = 0;\n        for (long long j : ans) {\n            sum +=\
    \ j;\n        }\n        if (sum % 2 == 0) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpzw1ohzr7: /tmp/tmpzw1ohzr7.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for(long i : x){\n   \
    \     sum += i;\n    }\n    for(long i : x){\n        if(sum % 2 == 0){\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpvqizj519: /tmp/tmpvqizj519.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqjho3um4: /tmp/tmpqjho3um4.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long temp = sum\
    \ - i;\n        if (temp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0evozmxb: /tmp/tmp0evozmxb.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_g2tgnz7: /tmp/tmp_g2tgnz7.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(sum %\
    \ 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp4iaj9kr_: /tmp/tmp4iaj9kr_.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        long long\
    \ temp = sum % 10;\n        if(temp % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n        sum -= temp;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmps5bk8gaz: /tmp/tmps5bk8gaz.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    long digit;\n    for (long\
    \ i : x) {\n        sum += i;\n    }\n    for (long i : x) {\n        digit =\
    \ sum % 10;\n        if (digit % 2 == 0) {\n            ans.push_back(i);\n  \
    \      }\n        sum -= i;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqcl9cyig: /tmp/tmpqcl9cyig.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqflifwt2: /tmp/tmpqflifwt2.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long temp = sum\
    \ - i;\n        if (temp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmw2xspsn: /tmp/tmpmw2xspsn.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp87jte3r4: /tmp/tmp87jte3r4.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long tmp = sum -\
    \ i;\n        if (tmp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpj05l8gcp: /tmp/tmpj05l8gcp.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x)\n    {\n        sum += i;\n    }\n    for(long long i : x)\n    {\n     \
    \   if(i % 2 == 0)\n        {\n            continue;\n        }\n        long\
    \ long mod = sum % 10;\n        if(mod != 0)\n        {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqjg0sm46: /tmp/tmpqjg0sm46.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long ans = 0;\n\
    \    for (long long i : x) {\n        sum += i;\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4t9fzd5d.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4t9fzd5d.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp4t9fzd5d.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqehcbydv: /tmp/tmpqehcbydv.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long an = x.front();\n    for(long long\
    \ i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(an);\n       \
    \     an = i;\n        }\n    }\n    ans.push_back(an);\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp64911q10: /tmp/tmp64911q10.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp801jgky8: /tmp/tmp801jgky8.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        long long\
    \ temp = sum % 10;\n        sum += temp;\n        if(sum % 2 == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdh4wkw9s: /tmp/tmpdh4wkw9s.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long ans = 0;\n\
    \    for (long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n      \
    \  if (sum % 2 == 0) {\n            ans += x[i];\n        }\n    }\n    ans.push_back(ans);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp410_62qy.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp410_62qy.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp410_62qy.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp410_62qy.cpp:18:17: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   18 |     \
    \        ans += x[i];\n/tmp/tmp410_62qy.cpp:21:22: error: no matching function\
    \ for call to \u2018std::vector<long int>::push_back(std::vector<long int>&)\u2019\
    \n   21 |     ans.push_back(ans);\n      |                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp410_62qy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    long long\
    \ ans = 0;\n    for (long long i : x) {\n        ans += i % 10;\n        if (ans\
    \ == mod) {\n            ans += 1;\n        }\n    }\n    ans.push_back(mod);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdbvemk_l.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdbvemk_l.cpp:18:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   18 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpdbvemk_l.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpdbvemk_l.cpp:20:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   20 |         ans += i % 10;\n      |         ~~~~^~~~~~~~~\n/tmp/tmpdbvemk_l.cpp:21:17:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   21 |         if (ans == mod) {\n\
    \      |             ~~~ ^~ ~~~\n      |             |      |\n      |       \
    \      |      long long int\n      |             std::vector<long int>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdbvemk_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdbvemk_l.cpp:21:20:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   21 |         if (ans == mod) {\n      |                    ^~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdbvemk_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for(long i : x)\n    \
    \    sum += i;\n    for(long i : x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n\
    \    for(long i : x)\n        if(i != sum)\n            ans.push_back(i);\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmptlxz7ycy: /tmp/tmptlxz7ycy.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long sum = 0;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n       \
    \ if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9n30xvcr.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9n30xvcr.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp9n30xvcr.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    for(long long i : x){\n        if(sum % 2 != 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : x){\n        if(sum % 2 != 0 && i % 2\
    \ != 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i\
    \ : x){\n        if(sum % 2 != 0 && i % 2 != 0 && i > 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : x){\n        if(sum % 2 != 0 && i % 2\
    \ != 0 && i < 0){\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long i : x){\n        if(sum % 2 != 0 && i % 2 != 0 && i > 0 && i < 0){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long i : x){\n  \
    \      if(sum % 2 != 0 && i % 2 != 0 && i > 0 && i < 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : x){\n        if(sum % 2 != 0 && i % 2\
    \ != 0 && i > 0 && i < 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : x){\n        if(sum % 2 != 0 && i % 2 != 0 && i > 0 &&\
    \ i < 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : x){\n        if(sum % 2 != 0 && i % 2 != 0 && i > 0 && i < 0){\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : x){\n       \
    \ if(sum % 2 != 0 && i % 2 != 0 && i > 0 && i < 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : x){\n        if(sum % 2 != 0 && i % 2\
    \ != 0 && i > 0 && i < 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : x){\n        if(sum % 2 != 0 && i % 2 != 0 && i > 0 &&\
    \ i < 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : x){\n        if(sum % 2 != 0 && i % 2 != 0 && i > 0 && i < 0){\n       \
    \     ans.push_back\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6bsxxm6r.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6bsxxm6r.cpp:89:26: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   89 |             ans.push_back\n      |            \
    \              ^\n      |                          ;\n   90 | }\n      | ~   \
    \                      \n/tmp/tmp6bsxxm6r.cpp:89:17: error: statement cannot resolve\
    \ address of overloaded function\n   89 |             ans.push_back\n      | \
    \            ~~~~^~~~~~~~~\n/tmp/tmp6bsxxm6r.cpp:91:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   91 | int main() {\n     \
    \ |            ^\n/tmp/tmp6bsxxm6r.cpp:97:1: error: expected \u2018}\u2019 at\
    \ end of input\n   97 | }\n      | ^\n/tmp/tmp6bsxxm6r.cpp:87:25: note: to match\
    \ this \u2018{\u2019\n   87 |     for(long long i : x){\n      |             \
    \            ^\n/tmp/tmp6bsxxm6r.cpp:97:1: error: expected \u2018}\u2019 at end\
    \ of input\n   97 | }\n      | ^\n/tmp/tmp6bsxxm6r.cpp:11:54: note: to match this\
    \ \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long> x)\
    \ {\n      |                                                      ^\n/tmp/tmp6bsxxm6r.cpp:97:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   97 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum % 10;\n    for (long long i : ans) {\n        if (i != an) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmps6ptcbfj: /tmp/tmps6ptcbfj.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long temp =\
    \ 0;\n    for(long long i = 0; i < x.size(); i++) {\n        temp = x[i];\n  \
    \      while(temp > 0) {\n            ans = ans * 10 + temp % 10;\n          \
    \  temp /= 10;\n        }\n        if(ans % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90asmizj.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp90asmizj.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp90asmizj.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp90asmizj.cpp:18:23: error: no match for \u2018operator*\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   18 |             ans = ans * 10 + temp % 10;\n      |                   ~~~\
    \ ^ ~~\n      |                   |     |\n      |                   |     int\n\
    \      |                   std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp90asmizj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  387 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp90asmizj.cpp:18:25:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   18 |             ans = ans * 10 + temp % 10;\n      |                   \
    \      ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp90asmizj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:396:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  396 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : x) {\n        if(i % 2 != 0) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    for(long long i : x) {\n   \
    \     if(i % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : x) {\n      \
    \  if(i % 2 != 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 != 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : x) {\n      \
    \  if(i % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : x) {\n      \
    \  if(i % 2 != 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 != 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : x) {\n      \
    \  if(i % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : x) {\n      \
    \  if(i % 2 != 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            an\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25qvz0o0.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp25qvz0o0.cpp:119:13: error: \u2018an\u2019 was not declared\
    \ in this scope; did you mean \u2018ans\u2019?\n  119 |             an\n     \
    \ |             ^~\n      |             ans\n/tmp/tmp25qvz0o0.cpp:121:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  121\
    \ | int main() {\n      |            ^\n/tmp/tmp25qvz0o0.cpp:127:1: error: expected\
    \ \u2018}\u2019 at end of input\n  127 | }\n      | ^\n/tmp/tmp25qvz0o0.cpp:117:26:\
    \ note: to match this \u2018{\u2019\n  117 |     for(long long i : x) {\n    \
    \  |                          ^\n/tmp/tmp25qvz0o0.cpp:127:1: error: expected \u2018\
    }\u2019 at end of input\n  127 | }\n      | ^\n/tmp/tmp25qvz0o0.cpp:11:54: note:\
    \ to match this \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long>\
    \ x) {\n      |                                                      ^\n/tmp/tmp25qvz0o0.cpp:127:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  127 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long digit;\n\
    \    for (long i = 0; i < x.size(); i++) {\n        digit = x[i / 10];\n     \
    \   sum += digit;\n        if (sum % 2 == 0) {\n            ans.push_back(digit);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpg2fl_660: /tmp/tmpg2fl_660.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long an = x.front();\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n        if(sum % 2 ==\
    \ 0){\n            ans.push_back(an);\n            an = i;\n            sum =\
    \ 0;\n        }\n    }\n    ans.push_back(an);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqbmk7r1g: /tmp/tmpqbmk7r1g.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long i : x)\
    \ {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long i\
    \ : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmplbctv6x4: /tmp/tmplbctv6x4.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpz93b3np7: /tmp/tmpz93b3np7.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpc85nfec1: /tmp/tmpc85nfec1.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    for (long long i\
    \ = 0; i < x.size(); i++) {\n        ans += x[i];\n    }\n    for (long long i\
    \ = 0; i < x.size(); i++) {\n        if (ans % 2 == 0) {\n            ans /= 2;\n\
    \            ans.push_back(x[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk47ngzcz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk47ngzcz.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpk47ngzcz.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpk47ngzcz.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpk47ngzcz.cpp:18:17: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   18 |         if (ans % 2 == 0) {\n      |             ~~~ ^ ~\n      |   \
    \          |     |\n      |             |     int\n      |             std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk47ngzcz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk47ngzcz.cpp:18:19:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   18 |         if (ans % 2 == 0) {\n   \
    \   |                   ^\nIn file included from /shared/centos7/gcc/9.2.0-"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum / 10;\n    for (long long i : ans) {\n        if (i != an) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmqwv2z70: /tmp/tmpmqwv2z70.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmprun4xvnb: /tmp/tmprun4xvnb.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp2ckvmhwr: /tmp/tmp2ckvmhwr.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : x) {\n        if(i % 2 != 0) {\n            long long sum = 0;\n       \
    \     for(long long j : ans) {\n                sum += j;\n            }\n   \
    \         if(sum % 2 == 0) {\n                ans.push_back(i);\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqhmaqw9o: /tmp/tmpqhmaqw9o.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> ans;\n    for(long i=0;i<x.size();i++){\n\
    \        long sum=0;\n        for(long j=0;j<i;j++){\n            sum+=x[j];\n\
    \        }\n        if(sum%2==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp9vzpkkzo: /tmp/tmp9vzpkkzo.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    long long\
    \ remain = sum / 10;\n    for (long long i : x) {\n        if (i % 10 == mod)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpvntukud_: /tmp/tmpvntukud_.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp1bhfdfsd: /tmp/tmp1bhfdfsd.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    long long sum_size = sum;\n    long long max_size\
    \ = ans_size;\n    while (max_size != sum_size) {\n        max_size = sum_size;\n\
    \        sum_size = 0;\n        for (long long i : ans) {\n            sum_size\
    \ += i;\n        }\n    }\n    long long max_sum_size = sum_size;\n    long long\
    \ max_sum = 0;\n    for (long long i : ans) {\n        max_sum += i;\n    }\n\
    \    long long max_ans_size = max_sum_size;\n    long long max_ans = 0;\n    for\
    \ (long long i : ans) {\n        if (max_sum < max_ans) {\n            max_ans\
    \ = max_sum;\n            max_ans_size = max_ans;\n        }\n        max_sum\
    \ += i;\n    }\n    long long max_ans_size = max_sum_size;\n    long long max_ans\
    \ = 0;\n    for (long long i : ans) {\n        if (max_sum < max_ans) {\n    \
    \        max_ans = max_sum;\n            max_ans_size = max_ans;\n        }\n\
    \        max_sum += i;\n    }\n    long long max_ans_size = max_sum_size;\n  \
    \  long long max_ans = 0;\n    for (long long i : ans) {\n        if (max_sum\
    \ < max_ans) {\n            max_ans = max_sum;\n            max_ans_size = max_ans;\n\
    \        }\n        max_sum += i;\n    }\n    long long max_ans_size = max_sum_size;\n\
    \    long long max_ans = 0;\n    for (long long i : ans) {\n        if (max_sum\
    \ < max_ans) {\n            max_ans = max_sum;\n            max_ans_size = max_ans;\n\
    \        }\n        max_sum += i;\n    }\n    long long max_ans_size = max_sum_size;\n\
    \    long long max_ans = 0;\n    for (long long i : ans) {\n        if (max_sum\
    \ < max_ans) {\n            max_ans = max_sum;\n            max_ans_size = max_ans;\n\
    \        }\n        max_sum += i;\n    }\n    long long max_ans_size = max_sum_size;\n\
    \    long long max_ans = 0;\n    for (long long i : ans) {\n        if (max_sum\
    \ < max_ans) {\n            max_ans = max_sum;\n            max_ans_size = max_ans;\n\
    \        }\n        max_sum += i;\n    }\n    long long max_ans_size = max_sum_size;\n\
    \    long long max_ans = 0;\n    for (long \n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbn2mj6in.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbn2mj6in.cpp:46:15: error: redeclaration of \u2018long\
    \ long int max_ans_size\u2019\n   46 |     long long max_ans_size = max_sum_size;\n\
    \      |               ^~~~~~~~~~~~\n/tmp/tmpbn2mj6in.cpp:37:15: note: \u2018\
    long long int max_ans_size\u2019 previously declared here\n   37 |     long long\
    \ max_ans_size = max_sum_size;\n      |               ^~~~~~~~~~~~\n/tmp/tmpbn2mj6in.cpp:47:15:\
    \ error: redeclaration of \u2018long long int max_ans\u2019\n   47 |     long\
    \ long max_ans = 0;\n      |               ^~~~~~~\n/tmp/tmpbn2mj6in.cpp:38:15:\
    \ note: \u2018long long int max_ans\u2019 previously declared here\n   38 |  \
    \   long long max_ans = 0;\n      |               ^~~~~~~\n/tmp/tmpbn2mj6in.cpp:55:15:\
    \ error: redeclaration of \u2018long long int max_ans_size\u2019\n   55 |    \
    \ long long max_ans_size = max_sum_size;\n      |               ^~~~~~~~~~~~\n\
    /tmp/tmpbn2mj6in.cpp:37:15: note: \u2018long long int max_ans_size\u2019 previously\
    \ declared here\n   37 |     long long max_ans_size = max_sum_size;\n      | \
    \              ^~~~~~~~~~~~\n/tmp/tmpbn2mj6in.cpp:56:15: error: redeclaration\
    \ of \u2018long long int max_ans\u2019\n   56 |     long long max_ans = 0;\n \
    \     |               ^~~~~~~\n/tmp/tmpbn2mj6in.cpp:38:15: note: \u2018long long\
    \ int max_ans\u2019 previously declared here\n   38 |     long long max_ans =\
    \ 0;\n      |               ^~~~~~~\n/tmp/tmpbn2mj6in.cpp:64:15: error: redeclaration\
    \ of \u2018long long int max_ans_size\u2019\n   64 |     long long max_ans_size\
    \ = max_sum_size;\n      |               ^~~~~~~~~~~~\n/tmp/tmpbn2mj6in.cpp:37:15:\
    \ note: \u2018long long int max_ans_size\u2019 previously declared here\n   37\
    \ |     long long max_ans_size = max_sum_size;\n      |               ^~~~~~~~~~~~\n\
    /tmp/tmpbn2mj6in.cpp:65:15: error: redeclaration of \u2018long long int max_ans\u2019\
    \n   65 |     long long max_ans = 0;\n      |               ^~~~~~~\n/tmp/tmpbn2mj6in.cpp:38:15:\
    \ note: \u2018long long int max_ans\u2019 previously declared here\n   38 |  \
    \   long long max_ans = 0;\n      |               ^~~~~~~\n/tmp/tmpbn2mj6in.cpp:73:15:\
    \ error: redeclaration of \u2018long long"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans_sum = 0;\n    for (long long\
    \ i : x) {\n        ans_sum += i;\n    }\n    long long ans_count = ans_sum /\
    \ 10;\n    long long ans_remainder = ans_sum % 10;\n    for (long long i : x)\
    \ {\n        if (i % 2 == 0) {\n            long long ans_digit = i / 10;\n  \
    \          if (ans_digit == ans_remainder) {\n                ans.push_back(i);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp8zci4s1g: /tmp/tmp8zci4s1g.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp90m8mkp8: /tmp/tmp90m8mkp8.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long tmp = sum -\
    \ i;\n        if (tmp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpc8zky0jd: /tmp/tmpc8zky0jd.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long an = x.front();\n    long long\
    \ sum = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n\
    \        if(sum % 2 == 0) {\n            ans.push_back(an);\n            an =\
    \ sum;\n            sum = 0;\n        }\n    }\n    ans.push_back(an);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp3m2uomqu: /tmp/tmp3m2uomqu.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long tmp = sum -\
    \ i;\n        if (tmp % 2 == 0) {\n            ans.push_back(tmp);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpzxcnszm4: /tmp/tmpzxcnszm4.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for (long long i : x) {\n        sum += i;\n        count += 1;\n  \
    \  }\n    long long mod = sum % 10;\n    for (long long i : x) {\n        if (i\
    \ % 10 == mod) {\n            ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpizes4e5c: /tmp/tmpizes4e5c.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdm4tojgb: /tmp/tmpdm4tojgb.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long ans = 0;\n\
    \    long long digit = 0;\n    for (long long i = 0; i < x.size(); i++) {\n  \
    \      sum += x[i];\n        ans = sum % 10;\n        digit = sum / 10;\n    \
    \    if (ans == 0) {\n            ans = digit;\n        }\n        ans.push_back(ans);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppssrn7u8.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppssrn7u8.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmppssrn7u8.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmppssrn7u8.cpp:18:21: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   18 |         ans = sum % 10;\n      |                     ^~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmppssrn7u8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:199:42: note:\
    \   no known conversion for argument 1 from \u2018long long int\u2019 to \u2018\
    const std::vector<long int>&\u2019\n  199 |     operator=(const vector<_Tp, _Alloc>&\
    \ __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmppssrn7u8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::alloca"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for (long long i : x) {\n        sum += i;\n        count += 1;\n  \
    \  }\n    long long mod = sum % 10;\n    for (long long i : x) {\n        if (i\
    \ % 10 == mod) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpgiyw5pdd: /tmp/tmpgiyw5pdd.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    long long sum_size = sum;\n    long long ans_sum\
    \ = 0;\n    for (long long i : ans) {\n        ans_sum += i;\n    }\n    long\
    \ long ans_sum = ans_sum % 10;\n    long long sum_size = sum_size % 10;\n    long\
    \ long ans_size = ans_size % 10;\n    long long sum_size = sum_size % 10;\n  \
    \  long long ans_sum_size = ans_sum % 10;\n    long long sum_size = sum_size %\
    \ 10;\n    long long ans_sum_size = ans_sum_size % 10;\n    long long sum_size\
    \ = sum_size % 10;\n    long long ans_sum_size = ans_sum_size % 10;\n    long\
    \ long sum_size = sum_size % 10;\n    long long ans_sum_size = ans_sum_size %\
    \ 10;\n    long long sum_size = sum_size % 10;\n    long long ans_sum_size = ans_sum_size\
    \ % 10;\n    long long sum_size = sum_size % 10;\n    long long ans_sum_size =\
    \ ans_sum_size % 10;\n    long long sum_size = sum_size % 10;\n    long long ans_sum_size\
    \ = ans_sum_size % 10;\n    long long sum_size = sum_size % 10;\n    long long\
    \ ans_sum_size = ans_sum_size % 10;\n    long long sum_size = sum_size % 10;\n\
    \    long long ans_sum_size = ans_sum_size % 10;\n    long long sum_size = sum_size\
    \ % 10;\n    long long ans_sum_size = ans_sum_size % 10;\n    long long sum_size\
    \ = sum_size % 10;\n    long long ans_sum_size = ans_sum_size % 10;\n    long\
    \ long sum_size = sum_size % 10;\n    long long ans_sum_size = ans_sum_size %\
    \ 10;\n    long long sum_size = sum_size % 10;\n    long long ans_sum_size = ans_sum_size\
    \ % 10;\n    long long sum_size = sum_size % 10;\n    long long ans_sum_size =\
    \ ans_sum_size % 10;\n    long long sum_size = sum_size % 10;\n    long long ans_sum_size\
    \ = ans_sum_size % 10;\n    long long sum_size = sum_size % 10;\n    long long\
    \ ans_sum_size = ans_sum_size % 10;\n    long long sum_size = \n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzws7m464.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzws7m464.cpp:28:15: error: redeclaration of \u2018long\
    \ long int ans_sum\u2019\n   28 |     long long ans_sum = ans_sum % 10;\n    \
    \  |               ^~~~~~~\n/tmp/tmpzws7m464.cpp:24:15: note: \u2018long long\
    \ int ans_sum\u2019 previously declared here\n   24 |     long long ans_sum =\
    \ 0;\n      |               ^~~~~~~\n/tmp/tmpzws7m464.cpp:29:15: error: redeclaration\
    \ of \u2018long long int sum_size\u2019\n   29 |     long long sum_size = sum_size\
    \ % 10;\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:23:15: note: \u2018\
    long long int sum_size\u2019 previously declared here\n   23 |     long long sum_size\
    \ = sum;\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:30:15: error: redeclaration\
    \ of \u2018long long int ans_size\u2019\n   30 |     long long ans_size = ans_size\
    \ % 10;\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:22:15: note: \u2018\
    long long int ans_size\u2019 previously declared here\n   22 |     long long ans_size\
    \ = ans.size();\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:31:15: error:\
    \ redeclaration of \u2018long long int sum_size\u2019\n   31 |     long long sum_size\
    \ = sum_size % 10;\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:23:15:\
    \ note: \u2018long long int sum_size\u2019 previously declared here\n   23 | \
    \    long long sum_size = sum;\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:33:15:\
    \ error: redeclaration of \u2018long long int sum_size\u2019\n   33 |     long\
    \ long sum_size = sum_size % 10;\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:23:15:\
    \ note: \u2018long long int sum_size\u2019 previously declared here\n   23 | \
    \    long long sum_size = sum;\n      |               ^~~~~~~~\n/tmp/tmpzws7m464.cpp:34:15:\
    \ error: redeclaration of \u2018long long int ans_sum_size\u2019\n   34 |    \
    \ long long ans_sum_size = ans_sum_size % 10;\n      |               ^~~~~~~~~~~~\n\
    /tmp/tmpzws7m464.cpp:32:15: note: \u2018long long int ans_sum_size\u2019 previously\
    \ declared here\n   32 |     long long ans_sum_size = ans_sum % 10;\n      | \
    \              ^~~~~~~~~~~~\n/tmp/tmpzws7m464.cpp:35:15: error: redeclaration\
    \ of \u2018long long "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            continue;\n       \
    \ }\n        ans.push_back(i);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_ljevxk4: /tmp/tmp_ljevxk4.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp2j_x6zk1: /tmp/tmp2j_x6zk1.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    long digit;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        digit = x.at(i);\n        sum += digit;\n\
    \        if(sum % 2 == 0) {\n            ans.push_back(digit);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdfehvwbe: /tmp/tmpdfehvwbe.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x)\n    {\n        sum += i;\n    }\n    for(long long i : x)\n    {\n     \
    \   if(i % 2 == 0)\n        {\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : x)\n    {\n        if(sum % i == 0)\n        {\n      \
    \      ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpsdivpa0a: /tmp/tmpsdivpa0a.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    long long sum_size = sum;\n    long long ans_sum\
    \ = 0;\n    for (long long i : ans) {\n        ans_sum += i;\n    }\n    long\
    \ long ans_sum_size = ans_sum;\n    long long ans_sum_square = ans_sum * ans_sum;\n\
    \    long long ans_sum_square_size = ans_sum_square;\n    long long ans_sum_square_root\
    \ = sqrt(ans_sum_square_size);\n    long long ans_sum_square_root_size = ans_sum_square_root;\n\
    \    long long ans_sum_square_root_square = ans_sum_square_root * ans_sum_square;\n\
    \    long long ans_sum_square_root_square_size = ans_sum_square_root_square;\n\
    \    long long ans_sum_square_root_square_root = sqrt(ans_sum_square_root_size);\n\
    \    long long ans_sum_square_root_square_root_size = ans_sum_square_root_square_root;\n\
    \    long long ans_sum_square_root_square_root_square = ans_sum_square_root_square\
    \ / ans_sum;\n    long long ans_sum_square_root_square_root_square_size = ans_sum_square_root_square_root_square;\n\
    \    long long ans_sum_square_root_square_root_square_root = sqrt(ans_sum_square_root_square_root_size);\n\
    \    long long ans_sum_square_root_square_root_square_root_size = ans_sum_square_root_square_root_square_root;\n\
    \    long long ans_sum_square_root_square_root_square_root_square = ans_sum_square_root_square_root_square\
    \ / ans_sum;\n    long long ans_sum_square_root_square_root_square_root_square_size\
    \ = ans_sum_square_root_square_root_square_root_square;\n    long long ans_sum_square_root_square_root_square_root_square_root\
    \ = sqrt(ans_sum_square_root_square_root_square_root_size);\n    long long ans_sum_square_root_square_root_square_root_square_root_size\
    \ = ans_sum_square_root_square_root_square_root_square_root;\n    long long ans_sum_square_root_square_\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7_c0x0i9.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7_c0x0i9.cpp:46:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   46 | }\n      | ^\n/tmp/tmp7_c0x0i9.cpp:46:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for(long i : x) {\n  \
    \      sum += i;\n    }\n    for(long i : x) {\n        if(i % 2 == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    for(long i : ans) {\n     \
    \   if(sum % i == 0) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpt14lvali: /tmp/tmpt14lvali.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long cnt = 0;\n\
    \    for(long long i : x) {\n        sum += i;\n        cnt += 1;\n    }\n   \
    \ for(long long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        if(sum % i == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n\
    \        sum += i;\n        cnt -= 1;\n    }\n    for(long long i : ans) {\n \
    \       if(sum % i == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpuklxsc5z: /tmp/tmpuklxsc5z.cpp:42: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpprihx_jp: /tmp/tmpprihx_jp.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    long long sum\
    \ = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long long\
    \ i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpiqwwq_ys: /tmp/tmpiqwwq_ys.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            continue;\n        }\n        long long temp = sum - i;\n \
    \       if(temp % 2 == 0){\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmppeoq_1oo: /tmp/tmppeoq_1oo.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum / 10;\n    for (long long i : ans) {\n        if (i != an) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpe8uvy9tr: /tmp/tmpe8uvy9tr.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for(long long i : x){\n        sum += i;\n        count += 1;\n    }\n\
    \    long long mod = sum % 10;\n    for(long long i : x){\n        sum += i;\n\
    \        count += 1;\n        if(sum % 10 != mod){\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp07m9cxxt: /tmp/tmp07m9cxxt.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    for(long long i =\
    \ 0; i < x.size(); i++) {\n        ans += x[i];\n    }\n    long long ans2 = 0;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        ans2 += x[i] * x[i];\n\
    \    }\n    long long ans3 = 0;\n    for(long long i = 0; i < x.size(); i++) {\n\
    \        ans3 += x[i] * x[i] * x[i];\n    }\n    long long ans4 = 0;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        ans4 += x[i] * x[i] * x[i] * x[i];\n\
    \    }\n    long long ans5 = 0;\n    for(long long i = 0; i < x.size(); i++) {\n\
    \        ans5 += x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans6\
    \ = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        ans6 += x[i] *\
    \ x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans7 = 0;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        ans7 += x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i] * x[i];\n    }\n    long long ans8 = 0;\n    for(long long i =\
    \ 0; i < x.size(); i++) {\n        ans8 += x[i] * x[i] * x[i] * x[i] * x[i] *\
    \ x[i] * x[i] * x[i];\n    }\n    long long ans9 = 0;\n    for(long long i = 0;\
    \ i < x.size(); i++) {\n        ans9 += x[i] * x[i] * x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i] * x[i];\n    }\n    long long ans10 = 0;\n    for(long long i\
    \ = 0; i < x.size(); i++) {\n        ans10 += x[i] * x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans11 = 0;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        ans11 += x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans12\
    \ = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        ans12 += x[i] *\
    \ x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i];\n\
    \    }\n    long long ans13 = 0;\n    for(long long \n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpidda9gqs.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpidda9gqs.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpidda9gqs.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpidda9gqs.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpidda9gqs.cpp:63:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpidda9gqs.cpp:62:18: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   62 |     for(long long\n\
    \      |                  ^\n      |                  ;\n   63 | }\n      | ~\
    \                 \n/tmp/tmpidda9gqs.cpp:63:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpidda9gqs.cpp:62:18:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   62 |     for(long\
    \ long\n      |                  ^\n      |                  ;\n   63 | }\n  \
    \    | ~                 \n/tmp/tmpidda9gqs.cpp:63:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpidda9gqs.cpp:62:18:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |     for(long\
    \ long\n      |        ~         ^\n      |                  )\n   63 | }\n  \
    \    | ~                 \n/tmp/tmpidda9gqs.cpp:63:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpidda9gqs.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpx10ylxtp: /tmp/tmpx10ylxtp.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpg4epiwwv: /tmp/tmpg4epiwwv.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for (long i : x) {\n \
    \       sum += i;\n    }\n    long cur = 0;\n    for (long i : x) {\n        cur\
    \ += i;\n        if (cur % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp70cawyg3: /tmp/tmp70cawyg3.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp77mc51_u: /tmp/tmp77mc51_u.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmgcwx9tq: /tmp/tmpmgcwx9tq.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpjghklqm1: /tmp/tmpjghklqm1.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ ans){\n        while(sum > 0){\n            sum += i % 10;\n            i /=\
    \ 10;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmptvkao6os: /tmp/tmptvkao6os.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(sum %\
    \ 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp7sgtrhep: /tmp/tmp7sgtrhep.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpcwdzegw1: /tmp/tmpcwdzegw1.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long d = i % 10;\n\
    \        if (sum % 10 == d) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpacjm4ufw: /tmp/tmpacjm4ufw.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmptvwo_osx: /tmp/tmptvwo_osx.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    for (long long i\
    \ = 0; i < x.size(); i++) {\n        ans += x[i];\n    }\n    long long ans2 =\
    \ 0;\n    for (long long i = 0; i < x.size(); i++) {\n        ans2 += x[i] * x[i];\n\
    \    }\n    long long ans3 = 0;\n    for (long long i = 0; i < x.size(); i++)\
    \ {\n        ans3 += x[i] * x[i] * x[i];\n    }\n    long long ans4 = 0;\n   \
    \ for (long long i = 0; i < x.size(); i++) {\n        ans4 += x[i] * x[i] * x[i]\
    \ * x[i];\n    }\n    long long ans5 = 0;\n    for (long long i = 0; i < x.size();\
    \ i++) {\n        ans5 += x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n    long long\
    \ ans6 = 0;\n    for (long long i = 0; i < x.size(); i++) {\n        ans6 += x[i]\
    \ * x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans7 = 0;\n    for\
    \ (long long i = 0; i < x.size(); i++) {\n        ans7 += x[i] * x[i] * x[i] *\
    \ x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans8 = 0;\n    for (long long\
    \ i = 0; i < x.size(); i++) {\n        ans8 += x[i] * x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i] * x[i];\n    }\n    long long ans9 = 0;\n    for (long long i\
    \ = 0; i < x.size(); i++) {\n        ans9 += x[i] * x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans10 = 0;\n    for (long\
    \ long i = 0; i < x.size(); i++) {\n        ans10 += x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n    long long ans11 = 0;\n\
    \    for (long long i = 0; i < x.size(); i++) {\n        ans11 += x[i] * x[i]\
    \ * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i];\n    }\n   \
    \ long long ans12 = 0;\n    for (long long i = 0; i < x.size(); i++) {\n     \
    \   ans12 += x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i] * x[i]\
    \ * x[i] * x[i];\n    }\n    long long ans13 = 0;\n    for (long long i = 0; i\
    \ < x.size(); i++) {\n        ans13 += x[i] * x\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfyjjwibs.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfyjjwibs.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpfyjjwibs.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpfyjjwibs.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpfyjjwibs.cpp:63:23: error: no match for \u2018operator*\u2019\
    \ (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019} and \u2018std::vector<long\
    \ int>\u2019)\n   63 |         ans13 += x[i] * x\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfyjjwibs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  387 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfyjjwibs.cpp:63:25:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   63 |      \
    \   ans13 += x[i] * x\n      |                         ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n         \
    \        from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfyjjwibs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0ja19ywv: /tmp/tmp0ja19ywv.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(i % 2 != 0){\n            long long sum = 0;\n            for(long\
    \ long j : ans){\n                sum += j;\n            }\n            if(sum\
    \ % 2 == 0){\n                ans.push_back(i);\n            }\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_wg6xqpf: /tmp/tmp_wg6xqpf.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long max = 0;\n\
    \    for(long long i : x){\n        sum += i;\n        if(sum > max){\n      \
    \      max = sum;\n        }\n    }\n    for(long long i : x){\n        if(i %\
    \ 2 == 0){\n            ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp4spzwtv9: /tmp/tmp4spzwtv9.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp9uwdzhw4: /tmp/tmp9uwdzhw4.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    long long ans2 = 0;\n    for (long long i : ans) {\n      \
    \  ans2 += i;\n    }\n    std::vector<long> ans3{ans};\n    std::vector<long>\
    \ ans4{ans2};\n    std::vector<long> ans5{ans2};\n    std::vector<long> ans6{ans2};\n\
    \    std::vector<long> ans7{ans2};\n    std::vector<long> ans8{ans2};\n    std::vector<long>\
    \ ans9{ans2};\n    std::vector<long> ans10{ans2};\n    std::vector<long> ans11{ans2};\n\
    \    std::vector<long> ans12{ans2};\n    std::vector<long> ans13{ans2};\n    std::vector<long>\
    \ ans14{ans2};\n    std::vector<long> ans15{ans2};\n    std::vector<long> ans16{ans2};\n\
    \    std::vector<long> ans17{ans2};\n    std::vector<long> ans18{ans2};\n    std::vector<long>\
    \ ans19{ans2};\n    std::vector<long> ans20{ans2};\n    std::vector<long> ans21{ans2};\n\
    \    std::vector<long> ans22{ans2};\n    std::vector<long> ans23{ans2};\n    std::vector<long>\
    \ ans24{ans2};\n    std::vector<long> ans25{ans2};\n    std::vector<long> ans26{ans2};\n\
    \    std::vector<long> ans27{ans2};\n    std::vector<long> ans28{ans2};\n    std::vector<long>\
    \ ans29{ans2};\n    std::vector<long> ans30{ans2};\n    std::vector<long> ans31{ans2};\n\
    \    std::vector<long> ans32{ans2};\n    std::vector<long> ans33{ans2};\n    std::vector<long>\
    \ ans34{ans2};\n    std::vector<long> ans35{ans2};\n    std::vector<long> ans36{ans2};\n\
    \    std::vector<long> ans37{ans2};\n    std::vector<long> ans38{ans2};\n    std::vector<long>\
    \ ans39{ans2};\n    std::vector<long> ans40{ans2};\n    std::vector<long> ans41{ans2};\n\
    \    \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpjz_e0wgn: /tmp/tmpjz_e0wgn.cpp:70: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp54_t8wmn: /tmp/tmp54_t8wmn.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpiq_zx29g: /tmp/tmpiq_zx29g.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpf3pxrdxh: /tmp/tmpf3pxrdxh.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    for (long long i = 0; i < ans_size; i++) {\n   \
    \     long long sum = 0;\n        for (long long j : ans) {\n            sum +=\
    \ j;\n        }\n        if (sum % 2 == 0) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp5xnnuyes: /tmp/tmp5xnnuyes.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpj0u84ai4: /tmp/tmpj0u84ai4.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    for(long long i =\
    \ 0; i < x.size(); i++) {\n        ans += x[i];\n    }\n    for(long long i =\
    \ 0; i < x.size(); i++) {\n        ans /= 10;\n        if(ans % 2 == 0) {\n  \
    \          ans.push_back(x[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc6jg2qy3.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc6jg2qy3.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpc6jg2qy3.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpc6jg2qy3.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpc6jg2qy3.cpp:18:13: error: no match for \u2018operator/=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   18 |         ans /= 10;\n      |         ~~~~^~~~~\n/tmp/tmpc6jg2qy3.cpp:19:16:\
    \ error: no match for \u2018operator%\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   19 |         if(ans % 2 == 0) {\n      |\
    \            ~~~ ^ ~\n      |            |     |\n      |            |     int\n\
    \      |            std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpc6jg2qy3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpc6jg2qy3.cpp:19:18:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018co"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp6g7w1mel: /tmp/tmp6g7w1mel.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : x) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n      \
    \  }\n    }\n    for(long long i : x) {\n        if(sum % i != 0) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpwz1fvlp9: /tmp/tmpwz1fvlp9.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    for(long long i =\
    \ 0; i < x.size(); i++) {\n        ans += x[i];\n        if(ans % 2 == 0) {\n\
    \            ans /= 2;\n            ans.push_back(x[i]);\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgnweauy9.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgnweauy9.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpgnweauy9.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpgnweauy9.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpgnweauy9.cpp:16:16: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   16 |         if(ans % 2 == 0) {\n      |            ~~~ ^ ~\n      |     \
    \       |     |\n      |            |     int\n      |            std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpgnweauy9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgnweauy9.cpp:16:18:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   16 |         if(ans % 2 == 0) {\n    \
    \  |                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long sum = 0;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n       \
    \ if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxritzgkk.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxritzgkk.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpxritzgkk.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp8h71mqqd: /tmp/tmp8h71mqqd.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpnktaf9rk: /tmp/tmpnktaf9rk.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum / 10;\n    for (long long i : ans) {\n        if (i != an) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp86_nsbjo: /tmp/tmp86_nsbjo.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long sum = 0;\n\
    \    long long count = 0;\n    for(long long i = 0; i < x.size(); i++) {\n   \
    \     sum += x[i];\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \            sum += x[i];\n            count++;\n        }\n    }\n    for(long\
    \ long i = 0; i < ans.size(); i++) {\n        if(ans[i] % 2 == 0) {\n        \
    \    ans.erase(std::remove(ans.begin(), ans.end(), ans[i]), ans.end());\n    \
    \    }\n    }\n    for(long long i = 0; i < ans.size(); i++) {\n        if(ans[i]\
    \ % 2 != 0) {\n            ans.erase(std::remove(ans.begin(), ans.end(), ans[i]),\
    \ ans.end());\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpejzc2pnk.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpejzc2pnk.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpejzc2pnk.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmps504qbo3: /tmp/tmps504qbo3.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long temp = sum\
    \ - i;\n        if (temp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmwx5yqgd: /tmp/tmpmwx5yqgd.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpckijd7je: /tmp/tmpckijd7je.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for (long i : x) {\n \
    \       sum += i;\n    }\n    for (long i : x) {\n        if (i % 2 == 0) {\n\
    \            continue;\n        }\n        if (sum % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpou26qioa: /tmp/tmpou26qioa.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    for (long\
    \ long i : ans) {\n        if (sum % i == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpbuyzo8mh: /tmp/tmpbuyzo8mh.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        while(sum % i == 0) {\n            sum -= i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpfbw3ixpj: /tmp/tmpfbw3ixpj.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long tmp = sum -\
    \ i;\n        if (tmp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp3r5hrqu9: /tmp/tmp3r5hrqu9.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long i : x)\
    \ {\n        sum += i;\n    }\n    for (long i : x) {\n        if (i % 2 == 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    long long an = sum /\
    \ 10;\n    for (long i : ans) {\n        if (i != an) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpkm28g405: /tmp/tmpkm28g405.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpylv0171m: /tmp/tmpylv0171m.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    for (long long i = 0; i < ans_size; i++) {\n   \
    \     long long sum = 0;\n        for (long long j : ans) {\n            sum +=\
    \ j;\n        }\n        if (sum % 2 == 0) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_d4r6xl9: /tmp/tmp_d4r6xl9.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    long long sum_size = sum;\n    long long min_size\
    \ = ans_size;\n    while (sum_size > min_size) {\n        long long mid = sum_size\
    \ / 2;\n        long long mid2 = sum - mid;\n        long long mid3 = sum - mid\
    \ * 2;\n        long long mid4 = sum - mid * 3;\n        long long mid5 = sum\
    \ - mid * 4;\n        long long mid6 = sum - mid * 5;\n        long long mid7\
    \ = sum - mid * 6;\n        long long mid8 = sum - mid * 7;\n        long long\
    \ mid9 = sum - mid * 8;\n        long long mid10 = sum - mid * 9;\n        long\
    \ long mid11 = sum - mid * 10;\n        long long mid12 = sum - mid * 11;\n  \
    \      long long mid13 = sum - mid * 12;\n        long long mid14 = sum - mid\
    \ * 13;\n        long long mid15 = sum - mid * 14;\n        long long mid16 =\
    \ sum - mid * 15;\n        long long mid17 = sum - mid * 16;\n        long long\
    \ mid18 = sum - mid * 17;\n        long long mid19 = sum - mid * 18;\n       \
    \ long long mid20 = sum - mid * 19;\n        long long mid21 = sum - mid * 20;\n\
    \        long long mid22 = sum - mid * 21;\n        long long mid23 = sum - mid\
    \ * 22;\n        long long mid24 = sum - mid * 23;\n        long long mid25 =\
    \ sum - mid * 24;\n        long long mid26 = sum - mid * 25;\n        long long\
    \ mid27 = sum - mid * 26;\n        long long mid28 = sum - mid * 27;\n       \
    \ long long mid29 = sum - mid * 28;\n        long long mid30 = sum - mid * 29;\n\
    \        long long mid31 = sum - mid * 30;\n        long long mid32 = sum - mid\
    \ * 31;\n        long long mid33 = sum - mid * 32;\n        long long mid34\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplz0j_y70.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplz0j_y70.cpp:60:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmplz0j_y70.cpp:61:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   61\
    \ | int main() {\n      |            ^\n/tmp/tmplz0j_y70.cpp:67:1: error: expected\
    \ \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmplz0j_y70.cpp:11:54:\
    \ note: to match this \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long>\
    \ x) {\n      |                                                      ^\n/tmp/tmplz0j_y70.cpp:67:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   67 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmplh302gy1: /tmp/tmplh302gy1.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpcve63slv: /tmp/tmpcve63slv.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    for(long i=0;i<x.size();i++){\n\
    \        long long int sum=0;\n        for(long j=0;j<i;j++){\n            sum+=x[j];\n\
    \        }\n        if(sum%2==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpvz5vj2nv: /tmp/tmpvz5vj2nv.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for (long long i : x) {\n        sum += i;\n        count += 1;\n  \
    \  }\n    for (long long i : x) {\n        if (i % 2 == 0) {\n            if (sum\
    \ % 2 == 0) {\n                ans.push_back(i);\n            }\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpjjt_e8s_: /tmp/tmpjjt_e8s_.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x)\n    {\n        sum += i;\n    }\n    for(long long i : x)\n    {\n     \
    \   if(i % 2 == 0)\n        {\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : ans)\n    {\n        if(sum % i == 0)\n        {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpaih6_zex: /tmp/tmpaih6_zex.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for (long i : x) {\n \
    \       sum += i;\n    }\n    long mod = sum % 10;\n    for (long i : x) {\n \
    \       if (i % 10 == mod) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp3t5tkchn: /tmp/tmp3t5tkchn.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for(long long i : x){\n        sum += i;\n        count += 1;\n    }\n\
    \    for(long long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmppcylt8hf: /tmp/tmppcylt8hf.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpw49t32t3: /tmp/tmpw49t32t3.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpg0e7q309: /tmp/tmpg0e7q309.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    for(long long i : x){\n        if(i % 2 != 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : x){\n        if(sum % 2 != 0){\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmph3rvcnhd: /tmp/tmph3rvcnhd.cpp:41: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpvyuh74an: /tmp/tmpvyuh74an.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp9___iy4u: /tmp/tmp9___iy4u.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for (long i : x) {\n \
    \       sum += i;\n    }\n    for (long i : x) {\n        if (i % 2 == 0) {\n\
    \            continue;\n        }\n        long d = sum % 10;\n        sum +=\
    \ d / 10;\n        ans.push_back(i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpo6inq63y: /tmp/tmpo6inq63y.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    for(long long i =\
    \ 0; i < x.size(); i++) {\n        ans += x[i];\n        ans %= 10;\n        if(ans\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp74qows31.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp74qows31.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp74qows31.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp74qows31.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmp74qows31.cpp:16:13: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   16 |         ans %= 10;\n      |         ~~~~^~~~~\n/tmp/tmp74qows31.cpp:17:16:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   17 |         if(ans == 0) {\n      |   \
    \         ~~~ ^~ ~\n      |            |      |\n      |            |      int\n\
    \      |            std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp74qows31.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp74qows31.cpp:17:19:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   17 |         if(ans == 0) {\n      |                   ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmprrn07af5: /tmp/tmprrn07af5.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpfiz2d1m6: /tmp/tmpfiz2d1m6.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x)\n    {\n        sum += i;\n    }\n    for(long long i : x)\n    {\n     \
    \   if(i % 2 == 0)\n        {\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long i : ans)\n    {\n        if(sum % i == 0)\n        {\n    \
    \        ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdxlgf90j: /tmp/tmpdxlgf90j.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp9audz01h: /tmp/tmp9audz01h.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(i % 2 != 0){\n            long long sum = 0;\n            for(long\
    \ long j : ans){\n                sum += j;\n            }\n            if(sum\
    \ % 2 == 0){\n                ans.push_back(i);\n            }\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmnbp_wky: /tmp/tmpmnbp_wky.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long temp = sum\
    \ % 10;\n        sum += temp;\n        ans.push_back(temp);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpwbchf9j0: /tmp/tmpwbchf9j0.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> ans;\n    for(long &i\
    \ : x){\n        while(i/10 != 0){\n            if(i%10 == 0){\n             \
    \   ans.push_back(i);\n                break;\n            }\n            i =\
    \ i/10;\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpzrgnkvz3: /tmp/tmpzrgnkvz3.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> ans;\n    long sum = 0;\n\
    \    for(long i : x){\n        sum += i;\n    }\n    for(long i : x){\n      \
    \  if(i % 2 == 0){\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpcw80gnpn: /tmp/tmpcw80gnpn.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        long long\
    \ d = i % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n     \
    \   }\n    }\n    for(long long i : ans) {\n        long long d = i % 10;\n  \
    \      if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n   \
    \ for(long long i : ans) {\n        long long d = i % 10;\n        if(d % 2 ==\
    \ 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n          \
    \  ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n       \
    \ long long d = i % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        long long d = i % 10;\n\
    \        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n \
    \   for(long long i : ans) {\n        long long d = i % 10;\n        if(d % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     long long d = i % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        long long d = i % 10;\n\
    \        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n \
    \   for(long long i : ans) {\n        long long d = i % 10;\n        if(d % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     long long d = i % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        long long d = i % 10;\n\
    \        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n \
    \   for(long long i : ans) {\n        long long d = i % 10;\n        if(d % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbu40cu49.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbu40cu49.cpp:108:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  108 | }\n      | ^\n/tmp/tmpbu40cu49.cpp:107:22:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  107 |     for(long\
    \ long i :\n      |        ~             ^\n      |                      )\n \
    \ 108 | }\n      | ~                     \n/tmp/tmpbu40cu49.cpp:108:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  108 | }\n      | ^\n\
    /tmp/tmpbu40cu49.cpp:108:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            continue;\n        }\n        long long temp = sum % 10;\n\
    \        if(temp == 0){\n            ans.push_back(i);\n        }\n        sum\
    \ += temp;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpd7r2had0: /tmp/tmpd7r2had0.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    for (long long i = 0; i < ans_size; i++) {\n   \
    \     long long sum = 0;\n        for (long long j : ans) {\n            sum +=\
    \ j;\n        }\n        if (sum % 2 == 0) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmph1664qb5: /tmp/tmph1664qb5.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpucqooaqy: /tmp/tmpucqooaqy.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpr9zb3brf: /tmp/tmpr9zb3brf.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_sum = 0;\n    for (long long i : ans) {\n        ans_sum += i;\n    }\n\
    \    if (ans_sum != sum) {\n        ans.clear();\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdj2uwuac: /tmp/tmpdj2uwuac.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != 0) {\n            long long temp = sum\
    \ - i;\n            if (temp % 10 == mod) {\n                ans.push_back(i);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpsw80ol_0: /tmp/tmpsw80ol_0.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpsozj45jb: /tmp/tmpsozj45jb.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    for(long long i =\
    \ 0; i < x.size(); i++) {\n        ans += x[i];\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x[i];\n        }\n    }\n    ans %= 10;\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans += x[i];\n        }\n \
    \   }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n       \
    \ if(x[i] % 2 == 0) {\n            ans -= x[i];\n        }\n    }\n    ans %=\
    \ 10;\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            ans += x[i];\n        }\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x[i];\n        }\n    }\n    ans %= 10;\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans += x[i];\n        }\n \
    \   }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n       \
    \ if(x[i] % 2 == 0) {\n            ans -= x[i];\n        }\n    }\n    ans %=\
    \ 10;\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            ans += x[i];\n        }\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x[i];\n        }\n    }\n    ans %= 10;\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans += x[i];\n        }\n \
    \   }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n       \
    \ if(x[i] % 2 == 0) {\n            ans -= x[i];\n        }\n    }\n    ans %=\
    \ 10;\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            ans += x[i];\n        }\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x[i];\n        }\n    }\n    ans %= 10;\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans += x[i];\n        }\n \
    \   }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n       \
    \ if(x[i] % 2 == 0) {\n            ans -= x\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpplumydq4.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpplumydq4.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpplumydq4.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpplumydq4.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpplumydq4.cpp:17:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   17 |     ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpplumydq4.cpp:20:17: error:\
    \ no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   20 |             ans\
    \ -= x[i];\n/tmp/tmpplumydq4.cpp:23:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   23 |     ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpplumydq4.cpp:26:17: error:\
    \ no match for \u2018operator+=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   26 |             ans\
    \ += x[i];\n/tmp/tmpplumydq4.cpp:29:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   29 |     ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpplumydq4.cpp:32:17: error:\
    \ no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   32 |             ans\
    \ -= x[i];\n/tmp/tmpplumydq4.cpp:35:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   35 |     ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpplumydq4.cpp:38:17: error:\
    \ no match for \u2018operator+=\u2019 (operand types are \u2018std::vec"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(i % 2 != 0){\n            long long temp = sum - i;\n      \
    \      if(temp % 2 == 0){\n                ans.push_back(temp);\n            }\n\
    \        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpm2nke0ms: /tmp/tmpm2nke0ms.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp9t710_88: /tmp/tmp9t710_88.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for(long long i : x) {\n        sum += i;\n        count += 1;\n   \
    \ }\n    long long mod = sum % 10;\n    for(long long i : x) {\n        sum +=\
    \ i;\n        count += 1;\n        if(sum % 10 != mod) {\n            ans.push_back(sum);\n\
    \            sum = 0;\n            count = 0;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp3s8w2e_t: /tmp/tmp3s8w2e_t.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for (long long i : x) {\n        sum += i;\n        count += 1;\n  \
    \  }\n    long long mod = sum % 10;\n    for (long long i : x) {\n        if (i\
    \ % 10 == mod) {\n            continue;\n        }\n        ans.push_back(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpu4qq_nac: /tmp/tmpu4qq_nac.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(sum % i == 0){\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp5ybm1pw8: /tmp/tmp5ybm1pw8.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmppv_kbjm_: /tmp/tmppv_kbjm_.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpebcbmdwt: /tmp/tmpebcbmdwt.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp119134jw: /tmp/tmp119134jw.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpi72wsrbo: /tmp/tmpi72wsrbo.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long sum = 0;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n       \
    \ if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n        }\n    }\n   \
    \ for(long long i = 0; i < ans.size(); i++) {\n        ans[i] = ans[i] - ans[i\
    \ - 1];\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp99kdtcef.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp99kdtcef.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp99kdtcef.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpr7bhex7_: /tmp/tmpr7bhex7_.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long temp = sum\
    \ % 10;\n        sum += temp;\n        ans.push_back(temp);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp9oc4rbii: /tmp/tmp9oc4rbii.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        if (sum % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpea3rgsx5: /tmp/tmpea3rgsx5.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpv9lpdiae: /tmp/tmpv9lpdiae.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for (long long i : x) {\n        sum += i;\n        count += 1;\n  \
    \  }\n    for (long long i : x) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    long long ans_size = ans.size();\n    long long sum_size\
    \ = sum;\n    long long count_size = count;\n    for (long long i = 0; i < ans_size;\
    \ i++) {\n        long long j = sum_size;\n        long long k = count_size;\n\
    \        long long ans_sum = 0;\n        long long ans_count = 0;\n        while\
    \ (j > 0 && k >= 0) {\n            ans_sum += ans[j];\n            ans_count +=\
    \ ans[k];\n            j--;\n            k--;\n        }\n        if (ans_count\
    \ == 0) {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp9ifbg5ht: /tmp/tmp9ifbg5ht.cpp:46: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpttmkj0lk: /tmp/tmpttmkj0lk.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long temp = sum\
    \ - i;\n        if (temp % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_cgmtptq: /tmp/tmp_cgmtptq.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long ans = 0;\n    long long sum = 0;\n\
    \    long long temp = 0;\n    for(long long i = 0; i < x.size(); i++) {\n    \
    \    sum += x[i];\n        temp = sum % 10;\n        if(temp % 2 == 0) {\n   \
    \         ans.push_back(temp);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgvj3min9.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgvj3min9.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpgvj3min9.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            continue;\n       \
    \ }\n        ans.push_back(i);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp6v66de3p: /tmp/tmp6v66de3p.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp6twqed0y: /tmp/tmp6twqed0y.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(sum %\
    \ 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp74_olz1v: /tmp/tmp74_olz1v.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdza4djvl: /tmp/tmpdza4djvl.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(sum % 2\
    \ == 0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpq4cm1hcy: /tmp/tmpq4cm1hcy.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ ans_size = ans.size();\n    long long sum_size = sum;\n    long long ans_sum\
    \ = 0;\n    for (long long i : ans) {\n        ans_sum += i;\n    }\n    long\
    \ long ans_sum = ans_sum / ans_size;\n    long long sum_size = sum_size / ans_size;\n\
    \    long long ans_sum_size = ans_sum / sum_size;\n    long long ans_sum_size\
    \ = ans_sum_size / ans_size;\n    long long ans_sum_size = ans_sum_size / sum_size;\n\
    \    long long ans_sum_size = ans_sum_size / ans_size;\n    long long ans_sum_size\
    \ = ans_sum_size / sum_size;\n    long long ans_sum_size = ans_sum_size / ans_size;\n\
    \    long long ans_sum_size = ans_sum_size / sum_size;\n    long long ans_sum_size\
    \ = ans_sum_size / ans_size;\n    long long ans_sum_size = ans_sum_size / sum_size;\n\
    \    long long ans_sum_size = ans_sum_size / ans_size;\n    long long ans_sum_size\
    \ = ans_sum_size / sum_size;\n    long long ans_sum_size = ans_sum_size / ans_size;\n\
    \    long long ans_sum_size = ans_sum_size / sum_size;\n    long long ans_sum_size\
    \ = ans_sum_size / ans_size;\n    long long ans_sum_size = ans_sum_size / sum_size;\n\
    \    long long ans_sum_size = ans_sum_size / ans_size;\n    long long ans_sum_size\
    \ = ans_sum_size / sum_size;\n    long long ans_sum_size = ans_sum_size / ans_size;\n\
    \    long long ans_sum_size = ans_sum_size / sum_size;\n    long long ans_sum_size\
    \ = ans_sum_size / ans_size;\n    long long ans_sum_size = ans_sum_size / sum_size;\n\
    \    long long ans_sum_size = ans_sum_size / ans_size;\n    long long ans_sum_size\
    \ = ans_sum_size / sum_size;\n    long long ans_sum_size = ans_sum_size / ans_size;\n\
    \    long long ans_sum_size = ans_sum_size / sum_size;\n    long long ans_sum_size\
    \ = ans_sum_size / ans_size;\n    long long ans_sum_size = \n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjnm88vtw.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjnm88vtw.cpp:28:15: error: redeclaration of \u2018long\
    \ long int ans_sum\u2019\n   28 |     long long ans_sum = ans_sum / ans_size;\n\
    \      |               ^~~~~~~\n/tmp/tmpjnm88vtw.cpp:24:15: note: \u2018long long\
    \ int ans_sum\u2019 previously declared here\n   24 |     long long ans_sum =\
    \ 0;\n      |               ^~~~~~~\n/tmp/tmpjnm88vtw.cpp:29:15: error: redeclaration\
    \ of \u2018long long int sum_size\u2019\n   29 |     long long sum_size = sum_size\
    \ / ans_size;\n      |               ^~~~~~~~\n/tmp/tmpjnm88vtw.cpp:23:15: note:\
    \ \u2018long long int sum_size\u2019 previously declared here\n   23 |     long\
    \ long sum_size = sum;\n      |               ^~~~~~~~\n/tmp/tmpjnm88vtw.cpp:31:15:\
    \ error: redeclaration of \u2018long long int ans_sum_size\u2019\n   31 |    \
    \ long long ans_sum_size = ans_sum_size / ans_size;\n      |               ^~~~~~~~~~~~\n\
    /tmp/tmpjnm88vtw.cpp:30:15: note: \u2018long long int ans_sum_size\u2019 previously\
    \ declared here\n   30 |     long long ans_sum_size = ans_sum / sum_size;\n  \
    \    |               ^~~~~~~~~~~~\n/tmp/tmpjnm88vtw.cpp:32:15: error: redeclaration\
    \ of \u2018long long int ans_sum_size\u2019\n   32 |     long long ans_sum_size\
    \ = ans_sum_size / sum_size;\n      |               ^~~~~~~~~~~~\n/tmp/tmpjnm88vtw.cpp:30:15:\
    \ note: \u2018long long int ans_sum_size\u2019 previously declared here\n   30\
    \ |     long long ans_sum_size = ans_sum / sum_size;\n      |               ^~~~~~~~~~~~\n\
    /tmp/tmpjnm88vtw.cpp:33:15: error: redeclaration of \u2018long long int ans_sum_size\u2019\
    \n   33 |     long long ans_sum_size = ans_sum_size / ans_size;\n      |     \
    \          ^~~~~~~~~~~~\n/tmp/tmpjnm88vtw.cpp:30:15: note: \u2018long long int\
    \ ans_sum_size\u2019 previously declared here\n   30 |     long long ans_sum_size\
    \ = ans_sum / sum_size;\n      |               ^~~~~~~~~~~~\n/tmp/tmpjnm88vtw.cpp:34:15:\
    \ error: redeclaration of \u2018long long int ans_sum_size\u2019\n   34 |    \
    \ long long ans_sum_size = ans_sum_size / sum_size;\n      |               ^~~~~~~~~~~~\n\
    /tmp/tmpjnm88vtw.cpp:30:15: note: \u2018long long int ans_sum_size\u2019 previously\
    \ decla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x){\n        sum += i;\n    }\n    for(long long i : x){\n        if(i % 2 ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long i :\
    \ x){\n        if(i % 2 != 0){\n            long long sum2 = 0;\n            for(long\
    \ long j : ans){\n                sum2 += j;\n            }\n            if(sum2\
    \ > sum){\n                ans.push_back(i);\n            }\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0f6amclk: /tmp/tmp0f6amclk.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    ans.push_back(mod);\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmdz5qhmi: /tmp/tmpmdz5qhmi.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(i % 2\
    \ == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        if(sum % i == 0) {\n            ans.push_back(i);\n    \
    \    }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0yzd1lj7: /tmp/tmp0yzd1lj7.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x)\n    {\n        sum += i;\n    }\n    for(long long i : x)\n    {\n     \
    \   if(sum % 2 == 0)\n        {\n            ans.push_back(i);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp89f23pe2: /tmp/tmp89f23pe2.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum / 10;\n    long long rem = sum % 10;\n    while (an != 0) {\n     \
    \   ans.push_back(an);\n        an--;\n    }\n    while (an != 0) {\n        ans.push_back(rem);\n\
    \        an--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqx787w9d: /tmp/tmpqx787w9d.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long long i\
    \ : x) {\n        sum += i;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    long long\
    \ an = sum / 10;\n    for (long long i : ans) {\n        if (i != an) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpwrzdlwhg: /tmp/tmpwrzdlwhg.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x)\n    {\n        sum += i;\n    }\n    for(long long i : x)\n    {\n     \
    \   if(sum % 2 == 0)\n        {\n            ans.push_back(i);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpthnksvwz: /tmp/tmpthnksvwz.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for(long long i :\
    \ x) {\n        sum += i;\n    }\n    for(long long i : x) {\n        if(sum %\
    \ 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp4t7i8zil: /tmp/tmp4t7i8zil.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
