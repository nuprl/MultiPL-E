name: HumanEval_16_count_distinct_characters
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == c) ? 1 : 0;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpcc01x0ca: /tmp/tmpcc01x0ca.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpuoe0rlg9: /tmp/tmpuoe0rlg9.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3rff1pxa: /tmp/tmp3rff1pxa.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptxvglbpw: /tmp/tmptxvglbpw.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpako32424: /tmp/tmpako32424.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpjn6crckw: /tmp/tmpjn6crckw.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += string::npos;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpw9g9nj8e.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpw9g9nj8e.cpp:11:18: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         count += string::npos;\n      |            \
    \      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpxr4lb4ck: /tmp/tmpxr4lb4ck.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpd53qp5eh: /tmp/tmpd53qp5eh.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzl0gygu4: /tmp/tmpzl0gygu4.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpeyy9e814: /tmp/tmpeyy9e814.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'A' || c == 'a' || c == 'B' ||\
    \ c == 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c ==\
    \ 'e' || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h'\
    \ || c == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c\
    \ == 'L' || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O'\
    \ || c == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c\
    \ == 'r' || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u'\
    \ || c == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c\
    \ == 'Y' || c == 'y' || c == 'Z' || c == 'z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp2l5bsite: /tmp/tmp2l5bsite.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpv5hmrqln: /tmp/tmpv5hmrqln.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvsuxvnst: /tmp/tmpvsuxvnst.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppgtalk3e: /tmp/tmppgtalk3e.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp0opwaxhn: /tmp/tmp0opwaxhn.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpitwldga3: /tmp/tmpitwldga3.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpo2eq1j55: /tmp/tmpo2eq1j55.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpllotq82l: /tmp/tmpllotq82l.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'A' || c == 'a' || c == 'B' ||\
    \ c == 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c ==\
    \ 'e' || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h'\
    \ || c == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c\
    \ == 'L' || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O'\
    \ || c == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c\
    \ == 'r' || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u'\
    \ || c == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c\
    \ == 'Y' || c == 'y' || c == 'Z' || c == 'z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpuki_l4tm: /tmp/tmpuki_l4tm.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'a' || c == 'A' || c == 'b' ||\
    \ c == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c ==\
    \ 'E' || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H'\
    \ || c == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c\
    \ == 'l' || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o'\
    \ || c == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c\
    \ == 'R' || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U'\
    \ || c == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c\
    \ == 'y' || c == 'Y' || c == 'z' || c == 'Z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1xdiqy3r: /tmp/tmp1xdiqy3r.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3vkd2iqg: /tmp/tmp3vkd2iqg.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphupeovrf: /tmp/tmphupeovrf.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp9dr5kej1: /tmp/tmp9dr5kej1.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpkla95yjq: /tmp/tmpkla95yjq.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A' || c == 'b'\
    \ || c == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c\
    \ == 'E' || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H'\
    \ || c == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c\
    \ == 'l' || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o'\
    \ || c == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c\
    \ == 'R' || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U'\
    \ || c == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c\
    \ == 'y' || c == 'Y' || c == 'z' || c == 'Z');\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpurz6uvgq: /tmp/tmpurz6uvgq.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpa6znjm57: /tmp/tmpa6znjm57.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpg76euewn: /tmp/tmpg76euewn.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4hh2skos: /tmp/tmp4hh2skos.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp017ksa9i: /tmp/tmp017ksa9i.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnpt61u77: /tmp/tmpnpt61u77.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpz5gfc6f9: /tmp/tmpz5gfc6f9.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpawtby7l3: /tmp/tmpawtby7l3.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppiz8b5wy: /tmp/tmppiz8b5wy.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpmphe9kxu: /tmp/tmpmphe9kxu.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpto9cm75e: /tmp/tmpto9cm75e.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpm83l7vhd: /tmp/tmpm83l7vhd.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpu31ggnxy: /tmp/tmpu31ggnxy.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp6ewbqqsf: /tmp/tmp6ewbqqsf.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7hag3ibz.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp7hag3ibz.cpp:11:44: error: could not convert \u2018c\u2019 from \u2018\
    char\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   11 |         count += count_distinct_characters(c);\n      |           \
    \                                 ^\n      |                                 \
    \           |\n      |                                            char\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzpq_yoof: /tmp/tmpzpq_yoof.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'a' || c == 'A' || c == 'e' ||\
    \ c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c ==\
    \ 'U') {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpgm1bdsqc: /tmp/tmpgm1bdsqc.cpp:20: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n                count++;\n           \
    \     break;\n            default:\n                break;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqzhquogd: /tmp/tmpqzhquogd.cpp:49: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpdyrsftkd: /tmp/tmpdyrsftkd.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp6pjkuqpi: /tmp/tmp6pjkuqpi.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqq8lrsd6.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpqq8lrsd6.cpp:11:44: error: could not convert \u2018c\u2019 from \u2018\
    char\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   11 |         count += count_distinct_characters(c);\n      |           \
    \                                 ^\n      |                                 \
    \           |\n      |                                            char\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5mvbzmn4: /tmp/tmp5mvbzmn4.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp9sxtpm8n: /tmp/tmp9sxtpm8n.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptu80pq19: /tmp/tmptu80pq19.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfkya4yfu: /tmp/tmpfkya4yfu.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpl9hpavrm: /tmp/tmpl9hpavrm.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpybl8xrww: /tmp/tmpybl8xrww.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += (std::tolower(c) - 'a') * (std::toupper(c)\
    \ - 'a');\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpv85giq4u: /tmp/tmpv85giq4u.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpinchmmmt: /tmp/tmpinchmmmt.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpm67ete4x: /tmp/tmpm67ete4x.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpre1_anqh: /tmp/tmpre1_anqh.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqvpb7etv: /tmp/tmpqvpb7etv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp0k_8q51m: /tmp/tmp0k_8q51m.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpsgh6lty_: /tmp/tmpsgh6lty_.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpa1lc3v3g: /tmp/tmpa1lc3v3g.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpmm3g7qu_: /tmp/tmpmm3g7qu_.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == '\\0') return count;\n        count\
    \ += 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwe9tdq4r: /tmp/tmpwe9tdq4r.cpp:20: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpsq7xsp90: /tmp/tmpsq7xsp90.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4_s6t2a7: /tmp/tmp4_s6t2a7.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpgpuoe8b5: /tmp/tmpgpuoe8b5.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmphc1m39g6: /tmp/tmphc1m39g6.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpa42kofzt: /tmp/tmpa42kofzt.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpsgjm0oid: /tmp/tmpsgjm0oid.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwe8063g1: /tmp/tmpwe8063g1.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpcgmq7amy: /tmp/tmpcgmq7amy.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptv5c1bzv: /tmp/tmptv5c1bzv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp7qkaw_hu: /tmp/tmp7qkaw_hu.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpl9s4rcbw: /tmp/tmpl9s4rcbw.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvz9mscgy: /tmp/tmpvz9mscgy.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwa95wo4m: /tmp/tmpwa95wo4m.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpd9vdpwmc: /tmp/tmpd9vdpwmc.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmplf088mi3: /tmp/tmplf088mi3.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpj2hhwjvd: /tmp/tmpj2hhwjvd.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp__r49pv7: /tmp/tmp__r49pv7.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb6f3hzf8: /tmp/tmpb6f3hzf8.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp8xroybqx: /tmp/tmp8xroybqx.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp60t7bfiu: /tmp/tmp60t7bfiu.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpu_yo8hd8: /tmp/tmpu_yo8hd8.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqeowbsjp: /tmp/tmpqeowbsjp.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpw25l4q67: /tmp/tmpw25l4q67.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpny80uou6: /tmp/tmpny80uou6.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpgjdn0dm6: /tmp/tmpgjdn0dm6.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpf5bjmgmj: /tmp/tmpf5bjmgmj.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == c) ? 1 : 0;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3l2o0yh8: /tmp/tmp3l2o0yh8.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpq393qeca: /tmp/tmpq393qeca.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n            case '0':\n            case '1':\n       \
    \     case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n            case '+':\n            case '-':\n       \
    \     case '*':\n            case '/':\n            case '%':\n            case\
    \ '&':\n            case '(':\n            case ')':\n            case '[':\n\
    \            case ']':\n            case '{':\n            case '}':\n       \
    \     case '|':\n            case '~':\n            case '!':\n            case\
    \ '@':\n            case '#':\n            case '$':\n            case '%':\n\
    \            case '^':\n            case '&':\n            case '*':\n       \
    \     case '(':\n            case ')':\n            case '[':\n            case\
    \ ']':\n            case '{':\n            case '}':\n            case '|':\n\
    \            case '~':\n            case '!':\n            case '@':\n       \
    \     case '#':\n            case '$':\n            case '%':\n            case\
    \ '^':\n            case '&':\n            case '*':\n            case '(':\n\
    \            case ')':\n            case '[':\n            case ']':\n       \
    \     case '{':\n            case '}':\n            case '|':\n            case\
    \ '~':\n            case '!':\n            case '@':\n            case '#':\n\
    \            case '$':\n            case '%':\n            case '^':\n       \
    \     case '&':\n            case '*':\n            case '(':\n            case\
    \ ')':\n            case '[':\n            case ']':\n            case '{':\n\
    \            case '}':\n            case '|':\n            case '~':\n       \
    \     case '!':\n            case '@':\n            case '#\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5lzzls9.cpp:138:18: warning: missing terminating ' character\n\
    \  138 |             case '#\n      |                  ^\n/tmp/tmpq5lzzls9.cpp:138:18:\
    \ error: missing terminating ' character\n  138 |             case '#\n      |\
    \                  ^~\n/tmp/tmpq5lzzls9.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpq5lzzls9.cpp:92:13: error: duplicate case value\n   92 |          \
    \   case '%':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:78:13: note: previously\
    \ used here\n   78 |             case '%':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:94:13:\
    \ error: duplicate case value\n   94 |             case '&':\n      |        \
    \     ^~~~\n/tmp/tmpq5lzzls9.cpp:79:13: note: previously used here\n   79 |  \
    \           case '&':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:95:13: error:\
    \ duplicate case value\n   95 |             case '*':\n      |             ^~~~\n\
    /tmp/tmpq5lzzls9.cpp:76:13: note: previously used here\n   76 |             case\
    \ '*':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:96:13: error: duplicate\
    \ case value\n   96 |             case '(':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:80:13:\
    \ note: previously used here\n   80 |             case '(':\n      |         \
    \    ^~~~\n/tmp/tmpq5lzzls9.cpp:97:13: error: duplicate case value\n   97 |  \
    \           case ')':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:81:13: note:\
    \ previously used here\n   81 |             case ')':\n      |             ^~~~\n\
    /tmp/tmpq5lzzls9.cpp:98:13: error: duplicate case value\n   98 |             case\
    \ '[':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:82:13: note: previously\
    \ used here\n   82 |             case '[':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:99:13:\
    \ error: duplicate case value\n   99 |             case ']':\n      |        \
    \     ^~~~\n/tmp/tmpq5lzzls9.cpp:83:13: note: previously used here\n   83 |  \
    \           case ']':\n      |             ^~~~\n/tmp/tmpq5lzzls9.cpp:100:13:\
    \ error: duplicate case value\n  100 |             case '{':\n      |        \
    \     ^~~~\n/tmp/tmpq5lzzls9.cpp:84:13: note: previously used here\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'x' || c == 'X' || c == 'y'\
    \ || c == 'Y' || c == 'z' || c == 'Z');\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpvfwjavq2: /tmp/tmpvfwjavq2.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfr1helcu: /tmp/tmpfr1helcu.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpyqpx8e1g: /tmp/tmpyqpx8e1g.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpljgog211: /tmp/tmpljgog211.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += (std::tolower(c) == c) ? 1 : 0;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpsos6f3ov: /tmp/tmpsos6f3ov.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp8uvvgfrj: /tmp/tmp8uvvgfrj.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpxccu7beo: /tmp/tmpxccu7beo.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpdrg76uvt: /tmp/tmpdrg76uvt.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpol5yzwmq: /tmp/tmpol5yzwmq.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnrv3lf4g: /tmp/tmpnrv3lf4g.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'A' || c == 'a' || c == 'B' ||\
    \ c == 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c ==\
    \ 'e' || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h'\
    \ || c == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c\
    \ == 'L' || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O'\
    \ || c == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c\
    \ == 'r' || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u'\
    \ || c == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c\
    \ == 'Y' || c == 'y' || c == 'Z' || c == 'z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpyz2i9922: /tmp/tmpyz2i9922.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmps_7hgzq7: /tmp/tmps_7hgzq7.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptu5yczsy: /tmp/tmptu5yczsy.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphl09uryf: /tmp/tmphl09uryf.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptoz_ie10: /tmp/tmptoz_ie10.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpcisv983s: /tmp/tmpcisv983s.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpiatx012w: /tmp/tmpiatx012w.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1hnex6a0: /tmp/tmp1hnex6a0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnlj5ohbo: /tmp/tmpnlj5ohbo.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp9yho4dfq: /tmp/tmp9yho4dfq.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnyfyf91g: /tmp/tmpnyfyf91g.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpf0hgh6id: /tmp/tmpf0hgh6id.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpporx9chb: /tmp/tmpporx9chb.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        auto it = std::tolower(c);\n        if (it\
    \ != c) {\n            ++count;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpwdyp_j3v: /tmp/tmpwdyp_j3v.cpp:21: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpygs47qnr: /tmp/tmpygs47qnr.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp0c3a5d_c: /tmp/tmp0c3a5d_c.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprc20q19_: /tmp/tmprc20q19_.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvx9rn5yh: /tmp/tmpvx9rn5yh.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpdrhn6omy: /tmp/tmpdrhn6omy.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppasjtqy6: /tmp/tmppasjtqy6.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += string::npos;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6ftopt1w.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp6ftopt1w.cpp:11:18: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         count += string::npos;\n      |            \
    \      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpc8o01wzn: /tmp/tmpc8o01wzn.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpygyger_c: /tmp/tmpygyger_c.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpu2z6dgpe: /tmp/tmpu2z6dgpe.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp86v08o2u: /tmp/tmp86v08o2u.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpdb1hmyak: /tmp/tmpdb1hmyak.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfi8arr7f: /tmp/tmpfi8arr7f.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp934q9l8d: /tmp/tmp934q9l8d.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp6z2bzc4k: /tmp/tmp6z2bzc4k.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpposa6n6r: /tmp/tmpposa6n6r.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzugp_616: /tmp/tmpzugp_616.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp20bfinbh: /tmp/tmp20bfinbh.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpykd8u9rp: /tmp/tmpykd8u9rp.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1yeaf5jv: /tmp/tmp1yeaf5jv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += string::npos;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp76cvvlsi.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp76cvvlsi.cpp:11:18: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         count += string::npos;\n      |            \
    \      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpsmg5xelf: /tmp/tmpsmg5xelf.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpm0s1vgqj: /tmp/tmpm0s1vgqj.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnz3vykcw: /tmp/tmpnz3vykcw.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp_gm2r67n: /tmp/tmp_gm2r67n.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpr01qotk7: /tmp/tmpr01qotk7.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphbuewv5w: /tmp/tmphbuewv5w.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp9f467l5w: /tmp/tmp9f467l5w.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpupfpfbyk: /tmp/tmpupfpfbyk.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmplxzoe6bn: /tmp/tmplxzoe6bn.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpd7fk7tnn: /tmp/tmpd7fk7tnn.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpad16qko1: /tmp/tmpad16qko1.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpklq2pmsx: /tmp/tmpklq2pmsx.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp11ujgyay: /tmp/tmp11ujgyay.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmps7l9flz4: /tmp/tmps7l9flz4.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwwvzh7cx: /tmp/tmpwwvzh7cx.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmppem75nh2: /tmp/tmppem75nh2.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpo4bo_rcp: /tmp/tmpo4bo_rcp.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpztfhcfda: /tmp/tmpztfhcfda.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmph8b_ess6: /tmp/tmph8b_ess6.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpg8c_thzd: /tmp/tmpg8c_thzd.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpd6lys03g: /tmp/tmpd6lys03g.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpgtb10cpe: /tmp/tmpgtb10cpe.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpeq9jwhg_: /tmp/tmpeq9jwhg_.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpdd81zfvv: /tmp/tmpdd81zfvv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp7u8k_kcm: /tmp/tmp7u8k_kcm.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppxz30ura: /tmp/tmppxz30ura.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp1es63nlz: /tmp/tmp1es63nlz.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpsmbpjet4: /tmp/tmpsmbpjet4.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzs8tpjv6: /tmp/tmpzs8tpjv6.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqfhe6jyi: /tmp/tmpqfhe6jyi.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfecrqjot: /tmp/tmpfecrqjot.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpxzv232t2: /tmp/tmpxzv232t2.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto &c : string) {\n        count += std::tolower(c) - std::tolower(std::toupper(c));\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpz5hepgqk: /tmp/tmpz5hepgqk.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpuk8kuc0n: /tmp/tmpuk8kuc0n.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A') ? 1 : 0;\n\
    \        count += (c == 'b' || c == 'B') ? 1 : 0;\n        count += (c == 'c'\
    \ || c == 'C') ? 1 : 0;\n        count += (c == 'd' || c == 'D') ? 1 : 0;\n  \
    \      count += (c == 'e' || c == 'E') ? 1 : 0;\n        count += (c == 'f' ||\
    \ c == 'F') ? 1 : 0;\n        count += (c == 'g' || c == 'G') ? 1 : 0;\n     \
    \   count += (c == 'h' || c == 'H') ? 1 : 0;\n        count += (c == 'i' || c\
    \ == 'I') ? 1 : 0;\n        count += (c == 'j' || c == 'J') ? 1 : 0;\n       \
    \ count += (c == 'k' || c == 'K') ? 1 : 0;\n        count += (c == 'l' || c ==\
    \ 'L') ? 1 : 0;\n        count += (c == 'm' || c == 'M') ? 1 : 0;\n        count\
    \ += (c == 'n' || c == 'N') ? 1 : 0;\n        count += (c == 'o' || c == 'O')\
    \ ? 1 : 0;\n        count += (c == 'p' || c == 'P') ? 1 : 0;\n        count +=\
    \ (c == 'q' || c == 'Q') ? 1 : 0;\n        count += (c == 'r' || c == 'R') ? 1\
    \ : 0;\n        count += (c == 's' || c == 'S') ? 1 : 0;\n        count += (c\
    \ == 't' || c == 'T') ? 1 : 0;\n        count += (c == 'u' || c == 'U') ? 1 :\
    \ 0;\n        count += (c == 'v' || c == 'V') ? 1 : 0;\n        count += (c ==\
    \ 'w' || c == 'W') ? 1 : 0;\n        count += (c == 'x' || c == 'X') ? 1 : 0;\n\
    \        count += (c == 'y' || c == 'Y') ? 1 : 0;\n        count += (c == 'z'\
    \ || c == 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3rfjo_cb: /tmp/tmp3rfjo_cb.cpp:44: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp732i0som: /tmp/tmp732i0som.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4nwhl6n0: /tmp/tmp4nwhl6n0.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpmwpprwmq: /tmp/tmpmwpprwmq.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpbge_1qzt: /tmp/tmpbge_1qzt.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpy9jyr6yo: /tmp/tmpy9jyr6yo.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A' || c == 'b'\
    \ || c == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c\
    \ == 'E' || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H'\
    \ || c == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c\
    \ == 'l' || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o'\
    \ || c == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c\
    \ == 'R' || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U'\
    \ || c == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c\
    \ == 'y' || c == 'Y' || c == 'z' || c == 'Z');\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp_ic8fgxc: /tmp/tmp_ic8fgxc.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpbvn1jxld: /tmp/tmpbvn1jxld.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphamywfha: /tmp/tmphamywfha.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp7jj_9kcu: /tmp/tmp7jj_9kcu.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp838tywng: /tmp/tmp838tywng.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpe4kqvh1b: /tmp/tmpe4kqvh1b.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp43y3wkif: /tmp/tmp43y3wkif.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A') ? 1 : 0;\n\
    \        count += (c == 'b' || c == 'B') ? 1 : 0;\n        count += (c == 'c'\
    \ || c == 'C') ? 1 : 0;\n        count += (c == 'd' || c == 'D') ? 1 : 0;\n  \
    \      count += (c == 'e' || c == 'E') ? 1 : 0;\n        count += (c == 'f' ||\
    \ c == 'F') ? 1 : 0;\n        count += (c == 'g' || c == 'G') ? 1 : 0;\n     \
    \   count += (c == 'h' || c == 'H') ? 1 : 0;\n        count += (c == 'i' || c\
    \ == 'I') ? 1 : 0;\n        count += (c == 'j' || c == 'J') ? 1 : 0;\n       \
    \ count += (c == 'k' || c == 'K') ? 1 : 0;\n        count += (c == 'l' || c ==\
    \ 'L') ? 1 : 0;\n        count += (c == 'm' || c == 'M') ? 1 : 0;\n        count\
    \ += (c == 'n' || c == 'N') ? 1 : 0;\n        count += (c == 'o' || c == 'O')\
    \ ? 1 : 0;\n        count += (c == 'p' || c == 'P') ? 1 : 0;\n        count +=\
    \ (c == 'q' || c == 'Q') ? 1 : 0;\n        count += (c == 'r' || c == 'R') ? 1\
    \ : 0;\n        count += (c == 's' || c == 'S') ? 1 : 0;\n        count += (c\
    \ == 't' || c == 'T') ? 1 : 0;\n        count += (c == 'u' || c == 'U') ? 1 :\
    \ 0;\n        count += (c == 'v' || c == 'V') ? 1 : 0;\n        count += (c ==\
    \ 'w' || c == 'W') ? 1 : 0;\n        count += (c == 'x' || c == 'X') ? 1 : 0;\n\
    \        count += (c == 'y' || c == 'Y') ? 1 : 0;\n        count += (c == 'z'\
    \ || c == 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpo2nzlbrb: /tmp/tmpo2nzlbrb.cpp:44: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpv7wgg9fc: /tmp/tmpv7wgg9fc.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfp7nos3n: /tmp/tmpfp7nos3n.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpc0k3aw6c: /tmp/tmpc0k3aw6c.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpx62z6ujf: /tmp/tmpx62z6ujf.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5eveb3gp: /tmp/tmp5eveb3gp.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpyu_sw6h1: /tmp/tmpyu_sw6h1.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpg1id1erk: /tmp/tmpg1id1erk.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp_ezjazi4: /tmp/tmp_ezjazi4.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptj6iy2l5: /tmp/tmptj6iy2l5.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3uk7igax: /tmp/tmp3uk7igax.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmph2ujiicc: /tmp/tmph2ujiicc.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'a' || c == 'A' || c == 'e' ||\
    \ c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c ==\
    \ 'U') {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpwwhj3vse: /tmp/tmpwwhj3vse.cpp:20: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += (std::tolower(c) == c) ? 1 : 0;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpa0mirbpk: /tmp/tmpa0mirbpk.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfbkxh6xp: /tmp/tmpfbkxh6xp.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == toupper(c)) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpbq2d4t5g: /tmp/tmpbq2d4t5g.cpp:20: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb1org2jo: /tmp/tmpb1org2jo.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
