name: HumanEval_16_count_distinct_characters
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == c) ? 1 : 0;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpguvpv8ae: /tmp/tmpguvpv8ae.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpw8nd4_w4: /tmp/tmpw8nd4_w4.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphvw35k_r: /tmp/tmphvw35k_r.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp29oqgcd6: /tmp/tmp29oqgcd6.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpn1odf72u: /tmp/tmpn1odf72u.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp__z6u_gd: /tmp/tmp__z6u_gd.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += string::npos;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpy7pvc9v5.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpy7pvc9v5.cpp:11:18: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         count += string::npos;\n      |            \
    \      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpphpckf7p: /tmp/tmpphpckf7p.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpi1_rsco1: /tmp/tmpi1_rsco1.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5qbsespz: /tmp/tmp5qbsespz.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfpm6x6yv: /tmp/tmpfpm6x6yv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'A' || c == 'a' || c == 'B' ||\
    \ c == 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c ==\
    \ 'e' || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h'\
    \ || c == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c\
    \ == 'L' || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O'\
    \ || c == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c\
    \ == 'r' || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u'\
    \ || c == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c\
    \ == 'Y' || c == 'y' || c == 'Z' || c == 'z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmplemwd0s8: /tmp/tmplemwd0s8.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpjb3bqrkb: /tmp/tmpjb3bqrkb.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp7rfaae2d: /tmp/tmp7rfaae2d.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpjjmicqpw: /tmp/tmpjjmicqpw.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfos46trn: /tmp/tmpfos46trn.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpe6sbcw5j: /tmp/tmpe6sbcw5j.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4871a3fy: /tmp/tmp4871a3fy.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4xy8rqe3: /tmp/tmp4xy8rqe3.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'A' || c == 'a' || c == 'B' ||\
    \ c == 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c ==\
    \ 'e' || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h'\
    \ || c == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c\
    \ == 'L' || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O'\
    \ || c == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c\
    \ == 'r' || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u'\
    \ || c == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c\
    \ == 'Y' || c == 'y' || c == 'Z' || c == 'z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpyyj7l_16: /tmp/tmpyyj7l_16.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'a' || c == 'A' || c == 'b' ||\
    \ c == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c ==\
    \ 'E' || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H'\
    \ || c == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c\
    \ == 'l' || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o'\
    \ || c == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c\
    \ == 'R' || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U'\
    \ || c == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c\
    \ == 'y' || c == 'Y' || c == 'z' || c == 'Z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp_k_3_294: /tmp/tmp_k_3_294.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpc_p8pv0h: /tmp/tmpc_p8pv0h.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpjmtg0bni: /tmp/tmpjmtg0bni.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpbj7b1jfm: /tmp/tmpbj7b1jfm.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpi5hj6bd0: /tmp/tmpi5hj6bd0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A' || c == 'b'\
    \ || c == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c\
    \ == 'E' || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H'\
    \ || c == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c\
    \ == 'l' || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o'\
    \ || c == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c\
    \ == 'R' || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U'\
    \ || c == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c\
    \ == 'y' || c == 'Y' || c == 'z' || c == 'Z');\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpdr8h0ssn: /tmp/tmpdr8h0ssn.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp561vtf3j: /tmp/tmp561vtf3j.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprgxel_v4: /tmp/tmprgxel_v4.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp38f343rt: /tmp/tmp38f343rt.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1i0le7q2: /tmp/tmp1i0le7q2.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpong_o66i: /tmp/tmpong_o66i.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppvbuiids: /tmp/tmppvbuiids.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqdg6fejv: /tmp/tmpqdg6fejv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp6dn65ldc: /tmp/tmp6dn65ldc.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp2dgys1ex: /tmp/tmp2dgys1ex.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb7fjv606: /tmp/tmpb7fjv606.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpztwz004s: /tmp/tmpztwz004s.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpafpc8j7i: /tmp/tmpafpc8j7i.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqjf81tir: /tmp/tmpqjf81tir.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzr1khi73.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpzr1khi73.cpp:11:44: error: could not convert \u2018c\u2019 from \u2018\
    char\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   11 |         count += count_distinct_characters(c);\n      |           \
    \                                 ^\n      |                                 \
    \           |\n      |                                            char\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvsvswurh: /tmp/tmpvsvswurh.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'a' || c == 'A' || c == 'e' ||\
    \ c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c ==\
    \ 'U') {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpxtetxr42: /tmp/tmpxtetxr42.cpp:20: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n                count++;\n           \
    \     break;\n            default:\n                break;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp37_e3_7n: /tmp/tmp37_e3_7n.cpp:49: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpis89q761: /tmp/tmpis89q761.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzfplk4x0: /tmp/tmpzfplk4x0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpu2wam_rq.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpu2wam_rq.cpp:11:44: error: could not convert \u2018c\u2019 from \u2018\
    char\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   11 |         count += count_distinct_characters(c);\n      |           \
    \                                 ^\n      |                                 \
    \           |\n      |                                            char\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppuxvdyin: /tmp/tmppuxvdyin.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpiq3v18a_: /tmp/tmpiq3v18a_.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5snp9oh0: /tmp/tmp5snp9oh0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzfcnxecu: /tmp/tmpzfcnxecu.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpc1wcemij: /tmp/tmpc1wcemij.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp2pnamd0g: /tmp/tmp2pnamd0g.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += (std::tolower(c) - 'a') * (std::toupper(c)\
    \ - 'a');\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpx0ql5wum: /tmp/tmpx0ql5wum.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpa6ys6rwp: /tmp/tmpa6ys6rwp.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzoq3qijv: /tmp/tmpzoq3qijv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwf0np0du: /tmp/tmpwf0np0du.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp22yw34_j: /tmp/tmp22yw34_j.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb3__o6zm: /tmp/tmpb3__o6zm.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpprfy7a69: /tmp/tmpprfy7a69.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmplm7cr2hm: /tmp/tmplm7cr2hm.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpn4e6q8z5: /tmp/tmpn4e6q8z5.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == '\\0') return count;\n        count\
    \ += 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp7s4ipquw: /tmp/tmp7s4ipquw.cpp:20: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpq2mjz413: /tmp/tmpq2mjz413.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpquptsnsk: /tmp/tmpquptsnsk.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp922kjy6e: /tmp/tmp922kjy6e.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmprhil03b5: /tmp/tmprhil03b5.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp_56ijnvv: /tmp/tmp_56ijnvv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3b3f4npt: /tmp/tmp3b3f4npt.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3e_snqtl: /tmp/tmp3e_snqtl.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnif7twyl: /tmp/tmpnif7twyl.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwv_qfp_m: /tmp/tmpwv_qfp_m.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptr0b62p9: /tmp/tmptr0b62p9.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpiqsoxiny: /tmp/tmpiqsoxiny.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqvdqrfnq: /tmp/tmpqvdqrfnq.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1invbyqj: /tmp/tmp1invbyqj.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpr1ozi30c: /tmp/tmpr1ozi30c.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpu2calsd_: /tmp/tmpu2calsd_.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprnmuh7zu: /tmp/tmprnmuh7zu.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp38idwxk7: /tmp/tmp38idwxk7.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpkzll_7bn: /tmp/tmpkzll_7bn.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvpqt2wm4: /tmp/tmpvpqt2wm4.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpm95g5pn4: /tmp/tmpm95g5pn4.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpck89e8rx: /tmp/tmpck89e8rx.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb28yv7ts: /tmp/tmpb28yv7ts.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnova22bx: /tmp/tmpnova22bx.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp52gvfw9a: /tmp/tmp52gvfw9a.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpl7p73tmx: /tmp/tmpl7p73tmx.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqr6pqbj2: /tmp/tmpqr6pqbj2.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == c) ? 1 : 0;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp9uxkb9zs: /tmp/tmp9uxkb9zs.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpiw_m20bf: /tmp/tmpiw_m20bf.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n            case '0':\n            case '1':\n       \
    \     case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n            case '+':\n            case '-':\n       \
    \     case '*':\n            case '/':\n            case '%':\n            case\
    \ '&':\n            case '(':\n            case ')':\n            case '[':\n\
    \            case ']':\n            case '{':\n            case '}':\n       \
    \     case '|':\n            case '~':\n            case '!':\n            case\
    \ '@':\n            case '#':\n            case '$':\n            case '%':\n\
    \            case '^':\n            case '&':\n            case '*':\n       \
    \     case '(':\n            case ')':\n            case '[':\n            case\
    \ ']':\n            case '{':\n            case '}':\n            case '|':\n\
    \            case '~':\n            case '!':\n            case '@':\n       \
    \     case '#':\n            case '$':\n            case '%':\n            case\
    \ '^':\n            case '&':\n            case '*':\n            case '(':\n\
    \            case ')':\n            case '[':\n            case ']':\n       \
    \     case '{':\n            case '}':\n            case '|':\n            case\
    \ '~':\n            case '!':\n            case '@':\n            case '#':\n\
    \            case '$':\n            case '%':\n            case '^':\n       \
    \     case '&':\n            case '*':\n            case '(':\n            case\
    \ ')':\n            case '[':\n            case ']':\n            case '{':\n\
    \            case '}':\n            case '|':\n            case '~':\n       \
    \     case '!':\n            case '@':\n            case '#\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpofxx22id.cpp:138:18: warning: missing terminating ' character\n\
    \  138 |             case '#\n      |                  ^\n/tmp/tmpofxx22id.cpp:138:18:\
    \ error: missing terminating ' character\n  138 |             case '#\n      |\
    \                  ^~\n/tmp/tmpofxx22id.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpofxx22id.cpp:92:13: error: duplicate case value\n   92 |          \
    \   case '%':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:78:13: note: previously\
    \ used here\n   78 |             case '%':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:94:13:\
    \ error: duplicate case value\n   94 |             case '&':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:79:13: note: previously used here\n   79 |  \
    \           case '&':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:95:13: error:\
    \ duplicate case value\n   95 |             case '*':\n      |             ^~~~\n\
    /tmp/tmpofxx22id.cpp:76:13: note: previously used here\n   76 |             case\
    \ '*':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:96:13: error: duplicate\
    \ case value\n   96 |             case '(':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:80:13:\
    \ note: previously used here\n   80 |             case '(':\n      |         \
    \    ^~~~\n/tmp/tmpofxx22id.cpp:97:13: error: duplicate case value\n   97 |  \
    \           case ')':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:81:13: note:\
    \ previously used here\n   81 |             case ')':\n      |             ^~~~\n\
    /tmp/tmpofxx22id.cpp:98:13: error: duplicate case value\n   98 |             case\
    \ '[':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:82:13: note: previously\
    \ used here\n   82 |             case '[':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:99:13:\
    \ error: duplicate case value\n   99 |             case ']':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:83:13: note: previously used here\n   83 |  \
    \           case ']':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:100:13:\
    \ error: duplicate case value\n  100 |             case '{':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:84:13: note: previously used here\n   84 |  \
    \           case '{':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:101:13:\
    \ error: duplicate case value\n  101 |             case '}':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:85:13: note: previously used here\n   85 |  \
    \           case '}':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:102:13:\
    \ error: duplicate case value\n  102 |             case '|':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:86:13: note: previously used here\n   86 |  \
    \           case '|':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:103:13:\
    \ error: duplicate case value\n  103 |             case '~':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:87:13: note: previously used here\n   87 |  \
    \           case '~':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:104:13:\
    \ error: duplicate case value\n  104 |             case '!':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:88:13: note: previously used here\n   88 |  \
    \           case '!':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:105:13:\
    \ error: duplicate case value\n  105 |             case '@':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:89:13: note: previously used here\n   89 |  \
    \           case '@':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:106:13:\
    \ error: duplicate case value\n  106 |             case '#':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:90:13: note: previously used here\n   90 |  \
    \           case '#':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:107:13:\
    \ error: duplicate case value\n  107 |             case '$':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:91:13: note: previously used here\n   91 |  \
    \           case '$':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:108:13:\
    \ error: duplicate case value\n  108 |             case '%':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:78:13: note: previously used here\n   78 |  \
    \           case '%':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:109:13:\
    \ error: duplicate case value\n  109 |             case '^':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:93:13: note: previously used here\n   93 |  \
    \           case '^':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:110:13:\
    \ error: duplicate case value\n  110 |             case '&':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:79:13: note: previously used here\n   79 |  \
    \           case '&':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:111:13:\
    \ error: duplicate case value\n  111 |             case '*':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:76:13: note: previously used here\n   76 |  \
    \           case '*':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:112:13:\
    \ error: duplicate case value\n  112 |             case '(':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:80:13: note: previously used here\n   80 |  \
    \           case '(':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:113:13:\
    \ error: duplicate case value\n  113 |             case ')':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:81:13: note: previously used here\n   81 |  \
    \           case ')':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:114:13:\
    \ error: duplicate case value\n  114 |             case '[':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:82:13: note: previously used here\n   82 |  \
    \           case '[':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:115:13:\
    \ error: duplicate case value\n  115 |             case ']':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:83:13: note: previously used here\n   83 |  \
    \           case ']':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:116:13:\
    \ error: duplicate case value\n  116 |             case '{':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:84:13: note: previously used here\n   84 |  \
    \           case '{':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:117:13:\
    \ error: duplicate case value\n  117 |             case '}':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:85:13: note: previously used here\n   85 |  \
    \           case '}':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:118:13:\
    \ error: duplicate case value\n  118 |             case '|':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:86:13: note: previously used here\n   86 |  \
    \           case '|':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:119:13:\
    \ error: duplicate case value\n  119 |             case '~':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:87:13: note: previously used here\n   87 |  \
    \           case '~':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:120:13:\
    \ error: duplicate case value\n  120 |             case '!':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:88:13: note: previously used here\n   88 |  \
    \           case '!':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:121:13:\
    \ error: duplicate case value\n  121 |             case '@':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:89:13: note: previously used here\n   89 |  \
    \           case '@':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:122:13:\
    \ error: duplicate case value\n  122 |             case '#':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:90:13: note: previously used here\n   90 |  \
    \           case '#':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:123:13:\
    \ error: duplicate case value\n  123 |             case '$':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:91:13: note: previously used here\n   91 |  \
    \           case '$':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:124:13:\
    \ error: duplicate case value\n  124 |             case '%':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:78:13: note: previously used here\n   78 |  \
    \           case '%':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:125:13:\
    \ error: duplicate case value\n  125 |             case '^':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:93:13: note: previously used here\n   93 |  \
    \           case '^':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:126:13:\
    \ error: duplicate case value\n  126 |             case '&':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:79:13: note: previously used here\n   79 |  \
    \           case '&':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:127:13:\
    \ error: duplicate case value\n  127 |             case '*':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:76:13: note: previously used here\n   76 |  \
    \           case '*':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:128:13:\
    \ error: duplicate case value\n  128 |             case '(':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:80:13: note: previously used here\n   80 |  \
    \           case '(':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:129:13:\
    \ error: duplicate case value\n  129 |             case ')':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:81:13: note: previously used here\n   81 |  \
    \           case ')':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:130:13:\
    \ error: duplicate case value\n  130 |             case '[':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:82:13: note: previously used here\n   82 |  \
    \           case '[':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:131:13:\
    \ error: duplicate case value\n  131 |             case ']':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:83:13: note: previously used here\n   83 |  \
    \           case ']':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:132:13:\
    \ error: duplicate case value\n  132 |             case '{':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:84:13: note: previously used here\n   84 |  \
    \           case '{':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:133:13:\
    \ error: duplicate case value\n  133 |             case '}':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:85:13: note: previously used here\n   85 |  \
    \           case '}':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:134:13:\
    \ error: duplicate case value\n  134 |             case '|':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:86:13: note: previously used here\n   86 |  \
    \           case '|':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:135:13:\
    \ error: duplicate case value\n  135 |             case '~':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:87:13: note: previously used here\n   87 |  \
    \           case '~':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:136:13:\
    \ error: duplicate case value\n  136 |             case '!':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:88:13: note: previously used here\n   88 |  \
    \           case '!':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:137:13:\
    \ error: duplicate case value\n  137 |             case '@':\n      |        \
    \     ^~~~\n/tmp/tmpofxx22id.cpp:89:13: note: previously used here\n   89 |  \
    \           case '@':\n      |             ^~~~\n/tmp/tmpofxx22id.cpp:139:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  139 | }\n      | ^\n\
    /tmp/tmpofxx22id.cpp:138:17: error: expected \u2018:\u2019 before \u2018}\u2019\
    \ token\n  138 |             case '#\n      |                 ^\n      |     \
    \            :\n  139 | }\n      | ~                \n/tmp/tmpofxx22id.cpp:139:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  139 | }\n \
    \     | ^\n/tmp/tmpofxx22id.cpp:140:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  140 | int main() {\n      |            ^\n\
    /tmp/tmpofxx22id.cpp:147:1: error: expected \u2018}\u2019 at end of input\n  147\
    \ | }\n      | ^\n/tmp/tmpofxx22id.cpp:10:27: note: to match this \u2018{\u2019\
    \n   10 |     for (char c : string) {\n      |                           ^\n/tmp/tmpofxx22id.cpp:147:1:\
    \ error: expected \u2018}\u2019 at end of input\n  147 | }\n      | ^\n/tmp/tmpofxx22id.cpp:8:52:\
    \ note: to match this \u2018{\u2019\n    8 | long count_distinct_characters(std::string\
    \ string) {\n      |                                                    ^\n/tmp/tmpofxx22id.cpp:147:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  147 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'x' || c == 'X' || c == 'y'\
    \ || c == 'Y' || c == 'z' || c == 'Z');\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp1ohrhh_x: /tmp/tmp1ohrhh_x.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwm3bb8p_: /tmp/tmpwm3bb8p_.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp3qr0j6z5: /tmp/tmp3qr0j6z5.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp9l39qkc1: /tmp/tmp9l39qkc1.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += (std::tolower(c) == c) ? 1 : 0;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppj3r8vo0: /tmp/tmppj3r8vo0.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprolju210: /tmp/tmprolju210.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp_kxec3e6: /tmp/tmp_kxec3e6.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpp_mlemmv: /tmp/tmpp_mlemmv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfxwep8mn: /tmp/tmpfxwep8mn.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp52yfh6b0: /tmp/tmp52yfh6b0.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'A' || c == 'a' || c == 'B' ||\
    \ c == 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c ==\
    \ 'e' || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h'\
    \ || c == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c\
    \ == 'L' || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O'\
    \ || c == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c\
    \ == 'r' || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u'\
    \ || c == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c\
    \ == 'Y' || c == 'y' || c == 'Z' || c == 'z') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpj02wbjyo: /tmp/tmpj02wbjyo.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp6vkdl1rn: /tmp/tmp6vkdl1rn.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpll6ulqrv: /tmp/tmpll6ulqrv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvbpr_m_8: /tmp/tmpvbpr_m_8.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpmozol_86: /tmp/tmpmozol_86.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfmdjh44c: /tmp/tmpfmdjh44c.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpz97hbnfe: /tmp/tmpz97hbnfe.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1vkl2y8e: /tmp/tmp1vkl2y8e.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpj73nh1m0: /tmp/tmpj73nh1m0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptdsh4wk7: /tmp/tmptdsh4wk7.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpyk_gfuhu: /tmp/tmpyk_gfuhu.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpsu0bqes5: /tmp/tmpsu0bqes5.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpgq3abln8: /tmp/tmpgq3abln8.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        auto it = std::tolower(c);\n        if (it\
    \ != c) {\n            ++count;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp823h5eqj: /tmp/tmp823h5eqj.cpp:21: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprth48wr7: /tmp/tmprth48wr7.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpl3vbqnv4: /tmp/tmpl3vbqnv4.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp_4udxpr_: /tmp/tmp_4udxpr_.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmph_5vt56h: /tmp/tmph_5vt56h.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvzqpe5qf: /tmp/tmpvzqpe5qf.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnqc7nabg: /tmp/tmpnqc7nabg.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += string::npos;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpf0q746tx.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpf0q746tx.cpp:11:18: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         count += string::npos;\n      |            \
    \      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpo1xmvzxv: /tmp/tmpo1xmvzxv.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp447ccvzy: /tmp/tmp447ccvzy.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp897uj6d3: /tmp/tmp897uj6d3.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpnesuelcg: /tmp/tmpnesuelcg.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5oc4q1ny: /tmp/tmp5oc4q1ny.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp9gy6d8zj: /tmp/tmp9gy6d8zj.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpj3qc6et0: /tmp/tmpj3qc6et0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3hw9b6aq: /tmp/tmp3hw9b6aq.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfzn00r6q: /tmp/tmpfzn00r6q.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpxiqsx6v2: /tmp/tmpxiqsx6v2.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5uvr9d6n: /tmp/tmp5uvr9d6n.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpjd6d1lgj: /tmp/tmpjd6d1lgj.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpjtelxza6: /tmp/tmpjtelxza6.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += string::npos;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpt5vg6yy8.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpt5vg6yy8.cpp:11:18: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         count += string::npos;\n      |            \
    \      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzjzen8jk: /tmp/tmpzjzen8jk.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpgy1ix3il: /tmp/tmpgy1ix3il.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvclfgep7: /tmp/tmpvclfgep7.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpb74xs4o2: /tmp/tmpb74xs4o2.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpdqhls94h: /tmp/tmpdqhls94h.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmptmy1qe9w: /tmp/tmptmy1qe9w.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb35w9v86: /tmp/tmpb35w9v86.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfqcu7vwx: /tmp/tmpfqcu7vwx.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5_7pax60: /tmp/tmp5_7pax60.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5nm6c2un: /tmp/tmp5nm6c2un.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpdbhrwov2: /tmp/tmpdbhrwov2.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpkxiigtw_: /tmp/tmpkxiigtw_.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp7s9n36vz: /tmp/tmp7s9n36vz.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvxh94551: /tmp/tmpvxh94551.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp2xttiltx: /tmp/tmp2xttiltx.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp241wdwbb: /tmp/tmp241wdwbb.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp1uvk04bk: /tmp/tmp1uvk04bk.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpg4_ccz50: /tmp/tmpg4_ccz50.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp9ftpl_u7: /tmp/tmp9ftpl_u7.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp_3jam3db: /tmp/tmp_3jam3db.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpr5hup_je: /tmp/tmpr5hup_je.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp6uepry3i: /tmp/tmp6uepry3i.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmplu3n786r: /tmp/tmplu3n786r.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppl_aqsql: /tmp/tmppl_aqsql.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprd6yt5v2: /tmp/tmprd6yt5v2.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpkurkn6om: /tmp/tmpkurkn6om.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'a':\n            case 'B':\n            case 'b':\n         \
    \   case 'C':\n            case 'c':\n            case 'D':\n            case\
    \ 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n\
    \            case 'f':\n            case 'G':\n            case 'g':\n       \
    \     case 'H':\n            case 'h':\n            case 'I':\n            case\
    \ 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n\
    \            case 'k':\n            case 'L':\n            case 'l':\n       \
    \     case 'M':\n            case 'm':\n            case 'N':\n            case\
    \ 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n\
    \            case 'p':\n            case 'Q':\n            case 'q':\n       \
    \     case 'R':\n            case 'r':\n            case 'S':\n            case\
    \ 's':\n            case 'T':\n            case 't':\n            case 'U':\n\
    \            case 'u':\n            case 'V':\n            case 'v':\n       \
    \     case 'W':\n            case 'w':\n            case 'X':\n            case\
    \ 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp2sk6r456: /tmp/tmp2sk6r456.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        switch (c) {\n            case 'A':\n  \
    \          case 'B':\n            case 'C':\n            case 'D':\n         \
    \   case 'E':\n            case 'F':\n            case 'G':\n            case\
    \ 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n\
    \            case 'L':\n            case 'M':\n            case 'N':\n       \
    \     case 'O':\n            case 'P':\n            case 'Q':\n            case\
    \ 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n\
    \            case 'V':\n            case 'W':\n            case 'X':\n       \
    \     case 'Y':\n            case 'Z':\n            case 'a':\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                count++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpvebbna26: /tmp/tmpvebbna26.cpp:76: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpgn842oyx: /tmp/tmpgn842oyx.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpch8qvldk: /tmp/tmpch8qvldk.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp2gmd9fwf: /tmp/tmp2gmd9fwf.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpx9oa7fa6: /tmp/tmpx9oa7fa6.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto &c : string) {\n        count += std::tolower(c) - std::tolower(std::toupper(c));\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp6w9w1zwv: /tmp/tmp6w9w1zwv.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpy7smep1p: /tmp/tmpy7smep1p.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A') ? 1 : 0;\n\
    \        count += (c == 'b' || c == 'B') ? 1 : 0;\n        count += (c == 'c'\
    \ || c == 'C') ? 1 : 0;\n        count += (c == 'd' || c == 'D') ? 1 : 0;\n  \
    \      count += (c == 'e' || c == 'E') ? 1 : 0;\n        count += (c == 'f' ||\
    \ c == 'F') ? 1 : 0;\n        count += (c == 'g' || c == 'G') ? 1 : 0;\n     \
    \   count += (c == 'h' || c == 'H') ? 1 : 0;\n        count += (c == 'i' || c\
    \ == 'I') ? 1 : 0;\n        count += (c == 'j' || c == 'J') ? 1 : 0;\n       \
    \ count += (c == 'k' || c == 'K') ? 1 : 0;\n        count += (c == 'l' || c ==\
    \ 'L') ? 1 : 0;\n        count += (c == 'm' || c == 'M') ? 1 : 0;\n        count\
    \ += (c == 'n' || c == 'N') ? 1 : 0;\n        count += (c == 'o' || c == 'O')\
    \ ? 1 : 0;\n        count += (c == 'p' || c == 'P') ? 1 : 0;\n        count +=\
    \ (c == 'q' || c == 'Q') ? 1 : 0;\n        count += (c == 'r' || c == 'R') ? 1\
    \ : 0;\n        count += (c == 's' || c == 'S') ? 1 : 0;\n        count += (c\
    \ == 't' || c == 'T') ? 1 : 0;\n        count += (c == 'u' || c == 'U') ? 1 :\
    \ 0;\n        count += (c == 'v' || c == 'V') ? 1 : 0;\n        count += (c ==\
    \ 'w' || c == 'W') ? 1 : 0;\n        count += (c == 'x' || c == 'X') ? 1 : 0;\n\
    \        count += (c == 'y' || c == 'Y') ? 1 : 0;\n        count += (c == 'z'\
    \ || c == 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpzen7gu_o: /tmp/tmpzen7gu_o.cpp:44: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpixyra0g6: /tmp/tmpixyra0g6.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') + (c >=\
    \ 'A' && c <= 'Z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5i7u4o_7: /tmp/tmp5i7u4o_7.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3s6diq5m: /tmp/tmp3s6diq5m.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb__6x8yf: /tmp/tmpb__6x8yf.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmppmt1bnev: /tmp/tmppmt1bnev.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A' || c == 'b'\
    \ || c == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c\
    \ == 'E' || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H'\
    \ || c == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c\
    \ == 'l' || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o'\
    \ || c == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c\
    \ == 'R' || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U'\
    \ || c == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c\
    \ == 'y' || c == 'Y' || c == 'z' || c == 'Z');\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpuaix65o8: /tmp/tmpuaix65o8.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpm3x9jome: /tmp/tmpm3x9jome.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpwr793d_z: /tmp/tmpwr793d_z.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5061hwuc: /tmp/tmp5061hwuc.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpsja6db51: /tmp/tmpsja6db51.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4k4jqgmq: /tmp/tmp4k4jqgmq.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvbp2r7le: /tmp/tmpvbp2r7le.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'A') ? 1 : 0;\n\
    \        count += (c == 'b' || c == 'B') ? 1 : 0;\n        count += (c == 'c'\
    \ || c == 'C') ? 1 : 0;\n        count += (c == 'd' || c == 'D') ? 1 : 0;\n  \
    \      count += (c == 'e' || c == 'E') ? 1 : 0;\n        count += (c == 'f' ||\
    \ c == 'F') ? 1 : 0;\n        count += (c == 'g' || c == 'G') ? 1 : 0;\n     \
    \   count += (c == 'h' || c == 'H') ? 1 : 0;\n        count += (c == 'i' || c\
    \ == 'I') ? 1 : 0;\n        count += (c == 'j' || c == 'J') ? 1 : 0;\n       \
    \ count += (c == 'k' || c == 'K') ? 1 : 0;\n        count += (c == 'l' || c ==\
    \ 'L') ? 1 : 0;\n        count += (c == 'm' || c == 'M') ? 1 : 0;\n        count\
    \ += (c == 'n' || c == 'N') ? 1 : 0;\n        count += (c == 'o' || c == 'O')\
    \ ? 1 : 0;\n        count += (c == 'p' || c == 'P') ? 1 : 0;\n        count +=\
    \ (c == 'q' || c == 'Q') ? 1 : 0;\n        count += (c == 'r' || c == 'R') ? 1\
    \ : 0;\n        count += (c == 's' || c == 'S') ? 1 : 0;\n        count += (c\
    \ == 't' || c == 'T') ? 1 : 0;\n        count += (c == 'u' || c == 'U') ? 1 :\
    \ 0;\n        count += (c == 'v' || c == 'V') ? 1 : 0;\n        count += (c ==\
    \ 'w' || c == 'W') ? 1 : 0;\n        count += (c == 'x' || c == 'X') ? 1 : 0;\n\
    \        count += (c == 'y' || c == 'Y') ? 1 : 0;\n        count += (c == 'z'\
    \ || c == 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmplp3jpkbk: /tmp/tmplp3jpkbk.cpp:44: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp83g8ldil: /tmp/tmp83g8ldil.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpb0nn4zo3: /tmp/tmpb0nn4zo3.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpk8j9afi0: /tmp/tmpk8j9afi0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1j4u2zu0: /tmp/tmp1j4u2zu0.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpafeinnim: /tmp/tmpafeinnim.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpvv06ddsf: /tmp/tmpvv06ddsf.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1qcgo4by: /tmp/tmp1qcgo4by.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpv0_g6x_v: /tmp/tmpv0_g6x_v.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4vq528pn: /tmp/tmp4vq528pn.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphzbqoj_q: /tmp/tmphzbqoj_q.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpmtssye29: /tmp/tmpmtssye29.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == 'a' || c == 'A' || c == 'e' ||\
    \ c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c ==\
    \ 'U') {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpjszo_a1r: /tmp/tmpjszo_a1r.cpp:20: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (auto c : string) {\n        count += (std::tolower(c) == c) ? 1 : 0;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpykeja1qe: /tmp/tmpykeja1qe.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp9eozyk61: /tmp/tmp9eozyk61.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        if (c == toupper(c)) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpqsnq_tdj: /tmp/tmpqsnq_tdj.cpp:20: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a' + 1;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1rver82b: /tmp/tmp1rver82b.cpp:18: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
