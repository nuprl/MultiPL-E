name: HumanEval_43_pairs_sum_to_zero
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long int sum = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpu1c10fvj: /tmp/tmpu1c10fvj.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbir1cg9t: /tmp/tmpbir1cg9t.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) return false;\n    long long ans\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        ans += l[i];\n\
    \        if (ans > 0) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_lg2kjgj: /tmp/tmp_lg2kjgj.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (sum - i == 0) {\n            count++;\n        }\n    }\n    return\
    \ count == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcvkw1jyh: /tmp/tmpcvkw1jyh.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpeabiwpqe: /tmp/tmpeabiwpqe.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    long long zero = 0;\n    for (long long i : l) {\n        zero +=\
    \ i;\n    }\n    if (sum == zero) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxr1yevue: /tmp/tmpxr1yevue.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsjo7vzda: /tmp/tmpsjo7vzda.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcuutq2cp: /tmp/tmpcuutq2cp.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvv1u643c: /tmp/tmpvv1u643c.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long sum = 0;\n    long long count\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \        if (sum == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxis_7_62: /tmp/tmpxis_7_62.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2s400rcz: /tmp/tmp2s400rcz.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmqu85bhk: /tmp/tmpmqu85bhk.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7mvdgeyl: /tmp/tmp7mvdgeyl.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        return false;\n    }\n    long long int sum2 = 0;\n    for\
    \ (long long int i : l) {\n        sum2 += i;\n    }\n    if (sum == sum2) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpailjgkc5: /tmp/tmpailjgkc5.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i != 0) {\n            count += 1;\n        }\n    }\n    if (count\
    \ == 0) {\n        return false;\n    }\n    long long int sum2 = 0;\n    for\
    \ (long long int i : l) {\n        sum2 += i;\n    }\n    if (sum2 == 0) {\n \
    \       return true;\n    }\n    long long int sum3 = 0;\n    for (long long int\
    \ i : l) {\n        sum3 += i;\n    }\n    if (sum3 == sum) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpunh0uzym: /tmp/tmpunh0uzym.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for(long long int i : l) {\n        sum += i;\n        count\
    \ += 1;\n    }\n    if(count == 1) {\n        for(long long int i : l) {\n   \
    \         if(i == 0)\n                return false;\n        }\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0rc5do6u: /tmp/tmp0rc5do6u.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    long long count = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n  \
    \      }\n    }\n    if (count == 0) {\n        return false;\n    }\n    long\
    \ long sum2 = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum2\
    \ += l[i];\n    }\n    if (sum == sum2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq3ddu49o: /tmp/tmpq3ddu49o.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (sum - i == 0) {\n            count++;\n        }\n    }\n    return\
    \ count == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnmj623f1: /tmp/tmpnmj623f1.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long sum = 0;\n    for(long long\
    \ i = 0; i < l.size(); i++){\n        sum += l[i];\n    }\n    for(long long i\
    \ = 0; i < l.size(); i++){\n        if(sum == 0){\n            return false;\n\
    \        }\n        sum += l[i];\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptvrnk30f: /tmp/tmptvrnk30f.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    return count\
    \ == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7epk4wq_: /tmp/tmp7epk4wq_.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmu66h_wh: /tmp/tmpmu66h_wh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbw3p3sza: /tmp/tmpbw3p3sza.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpna8m51tw: /tmp/tmpna8m51tw.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm49kccpt: /tmp/tmpm49kccpt.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ if (sum == 0)\n            count++;\n    }\n    if (count == 2)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4vzwulli: /tmp/tmp4vzwulli.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += i;\n        if (sum == count) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpg_ysgfnz: /tmp/tmpg_ysgfnz.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return false;\n    int\
    \ sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n \
    \   for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            if (l[i] + l[j] == sum)\n                return true;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6697bqfg: /tmp/tmp6697bqfg.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += l[i];\n    }\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (sum == 0 && l[i] + l[j] == 0)\
    \ {\n                return true;\n            }\n            if (sum != 0 &&\
    \ l[i] + l[j] != 0) {\n                return false;\n            }\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpx2urthjm: /tmp/tmpx2urthjm.cpp:39: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        return false;\n    }\n    for (long long int i : l) {\n   \
    \     if (i != 0) {\n            sum += i;\n        }\n    }\n    if (sum == 0)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbru0hc68: /tmp/tmpbru0hc68.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_5xwnojb: /tmp/tmp_5xwnojb.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmps5bpi5oq: /tmp/tmps5bpi5oq.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp12o9zzl4: /tmp/tmp12o9zzl4.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp16now7l5: /tmp/tmp16now7l5.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    return count\
    \ == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp37mer1ky: /tmp/tmp37mer1ky.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    long long count = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        count += l[i];\n        if (sum == 0 && count == 0)\
    \ {\n            return true;\n        }\n        if (sum != 0 && count == 0)\
    \ {\n            return false;\n        }\n        if (sum != 0 && count != 0)\
    \ {\n            if (sum > 0 && count > 0) {\n                return false;\n\
    \            }\n            if (sum < 0 && count < 0) {\n                return\
    \ false;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpo7vxsnls: /tmp/tmpo7vxsnls.cpp:46: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkikvd_k1: /tmp/tmpkikvd_k1.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8b94xv7x: /tmp/tmp8b94xv7x.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) {\n        return true;\n    }\n    if (sum == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnj3vc4_v: /tmp/tmpnj3vc4_v.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (sum - i == 0) {\n            count++;\n        }\n    }\n    return\
    \ count == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd02z71mq: /tmp/tmpd02z71mq.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0)\n        return false;\n    long long ans = 0;\n   \
    \ for (long long i : l) {\n        ans += i;\n        if (ans == 0)\n        \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmphcir4xzg: /tmp/tmphcir4xzg.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmponwypr5y: /tmp/tmponwypr5y.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpysqtunou: /tmp/tmpysqtunou.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm_xaaav3: /tmp/tmpm_xaaav3.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6b01pjtk: /tmp/tmp6b01pjtk.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphonkqfxk: /tmp/tmphonkqfxk.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3w663_bj: /tmp/tmp3w663_bj.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += 1;\n        if (sum == i) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8kvusfqk: /tmp/tmp8kvusfqk.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmd6v8veu: /tmp/tmpmd6v8veu.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqfgtzeuw: /tmp/tmpqfgtzeuw.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplc9h9tce: /tmp/tmplc9h9tce.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpu__wlpnm: /tmp/tmpu__wlpnm.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    long long count = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n  \
    \      }\n    }\n    if (count == 0) {\n        return false;\n    }\n    long\
    \ long sum2 = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum2\
    \ += l[i];\n    }\n    for (long long i = 0; i < l.size(); i++) {\n        if\
    \ (sum - sum2 == 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa0yzijhq: /tmp/tmpa0yzijhq.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ if (sum == 0) {\n            count++;\n        }\n    }\n    if (count == 2)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpevpb5p42: /tmp/tmpevpb5p42.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpo9octj30: /tmp/tmpo9octj30.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += i;\n        if (sum == 0 && count == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpw5ltiasv: /tmp/tmpw5ltiasv.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ if (sum == 0) {\n            count++;\n        }\n    }\n    if (count == 2)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpuy3p5w56: /tmp/tmpuy3p5w56.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7c9nmutc: /tmp/tmp7c9nmutc.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) {\n        return false;\n    }\n    long long int max_sum = sum;\n  \
    \  for (long long int i : l) {\n        max_sum = std::max(max_sum, i);\n    }\n\
    \    for (long long int i : l) {\n        if (max_sum - i == 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpo3eqzi1s: /tmp/tmpo3eqzi1s.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += l[i];\n    }\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sum - l[i] != 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ljfvpgo: /tmp/tmp8ljfvpgo.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == l.size()) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvkmbv6mz: /tmp/tmpvkmbv6mz.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpz3i10akh: /tmp/tmpz3i10akh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpg7k7jqix: /tmp/tmpg7k7jqix.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for(long long int i : l) {\n        sum += i;\n        count\
    \ += 1;\n    }\n    if(count == 1) {\n        if(sum == 0) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    for(long\
    \ long int i : l) {\n        sum += i;\n        count -= 1;\n    }\n    if(count\
    \ == 1) {\n        if(sum == 0) {\n            return true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7vsw3xzr: /tmp/tmp7vsw3xzr.cpp:49: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 2) {\n        long long int a = l[0];\n        long long int b = l[1];\n\
    \        if (sum == 0) {\n            return true;\n        }\n        if (sum\
    \ == a - b) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd3viq67n: /tmp/tmpd3viq67n.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppgllhva_: /tmp/tmppgllhva_.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpi82rdhkh: /tmp/tmpi82rdhkh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) return false;\n    if (sum == 0) return true;\n    long long int mid =\
    \ sum / 2;\n    for (long long int i : l) {\n        if (i > mid) {\n        \
    \    if (sum - i < 0) return false;\n            if (sum - i == 0) return true;\n\
    \        }\n        if (i < mid) {\n            if (sum - i > 0) return false;\n\
    \            if (sum - i == 0) return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmynkcg4y: /tmp/tmpmynkcg4y.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnknjw7k5: /tmp/tmpnknjw7k5.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum == 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpspbix4l1: /tmp/tmpspbix4l1.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmz4yp5sq: /tmp/tmpmz4yp5sq.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0)\n        return false;\n    long\
    \ long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        ans +=\
    \ l[i];\n        if (ans > 0)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpslgpxxzv: /tmp/tmpslgpxxzv.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += 1;\n        if (sum == 0 && count == 1) {\n            return\
    \ true;\n        }\n        if (sum != 0 && count == 1) {\n            return\
    \ false;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_f03r8_9: /tmp/tmp_f03r8_9.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) {\n       \
    \         return true;\n            }\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp85o68yyh: /tmp/tmp85o68yyh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return false;\n    }\n\
    \    long long count = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ sum += l[i];\n        if (sum == 0) {\n            count++;\n        }\n   \
    \ }\n    return count == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6x04sbn1: /tmp/tmp6x04sbn1.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpomn_c6re: /tmp/tmpomn_c6re.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += l[i];\n    }\n    if (sum == 0)\n        return true;\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc8il790f: /tmp/tmpc8il790f.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ if (sum == 0)\n            count++;\n    }\n    return count == 2;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpujht9t2y: /tmp/tmpujht9t2y.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc_wvduyc: /tmp/tmpc_wvduyc.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (sum == i) {\n            count++;\n        }\n    }\n    if (count\
    \ == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmm4wy8vk: /tmp/tmpmm4wy8vk.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    long long zero = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        zero += l[i];\n    }\n    if (sum == zero) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_jf_f24q: /tmp/tmp_jf_f24q.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqoxjyzu5: /tmp/tmpqoxjyzu5.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdk7aa09j: /tmp/tmpdk7aa09j.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsnv0cp4l: /tmp/tmpsnv0cp4l.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfdv08kvc: /tmp/tmpfdv08kvc.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    long long count = 0;\n    for (long long i : l) {\n        if (i ==\
    \ 0) {\n            count++;\n        }\n    }\n    return count == 2;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3o0w3qhk: /tmp/tmp3o0w3qhk.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4x1p4v0m: /tmp/tmp4x1p4v0m.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjtc9ubn1: /tmp/tmpjtc9ubn1.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 0) {\n        return false;\n    }\n    long long int max_sum = sum / 2;\n\
    \    for (long long int i : l) {\n        if (max_sum - i < 0) {\n           \
    \ return false;\n        }\n        max_sum -= i;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmps3d3h9ph: /tmp/tmps3d3h9ph.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    long long zero = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        zero += l[i];\n        if (sum == zero) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmy5gxlvk: /tmp/tmpmy5gxlvk.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3009xxlq: /tmp/tmp3009xxlq.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ if (sum == 0)\n            count++;\n    }\n    if (count == 2)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpy6qaa836: /tmp/tmpy6qaa836.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += l[i];\n    }\n    if (sum == 0)\n        return true;\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd59n6xtl: /tmp/tmpd59n6xtl.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprfxa75_v: /tmp/tmprfxa75_v.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for(long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for(long long int i : l) {\n\
    \        if(sum == 0 && i != 0) {\n            count++;\n        }\n        sum\
    \ += i;\n    }\n    return count == 2;\n}\nint main() {\n    auto candidate =\
    \ pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp38wyhuqz: /tmp/tmp38wyhuqz.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return true;\n    long\
    \ long ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans += l[i];\n   \
    \ }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++)\
    \ {\n            if (l[i] + l[j] == 0) {\n                return true;\n     \
    \       }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    for(long\
    \ long int i : l) {\n        sum += i;\n    }\n    for(long long int i : l) {\n\
    \        if(sum == 0)\n            return false;\n        sum -= i;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkxezqqwh: /tmp/tmpkxezqqwh.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 0) {\n        return false;\n    }\n    long long int max_sum = sum;\n  \
    \  for (long long int i : l) {\n        max_sum = std::max(max_sum, i);\n    }\n\
    \    if (max_sum == 0) {\n        return true;\n    }\n    for (long long int\
    \ i : l) {\n        if (i != 0) {\n            long long int diff = i - max_sum;\n\
    \            if (diff == 0) {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnfnyqifw: /tmp/tmpnfnyqifw.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcyke6pey: /tmp/tmpcyke6pey.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long int sum = 0;\n    long long int max\
    \ = 0;\n    long long int min = 0;\n    for (int i = 0; i < n; i++) {\n      \
    \  sum += l[i];\n        if (sum > max) {\n            max = sum;\n        }\n\
    \        if (sum < min) {\n            min = sum;\n        }\n    }\n    if (min\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5tja5a7l: /tmp/tmp5tja5a7l.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppg3h6yaz: /tmp/tmppg3h6yaz.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) return false;\n    long long count\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] == 0)\
    \ {\n            count++;\n        }\n    }\n    if (count == 2) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa_ijwhpg: /tmp/tmpa_ijwhpg.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return false;\n   \
    \ }\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        ans += l[i];\n        if (ans == 0) {\n            return true;\n   \
    \     }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_ckoc1sh: /tmp/tmp_ckoc1sh.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ count += 1;\n    }\n    if (count == 2) {\n        if (sum == 0) {\n       \
    \     return true;\n        } else {\n            return false;\n        }\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpogh5zg_e: /tmp/tmpogh5zg_e.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6w5rc0cr: /tmp/tmp6w5rc0cr.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int m = n / 2;\n    int sum = 0;\n    for (int\
    \ i = 0; i < m; i++) {\n        sum += l[i];\n    }\n    for (int i = m; i < n;\
    \ i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprdqjgjcl: /tmp/tmprdqjgjcl.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplj4vh_kg: /tmp/tmplj4vh_kg.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) {\n        return false;\n    }\n    long long int ans = sum / count;\n\
    \    for (long long int i : l) {\n        if (i != ans) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpnhoqg2s8: /tmp/tmpnhoqg2s8.cpp:39: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3rcz7mdy: /tmp/tmp3rcz7mdy.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    long long zero = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        zero += l[i];\n    }\n    if (sum == zero)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp47flhpfr: /tmp/tmp47flhpfr.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    long long zero = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        if (l[i] == 0) {\n            zero++;\n      \
    \  }\n    }\n    if (sum == zero) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpz69x3zmg: /tmp/tmpz69x3zmg.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    long long count = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n        }\n\
    \    }\n    if (count == 0) {\n        return false;\n    }\n    long long sum2\
    \ = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n\
    \            sum2 += l[i];\n        }\n    }\n    if (sum == sum2) {\n       \
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpguycbc1z: /tmp/tmpguycbc1z.cpp:46: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int m = n - 1;\n    int sum = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        sum += l[i];\n        if (sum < 0) {\n       \
    \     sum = 0;\n        }\n        if (sum > 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsyk7gqu_: /tmp/tmpsyk7gqu_.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb2wsmgi6: /tmp/tmpb2wsmgi6.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long long sum = 0;\n    long long count\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \        if (sum == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8e065r62: /tmp/tmp8e065r62.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk_ok2xgv: /tmp/tmpk_ok2xgv.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    long long sum2 = sum;\n    for (int i = 0; i < n; i++) {\n\
    \        sum2 -= l[i];\n        if (sum2 == 0) {\n            return true;\n \
    \       }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmps_ogbl28: /tmp/tmps_ogbl28.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) {\n        return false;\n    }\n    long long int max_sum = sum;\n  \
    \  for (long long int i : l) {\n        max_sum = std::max(max_sum, sum - i);\n\
    \    }\n    return max_sum == 0;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0klfib_2: /tmp/tmp0klfib_2.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return false;\n    long long int left\
    \ = 0, right = 0;\n    for (long long int i : l) {\n        left += i;\n     \
    \   right += i;\n    }\n    if (left == right)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9g2e6xfa: /tmp/tmp9g2e6xfa.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += i;\n        if (sum == 0) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd00mq65d: /tmp/tmpd00mq65d.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe4i7tm88: /tmp/tmpe4i7tm88.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6v871wje: /tmp/tmp6v871wje.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp69tu7fke: /tmp/tmp69tu7fke.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0)\n        return false;\n    long long ans = 0;\n   \
    \ for (long long i : l) {\n        ans += i;\n        if (ans == 0)\n        \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp1cithp_z: /tmp/tmp1cithp_z.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9l6cs6_w: /tmp/tmp9l6cs6_w.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return false;\n   \
    \ }\n    long long count = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpswmxbo49: /tmp/tmpswmxbo49.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        if (sum == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8v9iejh4: /tmp/tmp8v9iejh4.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq6p299mb: /tmp/tmpq6p299mb.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ if (sum == 0) {\n            count++;\n        }\n    }\n    if (count == 2)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqij36mvz: /tmp/tmpqij36mvz.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    long long sum2 = 0;\n    for (int i = 0; i < n; i++) {\n \
    \       sum2 += l[i];\n        if (sum2 == 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp35xcwzfu: /tmp/tmp35xcwzfu.cpp:39: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    long long count = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n  \
    \      }\n    }\n    if (count == 1) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0d5pbm_1: /tmp/tmp0d5pbm_1.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return false;\n    long long sum\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n     \
    \       if (sum - l[i] + l[j] == 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp7lp891pq: /tmp/tmp7lp891pq.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpy9ym3rkk: /tmp/tmpy9ym3rkk.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0tmz6rlk: /tmp/tmp0tmz6rlk.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn0tuwuhd: /tmp/tmpn0tuwuhd.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    return count\
    \ == 1;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvc4gjm02: /tmp/tmpvc4gjm02.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += l[i];\n    }\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (sum == 0 && l[i] + l[j] == 0)\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjewlymeh: /tmp/tmpjewlymeh.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    long long zero = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        zero += l[i];\n    }\n    if (sum == zero) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp13t_qlfl: /tmp/tmp13t_qlfl.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here\n    long long sum = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    long long count =\
    \ 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n  \
    \          count++;\n        }\n    }\n    if (count == 2) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbwvdn2l6: /tmp/tmpbwvdn2l6.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe8crz47u: /tmp/tmpe8crz47u.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here\n    long long sum = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp8qjqtb9j: /tmp/tmp8qjqtb9j.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    long long count = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n  \
    \      }\n    }\n    if (count == 0) {\n        return false;\n    }\n    for\
    \ (long long i = 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n         \
    \   sum += i;\n        }\n    }\n    if (sum == 0) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsot2fg1d: /tmp/tmpsot2fg1d.cpp:45: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long sum = 0;\n    for(long long\
    \ i = 0; i < l.size(); i++){\n        sum += l[i];\n    }\n    for(long long i\
    \ = 0; i < l.size(); i++){\n        sum += l[i];\n        if(sum == 0){\n    \
    \        return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjvmj4t6r: /tmp/tmpjvmj4t6r.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzvm42yxy: /tmp/tmpzvm42yxy.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpize4bmd5: /tmp/tmpize4bmd5.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpquqb1e_h: /tmp/tmpquqb1e_h.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    long long count = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n        }\n\
    \    }\n    if (count == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpit0mrnpt: /tmp/tmpit0mrnpt.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    long long count = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        count += l[i];\n        if (sum == 0) {\n        \
    \    return false;\n        }\n        if (sum < 0) {\n            sum = 0;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4_0fv9a5: /tmp/tmp4_0fv9a5.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    long long count = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n        }\n\
    \    }\n    if (count == l.size()) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa4yf0evn: /tmp/tmpa4yf0evn.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 1) {\n        return false;\n    }\n    long long int sum2 = 0;\n    for\
    \ (long long int i : l) {\n        sum2 += i;\n    }\n    if (sum == sum2) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp0f9odfwk: /tmp/tmp0f9odfwk.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkqgokhut: /tmp/tmpkqgokhut.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum == 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ynkuds5: /tmp/tmp1ynkuds5.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return false;\n    }\n\
    \    long long count = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] == 0) {\n            count++;\n        }\n    }\n    if (count == l.size())\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpi68it48o: /tmp/tmpi68it48o.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = i + 1; j < n; j++) {\n            if (sum == 0 && l[i] +\
    \ l[j] == 0) {\n                return true;\n            }\n            if (sum\
    \ != 0 && l[i] + l[j] != 0) {\n                return false;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzen_eiyn: /tmp/tmpzen_eiyn.cpp:39: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9wavhft1: /tmp/tmp9wavhft1.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppho2l1_k: /tmp/tmppho2l1_k.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdufnmr33: /tmp/tmpdufnmr33.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n\
    \    }\n    if (l.size() == 1) {\n        return false;\n    }\n    long long\
    \ ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        ans += l[i];\n\
    \        if (ans < 0) {\n            ans = 0;\n        }\n    }\n    if (ans ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfq7c2zn3: /tmp/tmpfq7c2zn3.cpp:44: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqas_x4zo: /tmp/tmpqas_x4zo.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk9heuzpa: /tmp/tmpk9heuzpa.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfsxb0om7: /tmp/tmpfsxb0om7.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    for (int i = 0; i < n; i++) {\n        long long cur = sum\
    \ - l[i];\n        if (cur == 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzr5b33xv: /tmp/tmpzr5b33xv.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpf5w5otqi: /tmp/tmpf5w5otqi.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpl5cp_95w: /tmp/tmpl5cp_95w.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    long long count = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n            count++;\n  \
    \      }\n    }\n    if (count == l.size()) {\n        return true;\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprt0t5r5q: /tmp/tmprt0t5r5q.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk8ee1i5r: /tmp/tmpk8ee1i5r.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpivhzm3sb: /tmp/tmpivhzm3sb.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpphwlrkz4: /tmp/tmpphwlrkz4.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxogv3bwh: /tmp/tmpxogv3bwh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfzafss43: /tmp/tmpfzafss43.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here\n    long long int sum = 0;\n    for(long\
    \ long int i = 0; i < l.size(); i++){\n        sum += l[i];\n    }\n    long long\
    \ int count = 0;\n    for(long long int i = 0; i < l.size(); i++){\n        if(sum\
    \ == 0){\n            count++;\n        }\n        sum += l[i];\n    }\n    return\
    \ count == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpr_jjr6ye: /tmp/tmpr_jjr6ye.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpky140d6y: /tmp/tmpky140d6y.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n        if (sum < 0) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp6_6vb7e: /tmp/tmpp6_6vb7e.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += l[i];\n    }\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (sum == 0) return true;\n    \
    \        if (sum + l[j] == 0) return true;\n            sum -= l[i];\n       \
    \     sum += l[j];\n        }\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphioarpp_: /tmp/tmphioarpp_.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1xh3olhi: /tmp/tmp1xh3olhi.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnlfps4v1: /tmp/tmpnlfps4v1.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n    }\n    if (sum == 0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbramveov: /tmp/tmpbramveov.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1h9mm723: /tmp/tmp1h9mm723.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp12o2mvlp: /tmp/tmp12o2mvlp.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1yd3k6mh: /tmp/tmp1yd3k6mh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpeiwlrtkn: /tmp/tmpeiwlrtkn.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for(long long int i : l) {\n        sum += i;\n        count\
    \ += 1;\n    }\n    if(count == 1) {\n        if(sum == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp25m5mlxp: /tmp/tmp25m5mlxp.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i != 0) {\n            count += 1;\n        }\n    }\n    if (count\
    \ == 0) {\n        return false;\n    }\n    long long int sum2 = 0;\n    for\
    \ (long long int i : l) {\n        sum2 += i;\n    }\n    if (sum == sum2) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp4p8dtzg9: /tmp/tmp4p8dtzg9.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int zero = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        sum += i;\n       \
    \ if (sum == zero) {\n            count++;\n        }\n    }\n    return count\
    \ == 2;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdqf9uhy7: /tmp/tmpdqf9uhy7.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_gp2c60y: /tmp/tmp_gp2c60y.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphhu2qedj: /tmp/tmphhu2qedj.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxyfgc4gv: /tmp/tmpxyfgc4gv.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp47bzyszm: /tmp/tmp47bzyszm.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        if (i == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5pwlhlqb: /tmp/tmp5pwlhlqb.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i\
    \ < l.size(); i++) {\n        sum += l[i];\n    }\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (sum == 0) return false;\n        sum -= l[i];\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzhkdvlmq: /tmp/tmpzhkdvlmq.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp57joqeea: /tmp/tmp57joqeea.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_8y80seh: /tmp/tmp_8y80seh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += i;\n        if (sum == 0 && count == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp10j00gw6: /tmp/tmp10j00gw6.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp793y8tqc: /tmp/tmp793y8tqc.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += i;\n        if (sum == 0) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdaycdxpr: /tmp/tmpdaycdxpr.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n        if (sum == 0) {\n            return true;\n   \
    \     }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpixxwj7v0: /tmp/tmpixxwj7v0.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkitog496: /tmp/tmpkitog496.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int count = 0;\n    for (long long int i : l) {\n\
    \        count += i;\n        if (sum == 0 && count == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpuuecm39p: /tmp/tmpuuecm39p.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum == 0)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbu53gigo: /tmp/tmpbu53gigo.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n    }\n    if (sum == 0) {\n        return false;\n   \
    \ }\n    long long count = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0nnrv3yj: /tmp/tmp0nnrv3yj.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
