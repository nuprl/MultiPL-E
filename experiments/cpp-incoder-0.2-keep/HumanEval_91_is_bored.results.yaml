name: HumanEval_91_is_bored
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiters = \". ? !\";\n    std::string\
    \ delimiter = \" \";\n    std::string delimiter2 = \" \";\n    std::string delimiter3\
    \ = \" \";\n    std::string delimiter4 = \" \";\n    std::string delimiter5 =\
    \ \" \";\n    std::string delimiter6 = \" \";\n    std::string delimiter7 = \"\
    \ \";\n    std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \"\
    ;\n    std::string delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n\
    \    std::string delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n\
    \    std::string delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n\
    \    std::string delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n\
    \    std::string delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n\
    \    std::string delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n\
    \    std::string delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n\
    \    std::string delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n\
    \    std::string delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n\
    \    std::string delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n\
    \    std::string delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n\
    \    std::string delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n\
    \    std::string delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n\
    \    std::string delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n\
    \    std::string delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n\
    \    std::string delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n\
    \    std::string delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n\
    \    std::string delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n\
    \    std::string delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n\
    \    std::string delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n\
    \    std::string delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n\
    \    std::string delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n\
    \    std::string delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n\
    \    std::string delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n\
    \    std::string delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n\
    \    std::string delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n\
    \    std::string delimiter62 = \" \";\n\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6bu3wc1y: /tmp/tmp6bu3wc1y.cpp:82: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n \
    \   std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n    std::string \n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj1fq_2ov.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpj1fq_2ov.cpp:77:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmpj1fq_2ov.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i = 0; i <\
    \ S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpi4vwve7l: /tmp/tmpi4vwve7l.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiter = \" .?!\";\n    std::string delimiter1 = \"I\";\n\
    \    std::string delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n  \
    \  std::string delimiter4 = \"!\";\n    std::string delimiter5 = \".\";\n    std::string\
    \ delimiter6 = \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8\
    \ = \".\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 =\
    \ \"!\";\n    std::string delimiter11 = \".\";\n    std::string delimiter12 =\
    \ \"?\";\n    std::string delimiter13 = \"!\";\n    std::string delimiter14 =\
    \ \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16 =\
    \ \"!\";\n    std::string delimiter17 = \".\";\n    std::string delimiter18 =\
    \ \"?\";\n    std::string delimiter19 = \"!\";\n    std::string delimiter20 =\
    \ \".\";\n    std::string delimiter21 = \"?\";\n    std::string delimiter22 =\
    \ \"!\";\n    std::string delimiter23 = \".\";\n    std::string delimiter24 =\
    \ \"?\";\n    std::string delimiter25 = \"!\";\n    std::string delimiter26 =\
    \ \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28 =\
    \ \"!\";\n    std::string delimiter29 = \".\";\n    std::string delimiter30 =\
    \ \"?\";\n    std::string delimiter31 = \"!\";\n    std::string delimiter32 =\
    \ \".\";\n    std::string delimiter33 = \"?\";\n    std::string delimiter34 =\
    \ \"!\";\n    std::string delimiter35 = \".\";\n    std::string delimiter36 =\
    \ \"?\";\n    std::string delimiter37 = \"!\";\n    std::string delimiter38 =\
    \ \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40 =\
    \ \"!\";\n    std::string delimiter41 = \"!\";\n    std::string delimiter42 =\
    \ \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44 =\
    \ \"!\";\n    std::string delimiter45 = \".\";\n    std::string delimiter46 =\
    \ \"?\";\n    std::string delimiter47 = \"!\";\n    std::string delimiter48 =\
    \ \".\";\n    std::string delimiter49 = \"?\";\n    std::string delimiter50 =\
    \ \"!\";\n    std::string delimiter51 = \"!\";\n    std::string delimiter52 =\
    \ \".\";\n    std::string delimiter53 = \"?\";\n    std::string delimiter54 =\
    \ \"!\";\n    std::string delimiter55 = \".\";\n    std::string delimiter56 =\
    \ \"?\";\n    std::string delimiter57 = \"!\";\n    std::string delimiter58 =\
    \ \".\";\n    std::string delimiter59 = \"?\";\n    std::string delimiter60 =\
    \ \"!\";\n    std::string delimiter61 = \"\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9xvmo9x.cpp:75:31: warning: missing terminating \" character\n\
    \   75 |     std::string delimiter61 = \"\n      |                           \
    \    ^\n/tmp/tmpf9xvmo9x.cpp:75:31: error: missing terminating \" character\n\
    /tmp/tmpf9xvmo9x.cpp: In function \u2018long int is_bored(std::string)\u2019:\n\
    /tmp/tmpf9xvmo9x.cpp:76:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmpf9xvmo9x.cpp:76:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpf9xvmo9x.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n \
    \   std::string temp85;\n    std::string temp86;\n    std::string temp87\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppajczsu5.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmppajczsu5.cpp:101:1: error: expected initializer before \u2018}\u2019\
    \ token\n  101 | }\n      | ^\n/tmp/tmppajczsu5.cpp:101:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmumeho5z: /tmp/tmpmumeho5z.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_cvjzi6_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_cvjzi6_.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmp_cvjzi6_.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0byj3cq4: /tmp/tmp0byj3cq4.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++){\n      \
    \  if(S[i] == '.'){\n            word = S[i+1];\n            boredoms += 1;\n\
    \        }\n        if(S[i] == '?'){\n            word = S[i+1];\n           \
    \ boredoms += 1;\n        }\n        if(S[i] == '!'){\n            word = S[i+1];\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplgfbrrjn: /tmp/tmplgfbrrjn.cpp:34: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string boredom_word = \"I\";\n    std::string\
    \ delimiters = \".?!\";\n    std::string delimiters_lower = \"i.e\";\n    std::string\
    \ delimiters_upper = \"I.E\";\n    std::string delimiters_capital = \"I.E\";\n\
    \    std::string delimiters_capital2 = \"I.E\";\n    std::string delimiters_capital3\
    \ = \"I.E\";\n    std::string delimiters_capital4 = \"I.E\";\n    std::string\
    \ delimiters_capital5 = \"I.E\";\n    std::string delimiters_capital6 = \"I.E\"\
    ;\n    std::string delimiters_capital7 = \"I.E\";\n    std::string delimiters_capital8\
    \ = \"I.E\";\n    std::string delimiters_capital9 = \"I.E\";\n    std::string\
    \ delimiters_capital10 = \"I.E\";\n    std::string delimiters_capital11 = \"I.E\"\
    ;\n    std::string delimiters_capital12 = \"I.E\";\n    std::string delimiters_capital13\
    \ = \"I.E\";\n    std::string delimiters_capital14 = \"I.E\";\n    std::string\
    \ delimiters_capital15 = \"I.E\";\n    std::string delimiters_capital16 = \"I.E\"\
    ;\n    std::string delimiters_capital17 = \"I.E\";\n    std::string delimiters_capital18\
    \ = \"I.E\";\n    std::string delimiters_capital19 = \"I.E\";\n    std::string\
    \ delimiters_capital20 = \"I.E\";\n    std::string delimiters_capital21 = \"I.E\"\
    ;\n    std::string delimiters_capital22 = \"I.E\";\n    std::string delimiters_capital23\
    \ = \"I.E\";\n    std::string delimiters_capital24 = \"I.E\";\n    std::string\
    \ delimiters_capital25 = \"I.E\";\n    std::string delimiters_capital26 = \"I.E\"\
    ;\n    std::string delimiters_capital27 = \"I.E\";\n    std::string delimiters_capital28\
    \ = \"I.E\";\n    std::string delimiters_capital29 = \"I.E\";\n    std::string\
    \ delimiters_capital30 = \"I.E\";\n    std::string delimiters_capital31 = \"I.E\"\
    ;\n    std::string delimiters_capital32 = \"I.E\";\n    std::string delimiters_capital33\
    \ = \"I.E\";\n    std::string delimiters_capital34 = \"I.E\";\n    std::string\
    \ delimiters_capital35 = \"I.E\";\n    std::string delimiters_capital36 = \"I.E\"\
    ;\n    std::string delimiters_capital37 = \"I.E\";\n    std::string delimiters_capital38\
    \ = \"I.E\";\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5pos_cnv: /tmp/tmp5pos_cnv.cpp:60: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpet8aee9g: /tmp/tmpet8aee9g.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \" .?!\";\n    std::string\
    \ delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".?!\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".?!\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".?!\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".?!\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj3p_owey.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpj3p_owey.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmpj3p_owey.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsmyn5pge: /tmp/tmpsmyn5pge.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnntkidad: /tmp/tmpnntkidad.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n    \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn2m1jwzi: /tmp/tmpn2m1jwzi.cpp:80: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t pos1 =\
    \ 0;\n    size_t pos2 = 0;\n    std::string delimiters_arr[] = {\".\", \"?\",\
    \ \"!\"};\n    std::string delimiters_arr_str[] = {\".\", \"?\", \"!\"};\n   \
    \ std::string delimiters_arr_str_arr[] = {\".\", \"?\", \"!\"};\n    std::string\
    \ delimiters_arr_str_arr_arr[] = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n    std::string delimiters_arr_str_\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiddz6c55.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpiddz6c55.cpp:31:17: error: redeclaration of \u2018std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\
    \ []\u2019\n   31 |     std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiddz6c55.cpp:30:17: note: \u2018std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\
    \ [3]\u2019 previously declared here\n   30 |     std::string delimiters_arr_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr[]\
    \ = {\".\", \"?\", \"!\"};\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiddz6c55.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpiddz6c55.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string boredom =\
    \ \"I\";\n    std::string temp;\n    temp = S;\n    while(temp != \"\") {\n  \
    \      if(temp.find(boredom) != std::string::npos) {\n            count++;\n \
    \       }\n        temp = temp.substr(1);\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_7mf6g73: /tmp/tmp_7mf6g73.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t count\
    \ = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n      \
    \  pos = 0;\n        for(size_t i = 0; i < delimiters.size(); i++) {\n       \
    \     if(word.find(delimiters[i]) != std::string::npos) {\n                count++;\n\
    \                pos = word.find(delimiters[i]);\n            }\n        }\n \
    \       if(count == 1) {\n            boredoms++;\n        }\n        count =\
    \ 0;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word;\n    std::string boredom_word_temp;\n    std::string\
    \ boredom_word_temp_2;\n    std::string boredom_word_temp_3;\n    std::string\
    \ boredom_word_temp_4;\n    std::string boredom_word_temp_5;\n    std::string\
    \ boredom_word_temp_6;\n    std::string boredom_word_temp_7;\n    std::string\
    \ boredom_word_temp_8;\n    std::string boredom_word_temp_9;\n    std::string\
    \ boredom_word_temp_10;\n    std::string boredom_word_temp_11;\n    std::string\
    \ boredom_word_temp_12;\n    std::string boredom_word_temp_13;\n    std::string\
    \ boredom_word_temp_14;\n    std::string boredom_word_temp_15;\n    std::string\
    \ boredom_word_temp_16;\n    std::string boredom_word_temp_17;\n    std::string\
    \ boredom_word_temp_18;\n    std::string boredom_word_temp_19;\n    std::string\
    \ boredom_word_temp_20;\n    std::string boredom_word_temp_21;\n    std::string\
    \ boredom_word_temp_22;\n    std::string boredom_word_temp_23;\n    std::string\
    \ boredom_word_temp_24;\n    std::string boredom_word_temp_25;\n    std::string\
    \ boredom_word_temp_26;\n    std::string boredom_word_temp_27;\n    std::string\
    \ boredom_word_temp_28;\n    std::string boredom_word_temp_29;\n    std::string\
    \ boredom_word_temp_30;\n    std::string boredom_word_temp_31;\n    std::string\
    \ boredom_word_temp_32;\n    std::string boredom_word_temp_33;\n    std::string\
    \ boredom_word_temp_34;\n    std::string boredom_word_temp_35;\n    std::string\
    \ boredom_word_temp_36;\n    std::string boredom_word_temp_37;\n    std::string\
    \ boredom_word_temp_38;\n    std::string boredom_word_temp_39;\n    std::string\
    \ boredom_word_temp_40;\n    std::string boredom_word_temp_41;\n    std::string\
    \ boredom_word_temp_42;\n    std::string boredom_word_temp_43;\n    std::string\
    \ boredom_word_temp_44;\n    std::string boredom_word_temp_45;\n    std::string\
    \ boredom_word_temp_46;\n    std::string boredom_word_temp_47;\n    std::string\
    \ boredom_word_temp_48;\n    std::string boredom_word_temp_49;\n    std::string\
    \ boredom_word_temp_50;\n    std::string boredom_word_temp_51;\n    \n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgrt4wns1: /tmp/tmpgrt4wns1.cpp:70: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t len =\
    \ S.length();\n    while (pos < len) {\n        pos = S.find_first_of(delimiters,\
    \ pos);\n        if (pos != std::string::npos) {\n            word = S.substr(pos,\
    \ pos - pos);\n            if (word == \"I\") {\n                boredoms++;\n\
    \            }\n        }\n        pos = S.find_first_not_of(delimiters, pos);\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqsq1mezx: /tmp/tmpqsq1mezx.cpp:33: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \".?!\";\n\
    \    std::string delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n  \
    \  std::string delimiter4 = \"!\";\n    std::string delimiter5 = \".\";\n    std::string\
    \ delimiter6 = \".\";\n    std::string delimiter7 = \".\";\n    std::string delimiter8\
    \ = \".\";\n    std::string delimiter9 = \".\";\n    std::string delimiter10 =\
    \ \".\";\n    std::string delimiter11 = \".\";\n    std::string delimiter12 =\
    \ \".\";\n    std::string delimiter13 = \".\";\n    std::string delimiter14 =\
    \ \".\";\n    std::string delimiter15 = \".\";\n    std::string delimiter16 =\
    \ \".\";\n    std::string delimiter17 = \".\";\n    std::string delimiter18 =\
    \ \".\";\n    std::string delimiter19 = \".\";\n    std::string delimiter20 =\
    \ \".\";\n    std::string delimiter21 = \".\";\n    std::string delimiter22 =\
    \ \".\";\n    std::string delimiter23 = \".\";\n    std::string delimiter24 =\
    \ \".\";\n    std::string delimiter25 = \".\";\n    std::string delimiter26 =\
    \ \".\";\n    std::string delimiter27 = \".\";\n    std::string delimiter28 =\
    \ \".\";\n    std::string delimiter29 = \".\";\n    std::string delimiter30 =\
    \ \".\";\n    std::string delimiter31 = \".\";\n    std::string delimiter32 =\
    \ \".\";\n    std::string delimiter33 = \".\";\n    std::string delimiter34 =\
    \ \".\";\n    std::string delimiter35 = \".\";\n    std::string delimiter36 =\
    \ \".\";\n    std::string delimiter37 = \".\";\n    std::string delimiter38 =\
    \ \".\";\n    std::string delimiter39 = \".\";\n    std::string delimiter40 =\
    \ \".\";\n    std::string delimiter41 = \".\";\n    std::string delimiter42 =\
    \ \".\";\n    std::string delimiter43 = \".\";\n    std::string delimiter44 =\
    \ \".\";\n    std::string delimiter45 = \".\";\n    std::string delimiter46 =\
    \ \".\";\n    std::string delimiter47 = \".\";\n    std::string delimiter48 =\
    \ \".\";\n    std::string delimiter49 = \".\";\n    std::string delimiter50 =\
    \ \".\";\n    std::string delimiter51 = \".\";\n    std::string delimiter52 =\
    \ \".\";\n    std::string delimiter53 = \".\";\n    std::string delimiter54 =\
    \ \".\";\n    std::string delimiter55 = \".\";\n    std::string delimiter56 =\
    \ \".\";\n    std::string delimiter57 = \".\";\n    std::string delimiter58 =\
    \ \".\";\n    std::string delimiter59 = \".\";\n    std::string delimiter60 =\
    \ \".\";\n    std::string delimiter61 = \".\";\n    \n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpewgdb406: /tmp/tmpewgdb406.cpp:80: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfx08ofep: /tmp/tmpfx08ofep.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == '.') {\n            if (S[i + 1] == '.') {\n   \
    \             if (S[i + 2] == '.') {\n                    if (S[i + 3] == '.')\
    \ {\n                        if (S[i + 4] == '.') {\n                        \
    \    if (S[i + 5] == '.') {\n                                if (S[i + 6] == '.')\
    \ {\n                                    if (S[i + 7] == '.') {\n            \
    \                            if (S[i + 8] == '.') {\n                        \
    \                    if (S[i + 9] == '.') {\n                                \
    \                if (S[i + 10] == '.') {\n                                   \
    \                 if (S[i + 11] == '.') {\n                                  \
    \                      if (S[i + 12] == '.') {\n                             \
    \                               if (S[i + 13] == '.') {\n                    \
    \                                            if (S[i + 14] == '.') {\n       \
    \                                                             if (S[i + 15] ==\
    \ '.') {\n                                                                   \
    \     count++;\n                                                             \
    \       }\n                                                                }\n\
    \                                                            }\n             \
    \                                           }\n                              \
    \                      }\n                                                }\n\
    \                                            }\n                             \
    \           }\n                                    }\n                       \
    \         }\n                            }\n                        }\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmamy7m2i: /tmp/tmpmamy7m2i.cpp:54: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \".,?!\";\n\
    \    std::string delimiter2 = \".,?!\";\n    std::string delimiter3 = \".,?!\"\
    ;\n    std::string delimiter4 = \".,?!\";\n    std::string delimiter5 = \".,?!\"\
    ;\n    std::string delimiter6 = \".,?!\";\n    std::string delimiter7 = \".,?!\"\
    ;\n    std::string delimiter8 = \".,?!\";\n    std::string delimiter9 = \".,?!\"\
    ;\n    std::string delimiter10 = \".,?!\";\n    std::string delimiter11 = \".,?!\"\
    ;\n    std::string delimiter12 = \".,?!\";\n    std::string delimiter13 = \".,?!\"\
    ;\n    std::string delimiter14 = \".,?!\";\n    std::string delimiter15 = \".,?!\"\
    ;\n    std::string delimiter16 = \".,?!\";\n    std::string delimiter17 = \".,?!\"\
    ;\n    std::string delimiter18 = \".,?!\";\n    std::string delimiter19 = \".,?!\"\
    ;\n    std::string delimiter20 = \".,?!\";\n    std::string delimiter21 = \".,?!\"\
    ;\n    std::string delimiter22 = \".,?!\";\n    std::string delimiter23 = \".,?!\"\
    ;\n    std::string delimiter24 = \".,?!\";\n    std::string delimiter25 = \".,?!\"\
    ;\n    std::string delimiter26 = \".,?!\";\n    std::string delimiter27 = \".,?!\"\
    ;\n    std::string delimiter28 = \".,?!\";\n    std::string delimiter29 = \".,?!\"\
    ;\n    std::string delimiter30 = \".,?!\";\n    std::string delimiter31 = \".,?!\"\
    ;\n    std::string delimiter32 = \".,?!\";\n    std::string delimiter33 = \".,?!\"\
    ;\n    std::string delimiter34 = \".,?!\";\n    std::string delimiter35 = \".,?!\"\
    ;\n    std::string delimiter36 = \".,?!\";\n    std::string delimiter37 = \".,?!\"\
    ;\n    std::string delimiter38 = \".,?!\";\n    std::string delimiter39 = \".,?!\"\
    ;\n    std::string delimiter40 = \".,?!\";\n    std::string delimiter41 = \".,?!\"\
    ;\n    std::string delimiter42 = \".,?!\";\n    std::string delimiter43 = \".,?!\"\
    ;\n    std::string delimiter44 = \".,?!\";\n    std::string delimiter45 = \".,\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa1zqtpi7.cpp:59:31: warning: missing terminating \" character\n\
    \   59 |     std::string delimiter45 = \".,\n      |                         \
    \      ^\n/tmp/tmpa1zqtpi7.cpp:59:31: error: missing terminating \" character\n\
    \   59 |     std::string delimiter45 = \".,\n      |                         \
    \      ^~~\n/tmp/tmpa1zqtpi7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpa1zqtpi7.cpp:60:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   60 | }\n      | ^\n/tmp/tmpa1zqtpi7.cpp:60:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpa1zqtpi7.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n    while(i\
    \ < S.size()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n   \
    \         boredoms += 1;\n            i += 1;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcbchh30a: /tmp/tmpcbchh30a.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5helaugs: /tmp/tmp5helaugs.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmprt5p71tt: /tmp/tmprt5p71tt.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbttnopy6: /tmp/tmpbttnopy6.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \".?!\";\n\
    \    std::string delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n  \
    \  std::string delimiter4 = \"!\";\n    std::string delimiter5 = \".\";\n    std::string\
    \ delimiter6 = \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8\
    \ = \".\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 =\
    \ \"!\";\n    std::string delimiter11 = \".\";\n    std::string delimiter12 =\
    \ \"?\";\n    std::string delimiter13 = \"!\";\n    std::string delimiter14 =\
    \ \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16 =\
    \ \"!\";\n    std::string delimiter17 = \".\";\n    std::string delimiter18 =\
    \ \"?\";\n    std::string delimiter19 = \"!\";\n    std::string delimiter20 =\
    \ \".\";\n    std::string delimiter21 = \"?\";\n    std::string delimiter22 =\
    \ \"!\";\n    std::string delimiter23 = \".\";\n    std::string delimiter24 =\
    \ \"?\";\n    std::string delimiter25 = \"!\";\n    std::string delimiter26 =\
    \ \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28 =\
    \ \"!\";\n    std::string delimiter29 = \".\";\n    std::string delimiter30 =\
    \ \"?\";\n    std::string delimiter31 = \"!\";\n    std::string delimiter32 =\
    \ \".\";\n    std::string delimiter33 = \"?\";\n    std::string delimiter34 =\
    \ \"!\";\n    std::string delimiter35 = \".\";\n    std::string delimiter36 =\
    \ \"?\";\n    std::string delimiter37 = \"!\";\n    std::string delimiter38 =\
    \ \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40 =\
    \ \"!\";\n    std::string delimiter41 = \"!\";\n    std::string delimiter42 =\
    \ \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44 =\
    \ \"!\";\n    std::string delimiter45 = \".\";\n    std::string delimiter46 =\
    \ \"?\";\n    std::string delimiter47 = \"!\";\n    std::string delimiter48 =\
    \ \".\";\n    std::string delimiter49 = \"?\";\n    std::string delimiter50 =\
    \ \"!\";\n    std::string delimiter51 = \"!\";\n    std::string delimiter52 =\
    \ \".\";\n    std::string delimiter53 = \"?\";\n    std::string delimiter54 =\
    \ \"!\";\n    std::string delimiter55 = \".\";\n    std::string delimiter56 =\
    \ \"?\";\n    std::string delimiter57 = \"!\";\n    std::string delimiter58 =\
    \ \".\";\n    std::string delimiter59 = \"?\";\n    std::string delimiter60 =\
    \ \"!\";\n    std::string delimiter61 = \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpofgp76ck.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpofgp76ck.cpp:76:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   76 | }\n      | ^\n/tmp/tmpofgp76ck.cpp:76:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpofgp76ck.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t endpos\
    \ = 0;\n    bool flag = false;\n    while(pos < S.size()) {\n        flag = false;\n\
    \        endpos = 0;\n        while(endpos < delimiters.size()) {\n          \
    \  pos = S.find(delimiters[endpos], pos);\n            if(pos == std::string::npos)\
    \ {\n                endpos = delimiters.size();\n                break;\n   \
    \         }\n            endpos++;\n        }\n        if(endpos == delimiters.size())\
    \ {\n            flag = true;\n        }\n        if(flag) {\n            word\
    \ = S.substr(pos, endpos - pos);\n            if(word == \"I\") {\n          \
    \      boredoms++;\n            }\n        }\n        pos = endpos + 1;\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 11)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \".?!\";\n\
    \    std::string delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n  \
    \  std::string delimiter4 = \"!\";\n    std::string delimiter5 = \".\";\n    std::string\
    \ delimiter6 = \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8\
    \ = \".\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 =\
    \ \"!\";\n    std::string delimiter11 = \".\";\n    std::string delimiter12 =\
    \ \"?\";\n    std::string delimiter13 = \"!\";\n    std::string delimiter14 =\
    \ \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16 =\
    \ \"!\";\n    std::string delimiter17 = \".\";\n    std::string delimiter18 =\
    \ \"?\";\n    std::string delimiter19 = \"!\";\n    std::string delimiter20 =\
    \ \".\";\n    std::string delimiter21 = \"?\";\n    std::string delimiter22 =\
    \ \"!\";\n    std::string delimiter23 = \".\";\n    std::string delimiter24 =\
    \ \"?\";\n    std::string delimiter25 = \"!\";\n    std::string delimiter26 =\
    \ \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28 =\
    \ \"!\";\n    std::string delimiter29 = \".\";\n    std::string delimiter30 =\
    \ \"?\";\n    std::string delimiter31 = \"!\";\n    std::string delimiter32 =\
    \ \".\";\n    std::string delimiter33 = \"?\";\n    std::string delimiter34 =\
    \ \"!\";\n    std::string delimiter35 = \".\";\n    std::string delimiter36 =\
    \ \"?\";\n    std::string delimiter37 = \"!\";\n    std::string delimiter38 =\
    \ \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40 =\
    \ \"!\";\n    std::string delimiter41 = \"!\";\n    std::string delimiter42 =\
    \ \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44 =\
    \ \"!\";\n    std::string delimiter45 = \".\";\n    std::string delimiter46 =\
    \ \"?\";\n    std::string delimiter47 = \"!\";\n    std::string delimiter48 =\
    \ \".\";\n    std::string delimiter49 = \"?\";\n    std::string delimiter50 =\
    \ \"!\";\n    std::string delimiter51 = \"!\";\n    std::string delimiter52 =\
    \ \".\";\n    std::string delimiter53 = \"?\";\n    std::string delimiter54 =\
    \ \"!\";\n    std::string delimiter55 = \".\";\n    std::string delimiter56 =\
    \ \"?\";\n    std::string delimiter57 = \"!\";\n    std::string delimiter58 =\
    \ \".\";\n    std::string delimiter59 = \"?\";\n    std::string delimiter60 =\
    \ \"!\";\n    std::string delimiter61 = \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmak0y5_w.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpmak0y5_w.cpp:76:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   76 | }\n      | ^\n/tmp/tmpmak0y5_w.cpp:76:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpmak0y5_w.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_gykkbl3: /tmp/tmp_gykkbl3.cpp:79: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_words;\n    std::string boredom_sentence;\n    std::string boredom_sentences;\n\
    \    std::string boredom_sentences_temp;\n    std::string boredom_sentences_temp2;\n\
    \    std::string boredom_sentences_temp3;\n    std::string boredom_sentences_temp4;\n\
    \    std::string boredom_sentences_temp5;\n    std::string boredom_sentences_temp6;\n\
    \    std::string boredom_sentences_temp7;\n    std::string boredom_sentences_temp8;\n\
    \    std::string boredom_sentences_temp9;\n    std::string boredom_sentences_temp10;\n\
    \    std::string boredom_sentences_temp11;\n    std::string boredom_sentences_temp12;\n\
    \    std::string boredom_sentences_temp13;\n    std::string boredom_sentences_temp14;\n\
    \    std::string boredom_sentences_temp15;\n    std::string boredom_sentences_temp16;\n\
    \    std::string boredom_sentences_temp17;\n    std::string boredom_sentences_temp18;\n\
    \    std::string boredom_sentences_temp19;\n    std::string boredom_sentences_temp20;\n\
    \    std::string boredom_sentences_temp21;\n    std::string boredom_sentences_temp22;\n\
    \    std::string boredom_sentences_temp23;\n    std::string boredom_sentences_temp24;\n\
    \    std::string boredom_sentences_temp25;\n    std::string boredom_sentences_temp26;\n\
    \    std::string boredom_sentences_temp27;\n    std::string boredom_sentences_temp28;\n\
    \    std::string boredom_sentences_temp29;\n    std::string boredom_sentences_temp30;\n\
    \    std::string boredom_sentences_temp31;\n    std::string boredom_sentences_temp32;\n\
    \    std::string boredom_sentences_temp33;\n    std::string boredom_sentences_temp34;\n\
    \    std::string boredom_sentences_temp35;\n    std::string boredom_sentences_temp36;\n\
    \    std::string boredom_sentences_temp37;\n    std::string boredom_sentences_temp38;\n\
    \    std::string boredom_sentences_temp39;\n    std::string boredom_sentences_temp40;\n\
    \    std::string boredom_sentences_temp41;\n    std::string boredom_sentences_temp42;\n\
    \    std::string boredom_sentences_temp43;\n    std::string boredom_sentences_temp44\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0t581taq.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0t581taq.cpp:63:1: error: expected initializer before \u2018}\u2019\
    \ token\n   63 | }\n      | ^\n/tmp/tmp0t581taq.cpp:63:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ temp;\n    temp = S;\n    boredom.clear();\n    word.clear();\n    while(!temp.empty()){\n\
    \        word = temp;\n        temp = temp.substr(0,temp.size()-1);\n        boredom.clear();\n\
    \        for(int i = 0; i < word.size(); i++){\n            if(word[i] == delimiter[0]){\n\
    \                boredom += word[i];\n            }\n        }\n        if(boredom\
    \ == \"I\"){\n            ans++;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxknx8hf2: /tmp/tmpxknx8hf2.cpp:39: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ja4gep8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0ja4gep8.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ja4gep8.cpp:32:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ja4gep8.cpp:35:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   35 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ja4gep8.cpp:33:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   33 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ja4gep8.cpp:39:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   39 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ja4gep8.cpp:37:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   37 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_capital\
    \ = \".?!\";\n    std::string delimiters_mixed = \".?!\";\n    std::string delimiters_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_capital = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_capital = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital = \".\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1y_7y09u.cpp:50:56: warning: missing terminating \" character\n\
    \   50 |     std::string delimiters_mixed_mixed_mixed_capital = \".\n      | \
    \                                                       ^\n/tmp/tmp1y_7y09u.cpp:50:56:\
    \ error: missing terminating \" character\n   50 |     std::string delimiters_mixed_mixed_mixed_capital\
    \ = \".\n      |                                                        ^~\n/tmp/tmp1y_7y09u.cpp:\
    \ In function \u2018long int is_bored(std::string)\u2019:\n/tmp/tmp1y_7y09u.cpp:28:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_upper\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n    \
    \  |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1y_7y09u.cpp:25:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_upper\u2019 previously\
    \ declared here\n   25 |     std::string delimiters_mixed_mixed_mixed_upper =\
    \ \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1y_7y09u.cpp:29:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_capital\u2019\
    \n   29 |     std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n  \
    \    |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1y_7y09u.cpp:26:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_capital\u2019 previously\
    \ declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_capital\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1y_7y09u.cpp:30:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_lower\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n    \
    \  |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1y_7y09u.cpp:27:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_lower =\
    \ \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1y_7y09u.cpp:31:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_upper\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n    \
    \  |    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++){\n      \
    \  word = S[i];\n        if(word == \"I\"){\n            boredoms++;\n       \
    \ }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbus1xyoa: /tmp/tmpbus1xyoa.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaki68mia: /tmp/tmpaki68mia.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvyfgruz0: /tmp/tmpvyfgruz0.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n    while\
    \ (i < S.length()) {\n        if (S[i] == '.') {\n            if (S[i + 1] ==\
    \ '.') {\n                boredoms += 1;\n                i += 2;\n          \
    \  }\n            else if (S[i + 1] == '?') {\n                boredoms += 1;\n\
    \                i += 2;\n            }\n            else if (S[i + 1] == '!')\
    \ {\n                boredoms += 1;\n                i += 2;\n            }\n\
    \            else {\n                boredoms += 1;\n                i += 1;\n\
    \            }\n        }\n        else if (S[i] == '?') {\n            boredoms\
    \ += 1;\n            i += 1;\n        }\n        else if (S[i] == '!') {\n   \
    \         boredoms += 1;\n            i += 1;\n        }\n        else {\n   \
    \         i += 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpr1zxqmtd: /tmp/tmpr1zxqmtd.cpp:50: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n\
    \    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n \
    \   std::string temp16;\n    std::string temp17;\n    std::string temp18;\n  \
    \  std::string temp19;\n    std::string temp20;\n    std::string temp21;\n   \
    \ std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string\
    \ temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n\
    \    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n \
    \   std::string temp32;\n    std::string temp33;\n    std::string temp34;\n  \
    \  std::string temp35;\n    std::string temp36;\n    std::string temp37;\n   \
    \ std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string\
    \ temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n\
    \    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n \
    \   std::string temp48;\n    std::string temp49;\n    std::string temp50;\n  \
    \  std::string temp51;\n    std::string temp52;\n    std::string temp53;\n   \
    \ std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string\
    \ temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n\
    \    std::string temp61;\n    std::string temp62;\n    std::string temp63;\n \
    \   std::string temp64;\n    std::string temp65;\n    std::string temp66;\n  \
    \  std::string temp67;\n    std::string temp68;\n    std::string temp69;\n   \
    \ std::string temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string\
    \ temp73;\n    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n\
    \    std::string temp77;\n    std::string temp78;\n    std::string temp79;\n \
    \   std::string temp80;\n    std::string temp81;\n    std::string temp82;\n  \
    \  std::string temp83;\n    std::string temp84;\n    std::string temp85;\n   \
    \ \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0mgglx95: /tmp/tmp0mgglx95.cpp:104: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t len =\
    \ S.length();\n    while (pos < len) {\n        word = S.substr(pos, 1);\n   \
    \     if (delimiters.find(word) != std::string::npos) {\n            boredoms\
    \ += 1;\n        }\n        pos += 1;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpu6tzwat7: /tmp/tmpu6tzwat7.cpp:29: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n\
    \    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string\
    \ temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n\
    \    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n \
    \   std::string temp15;\n    std::string temp16;\n    std::string temp17;\n  \
    \  std::string temp18;\n    std::string temp19;\n    std::string temp20;\n   \
    \ std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string\
    \ temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n\
    \    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n \
    \   std::string temp31;\n    std::string temp32;\n    std::string temp33;\n  \
    \  std::string temp34;\n    std::string temp35;\n    std::string temp36;\n   \
    \ std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string\
    \ temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n\
    \    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n \
    \   std::string temp47;\n    std::string temp48;\n    std::string temp49;\n  \
    \  std::string temp50;\n    std::string temp51;\n    std::string temp52;\n   \
    \ std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string\
    \ temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n\
    \    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n \
    \   std::string temp63;\n    std::string temp64;\n    std::string temp65;\n  \
    \  std::string temp66;\n    std::string temp67;\n    std::string temp68;\n   \
    \ std::string temp69;\n    std::string temp70;\n    std::string temp71;\n    std::string\
    \ temp72;\n    std::string temp73;\n    std::string temp74;\n    std::string temp75;\n\
    \    std::string temp76;\n    std::string temp77;\n    std::string temp78;\n \
    \   std::string temp79;\n    std::string temp80;\n    std::string temp81;\n  \
    \  std::string temp82;\n    std::string temp83;\n    std::string temp84;\n   \
    \ std::string \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxcsx971p.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpxcsx971p.cpp:101:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  101 | }\n      | ^\n/tmp/tmpxcsx971p.cpp:101:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ for(auto &c: S) {\n        if(c == '.' || c == '?' || c == '!') {\n        \
    \    ans += 1;\n        }\n    }\n    for(auto &c: S) {\n        if(c == '.' ||\
    \ c == '?' || c == '!') {\n            ans += 1;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp07tyjczp: /tmp/tmp07tyjczp.cpp:29: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string::size_type pos = 0;\n\
    \    std::string::size_type prev = 0;\n    std::string::size_type next = 0;\n\
    \    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type\
    \ k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n\
    \    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type\
    \ p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n\
    \    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type\
    \ u = 0;\n    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n\
    \    std::string::size_type x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type\
    \ z = 0;\n    std::string::size_type A = 0;\n    std::string::size_type B = 0;\n\
    \    std::string::size_type C = 0;\n    std::string::size_type D = 0;\n    std::string::size_type\
    \ E = 0;\n    std::string::size_type F = 0;\n    std::string::size_type G = 0;\n\
    \    std::string::size_type H = 0;\n    std::string::size_type I = 0;\n    std::string::size_type\
    \ J = 0;\n    std::string::size_type K = 0;\n    std::string::size_type L = 0;\n\
    \    std::string::size_type M = 0;\n    std::string::size_type N = 0;\n    std::string::size_type\
    \ O = 0;\n    std::string::size_type P = 0;\n    std::string::size_type Q = 0;\n\
    \    std::string::size_type R = 0;\n    std::string::size_type S = 0;\n    std::string::size_type\
    \ T = 0;\n    std::string::size_type U = 0;\n    std::string::size_type V = 0;\n\
    \    std::string::size_type W = 0;\n    std::string::size_type X = 0;\n    std::string::size_type\
    \ Y = 0;\n    std::string::size_type Z = 0;\n    std::string::size_type _ = 0;\n\
    \    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n    std::string::size_type\
    \ c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type e = 0;\n\
    \    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n    std::string::size_type\
    \ h = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n\
    \    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type\
    \ m = 0;\n    std::string::size_type n = 0;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpivhdfeda.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpivhdfeda.cpp:54:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   54 |     std::string::size_type S = 0;\n   \
    \   |                            ^\n/tmp/tmpivhdfeda.cpp:71:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type i\u2019\n   71 |     std::string::size_type\
    \ i = 0;\n      |                            ^\n/tmp/tmpivhdfeda.cpp:18:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type i\u2019 previously declared\
    \ here\n   18 |     std::string::size_type i = 0;\n      |                   \
    \         ^\n/tmp/tmpivhdfeda.cpp:72:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019\n   72 |     std::string::size_type j = 0;\n      |                \
    \            ^\n/tmp/tmpivhdfeda.cpp:19:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019 previously declared here\n   19 |     std::string::size_type j = 0;\n\
    \      |                            ^\n/tmp/tmpivhdfeda.cpp:73:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type k\u2019\n   73 |     std::string::size_type\
    \ k = 0;\n      |                            ^\n/tmp/tmpivhdfeda.cpp:20:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type k\u2019 previously declared\
    \ here\n   20 |     std::string::size_type k = 0;\n      |                   \
    \         ^\n/tmp/tmpivhdfeda.cpp:74:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019\n   74 |     std::string::size_type l = 0;\n      |                \
    \            ^\n/tmp/tmpivhdfeda.cpp:21:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019 previously declared here\n   21 |     std::string::size_type l = 0;\n\
    \      |                            ^\n/tmp/tmpivhdfeda.cpp:75:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type m\u2019\n   75 |     std::string::size_type\
    \ m = 0;\n      |                            ^\n/tmp/tmpivhdfeda.cpp:22:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type m\u2019 previously declared\
    \ here\n   22 |     std::string::size_type m "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyr4vduci: /tmp/tmpyr4vduci.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpumcphtbp: /tmp/tmpumcphtbp.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".?!\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".?!\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".?!\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".?!\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter50\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprcgd57zv.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmprcgd57zv.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmprcgd57zv.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmprb7uj8rq: /tmp/tmprb7uj8rq.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t count\
    \ = 0;\n    while(pos < S.size()) {\n        pos = S.find_first_of(delimiters,\
    \ pos);\n        word = S.substr(pos, delimiters.size());\n        if(word ==\
    \ \"I\") {\n            boredoms += 1;\n        }\n        pos = pos + delimiters.size();\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 11)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    std::string word;\n    std::string boredomWord;\n    std::string boredomWord2;\n\
    \    std::string boredomWord3;\n    std::string boredomWord4;\n    std::string\
    \ boredomWord5;\n    std::string boredomWord6;\n    std::string boredomWord7;\n\
    \    std::string boredomWord8;\n    std::string boredomWord9;\n    std::string\
    \ boredomWord10;\n    std::string boredomWord11;\n    std::string boredomWord12;\n\
    \    std::string boredomWord13;\n    std::string boredomWord14;\n    std::string\
    \ boredomWord15;\n    std::string boredomWord16;\n    std::string boredomWord17;\n\
    \    std::string boredomWord18;\n    std::string boredomWord19;\n    std::string\
    \ boredomWord20;\n    std::string boredomWord21;\n    std::string boredomWord22;\n\
    \    std::string boredomWord23;\n    std::string boredomWord24;\n    std::string\
    \ boredomWord25;\n    std::string boredomWord26;\n    std::string boredomWord27;\n\
    \    std::string boredomWord28;\n    std::string boredomWord29;\n    std::string\
    \ boredomWord30;\n    std::string boredomWord31;\n    std::string boredomWord32;\n\
    \    std::string boredomWord33;\n    std::string boredomWord34;\n    std::string\
    \ boredomWord35;\n    std::string boredomWord36;\n    std::string boredomWord37;\n\
    \    std::string boredomWord38;\n    std::string boredomWord39;\n    std::string\
    \ boredomWord40;\n    std::string boredomWord41;\n    std::string boredomWord42;\n\
    \    std::string boredomWord43;\n    std::string boredomWord44;\n    std::string\
    \ boredomWord45;\n    std::string boredomWord46;\n    std::string boredomWord47;\n\
    \    std::string boredomWord48;\n    std::string boredomWord49;\n    std::string\
    \ boredomWord50;\n    std::string boredomWord51;\n    std::string boredomWord52;\n\
    \    std::string boredomWord53;\n    std::string boredomWord54;\n    std::string\
    \ boredomWord55;\n    std::string boredomWord56;\n    std::string boredomWord57;\n\
    \    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp90_3qhed: /tmp/tmp90_3qhed.cpp:76: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \".,?!\";\n\
    \    size_t pos = 0;\n    size_t pos_boredom = 0;\n    size_t pos_delimiter =\
    \ 0;\n    size_t pos_word = 0;\n    size_t pos_delimiter2 = 0;\n    size_t pos_boredom2\
    \ = 0;\n    size_t pos_word2 = 0;\n    size_t pos_delimiter3 = 0;\n    size_t\
    \ pos_boredom3 = 0;\n    size_t pos_word3 = 0;\n    size_t pos_delimiter4 = 0;\n\
    \    size_t pos_boredom4 = 0;\n    size_t pos_word4 = 0;\n    size_t pos_delimiter5\
    \ = 0;\n    size_t pos_boredom5 = 0;\n    size_t pos_word5 = 0;\n    size_t pos_delimiter6\
    \ = 0;\n    size_t pos_boredom6 = 0;\n    size_t pos_word6 = 0;\n    size_t pos_delimiter7\
    \ = 0;\n    size_t pos_boredom7 = 0;\n    size_t pos_word7 = 0;\n    size_t pos_delimiter8\
    \ = 0;\n    size_t pos_boredom8 = 0;\n    size_t pos_word8 = 0;\n    size_t pos_delimiter9\
    \ = 0;\n    size_t pos_boredom9 = 0;\n    size_t pos_word9 = 0;\n    size_t pos_delimiter10\
    \ = 0;\n    size_t pos_boredom10 = 0;\n    size_t pos_word10 = 0;\n    size_t\
    \ pos_delimiter11 = 0;\n    size_t pos_boredom11 = 0;\n    size_t pos_word11 =\
    \ 0;\n    size_t pos_delimiter12 = 0;\n    size_t pos_boredom12 = 0;\n    size_t\
    \ pos_word12 = 0;\n    size_t pos_delimiter13 = 0;\n    size_t pos_boredom13 =\
    \ 0;\n    size_t pos_word13 = 0;\n    size_t pos_delimiter14 = 0;\n    size_t\
    \ pos_boredom14 = 0;\n    size_t pos_word14 = 0;\n    size_t pos_delimiter15 =\
    \ 0;\n    size_t pos_boredom15 = 0;\n    size_t pos_word15 = 0;\n    size_t pos_delimiter16\
    \ = 0;\n    size_t pos_boredom16 = 0;\n    size_t pos_word16 = 0;\n    size_t\
    \ pos_delimiter17 = 0;\n    size_t pos_boredom17 = 0;\n    size_t pos_word17 =\
    \ 0;\n    size_t pos_delimiter18 = 0;\n    size_t pos_boredom18 = 0;\n    size_t\
    \ pos_word18 = 0;\n    size_t pos_delimiter19 = 0;\n    size_t pos_boredom19 =\
    \ 0;\n    size_t pos_word19 = 0;\n    size_t pos_delimiter20 = 0;\n    size_t\
    \ pos_boredom20 = 0;\n    size_t pos_word20 = 0;\n    size_t pos_delimiter21 =\
    \ 0;\n    size_t pos_boredom21 = 0;\n    size_t pos_word21 = 0;\n    size_t pos_delimiter22\
    \ = 0;\n\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpf2znthaw: /tmp/tmpf2znthaw.cpp:85: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string sentence;\n    std::string delimiters\
    \ = \".?!\";\n    size_t pos = 0;\n    while(pos < S.length()) {\n        word\
    \ = S.substr(pos, 1);\n        pos = S.find(delimiters, pos);\n        sentence\
    \ = S.substr(0, pos);\n        if(word == \"I\" && sentence.find(\"I\") == 0)\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplz15vbaf: /tmp/tmplz15vbaf.cpp:31: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiter = \",\";\n \
    \   std::string delimiter2 = \" \";\n    std::string delimiter3 = \".\";\n   \
    \ std::string delimiter4 = \"?\";\n    std::string delimiter5 = \"!\";\n    std::string\
    \ delimiter6 = \".\";\n    std::string delimiter7 = \"?\";\n    std::string delimiter8\
    \ = \"!\";\n    std::string delimiter9 = \".\";\n    std::string delimiter10 =\
    \ \"?\";\n    std::string delimiter11 = \"!\";\n    std::string delimiter12 =\
    \ \".\";\n    std::string delimiter13 = \"?\";\n    std::string delimiter14 =\
    \ \"!\";\n    std::string delimiter15 = \".\";\n    std::string delimiter16 =\
    \ \"?\";\n    std::string delimiter17 = \"!\";\n    std::string delimiter18 =\
    \ \".\";\n    std::string delimiter19 = \"?\";\n    std::string delimiter20 =\
    \ \"!\";\n    std::string delimiter21 = \",\";\n    std::string delimiter22 =\
    \ \" \";\n    std::string delimiter23 = \".\";\n    std::string delimiter24 =\
    \ \"?\";\n    std::string delimiter25 = \"!\";\n    std::string delimiter26 =\
    \ \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28 =\
    \ \"!\";\n    std::string delimiter29 = \".\";\n    std::string delimiter30 =\
    \ \"?\";\n    std::string delimiter31 = \"!\";\n    std::string delimiter32 =\
    \ \".\";\n    std::string delimiter33 = \"?\";\n    std::string delimiter34 =\
    \ \"!\";\n    std::string delimiter35 = \".\";\n    std::string delimiter36 =\
    \ \"?\";\n    std::string delimiter37 = \"!\";\n    std::string delimiter38 =\
    \ \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40 =\
    \ \"!\";\n    std::string delimiter41 = \",\";\n    std::string delimiter42 =\
    \ \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44 =\
    \ \"!\";\n    std::string delimiter45 = \".\";\n    std::string delimiter46 =\
    \ \"?\";\n    std::string delimiter47 = \"!\";\n    std::string delimiter48 =\
    \ \".\";\n    std::string delimiter49 = \"?\";\n    std::string delimiter50 =\
    \ \"!\";\n    std::string delimiter51 = \",\";\n    std::string delimiter52 =\
    \ \".\";\n    std::string delimiter53 = \"?\";\n    std::string delimiter54 =\
    \ \"!\";\n    std::string delimiter55 = \".\";\n    std::string delimiter56 =\
    \ \"?\";\n    std::string delimiter57 = \"!\";\n    std::string delimiter58 =\
    \ \".\";\n    std::string delimiter59 = \"?\";\n    std::string delimiter60 =\
    \ \"!\";\n    std::string delimiter61 = \",\";\n    std::string delimiter62\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp0zro8vn.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpp0zro8vn.cpp:77:1: error: expected initializer before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmpp0zro8vn.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \".?!\";\n\
    \    size_t pos = 0;\n    size_t pos_boredom = 0;\n    size_t pos_delimiter =\
    \ 0;\n    size_t pos_word = 0;\n    size_t pos_delimiter2 = 0;\n    size_t pos_boredom2\
    \ = 0;\n    size_t pos_delimiter3 = 0;\n    size_t pos_boredom3 = 0;\n    size_t\
    \ pos_delimiter4 = 0;\n    size_t pos_boredom4 = 0;\n    size_t pos_delimiter5\
    \ = 0;\n    size_t pos_boredom5 = 0;\n    size_t pos_delimiter6 = 0;\n    size_t\
    \ pos_boredom6 = 0;\n    size_t pos_delimiter7 = 0;\n    size_t pos_boredom7 =\
    \ 0;\n    size_t pos_delimiter8 = 0;\n    size_t pos_boredom8 = 0;\n    size_t\
    \ pos_delimiter9 = 0;\n    size_t pos_boredom9 = 0;\n    size_t pos_delimiter10\
    \ = 0;\n    size_t pos_boredom10 = 0;\n    size_t pos_delimiter11 = 0;\n    size_t\
    \ pos_boredom11 = 0;\n    size_t pos_delimiter12 = 0;\n    size_t pos_boredom12\
    \ = 0;\n    size_t pos_delimiter13 = 0;\n    size_t pos_boredom13 = 0;\n    size_t\
    \ pos_delimiter14 = 0;\n    size_t pos_boredom14 = 0;\n    size_t pos_delimiter15\
    \ = 0;\n    size_t pos_boredom15 = 0;\n    size_t pos_delimiter16 = 0;\n    size_t\
    \ pos_boredom16 = 0;\n    size_t pos_delimiter17 = 0;\n    size_t pos_boredom17\
    \ = 0;\n    size_t pos_delimiter18 = 0;\n    size_t pos_boredom18 = 0;\n    size_t\
    \ pos_delimiter19 = 0;\n    size_t pos_boredom19 = 0;\n    size_t pos_delimiter20\
    \ = 0;\n    size_t pos_boredom20 = 0;\n    size_t pos_delimiter21 = 0;\n    size_t\
    \ pos_boredom21 = 0;\n    size_t pos_delimiter22 = 0;\n    size_t pos_boredom22\
    \ = 0;\n    size_t pos_delimiter23 = 0;\n    size_t pos_boredom23 = 0;\n    size_t\
    \ pos_delimiter24 = 0;\n    size_t pos_boredom24 = 0;\n    size_t pos_delimiter25\
    \ = 0;\n    size_t pos_boredom25 = 0;\n    size_t pos_delimiter26 = 0;\n    size_t\
    \ pos_boredom26 = 0;\n    size_t pos_delimiter27 = 0;\n    size_t pos_boredom27\
    \ = 0;\n    size_t pos_delimiter28 = 0;\n    size_t pos_boredom28 = 0;\n    size_t\
    \ pos_delimiter29 = 0;\n    size_t pos_boredom29 = 0;\n    size_t pos_delimiter30\
    \ = 0;\n    size_t pos_boredom30 = 0;\n\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpk02n86we: /tmp/tmpk02n86we.cpp:82: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t count\
    \ = 0;\n    while(pos < S.size()) {\n        pos = S.find_first_of(delimiters,\
    \ pos);\n        if(pos == std::string::npos) {\n            word = S.substr(pos);\n\
    \            if(word == \"I\") {\n                boredoms += 1;\n           \
    \ }\n        }\n        pos = S.find_first_not_of(delimiters, pos);\n    }\n \
    \   return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 11)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if (word.compare(0, 2, \"I\") == 0) {\n   \
    \         boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp68zw79ed: /tmp/tmp68zw79ed.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4uapt4hr: /tmp/tmp4uapt4hr.cpp:79: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!'){\n            boredom++;\n        }\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpemi2ircz: /tmp/tmpemi2ircz.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnnvdalt6: /tmp/tmpnnvdalt6.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!') {\n    \
    \        boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw18n340q: /tmp/tmpw18n340q.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_txqtbfu: /tmp/tmp_txqtbfu.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnpr_v5ej: /tmp/tmpnpr_v5ej.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiters = \". ? !\";\n    std::string\
    \ delimiter = \" \";\n    std::string delimiter2 = \" \";\n    std::string delimiter3\
    \ = \" \";\n    std::string delimiter4 = \" \";\n    std::string delimiter5 =\
    \ \" \";\n    std::string delimiter6 = \" \";\n    std::string delimiter7 = \"\
    \ \";\n    std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \"\
    ;\n    std::string delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n\
    \    std::string delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n\
    \    std::string delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n\
    \    std::string delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n\
    \    std::string delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n\
    \    std::string delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n\
    \    std::string delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n\
    \    std::string delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n\
    \    std::string delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n\
    \    std::string delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n\
    \    std::string delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n\
    \    std::string delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n\
    \    std::string delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n\
    \    std::string delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n\
    \    std::string delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n\
    \    std::string delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n\
    \    std::string delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n\
    \    std::string delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n\
    \    std::string delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n\
    \    std::string delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n\
    \    std::string delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n\
    \    std::string delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n\
    \    std::string delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n\
    \    std::string delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n\
    \    std::string delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n\
    \    std::string delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n\
    \    std::string delimiter62 = \" \";\n\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp08ptarwi: /tmp/tmp08ptarwi.cpp:82: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n        if(word\
    \ == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpy14jhi4t: /tmp/tmpy14jhi4t.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp6bel831: /tmp/tmpp6bel831.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lowercase =\
    \ \"i.\";\n    std::string delimiters_uppercase = \"I.\";\n    std::string delimiters_numbers\
    \ = \"1234567890\";\n    std::string delimiters_special = \"!?\";\n    std::string\
    \ delimiters_special_lowercase = \"!I.\";\n    std::string delimiters_special_uppercase\
    \ = \"!I\";\n    std::string delimiters_special_numbers = \"!1234567890\";\n \
    \   std::string delimiters_special_special = \"!?!\";\n    std::string delimiters_special_special_lowercase\
    \ = \"!?!I.\";\n    std::string delimiters_special_special_uppercase = \"!?!I\"\
    ;\n    std::string delimiters_special_special_numbers = \"!?!1234567890\";\n \
    \   std::string delimiters_special_special_special = \"!?!?!\";\n    std::string\
    \ delimiters_special_special_special_lowercase = \"!?!?!I.\";\n    std::string\
    \ delimiters_special_special_special_uppercase = \"!?!?!I\";\n    std::string\
    \ delimiters_special_special_special_numbers = \"!?!?!1234567890\";\n    std::string\
    \ delimiters_special_special_special_special = \"!?!?!?!\";\n    std::string delimiters_special_special_special_special_lowercase\
    \ = \"!?!?!?!I.\";\n    std::string delimiters_special_special_special_special_uppercase\
    \ = \"!?!?!?!I\";\n    std::string delimiters_special_special_special_special_numbers\
    \ = \"!?!?!?!1234567890\";\n    std::string delimiters_special_special_special_special_special\
    \ = \"!?!?!?!?!\";\n    std::string delimiters_special_special_special_special_lowercase\
    \ = \"!?!?!?!?!I.\";\n    std::string delimiters_special_special_special_special_uppercase\
    \ = \"!?!?!?!?!I\";\n    std::string delimiters_special_special_special_special_numbers\
    \ = \"!?!?!?!?!1234567890\";\n    std::string delimiters_special_special_special_special_special\
    \ = \"!?!?!?!?!?!\";\n    std::string delimiters_special_special_special_special_special_lowercase\
    \ = \"!?!?!?!?!I.\";\n    std::string delimiters_special_special_special_special_special_uppercase\
    \ = \"!?!?!?!?!I\";\n    std::string delimiters_special_special_special_special_special_numbers\
    \ = \"!?!?!?!?!?!1234567890\";\n    std::string delimiters_special_special_special_special_special_special\
    \ = \"!?!?!?!?!?!?!\";\n    std::string delimiters_special_special_special_special_special_\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp63b7dcva.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp63b7dcva.cpp:35:17: error: redeclaration of \u2018std::string delimiters_special_special_special_special_lowercase\u2019\
    \n   35 |     std::string delimiters_special_special_special_special_lowercase\
    \ = \"!?!?!?!?!I.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp63b7dcva.cpp:31:17: note: \u2018std::string delimiters_special_special_special_special_lowercase\u2019\
    \ previously declared here\n   31 |     std::string delimiters_special_special_special_special_lowercase\
    \ = \"!?!?!?!I.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp63b7dcva.cpp:36:17: error: redeclaration of \u2018std::string delimiters_special_special_special_special_uppercase\u2019\
    \n   36 |     std::string delimiters_special_special_special_special_uppercase\
    \ = \"!?!?!?!?!I\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp63b7dcva.cpp:32:17: note: \u2018std::string delimiters_special_special_special_special_uppercase\u2019\
    \ previously declared here\n   32 |     std::string delimiters_special_special_special_special_uppercase\
    \ = \"!?!?!?!I\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp63b7dcva.cpp:37:17: error: redeclaration of \u2018std::string delimiters_special_special_special_special_numbers\u2019\
    \n   37 |     std::string delimiters_special_special_special_special_numbers =\
    \ \"!?!?!?!?!1234567890\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp63b7dcva.cpp:33:17: note: \u2018std::string delimiters_special_special_special_special_numbers\u2019\
    \ previously declared here\n   33 |     std::string delimiters_special_special_special_special_numbers\
    \ = \"!?!?!?!1234567890\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp63b7dcva.cpp:38:17: error: redeclaration of \u2018std::string delimiters_special_special_special_special_special\u2019\
    \n   38 |     std::string delimiters_special_special_special_special_special =\
    \ \"!?!?!?!?!?!\";\n      |       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    std::string temp;\n\
    \    while(pos < S.length()) {\n        word = S.substr(pos, 1);\n        pos\
    \ = 0;\n        while(pos < S.length() && delimiters.find(S[pos]) != std::string::npos)\
    \ {\n            pos++;\n        }\n        temp = S.substr(pos, S.length() -\
    \ pos);\n        if(temp == \"I\") {\n            boredoms++;\n        }\n   \
    \ }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t pos1 =\
    \ 0;\n    size_t pos2 = 0;\n    size_t pos3 = 0;\n    size_t pos4 = 0;\n    size_t\
    \ pos5 = 0;\n    size_t pos6 = 0;\n    size_t pos7 = 0;\n    size_t pos8 = 0;\n\
    \    size_t pos9 = 0;\n    size_t pos10 = 0;\n    size_t pos11 = 0;\n    size_t\
    \ pos12 = 0;\n    size_t pos13 = 0;\n    size_t pos14 = 0;\n    size_t pos15 =\
    \ 0;\n    size_t pos16 = 0;\n    size_t pos17 = 0;\n    size_t pos18 = 0;\n  \
    \  size_t pos19 = 0;\n    size_t pos20 = 0;\n    size_t pos21 = 0;\n    size_t\
    \ pos22 = 0;\n    size_t pos23 = 0;\n    size_t pos24 = 0;\n    size_t pos25 =\
    \ 0;\n    size_t pos26 = 0;\n    size_t pos27 = 0;\n    size_t pos28 = 0;\n  \
    \  size_t pos29 = 0;\n    size_t pos30 = 0;\n    size_t pos31 = 0;\n    size_t\
    \ pos32 = 0;\n    size_t pos33 = 0;\n    size_t pos34 = 0;\n    size_t pos35 =\
    \ 0;\n    size_t pos36 = 0;\n    size_t pos37 = 0;\n    size_t pos38 = 0;\n  \
    \  size_t pos39 = 0;\n    size_t pos40 = 0;\n    size_t pos41 = 0;\n    size_t\
    \ pos42 = 0;\n    size_t pos43 = 0;\n    size_t pos44 = 0;\n    size_t pos45 =\
    \ 0;\n    size_t pos46 = 0;\n    size_t pos47 = 0;\n    size_t pos48 = 0;\n  \
    \  size_t pos49 = 0;\n    size_t pos50 = 0;\n    size_t pos51 = 0;\n    size_t\
    \ pos52 = 0;\n    size_t pos53 = 0;\n    size_t pos54 = 0;\n    size_t pos55 =\
    \ 0;\n    size_t pos56 = 0;\n    size_t pos57 = 0;\n    size_t pos58 = 0;\n  \
    \  size_t pos59 = 0;\n    size_t pos60 = 0;\n    size_t pos61 = 0;\n    size_t\
    \ pos62 = 0;\n    size_t pos63 = 0;\n    size_t pos64 = 0;\n    size_t pos65 =\
    \ 0;\n    size_t pos66 = 0;\n    size_t pos67 = 0;\n    size_t pos68 = 0;\n  \
    \  size_t pos69 = 0;\n    size_t pos70 = 0;\n    size_t pos71 = 0;\n    size_t\
    \ pos72 = 0;\n    size_t pos73 = 0;\n    size_t pos74 = 0;\n    size_t pos75 =\
    \ 0;\n    size_t pos76 = 0;\n    size_t pos77 = 0;\n    size_t pos78 = 0;\n  \
    \  size_t pos79 = 0;\n    size_t pos80 = 0;\n    size_t pos81 = 0;\n    size_t\
    \ pos82 = 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpby7a1tm5: /tmp/tmpby7a1tm5.cpp:101: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter1 = \"I\";\n    std::string delimiter2 = \".\";\n    std::string delimiter3\
    \ = \".\";\n    std::string delimiter4 = \".\";\n    std::string delimiter5 =\
    \ \".\";\n    std::string delimiter6 = \".\";\n    std::string delimiter7 = \"\
    .\";\n    std::string delimiter8 = \".\";\n    std::string delimiter9 = \".\"\
    ;\n    std::string delimiter10 = \".\";\n    std::string delimiter11 = \".\";\n\
    \    std::string delimiter12 = \".\";\n    std::string delimiter13 = \".\";\n\
    \    std::string delimiter14 = \".\";\n    std::string delimiter15 = \".\";\n\
    \    std::string delimiter16 = \".\";\n    std::string delimiter17 = \".\";\n\
    \    std::string delimiter18 = \".\";\n    std::string delimiter19 = \".\";\n\
    \    std::string delimiter20 = \".\";\n    std::string delimiter21 = \".\";\n\
    \    std::string delimiter22 = \".\";\n    std::string delimiter23 = \".\";\n\
    \    std::string delimiter24 = \".\";\n    std::string delimiter25 = \".\";\n\
    \    std::string delimiter26 = \".\";\n    std::string delimiter27 = \".\";\n\
    \    std::string delimiter28 = \".\";\n    std::string delimiter29 = \".\";\n\
    \    std::string delimiter30 = \".\";\n    std::string delimiter31 = \".\";\n\
    \    std::string delimiter32 = \".\";\n    std::string delimiter33 = \".\";\n\
    \    std::string delimiter34 = \".\";\n    std::string delimiter35 = \".\";\n\
    \    std::string delimiter36 = \".\";\n    std::string delimiter37 = \".\";\n\
    \    std::string delimiter38 = \".\";\n    std::string delimiter39 = \".\";\n\
    \    std::string delimiter40 = \".\";\n    std::string delimiter41 = \".\";\n\
    \    std::string delimiter42 = \".\";\n    std::string delimiter43 = \".\";\n\
    \    std::string delimiter44 = \".\";\n    std::string delimiter45 = \".\";\n\
    \    std::string delimiter46 = \".\";\n    std::string delimiter47 = \".\";\n\
    \    std::string delimiter48 = \".\";\n    std::string delimiter49 = \".\";\n\
    \    std::string delimiter50 = \".\";\n    std::string delimiter51 = \".\";\n\
    \    std::string delimiter52 = \".\";\n    std::string delimiter53 = \".\";\n\
    \    std::string delimiter54 = \".\";\n    std::string delimiter55 = \".\";\n\
    \    std::string delimiter56 = \".\";\n    std::string delimiter57 = \".\";\n\
    \    std::string delimiter58 = \".\";\n    std::string delimiter59 = \".\";\n\
    \    std::string delimiter60 = \".\";\n    std::string delimiter6\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbx2e4mwe.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpbx2e4mwe.cpp:77:1: error: expected initializer before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmpbx2e4mwe.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t i = 0;\n\
    \    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n        pos =\
    \ 0;\n        while(pos < S.size() && delimiters.find(S[pos]) != std::string::npos)\
    \ {\n            pos++;\n        }\n        if(pos == S.size()) {\n          \
    \  boredoms += 1;\n        }\n        i++;\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7ulmzzgx: /tmp/tmp7ulmzzgx.cpp:79: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lowercase =\
    \ \"i.\";\n    std::string delimiters_uppercase = \"I.\";\n    std::string delimiters_numbers\
    \ = \"123456789\";\n    std::string delimiters_specials = \"!.\";\n    std::string\
    \ delimiters_all = \".?!123456789\";\n    std::string delimiters_all_lowercase\
    \ = \"i.\";\n    std::string delimiters_all_uppercase = \"I.\";\n    std::string\
    \ delimiters_all_numbers = \"123456789\";\n    std::string delimiters_all_specials\
    \ = \"!.\";\n    std::string delimiters_all_all = \".?!123456789\";\n    std::string\
    \ delimiters_all_all_lowercase = \"i.\";\n    std::string delimiters_all_all_uppercase\
    \ = \"I.\";\n    std::string delimiters_all_all_numbers = \"123456789\";\n   \
    \ std::string delimiters_all_all_specials = \"!.\";\n    std::string delimiters_all_all_all\
    \ = \".?!123456789\";\n    std::string delimiters_all_all_all_lowercase = \"i.\"\
    ;\n    std::string delimiters_all_all_all_uppercase = \"I.\";\n    std::string\
    \ delimiters_all_all_all_numbers = \"123456789\";\n    std::string delimiters_all_all_all_specials\
    \ = \"!.\";\n    std::string delimiters_all_all_all_all = \".?!123456789\";\n\
    \    std::string delimiters_all_all_all_all_lowercase = \"i.\";\n    std::string\
    \ delimiters_all_all_all_all_uppercase = \"I.\";\n    std::string delimiters_all_all_all_all_numbers\
    \ = \"123456789\";\n    std::string delimiters_all_all_all_all_specials = \"!.\"\
    ;\n    std::string delimiters_all_all_all_all_all = \".?!123456789\";\n    std::string\
    \ delimiters_all_all_all_all_all_lowercase = \"i.\";\n    std::string delimiters_all_all_all_all_all_uppercase\
    \ = \"I.\";\n    std::string delimiters_all_all_all_all_all_numbers = \"123456789\"\
    ;\n    std::string delimiters_all_all_all_all_all_specials = \"!.\";\n    std::string\
    \ delimiters_all_all_all_all_all_all = \".?!123456789\";\n    std::string delimiters_all_all_all_all_all_all_lowercase\
    \ = \"i.\";\n    std::string delimiters_all_all_all_all_all_all_uppercase = \"\
    I.\";\n    std::string delimiters_all_all_all_all_all_all_numbers = \"123456789\"\
    ;\n    std::string delimiters_all_all_all_all_all_all_specials = \"!.\";\n   \
    \ std::string delimiters_all_all_all_all_all_all_all = \".?!123456789\";\n   \
    \ std::string delimiters_all_all_all_all_all_all_all_lowercase = \"i.\";\n   \
    \ std::string delimiters_all_all_all_all_all_all_all_uppercase = \"I.\";\n   \
    \ std::string delimiters_all_all_all_all_all_all_all_\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgwbmncl3.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpgwbmncl3.cpp:53:1: error: expected initializer before \u2018}\u2019\
    \ token\n   53 | }\n      | ^\n/tmp/tmpgwbmncl3.cpp:53:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++){\n      \
    \  if(S[i] == '.'){\n            boredom++;\n        }\n        if(S[i] == '?'){\n\
    \            boredom++;\n        }\n        if(S[i] == '!'){\n            boredom++;\n\
    \        }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcrw5goan: /tmp/tmpcrw5goan.cpp:31: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!') {\n    \
    \        boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdtb5w5b2: /tmp/tmpdtb5w5b2.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n \
    \   std::string temp85;\n    std::string temp86;\n    std::string temp87\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp48s5wc9r.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp48s5wc9r.cpp:101:1: error: expected initializer before \u2018}\u2019\
    \ token\n  101 | }\n      | ^\n/tmp/tmp48s5wc9r.cpp:101:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpoh9jswzr: /tmp/tmpoh9jswzr.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpeh2n_lpv: /tmp/tmpeh2n_lpv.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn64d7p5_: /tmp/tmpn64d7p5_.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiters = \".?!\";\n    size_t pos\
    \ = 0;\n    size_t i = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        pos = S.find(delimiters, pos);\n        if(pos == std::string::npos)\
    \ {\n            boredom += word + \" \";\n            boredoms += (boredom.find(\"\
    I\") == 0) ? 1 : 0;\n            boredom.clear();\n        } else {\n        \
    \    boredom += word + \" \";\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzbv3c1ip: /tmp/tmpzbv3c1ip.cpp:35: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiters = \".?!\";\n    std::string\
    \ delimiters_lower = \"i.e\";\n    std::string delimiters_upper = \"I.E\";\n \
    \   std::string delimiters_mixed = \"i.E.\";\n    std::string delimiters_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_lower = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_upper = \"I.E.\";\n    std::string delimiters_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_lower = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \"i.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"i.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"i.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower = \"i.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr03w9n1l.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpr03w9n1l.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_lower = \"i.E.\"\
    ;\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpr03w9n1l.cpp:26:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \"i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr03w9n1l.cpp:29:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   29 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr03w9n1l.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr03w9n1l.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr03w9n1l.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr03w9n1l.cpp:32:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr03w9n1l.cpp:30:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   30 |     std::str"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    temp = S;\n    while(temp != \"\") {\n        word\
    \ = temp.substr(0,1);\n        temp = temp.substr(1,temp.length());\n        if(word\
    \ == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmppp9grvwa: /tmp/tmppp9grvwa.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i = 0; i <\
    \ S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvhiy47u0: /tmp/tmpvhiy47u0.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if (word.compare(0, 2, \"I\") == 0) {\n   \
    \         boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv1oooy48: /tmp/tmpv1oooy48.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \". ? !\";\n    std::string delimiter = \" \";\n\
    \    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp76i0hbss: /tmp/tmp76i0hbss.cpp:104: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    for (size_t i = 0; i < S.size(); i++) {\n     \
    \   if (S[i] == '.') {\n            boredom.clear();\n            boredom += S[i];\n\
    \            while (i < S.size() && S[i] != '.') {\n                boredom +=\
    \ S[i];\n                i++;\n            }\n            if (boredom == \"I\"\
    ) {\n                boredoms++;\n            }\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8ixiz_it: /tmp/tmp8ixiz_it.cpp:34: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpom7fkvm7: /tmp/tmpom7fkvm7.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn6tjlwql: /tmp/tmpn6tjlwql.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpeclval_g: /tmp/tmpeclval_g.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9ulp8cv_: /tmp/tmp9ulp8cv_.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ls3wipf.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp4ls3wipf.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4ls3wipf.cpp:32:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4ls3wipf.cpp:35:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   35 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4ls3wipf.cpp:33:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   33 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4ls3wipf.cpp:39:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   39 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4ls3wipf.cpp:37:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   37 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn0wez500: /tmp/tmpn0wez500.cpp:79: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmphzb49o9t: /tmp/tmphzb49o9t.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiter = delimiters[0];\n\
    \    std::string sentence;\n    std::string temp;\n    std::string::size_type\
    \ pos;\n    std::string::size_type i;\n    std::string::size_type j;\n    std::string::size_type\
    \ k;\n    std::string::size_type l;\n    std::string::size_type m;\n    std::string::size_type\
    \ n;\n    std::string::size_type o;\n    std::string::size_type p;\n    std::string::size_type\
    \ q;\n    std::string::size_type r;\n    std::string::size_type s;\n    std::string::size_type\
    \ t;\n    std::string::size_type u;\n    std::string::size_type v;\n    std::string::size_type\
    \ w;\n    std::string::size_type x;\n    std::string::size_type y;\n    std::string::size_type\
    \ z;\n    std::string::size_type A;\n    std::string::size_type B;\n    std::string::size_type\
    \ C;\n    std::string::size_type D;\n    std::string::size_type E;\n    std::string::size_type\
    \ F;\n    std::string::size_type G;\n    std::string::size_type H;\n    std::string::size_type\
    \ I;\n    std::string::size_type J;\n    std::string::size_type K;\n    std::string::size_type\
    \ L;\n    std::string::size_type M;\n    std::string::size_type N;\n    std::string::size_type\
    \ O;\n    std::string::size_type P;\n    std::string::size_type Q;\n    std::string::size_type\
    \ R;\n    std::string::size_type S;\n    std::string::size_type T;\n    std::string::size_type\
    \ U;\n    std::string::size_type V;\n    std::string::size_type W;\n    std::string::size_type\
    \ X;\n    std::string::size_type Y;\n    std::string::size_type Z;\n    std::string::size_type\
    \ A;\n    std::string::size_type B;\n    std::string::size_type C;\n    std::string::size_type\
    \ D;\n    std::string::size_type E;\n    std::string::size_type F;\n    std::string::size_type\
    \ G;\n    std::string::size_type H;\n    std::string::size_type I;\n    std::string::size_type\
    \ J;\n    std::string::size_type K;\n    std::string::size_type L;\n    std::string::size_type\
    \ M;\n    std::string::size_type N;\n    std::string::size_type O;\n    std::string::size_type\
    \ P;\n    std::string::size_\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmput66tmi1.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmput66tmi1.cpp:15:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   15 |     std::string\
    \ delimiter = delimiters[0];\n      |                                        \
    \ ^\n/tmp/tmput66tmi1.cpp:55:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   55 |     std::string::size_type S;\n      |\
    \                            ^\n/tmp/tmput66tmi1.cpp:63:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type A\u2019\n   63 |     std::string::size_type\
    \ A;\n      |                            ^\n/tmp/tmput66tmi1.cpp:37:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type A\u2019 previously declared\
    \ here\n   37 |     std::string::size_type A;\n      |                       \
    \     ^\n/tmp/tmput66tmi1.cpp:64:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ B\u2019\n   64 |     std::string::size_type B;\n      |                    \
    \        ^\n/tmp/tmput66tmi1.cpp:38:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ B\u2019 previously declared here\n   38 |     std::string::size_type B;\n  \
    \    |                            ^\n/tmp/tmput66tmi1.cpp:65:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type C\u2019\n   65 |     std::string::size_type\
    \ C;\n      |                            ^\n/tmp/tmput66tmi1.cpp:39:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type C\u2019 previously declared\
    \ here\n   39 |     std::string::size_type C;\n      |                       \
    \     ^\n/tmp/tmput66tmi1.cpp:66:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ D\u2019\n   66 |     std::string::size_type D;\n      |                    \
    \        ^\n/tmp/tmput66tmi1.cpp:40:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ D\u2019 previously declared here\n   40 |     std::string::size_type D;\n  \
    \    |                            ^\n/tmp/tmput66tmi1.cpp:67:28: error: redecla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter1 = \"I\";\n    std::string delimiter2 = \".\";\n    std::string delimiter3\
    \ = \".\";\n    std::string delimiter4 = \".\";\n    std::string delimiter5 =\
    \ \".\";\n    std::string delimiter6 = \".\";\n    std::string delimiter7 = \"\
    .\";\n    std::string delimiter8 = \".\";\n    std::string delimiter9 = \".\"\
    ;\n    std::string delimiter10 = \".\";\n    std::string delimiter11 = \".\";\n\
    \    std::string delimiter12 = \".\";\n    std::string delimiter13 = \".\";\n\
    \    std::string delimiter14 = \".\";\n    std::string delimiter15 = \".\";\n\
    \    std::string delimiter16 = \".\";\n    std::string delimiter17 = \".\";\n\
    \    std::string delimiter18 = \".\";\n    std::string delimiter19 = \".\";\n\
    \    std::string delimiter20 = \".\";\n    std::string delimiter21 = \".\";\n\
    \    std::string delimiter22 = \".\";\n    std::string delimiter23 = \".\";\n\
    \    std::string delimiter24 = \".\";\n    std::string delimiter25 = \".\";\n\
    \    std::string delimiter26 = \".\";\n    std::string delimiter27 = \".\";\n\
    \    std::string delimiter28 = \".\";\n    std::string delimiter29 = \".\";\n\
    \    std::string delimiter30 = \".\";\n    std::string delimiter31 = \".\";\n\
    \    std::string delimiter32 = \".\";\n    std::string delimiter33 = \".\";\n\
    \    std::string delimiter34 = \".\";\n    std::string delimiter35 = \".\";\n\
    \    std::string delimiter36 = \".\";\n    std::string delimiter37 = \".\";\n\
    \    std::string delimiter38 = \".\";\n    std::string delimiter39 = \".\";\n\
    \    std::string delimiter40 = \".\";\n    std::string delimiter41 = \".\";\n\
    \    std::string delimiter42 = \".\";\n    std::string delimiter43 = \".\";\n\
    \    std::string delimiter44 = \".\";\n    std::string delimiter45 = \".\";\n\
    \    std::string delimiter46 = \".\";\n    std::string delimiter47 = \".\";\n\
    \    std::string delimiter48 = \".\";\n    std::string delimiter49 = \".\";\n\
    \    std::string delimiter50 = \".\";\n    std::string delimiter51 = \".\";\n\
    \    std::string delimiter52 = \".\";\n    std::string delimiter53 = \".\";\n\
    \    std::string delimiter54 = \".\";\n    std::string delimiter55 = \".\";\n\
    \    std::string delimiter56 = \".\";\n    std::string delimiter57 = \".\";\n\
    \    std::string delimiter58 = \".\";\n    std::string delimiter59 = \".\";\n\
    \    std::string delimiter60 = \".\";\n    std::string delimiter61 = \".\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqeuqfl7_.cpp:76:31: warning: missing terminating \" character\n\
    \   76 |     std::string delimiter61 = \".\n      |                          \
    \     ^\n/tmp/tmpqeuqfl7_.cpp:76:31: error: missing terminating \" character\n\
    \   76 |     std::string delimiter61 = \".\n      |                          \
    \     ^~\n/tmp/tmpqeuqfl7_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqeuqfl7_.cpp:77:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   77 | }\n      | ^\n/tmp/tmpqeuqfl7_.cpp:77:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpqeuqfl7_.cpp:77:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpas7dqmm3: /tmp/tmpas7dqmm3.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n            word = S;\n\
    \        }\n    }\n    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n      \
    \      word = S;\n        }\n    }\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms\
    \ += 1;\n            word = S;\n        }\n    }\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n         \
    \   boredoms += 1;\n            word = S;\n        }\n    }\n    for (size_t i\
    \ = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms += 1;\n            word = S;\n        }\n    }\n\
    \    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n            word = S;\n\
    \        }\n    }\n    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n      \
    \      word = S;\n        }\n    }\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms\
    \ += 1;\n            word = S;\n        }\n    }\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n         \
    \   boredoms += 1;\n            word = S;\n        }\n    }\n    for (size_t i\
    \ = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms += 1;\n            word = S;\n        }\n    }\n\
    \    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n            word = S;\n\
    \        }\n    }\n    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n      \
    \      word = S;\n        }\n    }\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        if (S[i] == '.' || S[i] == '?' || S[i]\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpop5p8dg0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpop5p8dg0.cpp:87:47: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   87 |         if (S[i] == '.' || S[i] == '?' || S[i]\n      |     \
    \       ~                                  ^\n      |                        \
    \                       )\n   88 | }\n      | ~                              \
    \                \n/tmp/tmpop5p8dg0.cpp:88:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpop5p8dg0.cpp:89:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   89 | int main() {\n      |            ^\n/tmp/tmpop5p8dg0.cpp:97:1: error:\
    \ expected \u2018}\u2019 at end of input\n   97 | }\n      | ^\n/tmp/tmpop5p8dg0.cpp:11:30:\
    \ note: to match this \u2018{\u2019\n   11 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmpop5p8dg0.cpp:97:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   97 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmuqff7gs: /tmp/tmpmuqff7gs.cpp:76: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string boredom_word = \"I\";\n    std::string boredom_sentence\
    \ = \".\";\n    std::string boredom_sentence2 = \"?\";\n    std::string boredom_sentence3\
    \ = \"!\";\n    std::string boredom_sentence4 = \".\";\n    std::string boredom_sentence5\
    \ = \".\";\n    std::string boredom_sentence6 = \".\";\n    std::string boredom_sentence7\
    \ = \".\";\n    std::string boredom_sentence8 = \".\";\n    std::string boredom_sentence9\
    \ = \".\";\n    std::string boredom_sentence10 = \".\";\n    std::string boredom_sentence11\
    \ = \".\";\n    std::string boredom_sentence12 = \".\";\n    std::string boredom_sentence13\
    \ = \".\";\n    std::string boredom_sentence14 = \".\";\n    std::string boredom_sentence15\
    \ = \".\";\n    std::string boredom_sentence16 = \".\";\n    std::string boredom_sentence17\
    \ = \".\";\n    std::string boredom_sentence18 = \".\";\n    std::string boredom_sentence19\
    \ = \".\";\n    std::string boredom_sentence20 = \".\";\n    std::string boredom_sentence21\
    \ = \".\";\n    std::string boredom_sentence22 = \".\";\n    std::string boredom_sentence23\
    \ = \".\";\n    std::string boredom_sentence24 = \".\";\n    std::string boredom_sentence25\
    \ = \".\";\n    std::string boredom_sentence26 = \".\";\n    std::string boredom_sentence27\
    \ = \".\";\n    std::string boredom_sentence28 = \".\";\n    std::string boredom_sentence29\
    \ = \".\";\n    std::string boredom_sentence30 = \".\";\n    std::string boredom_sentence31\
    \ = \".\";\n    std::string boredom_sentence32 = \".\";\n    std::string boredom_sentence33\
    \ = \".\";\n    std::string boredom_sentence34 = \".\";\n    std::string boredom_sentence35\
    \ = \".\";\n    std::string boredom_sentence36 = \".\";\n    std::string boredom_sentence37\
    \ = \".\";\n    std::string boredom_sentence38 = \".\";\n    std::string boredom_sentence39\
    \ = \".\";\n    std::string boredom_sentence40 = \".\";\n    std::string boredom_sentence41\
    \ = \".\";\n    std::string boredom_sentence42 = \".\";\n    std::string boredom_sentence43\
    \ = \".\";\n    std::string boredom_sentence44 = \".\";\n    std::string boredom_sentence45\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl66bxv3m.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl66bxv3m.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmpl66bxv3m.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string::size_type pos;\n    pos\
    \ = S.find_first_of(delimiters);\n    while (pos != std::string::npos) {\n   \
    \     word = S.substr(0, pos);\n        if (word == \"I\") {\n            boredoms\
    \ += 1;\n        }\n        S = S.substr(pos + 1);\n        pos = S.find_first_of(delimiters);\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpipdv43_v: /tmp/tmpipdv43_v.cpp:31: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n    while\
    \ (i < S.size()) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            boredom++;\n        }\n        i++;\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmwnwkygt: /tmp/tmpmwnwkygt.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n        if(word\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0i78r3_t: /tmp/tmp0i78r3_t.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lowercase =\
    \ \"i.\";\n    std::string delimiters_uppercase = \"I.\";\n    std::string delimiters_numbers\
    \ = \"i.\";\n    std::string delimiters_punctuation = \".?!\";\n    std::string\
    \ delimiters_punctuation_lowercase = \"i.\";\n    std::string delimiters_punctuation_uppercase\
    \ = \"I.\";\n    std::string delimiters_punctuation_numbers = \"i.\";\n    std::string\
    \ delimiters_punctuation_symbols = \"!.\";\n    std::string delimiters_punctuation_symbols_lowercase\
    \ = \"i.\";\n    std::string delimiters_punctuation_symbols_uppercase = \"I.\"\
    ;\n    std::string delimiters_punctuation_symbols_numbers = \"i.\";\n    std::string\
    \ delimiters_symbols = \"!.\";\n    std::string delimiters_symbols_lowercase =\
    \ \"i.\";\n    std::string delimiters_symbols_uppercase = \"I.\";\n    std::string\
    \ delimiters_symbols_numbers = \"i.\";\n    std::string delimiters_symbols_punctuation\
    \ = \"!.\";\n    std::string delimiters_symbols_punctuation_lowercase = \"i.\"\
    ;\n    std::string delimiters_symbols_punctuation_uppercase = \"I.\";\n    std::string\
    \ delimiters_symbols_punctuation_numbers = \"i.\";\n    std::string delimiters_symbols_punctuation_symbols\
    \ = \"!.\";\n    std::string delimiters_symbols_punctuation_symbols_lowercase\
    \ = \"i.\";\n    std::string delimiters_symbols_punctuation_symbols_uppercase\
    \ = \"I.\";\n    std::string delimiters_symbols_punctuation_symbols_numbers =\
    \ \"i.\";\n    std::string delimiters_symbols_symbols = \"!.\";\n    std::string\
    \ delimiters_symbols_lowercase = \"i.\";\n    std::string delimiters_symbols_uppercase\
    \ = \"I.\";\n    std::string delimiters_symbols_numbers = \"i.\";\n    std::string\
    \ delimiters_symbols_punctuation = \"!.\";\n    std::string delimiters_symbols_punctuation_lowercase\
    \ = \"i.\";\n    std::string delimiters_symbols_punctuation_uppercase = \"I.\"\
    ;\n    std::string delimiters_symbols_punctuation_numbers = \"i.\";\n    std::string\
    \ delimiters_symbols_punctuation_symbols = \"!.\";\n    std::string delimiters_symbols_symbols_lowercase\
    \ = \"i.\";\n    std::string delimiters_symbols_symbols_uppercase = \"I.\";\n\
    \    std::string delimiters_symbols_symbols_numbers = \"i.\";\n    std::string\
    \ delimiters_symbols_symbols_punctuation = \"!.\";\n    std::string delimiters_symbols_symbols_punctuation_lowercase\
    \ = \"i.\";\n    std::string delimiters_symbols_symbols_punctuation_uppercase\
    \ = \"I.\";\n    std::string delimiters_symbols_symbols_punctuation_numbers =\
    \ \"i.\";\n    std::string delimiters_\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp81m6u4r3.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp81m6u4r3.cpp:39:17: error: redeclaration of \u2018std::string delimiters_symbols_lowercase\u2019\
    \n   39 |     std::string delimiters_symbols_lowercase = \"i.\";\n      |    \
    \             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:27:17: note:\
    \ \u2018std::string delimiters_symbols_lowercase\u2019 previously declared here\n\
    \   27 |     std::string delimiters_symbols_lowercase = \"i.\";\n      |     \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:40:17: error:\
    \ redeclaration of \u2018std::string delimiters_symbols_uppercase\u2019\n   40\
    \ |     std::string delimiters_symbols_uppercase = \"I.\";\n      |          \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:28:17: note: \u2018\
    std::string delimiters_symbols_uppercase\u2019 previously declared here\n   28\
    \ |     std::string delimiters_symbols_uppercase = \"I.\";\n      |          \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:41:17: error: redeclaration\
    \ of \u2018std::string delimiters_symbols_numbers\u2019\n   41 |     std::string\
    \ delimiters_symbols_numbers = \"i.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp81m6u4r3.cpp:29:17: note: \u2018std::string delimiters_symbols_numbers\u2019\
    \ previously declared here\n   29 |     std::string delimiters_symbols_numbers\
    \ = \"i.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:42:17:\
    \ error: redeclaration of \u2018std::string delimiters_symbols_punctuation\u2019\
    \n   42 |     std::string delimiters_symbols_punctuation = \"!.\";\n      |  \
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:30:17: note:\
    \ \u2018std::string delimiters_symbols_punctuation\u2019 previously declared here\n\
    \   30 |     std::string delimiters_symbols_punctuation = \"!.\";\n      |   \
    \              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:43:17: error:\
    \ redeclaration of \u2018std::string delimiters_symbols_punctuation_lowercase\u2019\
    \n   43 |     std::string delimiters_symbols_punctuation_lowercase = \"i.\";\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp81m6u4r3.cpp:31:17:\
    \ note: \u2018"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkgm13h39: /tmp/tmpkgm13h39.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_dz6iyyt: /tmp/tmp_dz6iyyt.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string sentence;\n    std::string delimiters\
    \ = \".?!\";\n    std::string delimiters_lower = \"i.\";\n    std::string delimiters_upper\
    \ = \"I.\";\n    std::string delimiters_caps = \"I.\";\n    std::string delimiters_caps_lower\
    \ = \"I.\";\n    std::string delimiters_caps_upper = \"I.\";\n    std::string\
    \ delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper = \"\"\
    ;\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3gthp1wy.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp3gthp1wy.cpp:22:17: error: redeclaration of \u2018std::string delimiters_caps_lower\u2019\
    \n   22 |     std::string delimiters_caps_lower = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3gthp1wy.cpp:20:17: note: \u2018std::string\
    \ delimiters_caps_lower\u2019 previously declared here\n   20 |     std::string\
    \ delimiters_caps_lower = \"I.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3gthp1wy.cpp:23:17: error: redeclaration of \u2018std::string delimiters_caps_upper\u2019\
    \n   23 |     std::string delimiters_caps_upper = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3gthp1wy.cpp:21:17: note: \u2018std::string\
    \ delimiters_caps_upper\u2019 previously declared here\n   21 |     std::string\
    \ delimiters_caps_upper = \"I.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3gthp1wy.cpp:24:17: error: redeclaration of \u2018std::string delimiters_caps_lower\u2019\
    \n   24 |     std::string delimiters_caps_lower = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3gthp1wy.cpp:20:17: note: \u2018std::string\
    \ delimiters_caps_lower\u2019 previously declared here\n   20 |     std::string\
    \ delimiters_caps_lower = \"I.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3gthp1wy.cpp:25:17: error: redeclaration of \u2018std::string delimiters_caps_upper\u2019\
    \n   25 |     std::string delimiters_caps_upper = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3gthp1wy.cpp:21:17: note: \u2018std::string\
    \ delimiters_caps_upper\u2019 previously declared here\n   21 |     std::string\
    \ delimiters_caps_upper = \"I.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3gthp1wy.cpp:26:17: error: redeclaration of \u2018std::string delimiters_caps_lower\u2019\
    \n   26 |     std::string delimiters_caps_lower = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3gthp1wy.cpp:20:17: note: \u2018std::string\
    \ delimiters_caps_lower\u2019 previously declared here\n   20 |     std::string\
    \ delimiters_caps_lower = \"I.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3gthp1wy.cpp:27:17: error: redeclaration of \u2018std::string delimiters"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == '.') {\n   \
    \         word = S.substr(0, i);\n            if (word == \"I\") {\n         \
    \       boredoms++;\n            }\n        }\n    }\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3l1oi4in: /tmp/tmp3l1oi4in.cpp:28: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqplz2v_0: /tmp/tmpqplz2v_0.cpp:76: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiter = \" .?!\";\n    size_t pos = 0;\n    while(pos < S.length())\
    \ {\n        word = S.substr(pos, delimiter.length());\n        if(word == \"\
    I\") {\n            boredoms += 1;\n        }\n        pos = pos + delimiter.length();\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6_5ihf_o: /tmp/tmp6_5ihf_o.cpp:29: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string boredom_word = \"I\";\n    std::string\
    \ delimiters = \".?!\";\n    std::string delimiters_lower = \"i.e\";\n    std::string\
    \ delimiters_upper = \"I.E\";\n    std::string delimiters_caps = \"I.E\";\n  \
    \  std::string delimiters_caps_lower = \"i.e\";\n    std::string delimiters_caps_upper\
    \ = \"I.E\";\n    std::string delimiters_caps_lower2 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper2 = \"I.E\";\n    std::string delimiters_caps_lower3 =\
    \ \"i.E\";\n    std::string delimiters_caps_upper3 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower4 = \"i.E\";\n    std::string delimiters_caps_upper4 =\
    \ \"I.E\";\n    std::string delimiters_caps_lower5 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper5 = \"I.E\";\n    std::string delimiters_caps_lower6 =\
    \ \"i.E\";\n    std::string delimiters_caps_upper6 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower7 = \"i.E\";\n    std::string delimiters_caps_upper7 =\
    \ \"I.E\";\n    std::string delimiters_caps_lower8 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper8 = \"I.E\";\n    std::string delimiters_caps_lower9 =\
    \ \"i.E\";\n    std::string delimiters_caps_upper9 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower10 = \"i.E\";\n    std::string delimiters_caps_upper10\
    \ = \"I.E\";\n    std::string delimiters_caps_lower11 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper11 = \"I.E\";\n    std::string delimiters_caps_lower12\
    \ = \"i.E\";\n    std::string delimiters_caps_upper12 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower13 = \"i.E\";\n    std::string delimiters_caps_upper13\
    \ = \"I.E\";\n    std::string delimiters_caps_lower14 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper14 = \"I.E\";\n    std::string delimiters_caps_lower15\
    \ = \"i.E\";\n    std::string delimiters_caps_upper15 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower16 = \"i.E\";\n    std::string delimiters_caps_upper16\
    \ = \"I.E\";\n    std::string delimiters_caps_lower17 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper17 = \"I.E\";\n    std::string delimiters_caps_\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8fcjlv7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpk8fcjlv7.cpp:55:1: error: expected initializer before \u2018}\u2019\
    \ token\n   55 | }\n      | ^\n/tmp/tmpk8fcjlv7.cpp:55:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for(int i=0;i<S.size();i++) {\n        word = S[i];\n        if(word==\"\
    I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsrrrfrtz: /tmp/tmpsrrrfrtz.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!') {\n    \
    \        boredoms += 1;\n        }\n        else {\n            word = i;\n  \
    \      }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplzg1jxc1: /tmp/tmplzg1jxc1.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5x_wdkdb: /tmp/tmp5x_wdkdb.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgiq0_mvm: /tmp/tmpgiq0_mvm.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp31ykhnmx: /tmp/tmp31ykhnmx.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n    std::string\
    \ word;\n    while(i < S.length()) {\n        word = S.substr(i, S.length());\n\
    \        if(word == \"I\") {\n            boredoms++;\n        }\n        i++;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnqn16unm: /tmp/tmpnqn16unm.cpp:28: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word;\n    std::string boredom_words;\n    std::string\
    \ boredom_sentence;\n    std::string boredom_sentences;\n    std::string boredom_sentences_temp;\n\
    \    std::string boredom_sentences_temp_2;\n    std::string boredom_sentences_temp_3;\n\
    \    std::string boredom_sentences_temp_4;\n    std::string boredom_sentences_temp_5;\n\
    \    std::string boredom_sentences_temp_6;\n    std::string boredom_sentences_temp_7;\n\
    \    std::string boredom_sentences_temp_8;\n    std::string boredom_sentences_temp_9;\n\
    \    std::string boredom_sentences_temp_10;\n    std::string boredom_sentences_temp_11;\n\
    \    std::string boredom_sentences_temp_12;\n    std::string boredom_sentences_temp_13;\n\
    \    std::string boredom_sentences_temp_14;\n    std::string boredom_sentences_temp_15;\n\
    \    std::string boredom_sentences_temp_16;\n    std::string boredom_sentences_temp_17;\n\
    \    std::string boredom_sentences_temp_18;\n    std::string boredom_sentences_temp_19;\n\
    \    std::string boredom_sentences_temp_20;\n    std::string boredom_sentences_temp_21;\n\
    \    std::string boredom_sentences_temp_22;\n    std::string boredom_sentences_temp_23;\n\
    \    std::string boredom_sentences_temp_24;\n    std::string boredom_sentences_temp_25;\n\
    \    std::string boredom_sentences_temp_26;\n    std::string boredom_sentences_temp_27;\n\
    \    std::string boredom_sentences_temp_28;\n    std::string boredom_sentences_temp_29;\n\
    \    std::string boredom_sentences_temp_30;\n    std::string boredom_sentences_temp_31;\n\
    \    std::string boredom_sentences_temp_32;\n    std::string boredom_sentences_temp_33;\n\
    \    std::string boredom_sentences_temp_34;\n    std::string boredom_sentences_temp_35;\n\
    \    std::string boredom_sentences_temp_36;\n    std::string boredom_sentences_temp_37;\n\
    \    std::string boredom_sentences_temp_38;\n    std::string boredom_sentences_temp_39;\n\
    \    std::string boredom_sentences_temp_40;\n    std::string boredom_sentences_temp_41;\n\
    \    std::string boredom_sentences_temp_42;\n    std::string boredom_sentences_temp_43;\n\
    \    std::string boredom_sentences_temp_44;\n    std::string bo\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa_3fplo6.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpa_3fplo6.cpp:63:1: error: expected initializer before \u2018}\u2019\
    \ token\n   63 | }\n      | ^\n/tmp/tmpa_3fplo6.cpp:63:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx5xh52rm: /tmp/tmpx5xh52rm.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n    while\
    \ (i < S.size()) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            boredom++;\n        }\n        i++;\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnct7acg8: /tmp/tmpnct7acg8.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n    \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv3yqozul: /tmp/tmpv3yqozul.cpp:80: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t i = 0;\n\
    \    while (pos < S.size()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        if (word == \"I\") {\n            boredoms++;\n        }\n        pos\
    \ = pos + delimiters.size();\n    }\n    return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo727_gn3: /tmp/tmpo727_gn3.cpp:30: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n    while\
    \ (i < S.size()) {\n        if (S[i] == '.') {\n            boredom++;\n     \
    \   }\n        if (S[i] == '?' || S[i] == '!') {\n            boredom++;\n   \
    \     }\n        i++;\n    }\n    return boredom;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbof6wcpc: /tmp/tmpbof6wcpc.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \". ? !\";\n    size_t pos = 0;\n    size_t count\
    \ = 0;\n    std::string temp;\n    while(pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        pos = 0;\n        count = 0;\n        temp = S;\n        while(pos\
    \ < temp.size()) {\n            if(delimiters.find(temp[pos]) != std::string::npos)\
    \ {\n                count++;\n            }\n            pos++;\n        }\n\
    \        if(word == \"I\") {\n            boredoms += count;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2i5lnm0n: /tmp/tmp2i5lnm0n.cpp:38: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    temp = S;\n    while(!temp.empty()){\n        word\
    \ = temp.substr(0,1);\n        temp = temp.substr(1,temp.length());\n        if(word\
    \ == \"I\"){\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpa5u60iom: /tmp/tmpa5u60iom.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo07tub71: /tmp/tmpo07tub71.cpp:76: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n \
    \           boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9ljuga_w: /tmp/tmp9ljuga_w.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i = 0; i <\
    \ S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmphre1e7i6: /tmp/tmphre1e7i6.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string boredom_word = \"I\";\n    std::string boredom_sentence\
    \ = \".\";\n    std::string boredom_sentence2 = \".\";\n    std::string boredom_sentence3\
    \ = \".\";\n    std::string boredom_sentence4 = \".\";\n    std::string boredom_sentence5\
    \ = \".\";\n    std::string boredom_sentence6 = \".\";\n    std::string boredom_sentence7\
    \ = \".\";\n    std::string boredom_sentence8 = \".\";\n    std::string boredom_sentence9\
    \ = \".\";\n    std::string boredom_sentence10 = \".\";\n    std::string boredom_sentence11\
    \ = \".\";\n    std::string boredom_sentence12 = \".\";\n    std::string boredom_sentence13\
    \ = \".\";\n    std::string boredom_sentence14 = \".\";\n    std::string boredom_sentence15\
    \ = \".\";\n    std::string boredom_sentence16 = \".\";\n    std::string boredom_sentence17\
    \ = \".\";\n    std::string boredom_sentence18 = \".\";\n    std::string boredom_sentence19\
    \ = \".\";\n    std::string boredom_sentence20 = \".\";\n    std::string boredom_sentence21\
    \ = \".\";\n    std::string boredom_sentence22 = \".\";\n    std::string boredom_sentence23\
    \ = \".\";\n    std::string boredom_sentence24 = \".\";\n    std::string boredom_sentence25\
    \ = \".\";\n    std::string boredom_sentence26 = \".\";\n    std::string boredom_sentence27\
    \ = \".\";\n    std::string boredom_sentence28 = \".\";\n    std::string boredom_sentence29\
    \ = \".\";\n    std::string boredom_sentence30 = \".\";\n    std::string boredom_sentence31\
    \ = \".\";\n    std::string boredom_sentence32 = \".\";\n    std::string boredom_sentence33\
    \ = \".\";\n    std::string boredom_sentence34 = \".\";\n    std::string boredom_sentence35\
    \ = \".\";\n    std::string boredom_sentence36 = \".\";\n    std::string boredom_sentence37\
    \ = \".\";\n    std::string boredom_sentence38 = \".\";\n    std::string boredom_sentence39\
    \ = \".\";\n    std::string boredom_sentence40 = \".\";\n    std::string boredom_sentence41\
    \ = \".\";\n    std::string boredom_sentence42 = \".\";\n    std::string boredom_sentence43\
    \ = \".\";\n    std::string boredom_sentence44 = \".\";\n    std::string boredom_sentence45\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq1k0n2_0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpq1k0n2_0.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmpq1k0n2_0.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string::size_type pos = 0;\n\
    \    std::string::size_type last = 0;\n    std::string::size_type i = 0;\n   \
    \ std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type\
    \ l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n\
    \    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type\
    \ q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n\
    \    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type\
    \ v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n\
    \    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n    std::string::size_type\
    \ A = 0;\n    std::string::size_type B = 0;\n    std::string::size_type C = 0;\n\
    \    std::string::size_type D = 0;\n    std::string::size_type E = 0;\n    std::string::size_type\
    \ F = 0;\n    std::string::size_type G = 0;\n    std::string::size_type H = 0;\n\
    \    std::string::size_type I = 0;\n    std::string::size_type J = 0;\n    std::string::size_type\
    \ K = 0;\n    std::string::size_type L = 0;\n    std::string::size_type M = 0;\n\
    \    std::string::size_type N = 0;\n    std::string::size_type O = 0;\n    std::string::size_type\
    \ P = 0;\n    std::string::size_type Q = 0;\n    std::string::size_type R = 0;\n\
    \    std::string::size_type S = 0;\n    std::string::size_type T = 0;\n    std::string::size_type\
    \ U = 0;\n    std::string::size_type V = 0;\n    std::string::size_type W = 0;\n\
    \    std::string::size_type X = 0;\n    std::string::size_type Y = 0;\n    std::string::size_type\
    \ Z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n\
    \    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type\
    \ e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n\
    \    std::string::size_type h = 0;\n    std::string::size_type i = 0;\n    std::string::size_type\
    \ j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n\
    \    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type\
    \ o = 0;\n    std::string::size_type p = 0;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfl50ysu4.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfl50ysu4.cpp:53:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   53 |     std::string::size_type S = 0;\n   \
    \   |                            ^\n/tmp/tmpfl50ysu4.cpp:69:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type i\u2019\n   69 |     std::string::size_type\
    \ i = 0;\n      |                            ^\n/tmp/tmpfl50ysu4.cpp:17:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type i\u2019 previously declared\
    \ here\n   17 |     std::string::size_type i = 0;\n      |                   \
    \         ^\n/tmp/tmpfl50ysu4.cpp:70:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019\n   70 |     std::string::size_type j = 0;\n      |                \
    \            ^\n/tmp/tmpfl50ysu4.cpp:18:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019 previously declared here\n   18 |     std::string::size_type j = 0;\n\
    \      |                            ^\n/tmp/tmpfl50ysu4.cpp:71:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type k\u2019\n   71 |     std::string::size_type\
    \ k = 0;\n      |                            ^\n/tmp/tmpfl50ysu4.cpp:19:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type k\u2019 previously declared\
    \ here\n   19 |     std::string::size_type k = 0;\n      |                   \
    \         ^\n/tmp/tmpfl50ysu4.cpp:72:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019\n   72 |     std::string::size_type l = 0;\n      |                \
    \            ^\n/tmp/tmpfl50ysu4.cpp:20:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019 previously declared here\n   20 |     std::string::size_type l = 0;\n\
    \      |                            ^\n/tmp/tmpfl50ysu4.cpp:73:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type m\u2019\n   73 |     std::string::size_type\
    \ m = 0;\n      |                            ^\n/tmp/tmpfl50ysu4.cpp:21:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type m\u2019 previously declared\
    \ here\n   21 |     std::string::size_type m "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyfbnxu0o: /tmp/tmpyfbnxu0o.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3q1pchv9.cpp:44:102: warning: missing terminating \" character\n\
    \   44 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".\n      |                                                             \
    \                                         ^\n/tmp/tmp3q1pchv9.cpp:44:102: error:\
    \ missing terminating \" character\n   44 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".\n      |                                                             \
    \                                         ^~\n/tmp/tmp3q1pchv9.cpp: In function\
    \ \u2018long int is_bored(std::string)\u2019:\n/tmp/tmp3q1pchv9.cpp:30:17: error:\
    \ redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3q1pchv9.cpp:28:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3q1pchv9.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3q1pchv9.cpp:29:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   29 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3q1pchv9.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for(auto &c: S) {\n        if(c == '.' || c == '?' || c == '!') {\n     \
    \       boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp91x9pvxv: /tmp/tmp91x9pvxv.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbxvj3y9t: /tmp/tmpbxvj3y9t.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n    while(i\
    \ < S.size()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n   \
    \         boredom++;\n        }\n        i++;\n    }\n    return boredom;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpr0_8e7hk: /tmp/tmpr0_8e7hk.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    std::string word;\n    std::string sentence;\n \
    \   std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n \
    \   \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp86mcevp5: /tmp/tmp86mcevp5.cpp:106: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp12o8leew: /tmp/tmp12o8leew.cpp:76: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw5ahpb0u: /tmp/tmpw5ahpb0u.cpp:76: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjqtrh108: /tmp/tmpjqtrh108.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo4b_okt_: /tmp/tmpo4b_okt_.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string boredom_sentence = \"\
    I love this weather\";\n    std::string boredom_sentence2 = \"I love this weather.\"\
    ;\n    std::string boredom_sentence3 = \"I love this weather .\";\n    std::string\
    \ boredom_sentence4 = \"I love this weather ? .\";\n    std::string boredom_sentence5\
    \ = \"I love this weather ? ? .\";\n    std::string boredom_sentence6 = \"I love\
    \ this weather ? ? ? .\";\n    std::string boredom_sentence7 = \"I love this weather\
    \ ? ? ? ? .\";\n    std::string boredom_sentence8 = \"I love this weather ? ?\
    \ ? ? ? .\";\n    std::string boredom_sentence9 = \"I love this weather ? ? ?\
    \ ? ? ? .\";\n    std::string boredom_sentence10 = \"I love this weather ? ? ?\
    \ ? ? ? ? .\";\n    std::string boredom_sentence11 = \"I love this weather ? ?\
    \ ? ? ? ? ? ? .\";\n    std::string boredom_sentence12 = \"I love this weather\
    \ ? ? ? ? ? ? ? ? ? .\";\n    std::string boredom_sentence13 = \"I love this weather\
    \ ? ? ? ? ? ? ? ? ? ? .\";\n    std::string boredom_sentence14 = \"I love this\
    \ weather ? ? ? ? ? ? ? ? ? ? ? .\";\n    std::string boredom_sentence15 = \"\
    I love this weather ? ? ? ? ? ? ? ? ? ? ? ? .\";\n    std::string boredom_sentence16\
    \ = \"I love this weather ? ? ? ? ? ? ? ? ? ? ? ? ? .\";\n    std::string boredom_sentence17\
    \ = \"I love this weather ? ? ? ? ? ? ? ? ? ? ? ? ? ? .\";\n    std::string boredom_sentence18\
    \ = \"I love this weather ? ? ? ? ? ? ? ? ? ? ? ? ? ? .\";\n    std::string boredom_sentence19\
    \ = \"I love this weather ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? .\";\n    std::string\
    \ boredom_sentence20 = \"I love this weather ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? .\"\
    ;\n    std::string bore\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb74igrcr.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpb74igrcr.cpp:36:1: error: expected initializer before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmpb74igrcr.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    temp = S;\n    while(temp != \"\") {\n        word\
    \ = temp.substr(0,1);\n        temp = temp.substr(1);\n        if(word == \"I\"\
    ) {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpynqaebp1: /tmp/tmpynqaebp1.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjnv73rv2: /tmp/tmpjnv73rv2.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2kfqp47m: /tmp/tmp2kfqp47m.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1kjrfouz: /tmp/tmp1kjrfouz.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string sentence;\n    std::string delimiters\
    \ = \".?!\";\n    size_t pos = 0;\n    size_t i = 0;\n    while(i < S.length())\
    \ {\n        pos = S.find(delimiters, i);\n        if(pos != std::string::npos)\
    \ {\n            word = S.substr(i, pos - i);\n            if(word == \"I\") {\n\
    \                boredoms++;\n            }\n            i = pos + 1;\n      \
    \  } else {\n            word = S.substr(i);\n            boredoms++;\n      \
    \      i = S.length();\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl8860yvn: /tmp/tmpl8860yvn.cpp:37: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmps2z4ayi9: /tmp/tmps2z4ayi9.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2eiygfe.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpd2eiygfe.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpd2eiygfe.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n \
    \   std::string temp85;\n    std::string temp86;\n    std::string temp87\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpht56ncu5.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpht56ncu5.cpp:101:1: error: expected initializer before \u2018}\u2019\
    \ token\n  101 | }\n      | ^\n/tmp/tmpht56ncu5.cpp:101:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcvadx3w0: /tmp/tmpcvadx3w0.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n   \
    \ int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n\
    \    int D = 0;\n    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n\
    \    int I = 0;\n    int J = 0;\n    int K = 0;\n    int L = 0;\n    int M = 0;\n\
    \    int N = 0;\n    int O = 0;\n    int P = 0;\n    int Q = 0;\n    int R = 0;\n\
    \    int S = 0;\n    int T = 0;\n    int U = 0;\n    int V = 0;\n    int W = 0;\n\
    \    int X = 0;\n    int Y = 0;\n    int Z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n\
    \    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n\
    \    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n\
    \    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n\
    \    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n\
    \    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n\
    \    int E = 0;\n    int F = 0;\n    int G = 0;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiim6aack.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpiim6aack.cpp:49:9: error: declaration of \u2018int S\u2019 shadows\
    \ a parameter\n   49 |     int S = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:65:9:\
    \ error: redeclaration of \u2018int i\u2019\n   65 |     int i = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:13:9: note: \u2018int i\u2019 previously declared\
    \ here\n   13 |     int i = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:66:9:\
    \ error: redeclaration of \u2018int j\u2019\n   66 |     int j = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:14:9: note: \u2018int j\u2019 previously declared\
    \ here\n   14 |     int j = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:67:9:\
    \ error: redeclaration of \u2018int k\u2019\n   67 |     int k = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:15:9: note: \u2018int k\u2019 previously declared\
    \ here\n   15 |     int k = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:68:9:\
    \ error: redeclaration of \u2018int l\u2019\n   68 |     int l = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:16:9: note: \u2018int l\u2019 previously declared\
    \ here\n   16 |     int l = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:69:9:\
    \ error: redeclaration of \u2018int m\u2019\n   69 |     int m = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:17:9: note: \u2018int m\u2019 previously declared\
    \ here\n   17 |     int m = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:70:9:\
    \ error: redeclaration of \u2018int n\u2019\n   70 |     int n = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:18:9: note: \u2018int n\u2019 previously declared\
    \ here\n   18 |     int n = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:71:9:\
    \ error: redeclaration of \u2018int o\u2019\n   71 |     int o = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:19:9: note: \u2018int o\u2019 previously declared\
    \ here\n   19 |     int o = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:72:9:\
    \ error: redeclaration of \u2018int p\u2019\n   72 |     int p = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:20:9: note: \u2018int p\u2019 previously declared\
    \ here\n   20 |     int p = 0;\n      |         ^\n/tmp/tmpiim6aack.cpp:73:9:\
    \ error: redeclaration of \u2018int q\u2019\n   73 |     int q = 0;\n      | \
    \        ^\n/tmp/tmpiim6aack.cpp:21:9: note: \u2018int q\u2019 previously declared\
    \ here\n   21 |     int q = 0;\n      |         ^"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string sentence;\n    std::string delimiter\
    \ = \".?!\";\n    std::string::size_type pos;\n    std::string::size_type last;\n\
    \    std::string::size_type i;\n    std::string::size_type j;\n    std::string::size_type\
    \ k;\n    std::string::size_type l;\n    std::string::size_type m;\n    std::string::size_type\
    \ n;\n    std::string::size_type o;\n    std::string::size_type p;\n    std::string::size_type\
    \ q;\n    std::string::size_type r;\n    std::string::size_type s;\n    std::string::size_type\
    \ t;\n    std::string::size_type u;\n    std::string::size_type v;\n    std::string::size_type\
    \ w;\n    std::string::size_type x;\n    std::string::size_type y;\n    std::string::size_type\
    \ z;\n    std::string::size_type A;\n    std::string::size_type B;\n    std::string::size_type\
    \ C;\n    std::string::size_type D;\n    std::string::size_type E;\n    std::string::size_type\
    \ F;\n    std::string::size_type G;\n    std::string::size_type H;\n    std::string::size_type\
    \ I;\n    std::string::size_type J;\n    std::string::size_type K;\n    std::string::size_type\
    \ L;\n    std::string::size_type M;\n    std::string::size_type N;\n    std::string::size_type\
    \ O;\n    std::string::size_type P;\n    std::string::size_type Q;\n    std::string::size_type\
    \ R;\n    std::string::size_type S;\n    std::string::size_type T;\n    std::string::size_type\
    \ U;\n    std::string::size_type V;\n    std::string::size_type W;\n    std::string::size_type\
    \ X;\n    std::string::size_type Y;\n    std::string::size_type Z;\n    std::string::size_type\
    \ A;\n    std::string::size_type B;\n    std::string::size_type C;\n    std::string::size_type\
    \ D;\n    std::string::size_type E;\n    std::string::size_type F;\n    std::string::size_type\
    \ G;\n    std::string::size_type H;\n    std::string::size_type I;\n    std::string::size_type\
    \ J;\n    std::string::size_type K;\n    std::string::size_type L;\n    std::string::size_type\
    \ M;\n    std::string::size_type N;\n    std::string::size_type O;\n    std::string::size_type\
    \ P;\n    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpln1vrui9.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpln1vrui9.cpp:55:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   55 |     std::string::size_type S;\n      |\
    \                            ^\n/tmp/tmpln1vrui9.cpp:63:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type A\u2019\n   63 |     std::string::size_type\
    \ A;\n      |                            ^\n/tmp/tmpln1vrui9.cpp:37:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type A\u2019 previously declared\
    \ here\n   37 |     std::string::size_type A;\n      |                       \
    \     ^\n/tmp/tmpln1vrui9.cpp:64:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ B\u2019\n   64 |     std::string::size_type B;\n      |                    \
    \        ^\n/tmp/tmpln1vrui9.cpp:38:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ B\u2019 previously declared here\n   38 |     std::string::size_type B;\n  \
    \    |                            ^\n/tmp/tmpln1vrui9.cpp:65:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type C\u2019\n   65 |     std::string::size_type\
    \ C;\n      |                            ^\n/tmp/tmpln1vrui9.cpp:39:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type C\u2019 previously declared\
    \ here\n   39 |     std::string::size_type C;\n      |                       \
    \     ^\n/tmp/tmpln1vrui9.cpp:66:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ D\u2019\n   66 |     std::string::size_type D;\n      |                    \
    \        ^\n/tmp/tmpln1vrui9.cpp:40:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ D\u2019 previously declared here\n   40 |     std::string::size_type D;\n  \
    \    |                            ^\n/tmp/tmpln1vrui9.cpp:67:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type E\u2019\n   67 |     std::string::size_type\
    \ E;\n      |                            ^\n/tmp/tmpln1vrui9.cpp:41:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type E\u2019 previously declared\
    \ here\n   41 |     std::string::size_type E;\n      |                       \
    \     ^\n/t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiters = \".?!\";\n\
    \    std::string delimiters_lower = \"i.e\";\n    std::string delimiters_upper\
    \ = \"I.E\";\n    std::string delimiters_caps = \"I.E\";\n    std::string delimiters_caps_lower\
    \ = \"I.E\";\n    std::string delimiters_caps_upper = \"I.E\";\n    std::string\
    \ delimiters_caps_upper2 = \"I.E\";\n    std::string delimiters_caps_upper3 =\
    \ \"I.E\";\n    std::string delimiters_caps_upper4 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper5 = \"I.E\";\n    std::string delimiters_caps_upper6 =\
    \ \"I.E\";\n    std::string delimiters_caps_upper7 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper8 = \"I.E\";\n    std::string delimiters_caps_upper9 =\
    \ \"I.E\";\n    std::string delimiters_caps_upper10 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper11 = \"I.E\";\n    std::string delimiters_caps_upper12\
    \ = \"I.E\";\n    std::string delimiters_caps_upper13 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper14 = \"I.E\";\n    std::string delimiters_caps_upper15\
    \ = \"I.E\";\n    std::string delimiters_caps_upper16 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper17 = \"I.E\";\n    std::string delimiters_caps_upper18\
    \ = \"I.E\";\n    std::string delimiters_caps_upper19 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper20 = \"I.E\";\n    std::string delimiters_caps_upper21\
    \ = \"I.E\";\n    std::string delimiters_caps_upper22 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper23 = \"I.E\";\n    std::string delimiters_caps_upper24\
    \ = \"I.E\";\n    std::string delimiters_caps_upper25 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper26 = \"I.E\";\n    std::string delimiters_caps_upper27\
    \ = \"I.E\";\n    std::string delimiters_caps_upper28 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper29 = \"I.E\";\n    std::string delimiters_caps_upper30\
    \ = \"I.E\";\n    std::string delimiters_caps_upper31 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper32 = \"I.E\";\n    std::string delimiters_caps_upper33\
    \ = \"I.E\";\n    std::string delimiters_caps_upper34 = \"\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9x_1fjef.cpp:53:43: warning: missing terminating \" character\n\
    \   53 |     std::string delimiters_caps_upper34 = \"\n      |               \
    \                            ^\n/tmp/tmp9x_1fjef.cpp:53:43: error: missing terminating\
    \ \" character\n/tmp/tmp9x_1fjef.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp9x_1fjef.cpp:54:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   54 | }\n      | ^\n/tmp/tmp9x_1fjef.cpp:54:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp9x_1fjef.cpp:54:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6\
    \ = \".\";\n    std::string delimiter7 = \"?\";\n    std::string delimiter8 =\
    \ \"!\";\n    std::string delimiter9 = \".?!\";\n    std::string delimiter10 =\
    \ \".\";\n    std::string delimiter11 = \"?\";\n    std::string delimiter12 =\
    \ \"!\";\n    std::string delimiter13 = \".?!\";\n    std::string delimiter14\
    \ = \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16\
    \ = \"!\";\n    std::string delimiter17 = \".?!\";\n    std::string delimiter18\
    \ = \".\";\n    std::string delimiter19 = \"?\";\n    std::string delimiter20\
    \ = \"!\";\n    std::string delimiter21 = \"?!\";\n    std::string delimiter22\
    \ = \".\";\n    std::string delimiter23 = \"?\";\n    std::string delimiter24\
    \ = \"!\";\n    std::string delimiter25 = \".?!\";\n    std::string delimiter26\
    \ = \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28\
    \ = \"!\";\n    std::string delimiter29 = \".?!\";\n    std::string delimiter30\
    \ = \".\";\n    std::string delimiter31 = \"?\";\n    std::string delimiter32\
    \ = \"!\";\n    std::string delimiter33 = \".?!\";\n    std::string delimiter34\
    \ = \".\";\n    std::string delimiter35 = \"?\";\n    std::string delimiter36\
    \ = \"!\";\n    std::string delimiter37 = \".?!\";\n    std::string delimiter38\
    \ = \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40\
    \ = \"!\";\n    std::string delimiter41 = \"?!\";\n    std::string delimiter42\
    \ = \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44\
    \ = \"!\";\n    std::string delimiter45 = \".?!\";\n    std::string delimiter46\
    \ = \".\";\n    std::string delimiter47 = \"?\";\n    std::string delimiter48\
    \ = \"!\";\n    std::string delimiter49 = \".?!\";\n    std::string delimiter50\
    \ = \".\";\n    std::string delimiter51 = \"?\";\n    std::string delimiter52\
    \ = \"!\";\n    std::string delimiter53 = \".?!\";\n    std::string delimiter54\
    \ = \".\";\n    std::string delimiter55 = \"?\";\n    std::string delimiter56\
    \ = \"!\";\n    std::string delimiter57 = \".?!\";\n    std::string delimiter58\
    \ = \".\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqg9c49b7.cpp:72:31: warning: missing terminating \" character\n\
    \   72 |     std::string delimiter58 = \".\n      |                          \
    \     ^\n/tmp/tmpqg9c49b7.cpp:72:31: error: missing terminating \" character\n\
    \   72 |     std::string delimiter58 = \".\n      |                          \
    \     ^~\n/tmp/tmpqg9c49b7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqg9c49b7.cpp:73:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   73 | }\n      | ^\n/tmp/tmpqg9c49b7.cpp:73:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpqg9c49b7.cpp:73:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".?!\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".?!\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".?!\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".?!\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter50\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77i4nyel.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp77i4nyel.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmp77i4nyel.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter50 = \".\";\n    std::string delimiter51 = \".?!\";\n    std::string\
    \ delimiter52 = \".\";\n    std::string delimiter53 = \".?!\";\n    std::string\
    \ delimiter54 = \".\";\n    std::string delimiter55 = \".?!\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp164j3ccp.cpp:69:31: warning: missing terminating \" character\n\
    \   69 |     std::string delimiter55 = \".?!\n      |                        \
    \       ^\n/tmp/tmp164j3ccp.cpp:69:31: error: missing terminating \" character\n\
    \   69 |     std::string delimiter55 = \".?!\n      |                        \
    \       ^~~~\n/tmp/tmp164j3ccp.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp164j3ccp.cpp:70:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   70 | }\n      | ^\n/tmp/tmp164j3ccp.cpp:70:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp164j3ccp.cpp:70:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n \
    \   std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string::size_type\
    \ pos = 0;\n    std::string::size_type last = 0;\n    std::string::size_type i\
    \ = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n\
    \    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type\
    \ n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n\
    \    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type\
    \ s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n\
    \    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type\
    \ x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n\
    \    std::string::size_type A = 0;\n    std::string::size_type B = 0;\n    std::string::size_type\
    \ C = 0;\n    std::string::size_type D = 0;\n    std::string::size_type E = 0;\n\
    \    std::string::size_type F = 0;\n    std::string::size_type G = 0;\n    std::string::size_type\
    \ H = 0;\n    std::string::size_type I = 0;\n    std::string::size_type J = 0;\n\
    \    std::string::size_type K = 0;\n    std::string::size_type L = 0;\n    std::string::size_type\
    \ M = 0;\n    std::string::size_type N = 0;\n    std::string::size_type O = 0;\n\
    \    std::string::size_type P = 0;\n    std::string::size_type Q = 0;\n    std::string::size_type\
    \ R = 0;\n    std::string::size_type S = 0;\n    std::string::size_type T = 0;\n\
    \    std::string::size_type U = 0;\n    std::string::size_type V = 0;\n    std::string::size_type\
    \ W = 0;\n    std::string::size_type X = 0;\n    std::string::size_type Y = 0;\n\
    \    std::string::size_type Z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type\
    \ b = 0;\n    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n\
    \    std::string::size_type e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type\
    \ g = 0;\n    std::string::size_type h = 0;\n    std::string::size_type i = 0;\n\
    \    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type\
    \ l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n\
    \    std::string::size_type o = 0;\n    std::string::\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1oej5ggg.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp1oej5ggg.cpp:54:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   54 |     std::string::size_type S = 0;\n   \
    \   |                            ^\n/tmp/tmp1oej5ggg.cpp:70:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type i\u2019\n   70 |     std::string::size_type\
    \ i = 0;\n      |                            ^\n/tmp/tmp1oej5ggg.cpp:18:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type i\u2019 previously declared\
    \ here\n   18 |     std::string::size_type i = 0;\n      |                   \
    \         ^\n/tmp/tmp1oej5ggg.cpp:71:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019\n   71 |     std::string::size_type j = 0;\n      |                \
    \            ^\n/tmp/tmp1oej5ggg.cpp:19:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019 previously declared here\n   19 |     std::string::size_type j = 0;\n\
    \      |                            ^\n/tmp/tmp1oej5ggg.cpp:72:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type k\u2019\n   72 |     std::string::size_type\
    \ k = 0;\n      |                            ^\n/tmp/tmp1oej5ggg.cpp:20:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type k\u2019 previously declared\
    \ here\n   20 |     std::string::size_type k = 0;\n      |                   \
    \         ^\n/tmp/tmp1oej5ggg.cpp:73:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019\n   73 |     std::string::size_type l = 0;\n      |                \
    \            ^\n/tmp/tmp1oej5ggg.cpp:21:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019 previously declared here\n   21 |     std::string::size_type l = 0;\n\
    \      |                            ^\n/tmp/tmp1oej5ggg.cpp:74:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type m\u2019\n   74 |     std::string::size_type\
    \ m = 0;\n      |                            ^\n/tmp/tmp1oej5ggg.cpp:22:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type m\u2019 previously declared\
    \ here\n   22 |     std::string::size_type m "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    std::string word;\n\
    \    std::string temp;\n    temp = S;\n    while(temp != \"\"){\n        word\
    \ = temp.substr(0,1);\n        temp = temp.substr(1,temp.length());\n        if(word\
    \ == \"I\"){\n            boredom++;\n        }\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplda1v73f: /tmp/tmplda1v73f.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t count\
    \ = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n      \
    \  pos = S.find(delimiters, pos);\n        if(pos == std::string::npos) {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4m3xxio6: /tmp/tmp4m3xxio6.cpp:28: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word;\n    std::string boredom_words;\n    std::string\
    \ boredom_sentence;\n    std::string boredom_sentences;\n    std::string boredom_sentences_split;\n\
    \    std::string boredom_sentences_split_temp;\n    std::string boredom_sentences_split_temp2;\n\
    \    std::string boredom_sentences_split_temp3;\n    std::string boredom_sentences_split_temp4;\n\
    \    std::string boredom_sentences_split_temp5;\n    std::string boredom_sentences_split_temp6;\n\
    \    std::string boredom_sentences_split_temp7;\n    std::string boredom_sentences_split_temp8;\n\
    \    std::string boredom_sentences_split_temp9;\n    std::string boredom_sentences_split_temp10;\n\
    \    std::string boredom_sentences_split_temp11;\n    std::string boredom_sentences_split_temp12;\n\
    \    std::string boredom_sentences_split_temp13;\n    std::string boredom_sentences_split_temp14;\n\
    \    std::string boredom_sentences_split_temp15;\n    std::string boredom_sentences_split_temp16;\n\
    \    std::string boredom_sentences_split_temp17;\n    std::string boredom_sentences_split_temp18;\n\
    \    std::string boredom_sentences_split_temp19;\n    std::string boredom_sentences_split_temp20;\n\
    \    std::string boredom_sentences_split_temp21;\n    std::string boredom_sentences_split_temp22;\n\
    \    std::string boredom_sentences_split_temp23;\n    std::string boredom_sentences_split_temp24;\n\
    \    std::string boredom_sentences_split_temp25;\n    std::string boredom_sentences_split_temp26;\n\
    \    std::string boredom_sentences_split_temp27;\n    std::string boredom_sentences_split_temp28;\n\
    \    std::string boredom_sentences_split_temp29;\n    std::string boredom_sentences_split_temp30;\n\
    \    std::string boredom_sentences_split_temp31;\n    std::string boredom_sentences_split_temp32;\n\
    \    std::string boredom_sentences_split_temp33;\n    std::string boredom_sentences_split_temp34;\n\
    \    std::string boredom_sentences_split_temp35;\n    std::string boredom_sentences_split_temp36;\n\
    \    std::string boredom_sentences_split_temp37;\n    std::string boredom_sentences_split_temp38;\n\
    \    std::string boredom_sentences_split_temp39;\n    std::string boredom_sentences_split_temp\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65064z03.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp65064z03.cpp:59:1: error: expected initializer before \u2018}\u2019\
    \ token\n   59 | }\n      | ^\n/tmp/tmp65064z03.cpp:59:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ std::string boredom;\n    std::string delimiters = \". ? !\";\n    size_t pos\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t l\
    \ = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t p\
    \ = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t t\
    \ = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t x\
    \ = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n    size_t B\
    \ = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n    size_t F\
    \ = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n    size_t J\
    \ = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n    size_t N\
    \ = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n    size_t R\
    \ = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n    size_t V\
    \ = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n    size_t Z\
    \ = 0;\n    size_t a = 0;\n    size_t b = 0;\n    size_t c = 0;\n    size_t d\
    \ = 0;\n    size_t e = 0;\n    size_t f = 0;\n    size_t g = 0;\n    size_t h\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t l\
    \ = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t p\
    \ = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t t\
    \ = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t x\
    \ = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n    size_t B\
    \ = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n    size_t F\
    \ = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n    size_t J\
    \ = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n    size_t N\
    \ = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n    size_t R\
    \ = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n    size_t V\
    \ = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n    size_t Z\
    \ = 0;\n    size_t a = 0;\n    size_t \n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpld7vdr74.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpld7vdr74.cpp:53:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   53 |     size_t S = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:69:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   69 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:17:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   17 |     size_t i = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:70:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   70 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:18:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   18 |     size_t j = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:71:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   71 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:19:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   19 |     size_t k = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:72:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   72 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:20:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   20 |     size_t l = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:73:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   73 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:21:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   21 |     size_t m = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:74:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   74 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:22:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   22 |     size_t n = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:75:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   75 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:23:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   23 |     size_t o = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:76:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   76 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmpld7vdr74.cpp:24:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   24 |     size_t p = 0;\n      |            ^\n/tmp/tmpld7vdr74.cpp:77:12:\
    \ error: r"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp23_xh7n6: /tmp/tmp23_xh7n6.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n  \
    \      if (word.compare(0, 2, \"i\") == 0) {\n            boredoms += 1;\n   \
    \     }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn6rth3vd: /tmp/tmpn6rth3vd.cpp:28: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n   \
    \ std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t\
    \ n = 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t\
    \ r = 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t\
    \ v = 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t\
    \ z = 0;\n    size_t A = 0;\n    size_t B = 0;\n    size_t C = 0;\n    size_t\
    \ D = 0;\n    size_t E = 0;\n    size_t F = 0;\n    size_t G = 0;\n    size_t\
    \ H = 0;\n    size_t I = 0;\n    size_t J = 0;\n    size_t K = 0;\n    size_t\
    \ L = 0;\n    size_t M = 0;\n    size_t N = 0;\n    size_t O = 0;\n    size_t\
    \ P = 0;\n    size_t Q = 0;\n    size_t R = 0;\n    size_t S = 0;\n    size_t\
    \ T = 0;\n    size_t U = 0;\n    size_t V = 0;\n    size_t W = 0;\n    size_t\
    \ X = 0;\n    size_t Y = 0;\n    size_t Z = 0;\n    size_t a = 0;\n    size_t\
    \ b = 0;\n    size_t c = 0;\n    size_t d = 0;\n    size_t e = 0;\n    size_t\
    \ f = 0;\n    size_t g = 0;\n    size_t h = 0;\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t\
    \ n = 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t\
    \ r = 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t\
    \ v = 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t\
    \ z = 0;\n    size_t A = 0;\n    size_t B = 0;\n    size_t C = 0;\n    size_t\
    \ D = 0;\n    size_t E = 0;\n    size_t F = 0;\n    size_t G = 0;\n    size_t\
    \ H = 0;\n    size_t I = 0;\n    size_t J = 0;\n    size_t K = 0;\n    size_t\
    \ L = 0;\n    size_t M = 0;\n    size_t N = 0;\n    size_t O = 0;\n    size_t\
    \ P = 0;\n    size_t Q = 0;\n    size_t R = 0;\n    size_t S = 0;\n    size_t\
    \ T = 0;\n    size_t U = 0;\n    size_t V = 0;\n    size_t W = 0;\n    size_t\
    \ X = 0;\n    size_t Y = 0;\n    size_t Z\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8rq6tdu.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl8rq6tdu.cpp:55:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   55 |     size_t S = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:71:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   71 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:19:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   19 |     size_t i = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:72:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   72 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:20:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   20 |     size_t j = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:73:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   73 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:21:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   21 |     size_t k = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:74:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   74 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:22:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   22 |     size_t l = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:75:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   75 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:23:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   23 |     size_t m = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:76:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   76 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:24:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   24 |     size_t n = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:77:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   77 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:25:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   25 |     size_t o = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:78:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   78 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmpl8rq6tdu.cpp:26:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   26 |     size_t p = 0;\n      |            ^\n/tmp/tmpl8rq6tdu.cpp:79:12:\
    \ error: r"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \".?!\";\n\
    \    std::string delimiter1 = \"I\";\n    std::string delimiter2 = \".\";\n  \
    \  std::string delimiter3 = \".\";\n    std::string delimiter4 = \".\";\n    std::string\
    \ delimiter5 = \".\";\n    std::string delimiter6 = \".\";\n    std::string delimiter7\
    \ = \".\";\n    std::string delimiter8 = \".\";\n    std::string delimiter9 =\
    \ \".\";\n    std::string delimiter10 = \".\";\n    std::string delimiter11 =\
    \ \".\";\n    std::string delimiter12 = \".\";\n    std::string delimiter13 =\
    \ \".\";\n    std::string delimiter14 = \".\";\n    std::string delimiter15 =\
    \ \".\";\n    std::string delimiter16 = \".\";\n    std::string delimiter17 =\
    \ \".\";\n    std::string delimiter18 = \".\";\n    std::string delimiter19 =\
    \ \".\";\n    std::string delimiter20 = \".\";\n    std::string delimiter21 =\
    \ \".\";\n    std::string delimiter22 = \".\";\n    std::string delimiter23 =\
    \ \".\";\n    std::string delimiter24 = \".\";\n    std::string delimiter25 =\
    \ \".\";\n    std::string delimiter26 = \".\";\n    std::string delimiter27 =\
    \ \".\";\n    std::string delimiter28 = \".\";\n    std::string delimiter29 =\
    \ \".\";\n    std::string delimiter30 = \".\";\n    std::string delimiter31 =\
    \ \".\";\n    std::string delimiter32 = \".\";\n    std::string delimiter33 =\
    \ \".\";\n    std::string delimiter34 = \".\";\n    std::string delimiter35 =\
    \ \".\";\n    std::string delimiter36 = \".\";\n    std::string delimiter37 =\
    \ \".\";\n    std::string delimiter38 = \".\";\n    std::string delimiter39 =\
    \ \".\";\n    std::string delimiter40 = \".\";\n    std::string delimiter41 =\
    \ \".\";\n    std::string delimiter42 = \".\";\n    std::string delimiter43 =\
    \ \".\";\n    std::string delimiter44 = \".\";\n    std::string delimiter45 =\
    \ \".\";\n    std::string delimiter46 = \".\";\n    std::string delimiter47 =\
    \ \".\";\n    std::string delimiter48 = \".\";\n    std::string delimiter49 =\
    \ \".\";\n    std::string delimiter50 = \".\";\n    std::string delimiter51 =\
    \ \".\";\n    std::string delimiter52 = \".\";\n    std::string delimiter53 =\
    \ \".\";\n    std::string delimiter54 = \".\";\n    std::string delimiter55 =\
    \ \".\";\n    std::string delimiter56 = \".\";\n    std::string delimiter57 =\
    \ \".\";\n    std::string delimiter58 = \".\";\n    std::string delimiter59 =\
    \ \".\";\n    std::string delimiter60 = \".\";\n    \n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7t_ggf95: /tmp/tmp7t_ggf95.cpp:80: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t prev =\
    \ 0;\n    size_t count = 0;\n    size_t i = 0;\n    while(pos < S.size()) {\n\
    \        word = S.substr(pos, delimiters.size());\n        pos = S.find(delimiters,\
    \ prev);\n        if(pos == std::string::npos) {\n            pos = S.size();\n\
    \        }\n        prev = pos + 1;\n        if(word == \"I\") {\n           \
    \ count++;\n        }\n        i++;\n    }\n    boredoms = count;\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpq1s5yww6: /tmp/tmpq1s5yww6.cpp:38: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!'){\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnsw3x4pu: /tmp/tmpnsw3x4pu.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i = 0; i <\
    \ S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo84fxolq: /tmp/tmpo84fxolq.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    temp = S;\n    while(!temp.empty()) {\n        word\
    \ = temp.substr(0,1);\n        temp = temp.substr(1);\n        if(word == \"I\"\
    ) {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp50wnbzy3: /tmp/tmp50wnbzy3.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!'){\n            boredom++;\n        }\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp32tqhe2i: /tmp/tmp32tqhe2i.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \" \";\n    std::string delimiter3 = \" \";\n    std::string delimiter4\
    \ = \" \";\n    std::string delimiter5 = \" \";\n    std::string delimiter6 =\
    \ \" \";\n    std::string delimiter7 = \" \";\n    std::string delimiter8 = \"\
    \ \";\n    std::string delimiter9 = \" \";\n    std::string delimiter10 = \" \"\
    ;\n    std::string delimiter11 = \" \";\n    std::string delimiter12 = \" \";\n\
    \    std::string delimiter13 = \" \";\n    std::string delimiter14 = \" \";\n\
    \    std::string delimiter15 = \" \";\n    std::string delimiter16 = \" \";\n\
    \    std::string delimiter17 = \" \";\n    std::string delimiter18 = \" \";\n\
    \    std::string delimiter19 = \" \";\n    std::string delimiter20 = \" \";\n\
    \    std::string delimiter21 = \" \";\n    std::string delimiter22 = \" \";\n\
    \    std::string delimiter23 = \" \";\n    std::string delimiter24 = \" \";\n\
    \    std::string delimiter25 = \" \";\n    std::string delimiter26 = \" \";\n\
    \    std::string delimiter27 = \" \";\n    std::string delimiter28 = \" \";\n\
    \    std::string delimiter29 = \" \";\n    std::string delimiter30 = \" \";\n\
    \    std::string delimiter31 = \" \";\n    std::string delimiter32 = \" \";\n\
    \    std::string delimiter33 = \" \";\n    std::string delimiter34 = \" \";\n\
    \    std::string delimiter35 = \" \";\n    std::string delimiter36 = \" \";\n\
    \    std::string delimiter37 = \" \";\n    std::string delimiter38 = \" \";\n\
    \    std::string delimiter39 = \" \";\n    std::string delimiter40 = \" \";\n\
    \    std::string delimiter41 = \" \";\n    std::string delimiter42 = \" \";\n\
    \    std::string delimiter43 = \" \";\n    std::string delimiter44 = \" \";\n\
    \    std::string delimiter45 = \" \";\n    std::string delimiter46 = \" \";\n\
    \    std::string delimiter47 = \" \";\n    std::string delimiter48 = \" \";\n\
    \    std::string delimiter49 = \" \";\n    std::string delimiter50 = \" \";\n\
    \    std::string delimiter51 = \" \";\n    std::string delimiter52 = \" \";\n\
    \    std::string delimiter53 = \" \";\n    std::string delimiter54 = \" \";\n\
    \    std::string delimiter55 = \" \";\n    std::string delimiter56 = \" \";\n\
    \    std::string delimiter57 = \" \";\n    std::string delimiter58 = \" \";\n\
    \    std::string delimiter59 = \" \";\n    std::string delimiter60 = \" \";\n\
    \    std::string delimiter61 = \" \";\n    std::string delimiter62 = \" \";\n\
    \    std::string delimiter63 = \" \";\n\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2zkbbw37: /tmp/tmp2zkbbw37.cpp:82: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmphile8_e9: /tmp/tmphile8_e9.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i = 0; i <\
    \ S.size(); i++) {\n        if(S[i] == 'I' && S[i+1] == '.') {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfvd7rduo: /tmp/tmpfvd7rduo.cpp:24: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4pnhw_64.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp4pnhw_64.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4pnhw_64.cpp:32:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4pnhw_64.cpp:35:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   35 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4pnhw_64.cpp:33:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   33 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4pnhw_64.cpp:39:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   39 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4pnhw_64.cpp:37:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   37 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplu7r7536.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmplu7r7536.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplu7r7536.cpp:32:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplu7r7536.cpp:35:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   35 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplu7r7536.cpp:33:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   33 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplu7r7536.cpp:39:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   39 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplu7r7536.cpp:37:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   37 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t i = 0;\n\
    \    while(pos < S.length()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        pos = pos + delimiters.size();\n        for(size_t j = 0; j < delimiters.size();\
    \ j++) {\n            if(word.find(delimiters[j]) != std::string::npos) {\n  \
    \              boredoms += 1;\n                pos = pos + 1;\n              \
    \  break;\n            }\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplr51wq_5: /tmp/tmplr51wq_5.cpp:34: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyu1kctrn: /tmp/tmpyu1kctrn.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_bnxbevy.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_bnxbevy.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmp_bnxbevy.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp1e7sm5o.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpp1e7sm5o.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpp1e7sm5o.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string delimiters_lower = \"\
    .?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx14ant71.cpp:44:102: warning: missing terminating \" character\n\
    \   44 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".\n      |                                                             \
    \                                         ^\n/tmp/tmpx14ant71.cpp:44:102: error:\
    \ missing terminating \" character\n   44 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".\n      |                                                             \
    \                                         ^~\n/tmp/tmpx14ant71.cpp: In function\
    \ \u2018long int is_bored(std::string)\u2019:\n/tmp/tmpx14ant71.cpp:30:17: error:\
    \ redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx14ant71.cpp:28:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx14ant71.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx14ant71.cpp:29:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   29 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx14ant71.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \" .?!\";\n    std::string\
    \ delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".?!\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".?!\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".?!\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".?!\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0fj_lv_m.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0fj_lv_m.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmp0fj_lv_m.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n \
    \   std::string boredom;\n    std::string delimiter = \" .?!\";\n    std::string\
    \ delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".?!\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".?!\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".?!\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".?!\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter50 = \".\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_htyo4_9.cpp:64:31: warning: missing terminating \" character\n\
    \   64 |     std::string delimiter50 = \".\n      |                          \
    \     ^\n/tmp/tmp_htyo4_9.cpp:64:31: error: missing terminating \" character\n\
    \   64 |     std::string delimiter50 = \".\n      |                          \
    \     ^~\n/tmp/tmp_htyo4_9.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_htyo4_9.cpp:65:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   65 | }\n      | ^\n/tmp/tmp_htyo4_9.cpp:65:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp_htyo4_9.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t count\
    \ = 0;\n    while(pos < S.length()) {\n        word = S.substr(pos, 1);\n    \
    \    pos = 0;\n        count = 0;\n        for(size_t i = 0; i < delimiters.size();\
    \ i++) {\n            if(word.find(delimiters[i]) != std::string::npos) {\n  \
    \              count++;\n                pos = word.find(delimiters[i]);\n   \
    \         }\n        }\n        if(count == 1) {\n            boredoms++;\n  \
    \      }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmphoea3qa1: /tmp/tmphoea3qa1.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n    while(i\
    \ < S.length()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n \
    \           boredom++;\n        }\n        i++;\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp826p6nxi: /tmp/tmp826p6nxi.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string boredom;\n    for(int i = 0; i\
    \ < S.length(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom += S[i];\n        }\n        else {\n            word\
    \ = S[i];\n            boredom += word;\n            boredoms += 1;\n        }\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmph13_n0ex: /tmp/tmph13_n0ex.cpp:30: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \" .,?!\"\
    ;\n    std::string delimiter2 = \" .,?!\";\n    std::string delimiter3 = \" .,?!\"\
    ;\n    std::string delimiter4 = \" .,?!\";\n    std::string delimiter5 = \" .,?!\"\
    ;\n    std::string delimiter6 = \" .,?!\";\n    std::string delimiter7 = \" .,?!\"\
    ;\n    std::string delimiter8 = \" .,?!\";\n    std::string delimiter9 = \" .,?!\"\
    ;\n    std::string delimiter10 = \" .,?!\";\n    std::string delimiter11 = \"\
    \ .,?!\";\n    std::string delimiter12 = \" .,?!\";\n    std::string delimiter13\
    \ = \" .,?!\";\n    std::string delimiter14 = \" .,?!\";\n    std::string delimiter15\
    \ = \" .,?!\";\n    std::string delimiter16 = \" .,?!\";\n    std::string delimiter17\
    \ = \" .,?!\";\n    std::string delimiter18 = \" .,?!\";\n    std::string delimiter19\
    \ = \" .,?!\";\n    std::string delimiter20 = \" .,?!\";\n    std::string delimiter21\
    \ = \" .,?!\";\n    std::string delimiter22 = \" .,?!\";\n    std::string delimiter23\
    \ = \" .,?!\";\n    std::string delimiter24 = \" .,?!\";\n    std::string delimiter25\
    \ = \" .,?!\";\n    std::string delimiter26 = \" .,?!\";\n    std::string delimiter27\
    \ = \" .,?!\";\n    std::string delimiter28 = \" .,?!\";\n    std::string delimiter29\
    \ = \" .,?!\";\n    std::string delimiter30 = \" .,?!\";\n    std::string delimiter31\
    \ = \" .,?!\";\n    std::string delimiter32 = \" .,?!\";\n    std::string delimiter33\
    \ = \" .,?!\";\n    std::string delimiter34 = \" .,?!\";\n    std::string delimiter35\
    \ = \" .,?!\";\n    std::string delimiter36 = \" .,?!\";\n    std::string delimiter37\
    \ = \" .,?!\";\n    std::string delimiter38 = \" .,?!\";\n    std::string delimiter39\
    \ = \" .,?!\";\n    std::string delimiter40 = \" .,?!\";\n    std::string delimiter41\
    \ = \" .,?!\";\n    std::string delimiter42 = \" .,?!\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl1nxlndk.cpp:56:31: warning: missing terminating \" character\n\
    \   56 |     std::string delimiter42 = \" .,?!\n      |                      \
    \         ^\n/tmp/tmpl1nxlndk.cpp:56:31: error: missing terminating \" character\n\
    \   56 |     std::string delimiter42 = \" .,?!\n      |                      \
    \         ^~~~~~\n/tmp/tmpl1nxlndk.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl1nxlndk.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmpl1nxlndk.cpp:57:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpl1nxlndk.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9jgcn2r6: /tmp/tmp9jgcn2r6.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        if\
    \ (word == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdblnw7ei: /tmp/tmpdblnw7ei.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n\
    \    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string\
    \ temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n\
    \    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n \
    \   std::string temp15;\n    std::string temp16;\n    std::string temp17;\n  \
    \  std::string temp18;\n    std::string temp19;\n    std::string temp20;\n   \
    \ std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string\
    \ temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n\
    \    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n \
    \   std::string temp31;\n    std::string temp32;\n    std::string temp33;\n  \
    \  std::string temp34;\n    std::string temp35;\n    std::string temp36;\n   \
    \ std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string\
    \ temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n\
    \    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n \
    \   std::string temp47;\n    std::string temp48;\n    std::string temp49;\n  \
    \  std::string temp50;\n    std::string temp51;\n    std::string temp52;\n   \
    \ std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string\
    \ temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n\
    \    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n \
    \   std::string temp63;\n    std::string temp64;\n    std::string temp65;\n  \
    \  std::string temp66;\n    std::string temp67;\n    std::string temp68;\n   \
    \ std::string temp69;\n    std::string temp70;\n    std::string temp71;\n    std::string\
    \ temp72;\n    std::string temp73;\n    std::string temp74;\n    std::string temp75;\n\
    \    std::string temp76;\n    std::string temp77;\n    std::string temp78;\n \
    \   std::string temp79;\n    std::string temp80;\n    std::string temp81;\n  \
    \  std::string temp82;\n    std::string temp83;\n    std::string temp84;\n\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcn7ulyo0: /tmp/tmpcn7ulyo0.cpp:104: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiters = \". ? !\";\n    for (size_t\
    \ i = 0; i < S.size(); i++) {\n        word = S[i];\n        for (size_t j = 0;\
    \ j < delimiters.size(); j++) {\n            if (word.find(delimiters[j]) != std::string::npos)\
    \ {\n                boredom = word;\n                boredoms = 1;\n        \
    \        break;\n            }\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5r9e626u: /tmp/tmp5r9e626u.cpp:30: int main(): Assertion `candidate((\"\
    Hello world\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long boredom\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm3df275q: /tmp/tmpm3df275q.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".?!\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".?!\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".?!\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".?!\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter50\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbs6lz4g.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpkbs6lz4g.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmpkbs6lz4g.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string::size_type pos = 0;\n\
    \    std::string::size_type lastPos = 0;\n    std::string::size_type i = 0;\n\
    \    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type\
    \ l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n\
    \    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type\
    \ q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n\
    \    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type\
    \ v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n\
    \    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n    std::string::size_type\
    \ A = 0;\n    std::string::size_type B = 0;\n    std::string::size_type C = 0;\n\
    \    std::string::size_type D = 0;\n    std::string::size_type E = 0;\n    std::string::size_type\
    \ F = 0;\n    std::string::size_type G = 0;\n    std::string::size_type H = 0;\n\
    \    std::string::size_type I = 0;\n    std::string::size_type J = 0;\n    std::string::size_type\
    \ K = 0;\n    std::string::size_type L = 0;\n    std::string::size_type M = 0;\n\
    \    std::string::size_type N = 0;\n    std::string::size_type O = 0;\n    std::string::size_type\
    \ P = 0;\n    std::string::size_type Q = 0;\n    std::string::size_type R = 0;\n\
    \    std::string::size_type S = 0;\n    std::string::size_type T = 0;\n    std::string::size_type\
    \ U = 0;\n    std::string::size_type V = 0;\n    std::string::size_type W = 0;\n\
    \    std::string::size_type X = 0;\n    std::string::size_type Y = 0;\n    std::string::size_type\
    \ Z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n\
    \    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type\
    \ e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n\
    \    std::string::size_type h = 0;\n    std::string::size_type i = 0;\n    std::string::size_type\
    \ j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n\
    \    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type\
    \ o = 0;\n    std::string::size_type p\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpof_ealtx.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpof_ealtx.cpp:53:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   53 |     std::string::size_type S = 0;\n   \
    \   |                            ^\n/tmp/tmpof_ealtx.cpp:69:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type i\u2019\n   69 |     std::string::size_type\
    \ i = 0;\n      |                            ^\n/tmp/tmpof_ealtx.cpp:17:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type i\u2019 previously declared\
    \ here\n   17 |     std::string::size_type i = 0;\n      |                   \
    \         ^\n/tmp/tmpof_ealtx.cpp:70:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019\n   70 |     std::string::size_type j = 0;\n      |                \
    \            ^\n/tmp/tmpof_ealtx.cpp:18:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019 previously declared here\n   18 |     std::string::size_type j = 0;\n\
    \      |                            ^\n/tmp/tmpof_ealtx.cpp:71:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type k\u2019\n   71 |     std::string::size_type\
    \ k = 0;\n      |                            ^\n/tmp/tmpof_ealtx.cpp:19:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type k\u2019 previously declared\
    \ here\n   19 |     std::string::size_type k = 0;\n      |                   \
    \         ^\n/tmp/tmpof_ealtx.cpp:72:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019\n   72 |     std::string::size_type l = 0;\n      |                \
    \            ^\n/tmp/tmpof_ealtx.cpp:20:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019 previously declared here\n   20 |     std::string::size_type l = 0;\n\
    \      |                            ^\n/tmp/tmpof_ealtx.cpp:73:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type m\u2019\n   73 |     std::string::size_type\
    \ m = 0;\n      |                            ^\n/tmp/tmpof_ealtx.cpp:21:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type m\u2019 previously declared\
    \ here\n   21 |     std::string::size_type m "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \" .?!\";\n    std::string\
    \ delimiter2 = \"I \";\n    std::string delimiter3 = \". \";\n    std::string\
    \ delimiter4 = \"? \";\n    std::string delimiter5 = \"! \";\n    std::string\
    \ delimiter6 = \". . \";\n    std::string delimiter7 = \"? ? \";\n    std::string\
    \ delimiter8 = \"! ! \";\n    std::string delimiter9 = \". . . \";\n    std::string\
    \ delimiter10 = \"? ? ? \";\n    std::string delimiter11 = \"! ! ! \";\n    std::string\
    \ delimiter12 = \". . . . \";\n    std::string delimiter13 = \"? ? ? ? \";\n \
    \   std::string delimiter14 = \"! ! ! ! \";\n    std::string delimiter15 = \"\
    . . . . . \";\n    std::string delimiter16 = \"? ? ? ? ? \";\n    std::string\
    \ delimiter17 = \"! ! ! ! ! \";\n    std::string delimiter18 = \". . . . . . \"\
    ;\n    std::string delimiter19 = \"? ? ? ? ? ? \";\n    std::string delimiter20\
    \ = \"! ! ! ! ! ! \";\n    std::string delimiter21 = \". . . . . . . . \";\n \
    \   std::string delimiter22 = \"? ? ? ? ? ? ? ? \";\n    std::string delimiter23\
    \ = \"! ! ! ! ! ! ! ! \";\n    std::string delimiter24 = \". . . . . . . . . .\
    \ \";\n    std::string delimiter25 = \"? ? ? ? ? ? ? ? ? ? \";\n    std::string\
    \ delimiter26 = \"! ! ! ! ! ! ! ! ! ! \";\n    std::string delimiter27 = \". .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpto12ci1f.cpp:41:31: warning: missing terminating \" character\n\
    \   41 |     std::string delimiter27 = \". . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .\n      |                               ^\n/tmp/tmpto12ci1f.cpp:41:31:\
    \ error: missing terminating \" character\n   41 |     std::string delimiter27\
    \ = \". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n      |\
    \                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ \n/tmp/tmpto12ci1f.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpto12ci1f.cpp:42:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   42 | }\n      | ^\n/tmp/tmpto12ci1f.cpp:42:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpto12ci1f.cpp:42:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n \
    \   std::string temp85;\n    std::string temp86;\n    std::string temp87\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj1iev3_i.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpj1iev3_i.cpp:101:1: error: expected initializer before \u2018}\u2019\
    \ token\n  101 | }\n      | ^\n/tmp/tmpj1iev3_i.cpp:101:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfqoto2ob: /tmp/tmpfqoto2ob.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for(int i=0;i<S.size();i++){\n\
    \        if(S[i] == 'I'){\n            ans += 1;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpi2ixymgi: /tmp/tmpi2ixymgi.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    std::string::size_type pos;\n    pos\
    \ = S.find_first_not_of(delimiters);\n    while (pos != std::string::npos) {\n\
    \        word = S.substr(0, pos);\n        if (word == \"I\") {\n            boredoms\
    \ += 1;\n        }\n        pos = S.find_first_of(delimiters, pos + 1);\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9q8e_t_5: /tmp/tmp9q8e_t_5.cpp:30: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string word;\n\
    \    std::string boredom_word = \"I\";\n    std::string delimiter = \" .?!\";\n\
    \    std::string delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n  \
    \  std::string delimiter4 = \"!\";\n    std::string delimiter5 = \".\";\n    std::string\
    \ delimiter6 = \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8\
    \ = \".\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 =\
    \ \"!\";\n    std::string delimiter11 = \".\";\n    std::string delimiter12 =\
    \ \"?\";\n    std::string delimiter13 = \"!\";\n    std::string delimiter14 =\
    \ \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16 =\
    \ \"!\";\n    std::string delimiter17 = \".\";\n    std::string delimiter18 =\
    \ \"?\";\n    std::string delimiter19 = \"!\";\n    std::string delimiter20 =\
    \ \".\";\n    std::string delimiter21 = \"?\";\n    std::string delimiter22 =\
    \ \"!\";\n    std::string delimiter23 = \".\";\n    std::string delimiter24 =\
    \ \"?\";\n    std::string delimiter25 = \"!\";\n    std::string delimiter26 =\
    \ \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28 =\
    \ \"!\";\n    std::string delimiter29 = \".\";\n    std::string delimiter30 =\
    \ \"?\";\n    std::string delimiter31 = \"!\";\n    std::string delimiter32 =\
    \ \".\";\n    std::string delimiter33 = \"?\";\n    std::string delimiter34 =\
    \ \"!\";\n    std::string delimiter35 = \".\";\n    std::string delimiter36 =\
    \ \"?\";\n    std::string delimiter37 = \"!\";\n    std::string delimiter38 =\
    \ \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40 =\
    \ \"!\";\n    std::string delimiter41 = \"!\";\n    std::string delimiter42 =\
    \ \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44 =\
    \ \"!\";\n    std::string delimiter45 = \".\";\n    std::string delimiter46 =\
    \ \"?\";\n    std::string delimiter47 = \"!\";\n    std::string delimiter48 =\
    \ \".\";\n    std::string delimiter49 = \"?\";\n    std::string delimiter50 =\
    \ \"!\";\n    std::string delimiter51 = \"!\";\n    std::string delimiter52 =\
    \ \".\";\n    std::string delimiter53 = \"?\";\n    std::string delimiter54 =\
    \ \"!\";\n    std::string delimiter55 = \".\";\n    std::string delimiter56 =\
    \ \"?\";\n    std::string delimiter57 = \"!\";\n    std::string delimiter58 =\
    \ \".\";\n    std::string delimiter59 = \"?\";\n    std::string delimiter60 =\
    \ \"!\";\n    std::string delimiter6\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdf68uqdj.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdf68uqdj.cpp:76:1: error: expected initializer before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmpdf68uqdj.cpp:76:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsfr1xbbv: /tmp/tmpsfr1xbbv.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
