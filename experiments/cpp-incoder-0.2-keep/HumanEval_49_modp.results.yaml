name: HumanEval_49_modp
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long d = 1;\n    while\
    \ (n) {\n        if (n % p) {\n            ans *= p;\n            d *= p;\n  \
    \      }\n        n /= p;\n    }\n    return ans * d;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjk13ooz1: /tmp/tmpjk13ooz1.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    r = r * p % n;\n    n /= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpz9328n3_: /tmp/tmpz9328n3_.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p > 0) {\n        if (p & 1) r = (r * n) % p;\n        m = (m * n) % p;\n \
    \       p >>= 1;\n    }\n    return (r * m) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p) {\n            res++;\n            n /= p;\n        }\n        else\
    \ {\n            n /= p;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprzjcpzip: /tmp/tmprzjcpzip.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ (p & 1) r *= n;\n        n /= p;\n        p >>= 1;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8_s6jlk9: /tmp/tmp8_s6jlk9.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p != 0) {\n    \
    \    if (p & 1) r = (r * n) % p;\n        n = ((n * n) % p) % p;\n        p >>=\
    \ 1;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprggiy57_: /tmp/tmprggiy57_.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n % 2 == 1) {\n      res = (res*p) % p;\n    }\n    n /= 2;\n\
    \    p = (p*p) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res *= p;\n        n >>= 1;\n        p *= p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgtv5tqwn: /tmp/tmpgtv5tqwn.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            n = n / 2;\n            r = (r * p) % p;\n   \
    \     }\n        else {\n            n = (n - 1) / 2;\n            r = (r * p)\
    \ % p;\n        }\n    }\n    return r;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3jnzsros: /tmp/tmp3jnzsros.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((p & 1) == 1) {\n            r = (r * n) % p;\n        }\n        n /= p;\n\
    \        p >>= 1;\n    }\n    return r;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjumlefin: /tmp/tmpjumlefin.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = 1;\n    long\
    \ r = n;\n    long m = 1;\n    while (m <= p) {\n        if (n % m == 0) {\n \
    \           ans = ans * t % p;\n        }\n        t *= r;\n        r /= m;\n\
    \        m++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbacuo7lm: /tmp/tmpbacuo7lm.cpp:31: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        ans = (ans * t) % p;\n        t = (t * (t - 1)) % p;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  long m =\
    \ 1;\n  while (n) {\n    if (n & 1)\n      r = r * p % m;\n    m = m * p % m;\n\
    \    n >>= 1;\n  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (int\
    \ i = 0; i < p; i++) {\n    r *= n;\n  }\n  return r % p;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgprpyym3: /tmp/tmpgprpyym3.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long res = 1;\n  while (n) {\n    if (n &\
    \ 1) res = (res * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1) r = r * p % p;\n        n >>= 1;\n        p *= p;\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpa5egl2gp: /tmp/tmpa5egl2gp.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        if (r % 2 == 1) {\n            t *= 2;\n\
    \        }\n        r /= 2;\n        res *= t;\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmps_ac3tny: /tmp/tmps_ac3tny.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            n = n >> 1;\n            r = (r * p) % p;\n  \
    \      }\n        else {\n            n = n >> 1;\n        }\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpiqeucbo7: /tmp/tmpiqeucbo7.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long mod = p;\n    while\
    \ (n > 0) {\n        ans = (ans * mod) % p;\n        mod = (mod * mod) % p;\n\
    \        n--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp78e3wcyv: /tmp/tmp78e3wcyv.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n&1) != 0) {\n            r = (r*p) % p;\n        }\n        n >>= 1;\n  \
    \      p = (p*p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p) {\n            res++;\n        }\n        n /= p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppxx8mieo: /tmp/tmppxx8mieo.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpa1oy3fh0: /tmp/tmpa1oy3fh0.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n       \
    \ n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpci1jbqnt: /tmp/tmpci1jbqnt.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        long q = t / r;\n        ans = (ans *\
    \ q) % p;\n        t = q;\n        r = p % r;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwnwrxqwt: /tmp/tmpwnwrxqwt.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        if (r & 1) res = (res * t) % p;\n    \
    \    t = t << 1;\n        r >>= 1;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq1wmhz9g: /tmp/tmpq1wmhz9g.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n            res\
    \ %= p;\n        }\n        t /= p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8d3r26v6: /tmp/tmp8d3r26v6.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p) {\n            ans = (ans * n) % p;\n        }\n        n /= p;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8tilis5l: /tmp/tmp8tilis5l.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while(n > p) {\n    \
    \    res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpspbh6750: /tmp/tmpspbh6750.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0) ans = (ans * n) % p;\n        n /= p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpl8s_ez0r: /tmp/tmpl8s_ez0r.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 0) {\n   \
    \     if (n & p)\n            res = (res * 2) % p;\n        n /= p;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfbgquz0m.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpfbgquz0m.cpp:19:10: error: redeclaration of \u2018long int r\u2019\n\
    \   19 |     long r = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmpfbgquz0m.cpp:20:10: error: redeclaration of \u2018\
    long int m\u2019\n   20 |     long m = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:21:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   21 |     long t = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:22:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   22 |     long q = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:23:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   23 |     long r = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:24:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   24 |     long m = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:25:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   25 |     long t = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:26:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   26 |     long q = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:27:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   27 |     long r = 1;\n      |          ^\n/tmp/tmpfbgquz0m.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n > 0) {\n     \
    \   if (n & 1)\n            r = (r * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long r = 1;\n  while (p) {\n    if (p & 1)\
    \ r += n;\n    n >>= 1;\n    p >>= 1;\n  }\n  return r;\n}\nint main() {\n   \
    \ auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwo4_8urw: /tmp/tmpwo4_8urw.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p > 0) {\n     \
    \   if ((n & p) == p)\n            r = (r * p) % p;\n        p >>= 1;\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgoa3u7wn: /tmp/tmpgoa3u7wn.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5tfcpl6b: /tmp/tmp5tfcpl6b.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & p) == p)\n            r <<= 1;\n        n >>= 1;\n        p >>= 1;\n \
    \   }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdmos9ztg: /tmp/tmpdmos9ztg.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0) ans = (ans * p) % p;\n        n /= p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpi5erdifw: /tmp/tmpi5erdifw.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        long q = r % t;\n        ans = (ans *\
    \ q) % p;\n        t = q;\n        r = p % t;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptwndukm_: /tmp/tmptwndukm_.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1)\n            r = (r * p) % p;\n        n >>= 1;\n        p = (p * p)\
    \ % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n  \
    \  assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = n;\n    long m = p;\n    long t = 1;\n \
    \   long q = 1;\n    while (r != 0) {\n        long r = r / p;\n        long m\
    \ = m % p;\n        long t = t * p;\n        long q = q * p;\n    }\n    return\
    \ m % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx31cei9e.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpx31cei9e.cpp:19:10: error: redeclaration of \u2018long int r\u2019\n\
    \   19 |     long r = n;\n      |          ^\n/tmp/tmpx31cei9e.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmpx31cei9e.cpp:20:10: error: redeclaration of \u2018\
    long int m\u2019\n   20 |     long m = p;\n      |          ^\n/tmp/tmpx31cei9e.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpx31cei9e.cpp:21:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   21 |     long t = 1;\n      |          ^\n/tmp/tmpx31cei9e.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpx31cei9e.cpp:22:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   22 |     long q = 1;\n      |          ^\n/tmp/tmpx31cei9e.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % 2 == 1) {\n            res = (res*p) % p;\n        }\n        n\
    \ = n / 2;\n        p = (p*p) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long r = n;\n    long m = p;\n    while (m > 0) {\n        t += m;\n\
    \        m /= 2;\n    }\n    while (t > 0) {\n        r += t;\n        t /= 2;\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd6vu90u0.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpd6vu90u0.cpp:18:10: error: redeclaration of \u2018long int r\u2019\n\
    \   18 |     long r = n;\n      |          ^\n/tmp/tmpd6vu90u0.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmpd6vu90u0.cpp:19:10: error: redeclaration of \u2018\
    long int m\u2019\n   19 |     long m = p;\n      |          ^\n/tmp/tmpd6vu90u0.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (p)\
    \ {\n    if (n & p)\n      r *= p;\n    p >>= 1;\n  }\n  return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpoyimtuvl: /tmp/tmpoyimtuvl.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long m = 1;\n    long\
    \ t = 1;\n    long r = 1;\n    long q = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegc9qrx4.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpegc9qrx4.cpp:22:10: error: redeclaration of \u2018long int qr\u2019\
    \n   22 |     long qr = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:20:10: note:\
    \ \u2018long int qr\u2019 previously declared here\n   20 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpegc9qrx4.cpp:23:10: error: redeclaration of \u2018\
    long int qt\u2019\n   23 |     long qt = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:21:10:\
    \ note: \u2018long int qt\u2019 previously declared here\n   21 |     long qt\
    \ = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:24:10: error: redeclaration\
    \ of \u2018long int qr\u2019\n   24 |     long qr = 1;\n      |          ^~\n\
    /tmp/tmpegc9qrx4.cpp:20:10: note: \u2018long int qr\u2019 previously declared\
    \ here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:25:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   25 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpegc9qrx4.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:26:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   26 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpegc9qrx4.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:27:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   27 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpegc9qrx4.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:28:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   28 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpegc9qrx4.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:29:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   29 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpegc9qrx4.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpegc9qrx4.cpp:30:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   30 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpegc9qrx4.cpp:20:10: note: "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p == 0) {\n            res *= p;\n            res %= p;\n        }\n\
    \        n /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpw7n3co4i: /tmp/tmpw7n3co4i.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp9gtyoc7_: /tmp/tmp9gtyoc7_.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res * n % p;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpzcrup1nv: /tmp/tmpzcrup1nv.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n       \
    \ p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx5khhwhj: /tmp/tmpx5khhwhj.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0) return r;\n        r <<= 1;\n        r |= 1;\n        n /= p;\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprjaq5waa: /tmp/tmprjaq5waa.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0) {\n            n /= p;\n            r *= p;\n        }\n      \
    \  else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1j2zwdp3: /tmp/tmp1j2zwdp3.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & p) == p)\n            r = (r << 1) + 1;\n        n >>= 1;\n        p--;\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkiejmzhy: /tmp/tmpkiejmzhy.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p != 0) {\n  \
    \      if (p & 1) {\n            res = (res * n) % p;\n        }\n        n /=\
    \ p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkgxfbgqz: /tmp/tmpkgxfbgqz.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n % p) == 0) {\n            n /= p;\n            r *= p;\n        }\n    \
    \    else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq2vxprlc: /tmp/tmpq2vxprlc.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 1) {\n   \
    \     if (p & 1) res = (res * n) % p;\n        n /= p;\n        p /= 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgtsja0s4: /tmp/tmpgtsja0s4.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long m = 1;\n    long\
    \ t = 1;\n    long r = 1;\n    long q = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpau8pxgyf.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpau8pxgyf.cpp:22:10: error: redeclaration of \u2018long int qr\u2019\
    \n   22 |     long qr = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:20:10: note:\
    \ \u2018long int qr\u2019 previously declared here\n   20 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpau8pxgyf.cpp:23:10: error: redeclaration of \u2018\
    long int qt\u2019\n   23 |     long qt = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:21:10:\
    \ note: \u2018long int qt\u2019 previously declared here\n   21 |     long qt\
    \ = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:24:10: error: redeclaration\
    \ of \u2018long int qr\u2019\n   24 |     long qr = 1;\n      |          ^~\n\
    /tmp/tmpau8pxgyf.cpp:20:10: note: \u2018long int qr\u2019 previously declared\
    \ here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:25:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   25 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpau8pxgyf.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:26:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   26 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpau8pxgyf.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:27:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   27 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpau8pxgyf.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:28:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   28 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpau8pxgyf.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:29:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   29 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpau8pxgyf.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpau8pxgyf.cpp:30:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   30 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpau8pxgyf.cpp:20:10: note: "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqc6xz7bl.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpqc6xz7bl.cpp:19:10: error: redeclaration of \u2018long int r\u2019\n\
    \   19 |     long r = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmpqc6xz7bl.cpp:20:10: error: redeclaration of \u2018\
    long int m\u2019\n   20 |     long m = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:21:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   21 |     long t = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:22:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   22 |     long q = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:23:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   23 |     long r = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:24:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   24 |     long m = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:25:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   25 |     long t = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:26:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   26 |     long q = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:27:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   27 |     long r = 1;\n      |          ^\n/tmp/tmpqc6xz7bl.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long m = 1;\n    while\
    \ (p > 0) {\n        if (p & 1) {\n            res = (res * n) % p;\n        }\n\
    \        m = (m * n) % p;\n        n /= p;\n        p /= 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1d89od7q: /tmp/tmp1d89od7q.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res * p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpo1gd0zk0: /tmp/tmpo1gd0zk0.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long r = 1;\n  while (n) {\n    if (n & 1)\n\
    \      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmplw6r9mkr: /tmp/tmplw6r9mkr.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1)\n      res = (res * p) % p;\n    n >>= 1;\n    p >>=\
    \ 1;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpn4_vv7nb: /tmp/tmpn4_vv7nb.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r += p;\n    n >>= 1;\n    p >>= 1;\n  }\n  return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7_ns96uz: /tmp/tmp7_ns96uz.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1)\n            r = (r * p) % p;\n        n >>= 1;\n        p = (p * p)\
    \ % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n  \
    \  assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p != 0) {\n  \
    \      if (p & 1) {\n            res = (res * n) % p;\n        }\n        n =\
    \ ((n * n) % p) % p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1szqkmnz: /tmp/tmp1szqkmnz.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            n = n / 2;\n            r = (r * p) % p;\n   \
    \     }\n        else {\n            n = (n - 1) / 2;\n            r = (r * p)\
    \ % p;\n        }\n    }\n    return r;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpyk6ms5dy: /tmp/tmpyk6ms5dy.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    while\
    \ (t > p) {\n        ans = (ans << 1) + 1;\n        t -= p;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmps5h07lit: /tmp/tmps5h07lit.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = p;\n    while\
    \ (m > 1) {\n        if (n % m == 0) {\n            r %= m;\n        }\n     \
    \   m /= 2;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpebsu65ex: /tmp/tmpebsu65ex.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0) ans = (ans * n) % p;\n        n /= p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbe5rktk4: /tmp/tmpbe5rktk4.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p)\
    \ % p;\n  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (long\
    \ i = 1; i < p; i++) {\n    r *= n;\n    r %= p;\n  }\n  return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7pbx27fx: /tmp/tmp7pbx27fx.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n%p == 0)\n            res *= p;\n        n /= p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq050x86c: /tmp/tmpq050x86c.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp66c85ubx: /tmp/tmp66c85ubx.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 1) {\n   \
    \     if (p & 1) {\n            res = (res * n) % p;\n        }\n        n = ((n\
    \ * n) % p) % p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpiq5o2o97: /tmp/tmpiq5o2o97.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res*p) % p;\n        }\n        n\
    \ = n/2;\n        p = (p*p) % p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (p)\
    \ {\n    if (n & 1)\n      r += p;\n    n >>= 1;\n    p >>= 1;\n  }\n  return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpf316ixx9: /tmp/tmpf316ixx9.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m = 1;\n    while (r != 0) {\n        if (r % 2 == 1) {\n \
    \           ans = (ans * t) % p;\n        }\n        t = ((t * (t * r)) % p) %\
    \ p;\n        r = (r / 2) % p;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp0g29uiuq: /tmp/tmp0g29uiuq.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0) {\n            r %= p;\n            n /= p;\n        }\n      \
    \  else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1zb0yptq: /tmp/tmp1zb0yptq.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(n >= 0);\n  assert(p >= 0);\n  long\
    \ r = 1;\n  while (n > 0) {\n    r = r * p % n;\n    n /= 2;\n  }\n  return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpghkcm8sb: /tmp/tmpghkcm8sb.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n  return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp0p2y2aaf: /tmp/tmp0p2y2aaf.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n%p == 0) res++;\n        n /= p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx1n4b3w7: /tmp/tmpx1n4b3w7.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p != 0) {\n        if (p & 1) {\n            r = (r * n) % p;\n        }\n\
    \        m = (m * n) % p;\n        p >>= 1;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptt3g3cia: /tmp/tmptt3g3cia.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    r = r * p % n;\n    n /= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwbbi7mz9: /tmp/tmpwbbi7mz9.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p >= 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p;\n    n >>= 1;\n    p *= p;\n  }\n  return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpw0uzj2pu: /tmp/tmpw0uzj2pu.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 0) {\n   \
    \     if (p & 1) res = (res * n) % p;\n        n /= p;\n        p /= 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvzl434eq: /tmp/tmpvzl434eq.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpe4nbtymt: /tmp/tmpe4nbtymt.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = 1;\n    long\
    \ r = n;\n    long m = 1;\n    while (p > 1) {\n        if (p & 1) {\n       \
    \     ans = (ans * r) % p;\n        }\n        t *= r;\n        r /= p;\n    \
    \    m /= p;\n        p >>= 1;\n    }\n    ans = (ans * t) % m;\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 1) {\n   \
    \     if (p & 1) {\n            res = (res * n) % p;\n        }\n        n = ((n\
    \ * n) % p) % p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp2wsz1jgk: /tmp/tmp2wsz1jgk.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p % t;\n    long m = 1;\n    while (r != 0) {\n        ans = (ans * t) %\
    \ p;\n        t = (t * t) % p;\n        r = (r * t) % p;\n        m = (m * t)\
    \ % p;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t > 0) {\n        res = (res*t)%p;\n        t--;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpescyjl1b: /tmp/tmpescyjl1b.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkfpm9ium: /tmp/tmpkfpm9ium.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n      \
    \  n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwurf3_p0: /tmp/tmpwurf3_p0.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n&1) r += p;\n        n >>= 1;\n        p *= p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqdn3b5lw: /tmp/tmpqdn3b5lw.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ m = 1;\n    while (t != 0) {\n        if (t % 2 == 1) {\n            res = (res\
    \ * m) % p;\n        }\n        m = (m * m) % p;\n        t = t / 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwgmf1073: /tmp/tmpwgmf1073.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n&1)==0) r *= p;\n        n >>= 1;\n        p *= p;\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwioayo46: /tmp/tmpwioayo46.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= 2;\n        n -= p;\n    }\n    return n % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpnai6mtk6: /tmp/tmpnai6mtk6.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % 2 == 1)\n            res = (res * p) % p;\n        n = n / 2;\n\
    \        p = p * p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp53oiuajx: /tmp/tmp53oiuajx.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp87gp18vh: /tmp/tmp87gp18vh.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0)\n            r %= p;\n        n /= p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpcq30z9e9: /tmp/tmpcq30z9e9.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long r = 1;\n  long m = 1;\n  while (m <=\
    \ p) {\n    if (n % m == 0) {\n      r = r * m + (n % m);\n    }\n    m++;\n \
    \ }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpujn0ybmb: /tmp/tmpujn0ybmb.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > 0) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n % p) == 0) {\n            n /= p;\n            r *= p;\n        }\n    \
    \    else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpzvxkyx2n: /tmp/tmpzvxkyx2n.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ m = 1;\n    while (t != 0) {\n        if (t % 2 == 1) {\n            res = (res\
    \ * m) % p;\n        }\n        t = t / 2;\n        m = m * 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqu8he_hl: /tmp/tmpqu8he_hl.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & p) == p)\n            r <<= 1;\n        n >>= 1;\n        p >>= 1;\n \
    \   }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpeze2dn5k: /tmp/tmpeze2dn5k.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n       \
    \ n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpe9nayi21: /tmp/tmpe9nayi21.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ q = p;\n    while (t != 0) {\n        if (t & 1)\n            res = (res * q)\
    \ % p;\n        t >>= 1;\n        q = (q * q) % p;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpftxduwxy: /tmp/tmpftxduwxy.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n            res\
    \ %= p;\n        }\n        t /= p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpt165fey1: /tmp/tmpt165fey1.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      res = (res * p) % p;\n    n >>= 1;\n    p = (p * p)\
    \ % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = 1;\n    long\
    \ m = 1;\n    while (n > p) {\n        res *= t;\n        t *= m;\n        m *=\
    \ p;\n        n -= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmph1bs6sld: /tmp/tmph1bs6sld.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long q = 0;\n    while (t != 0) {\n        q = r % t;\n        r\
    \ = t;\n        t = q;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_9ias0ty: /tmp/tmp_9ias0ty.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m;\n    while (r != 0) {\n        m = r % t;\n        res =\
    \ (res * m) % p;\n        t = t;\n        r = r;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m;\n    while (r != 0) {\n        m = r / t;\n        res =\
    \ (res * t) % p;\n        t = m;\n        r = p - (t * m);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqh5wo495: /tmp/tmpqh5wo495.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 0) {\n            res = (res*p) % p;\n        }\n        n\
    \ = n / 2;\n        p = (p*p) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & 1LL) == 0) {\n            n /= 2LL;\n            r *= 2LL;\n        }\n\
    \        n >>= 1LL;\n        p >>= 1LL;\n    }\n    return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp45pa2rlb: /tmp/tmp45pa2rlb.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    r = r * p % n;\n    n /= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpordawyyl: /tmp/tmpordawyyl.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m = 1;\n    while (t > 0) {\n        if ((t & 1) != 0) {\n\
    \            res = (res * r) % p;\n        }\n        t = t >> 1;\n        r =\
    \ (r * r) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpag8_jxc6: /tmp/tmpag8_jxc6.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p != 0) {\n        if ((p & 1) == 1) {\n            r = (r * n) % p;\n    \
    \    }\n        n = (n * n) % p;\n        p = (p * p) % p;\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpuk07g0q7: /tmp/tmpuk07g0q7.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6m28s7o0: /tmp/tmp6m28s7o0.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphk11mwt4: /tmp/tmphk11mwt4.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % p == 0) {\n            n /= p;\n            res *= p;\n       \
    \ } else {\n            n /= p;\n            res *= p;\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpclv5iuca: /tmp/tmpclv5iuca.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0)\n            n /= p;\n        else\n            r *= p;\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (long\
    \ i = 1; i < p; i++) {\n    r *= n;\n    r %= p;\n  }\n  return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpl0jrlubc: /tmp/tmpl0jrlubc.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = 1;\n    long\
    \ r = n;\n    long m = 1;\n    while (m <= p) {\n        t = r / m;\n        ans\
    \ = (ans * t) % p;\n        r = (r - t * m) % p;\n        m++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdv4if9pe: /tmp/tmpdv4if9pe.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n       \
    \ n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmps0vdpqx2: /tmp/tmps0vdpqx2.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p != 0) {\n        if (p & 1) {\n            r = (r * n) % p;\n        }\n\
    \        n = (n * n) % p;\n        p = (p * p) % p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp964kle3w: /tmp/tmp964kle3w.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n&1) r = r*p;\n        n >>= 1;\n        p *= p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwvoaw4nl: /tmp/tmpwvoaw4nl.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        res = (res*t) % p;\n        t = (t*t) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n       \
    \ p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0)\n            ans = (ans * n) % p;\n        n /= p;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgel2eoin: /tmp/tmpgel2eoin.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p)%p;\n        n >>= 1;\n        p = (p *\
    \ p)%p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n % p == 0) {\n      r = r * p;\n      n /= p;\n    } else {\n  \
    \    r = r * p;\n    }\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n            res\
    \ %= p;\n        }\n        t /= p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphldv5a7i: /tmp/tmphldv5a7i.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (long\
    \ i = 1; i < p; i++) {\n    r *= n;\n  }\n  return r % p;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptoat0cjc: /tmp/tmptoat0cjc.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = 1;\n    long\
    \ r = n;\n    while (r != 0) {\n        if (r % 2 == 1) {\n            res *=\
    \ p;\n        }\n        t *= p;\n        r /= 2;\n    }\n    return res - t;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpt_1vko0r: /tmp/tmpt_1vko0r.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long i = 1; // i is 2^n\n\
    \    long p = p; // p is p\n    while (i <= n) {\n        ans = (ans * i) % p;\n\
    \        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmporc733tx.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmporc733tx.cpp:17:10: error: declaration of \u2018long int p\u2019 shadows\
    \ a parameter\n   17 |     long p = p; // p is p\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > 0) {\n   \
    \     ans = (ans * (n % p)) % p;\n        n /= p;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp2xfau76g: /tmp/tmp2xfau76g.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp2nl9yemx: /tmp/tmp2nl9yemx.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(n >= 0 && p >= 0);\n  long r = 1;\n\
    \  while (n > 0) {\n    r = r * p % n;\n    n /= 2;\n  }\n  return r;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvl9n9s84: /tmp/tmpvl9n9s84.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long d = 1;\n    while\
    \ (p) {\n        if (p & 1) {\n            ans = (ans * n) % p;\n        }\n \
    \       n /= 2;\n        d *= 2;\n        p >>= 1;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpfzd05lhv: /tmp/tmpfzd05lhv.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p == 0) res *= p;\n        n /= p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_m403kcv: /tmp/tmp_m403kcv.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ (p & 1) r = r * n;\n        n >>= 1;\n        p >>= 1;\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp86c44cm3: /tmp/tmp86c44cm3.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n  return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7_1nsfd1: /tmp/tmp7_1nsfd1.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % p == 0) {\n            res *= p;\n            n /= p;\n       \
    \ } else {\n            res *= p;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while(n > p) {\n    \
    \    res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpk0gjh1o7: /tmp/tmpk0gjh1o7.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long d = 1;\n    while\
    \ (p > 0) {\n        if (p & 1) {\n            ans = (ans * n) % p;\n        }\n\
    \        n /= p;\n        d *= p;\n        p /= 2;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpiwdnmkc9: /tmp/tmpiwdnmkc9.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
