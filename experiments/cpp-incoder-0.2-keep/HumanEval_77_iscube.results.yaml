name: HumanEval_77_iscube
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==1)\n        return true;\n    if(a==0)\n        return true;\n\
    \    if(a==-1)\n        return true;\n    if(a%2==0)\n        return false;\n\
    \    long b=a/2;\n    long c=a/3;\n    long d=a/5;\n    long e=a/7;\n    long\
    \ f=a/9;\n    long g=a/11;\n    long h=a/13;\n    long i=a/15;\n    long j=a/17;\n\
    \    long k=a/19;\n    long l=a/21;\n    long m=a/23;\n    long n=a/25;\n    long\
    \ o=a/27;\n    long p=a/29;\n    long q=a/31;\n    long r=a/33;\n    long s=a/35;\n\
    \    long t=a/37;\n    long u=a/39;\n    long v=a/41;\n    long w=a/43;\n    long\
    \ x=a/45;\n    long y=a/47;\n    long z=a/49;\n    long a=a/51;\n    long b=a/53;\n\
    \    long c=a/55;\n    long d=a/57;\n    long e=a/59;\n    long f=a/61;\n    long\
    \ g=a/63;\n    long h=a/65;\n    long i=a/67;\n    long j=a/69;\n    long k=a/71;\n\
    \    long l=a/73;\n    long m=a/75;\n    long n=a/77;\n    long o=a/79;\n    long\
    \ p=a/81;\n    long q=a/83;\n    long r=a/85;\n    long s=a/87;\n    long t=a/89;\n\
    \    long u=a/91;\n    long v=a/93;\n    long w=a/95;\n    long x=a/97;\n    long\
    \ y=a/99;\n    long z=a/101;\n    long a=a/103;\n    long b=a/105;\n    long c=a/107;\n\
    \    long d=a/109;\n    long e=a/111;\n    long f=a/113;\n    long g=a/115;\n\
    \    long h=a/117;\n    long i=a/119;\n    long j=a/121;\n    long k=a/123;\n\
    \    long l=a/125;\n    long m=a/127;\n    long n=a/129;\n    long o=a/131;\n\
    \    long p=a/133;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaq2yn5pz.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpaq2yn5pz.cpp:47:10: error: declaration of \u2018long int a\u2019 shadows\
    \ a parameter\n   47 |     long a=a/51;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:48:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   48 |     long b=a/53;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:22:10: note: \u2018long int b\u2019 previously\
    \ declared here\n   22 |     long b=a/2;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:49:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   49 |     long c=a/55;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:23:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   23 |     long c=a/3;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:50:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   50 |     long d=a/57;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:24:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   24 |     long d=a/5;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:51:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   51 |     long e=a/59;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:25:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   25 |     long e=a/7;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:52:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   52 |     long f=a/61;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:26:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   26 |     long f=a/9;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:53:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   53 |     long g=a/63;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:27:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   27 |     long g=a/11;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:54:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   54 |     long h=a/65;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:28:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   28 |     long h=a/13;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:55:10:\
    \ error: redeclaration of \u2018long int i\u2019\n   55 |     long i=a/67;\n \
    \     |          ^\n/tmp/tmpaq2yn5pz.cpp:29:10: note: \u2018long int i\u2019 previously\
    \ declared here\n   29 |     long i=a/15;\n      |          ^\n/tmp/tmpaq2yn5pz.cpp:56:10:\
    \ error: redeclaration of \u2018long int j\u2019\n  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a * a * a;\n    if (cube == 0 || cube == 1)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpo2b18eek: /tmp/tmpo2b18eek.cpp:23: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b <= a) {\n        if (a % b == 0)\n      \
    \      return false;\n        b++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpg6_421lx: /tmp/tmpg6_421lx.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiimmtknw: /tmp/tmpiimmtknw.cpp:83: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % a == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwl37zy1_: /tmp/tmpwl37zy1_.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a == 1) return true;\n    if (a\
    \ == 2) return true;\n    if (a == 3) return true;\n    if (a == 4) return true;\n\
    \    if (a == 5) return true;\n    if (a == 6) return true;\n    if (a == 7) return\
    \ true;\n    if (a == 8) return true;\n    if (a == 9) return true;\n    if (a\
    \ == 10) return true;\n    if (a == 11) return true;\n    if (a == 12) return\
    \ true;\n    if (a == 13) return true;\n    if (a == 14) return true;\n    if\
    \ (a == 15) return true;\n    if (a == 16) return true;\n    if (a == 17) return\
    \ true;\n    if (a == 18) return true;\n    if (a == 19) return true;\n    if\
    \ (a == 20) return true;\n    if (a == 21) return true;\n    if (a == 22) return\
    \ true;\n    if (a == 23) return true;\n    if (a == 24) return true;\n    if\
    \ (a == 25) return true;\n    if (a == 26) return true;\n    if (a == 27) return\
    \ true;\n    if (a == 28) return true;\n    if (a == 29) return true;\n    if\
    \ (a == 30) return true;\n    if (a == 31) return true;\n    if (a == 32) return\
    \ true;\n    if (a == 33) return true;\n    if (a == 34) return true;\n    if\
    \ (a == 35) return true;\n    if (a == 36) return true;\n    if (a == 37) return\
    \ true;\n    if (a == 38) return true;\n    if (a == 39) return true;\n    if\
    \ (a == 40) return true;\n    if (a == 41) return true;\n    if (a == 42) return\
    \ true;\n    if (a == 43) return true;\n    if (a == 44) return true;\n    if\
    \ (a == 45) return true;\n    if (a == 46) return true;\n    if (a == 47) return\
    \ true;\n    if (a == 48) return true;\n    if (a == 49) return true;\n    if\
    \ (a == 50) return true;\n    if (a == 51) return true;\n    if (a == 52) return\
    \ true;\n    if (a == 53) return true;\n    if (a == 54) return true;\n    if\
    \ (a == 55) return true;\n    if (a == 56) return true;\n    if (a == 57) return\
    \ true;\n    if (a == 58) return true;\n    if (a == 59) return true;\n    if\
    \ (a == 60) return true;\n    if (a == 61) return true;\n    if (a == 62) return\
    \ true;\n    if (a == 63) return true;\n    if (a == 64) return true;\n    if\
    \ (a == 65) return true;\n    if (a == 66) return true;\n    if (a == 67) return\
    \ true;\n    if (a == 68) return true;\n    if (a == 69) return true;\n    if\
    \ (a == 70) return true;\n    if (a == 71) return true;\n    if (a == 72) return\
    \ true;\n    if (a == 73) return true;\n    if (a == 74) return true;\n    if\
    \ (a == 75) return true;\n    if (a == 76) return true;\n    if (a == 77) return\
    \ true;\n    if (a == 78) return true;\n    if (a == 79) return true;\n    if\
    \ (a == 80) return true;\n    if (a == 81) return true;\n    if (a == 82) return\
    \ true;\n    if (a == 83) return true;\n    if (a == \n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfoarb1ro.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpfoarb1ro.cpp:99:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   99 | }\n      | ^\n/tmp/tmpfoarb1ro.cpp:98:13: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   98 |     if (a ==\n      |        ~   \
    \ ^\n      |             )\n   99 | }\n      | ~            \n/tmp/tmpfoarb1ro.cpp:99:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   99 | }\n \
    \     | ^\n/tmp/tmpfoarb1ro.cpp:99:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a * a * a;\n    long long int cube_pow3 = cube*cube*cube;\n\
    \    long long int cube_pow5 = cube_pow3*cube_pow3;\n    long long int cube_pow7\
    \ = cube_pow5*cube_pow5;\n    long long int cube_pow9 = cube_pow7*cube_pow7;\n\
    \    long long int cube_pow11 = cube_pow9*cube_pow9;\n    long long int cube_pow13\
    \ = cube_pow11*cube_pow11;\n    long long int cube_pow15 = cube_pow13*cube_pow13;\n\
    \    long long int cube_pow17 = cube_pow15*cube_pow15;\n    long long int cube_pow19\
    \ = cube_pow17*cube_pow17;\n    long long int cube_pow21 = cube_pow19*cube_pow19;\n\
    \    long long int cube_pow23 = cube_pow21*cube_pow21;\n    long long int cube_pow25\
    \ = cube_pow23*cube_pow23;\n    long long int cube_pow27 = cube_pow25*cube_pow25;\n\
    \    long long int cube_pow29 = cube_pow27*cube_pow27;\n    long long int cube_pow31\
    \ = cube_pow29*cube_pow29;\n    long long int cube_pow33 = cube_pow31*cube_pow31;\n\
    \    long long int cube_pow35 = cube_pow33*cube_pow33;\n    long long int cube_pow37\
    \ = cube_pow35*cube_pow35;\n    long long int cube_pow39 = cube_pow37*cube_pow37;\n\
    \    long long int cube_pow41 = cube_pow39*cube_pow39;\n    long long int cube_pow43\
    \ = cube_pow41*cube_pow41;\n    long long int cube_pow45 = cube_pow43*cube_pow43;\n\
    \    long long int cube_pow47 = cube_pow45*cube_pow45;\n    long long int cube_pow49\
    \ = cube_pow47*cube_pow47;\n    long long int cube_pow51 = cube_pow49*cube_pow49;\n\
    \    long long int cube_pow53 = cube_pow51*cube_pow51;\n    long \n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj3m78blw.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpj3m78blw.cpp:42:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   42 | }\n      | ^\n/tmp/tmpj3m78blw.cpp:42:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return false;\n    if (a == 0)\n        return\
    \ true;\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 == 0)\n    \
    \    return false;\n    if (a % 7 == 0)\n        return false;\n    if (a % 9\
    \ == 0)\n        return false;\n    if (a % 11 == 0)\n        return false;\n\
    \    if (a % 13 == 0)\n        return false;\n    if (a % 15 == 0)\n        return\
    \ false;\n    if (a % 17 == 0)\n        return false;\n    if (a % 19 == 0)\n\
    \        return false;\n    if (a % 21 == 0)\n        return false;\n    if (a\
    \ % 23 == 0)\n        return false;\n    if (a % 25 == 0)\n        return false;\n\
    \    if (a % 27 == 0)\n        return false;\n    if (a % 29 == 0)\n        return\
    \ false;\n    if (a % 31 == 0)\n        return false;\n    if (a % 33 == 0)\n\
    \        return false;\n    if (a % 35 == 0)\n        return false;\n    if (a\
    \ % 37 == 0)\n        return false;\n    if (a % 39 == 0)\n        return false;\n\
    \    if (a % 41 == 0)\n        return false;\n    if (a % 43 == 0)\n        return\
    \ false;\n    if (a % 45 == 0)\n        return false;\n    if (a % 47 == 0)\n\
    \        return false;\n    if (a % 49 == 0)\n        return false;\n    if (a\
    \ % 51 == 0)\n        return false;\n    if (a % 53 == 0)\n        return false;\n\
    \    if (a % 55 == 0)\n        return false;\n    if (a % 57 == 0)\n        return\
    \ false;\n    if (a % 59 == 0)\n        return false;\n    if (a % 61 == 0)\n\
    \        return false;\n    if (a % 63 == 0)\n        return false;\n    if (a\
    \ % 65 == 0)\n        return false;\n    if (a % 67 == 0)\n        return false;\n\
    \    if (a % 69 == 0)\n        return false;\n    if (a % 71 == 0)\n        return\
    \ false;\n    if (a % 73 == 0)\n        return false;\n    if (a % 75 == 0)\n\
    \        return false;\n    if (a % 77 == 0)\n        return false;\n    if (a\
    \ % 79 == 0)\n        return false;\n    if (a % 81 == 0)\n        return false;\n\
    \    if (a % 83 == 0)\n        return false;\n    if (a % 85 == 0)\n        return\
    \ false;\n    if (a % 87 == 0)\n        return false;\n    if (a % 89 == 0)\n\
    \        return false;\n    if (a % 91 == 0)\n        return false;\n    if (a\
    \ % 93 == 0)\n        return false;\n    if (a % 95 == 0)\n        return false;\n\
    \    if (a % 97 == 0)\n        return false;\n    if (a % 99 == 0)\n        return\
    \ false;\n    if (a % 101 == 0)\n        return false;\n    if (a % 103 == 0)\n\
    \        return false;\n    if (a % 105 == 0)\n        return false;\n    if (a\
    \ % 107 == 0)\n        return false;\n    if (a % 109 == 0)\n        return false;\n\
    \    if (a % 111 == 0)\n        return false;\n    if (a % 113 == \n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2nxid716.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp2nxid716.cpp:129:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  129 | }\n      | ^\n/tmp/tmp2nxid716.cpp:128:19: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  128 |     if (a % 113 ==\n      |      \
    \  ~          ^\n      |                   )\n  129 | }\n      | ~           \
    \       \n/tmp/tmp2nxid716.cpp:129:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  129 | }\n      | ^\n/tmp/tmp2nxid716.cpp:129:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  129 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a%2==0) return false;\n    long b=\
    \ a/2;\n    if (b%2==0) return false;\n    if (b%3==0) return false;\n    if (b%5==0)\
    \ return false;\n    if (b%7==0) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu85bx3j8: /tmp/tmpu85bx3j8.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = a * a * a * a;\n\
    \    long long int d = a * a * a * a * a;\n    long long int e = a * a * a * a\
    \ * a * a;\n    long long int f = a * a * a * a * a * a * a;\n    long long int\
    \ g = a * a * a * a * a * a * a * a * a;\n    long long int h = a * a * a * a\
    \ * a * a * a * a * a;\n    long long int i = a * a * a * a * a * a * a * a *\
    \ a * a;\n    long long int j = a * a * a * a * a * a * a * a * a * a * a;\n \
    \   long long int k = a * a * a * a * a * a * a * a * a * a * a * a;\n    long\
    \ long int l = a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long\
    \ int m = a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long\
    \ int n = a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long\
    \ int o = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long\
    \ long int p = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n\
    \    long long int q = a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a;\n    long long int r = a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a;\n    long long int s = a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a;\n    long long int t = a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a;\n    long long int u = a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a;\n    long long int v = a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a;\n    long long int w = a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a;\n    long long int x = a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a;\n    long long int y = a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a;\n    long long int z = a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a;\n    long long int aa = a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a;\n    long long int ab = a * a * a * a\
    \ * a * a * a * a * a * a * a * a;\n    long long int \n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkmfawhfe.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpkmfawhfe.cpp:42:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   42 | }\n      | ^\n/tmp/tmpkmfawhfe.cpp:42:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = a;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp82rdu3y1.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp82rdu3y1.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmp82rdu3y1.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmp82rdu3y1.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmp82rdu3y1.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmp82rdu3y1.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ a;\n      |                   ^\n/tmp/tmp82rdu3y1.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmp82rdu3y1.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmp82rdu3y1.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmp82rdu3y1.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmp82rdu3y1.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmp82rdu3y1.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmp82rdu3y1.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmp82rdu3y1.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmp82rdu3y1.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmp82rdu3y1.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ if (a==64) return true;\n    if (a==65) return true;\n    if (a==66) return\
    \ true;\n    if (a==67) return true;\n    if (a==68) return true;\n    if (a==69)\
    \ return true;\n    if (a==70) return true;\n    if (a==71) return true;\n   \
    \ if (a==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gbxn4_z.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp5gbxn4_z.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmp5gbxn4_z.cpp:86:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if (a==\n      |        ~   ^\n\
    \      |            )\n   87 | }\n      | ~           \n/tmp/tmp5gbxn4_z.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmp5gbxn4_z.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcgurwkf6: /tmp/tmpcgurwkf6.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a * a * a;\n    long long int square = a * a;\n\
    \    long long int cube_square = cube*cube;\n    long long int square_cube = square*cube;\n\
    \    long long int cube_cube = cube*cube;\n    long long int square_cube_cube\
    \ = square*cube*cube;\n    long long int cube_cube_cube = cube*cube*cube;\n  \
    \  long long int cube_cube_cube_cube = cube*cube*cube*cube;\n    long long int\
    \ cube_cube_cube_cube_cube = cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int\
    \ cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube = cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgexch54a.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpgexch54a.cpp:29:19: error: redeclaration of \u2018long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\u2019\
    \n   29 |     long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n      |              \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexch54a.cpp:28:19:\
    \ note: \u2018long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\u2019\
    \ previously declared here\n   28 |     long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n      |              \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgexch54a.cpp:32:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   32 | }\n      | ^\n/tmp/tmpgexch54a.cpp:32:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    int count = 0;\n    while (n>0) {\n        if (n%2\
    \ == 0) {\n            count++;\n        }\n        n/=2;\n    }\n    if (count\
    \ == 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmph1sfy__p: /tmp/tmph1sfy__p.cpp:29: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0) return true;\n    if (a % 5 == 0) return true;\n \
    \   if (a % 7 == 0) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpnne8ffwn: /tmp/tmpnne8ffwn.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b <= a) {\n        if (a % b == 0)\n      \
    \      return false;\n        b++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpqzrankul: /tmp/tmpqzrankul.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % a == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1hhpqcq1: /tmp/tmp1hhpqcq1.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A = 1;\n    long long int B = 1;\n    long long int\
    \ C = 1;\n    long long int D = 1;\n    long long int E = 1;\n    long long int\
    \ F = 1;\n    long long int G = 1;\n    long long int H = 1;\n    long long int\
    \ I = 1;\n    long long int J = 1;\n    long long int K = 1;\n    long long int\
    \ L = 1;\n    long long int M = 1;\n    long long int N = 1;\n    long long int\
    \ O = 1;\n    long long int P = 1;\n    long long int Q = 1;\n    long long int\
    \ R = 1;\n    long long int S = 1;\n    long long int T = 1;\n    long long int\
    \ U = 1;\n    long long int V = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf2vimclm.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpf2vimclm.cpp:65:19: error: redeclaration of \u2018long long int A\u2019\
    \n   65 |     long long int A = 1;\n      |                   ^\n/tmp/tmpf2vimclm.cpp:39:19:\
    \ note: \u2018long long int A\u2019 previously declared here\n   39 |     long\
    \ long int A = 1;\n      |                   ^\n/tmp/tmpf2vimclm.cpp:66:19: error:\
    \ redeclaration of \u2018long long int B\u2019\n   66 |     long long int B =\
    \ 1;\n      |                   ^\n/tmp/tmpf2vimclm.cpp:40:19: note: \u2018long\
    \ long int B\u2019 previously declared here\n   40 |     long long int B = 1;\n\
    \      |                   ^\n/tmp/tmpf2vimclm.cpp:67:19: error: redeclaration\
    \ of \u2018long long int C\u2019\n   67 |     long long int C = 1;\n      |  \
    \                 ^\n/tmp/tmpf2vimclm.cpp:41:19: note: \u2018long long int C\u2019\
    \ previously declared here\n   41 |     long long int C = 1;\n      |        \
    \           ^\n/tmp/tmpf2vimclm.cpp:68:19: error: redeclaration of \u2018long\
    \ long int D\u2019\n   68 |     long long int D = 1;\n      |                \
    \   ^\n/tmp/tmpf2vimclm.cpp:42:19: note: \u2018long long int D\u2019 previously\
    \ declared here\n   42 |     long long int D = 1;\n      |                   ^\n\
    /tmp/tmpf2vimclm.cpp:69:19: error: redeclaration of \u2018long long int E\u2019\
    \n   69 |     long long int E = 1;\n      |                   ^\n/tmp/tmpf2vimclm.cpp:43:19:\
    \ note: \u2018long long int E\u2019 previously declared here\n   43 |     long\
    \ long int E = 1;\n      |                   ^\n/tmp/tmpf2vimclm.cpp:70:19: error:\
    \ redeclaration of \u2018long long int F\u2019\n   70 |     long long int F =\
    \ 1;\n      |                   ^\n/tmp/tmpf2vimclm.cpp:44:19: note: \u2018long\
    \ long int F\u2019 previously declared here\n   44 |     long long int F = 1;\n\
    \      |                   ^\n/tmp/tmpf2vimclm.cpp:71:19: error: redeclaration\
    \ of \u2018long long int G\u2019\n   71 |     long long int G = 1;\n      |  \
    \                 ^\n/tmp/tmpf2vimclm.cpp:45:19: note: \u2018long long int G\u2019\
    \ previously declared here\n   45 |     long long int G = 1;\n      |        \
    \           ^\n/tmp/tmpf2vimclm.cpp:72:19: error: redeclaration of \u2018long\
    \ long int H\u2019\n   72 |     long long int H = 1;\n   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnhqbhu5n: /tmp/tmpnhqbhu5n.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2==0)\n        return false;\n    if (a%4==0)\n        return\
    \ true;\n    if (a%8==0)\n        return true;\n    if (a%16==0)\n        return\
    \ true;\n    if (a%32==0)\n        return true;\n    if (a%64==0)\n        return\
    \ true;\n    if (a%128==0)\n        return true;\n    if (a%256==0)\n        return\
    \ true;\n    if (a%512==0)\n        return true;\n    if (a%1024==0)\n       \
    \ return true;\n    if (a%2048==0)\n        return true;\n    if (a%4096==0)\n\
    \        return true;\n    if (a%8192==0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3d4biihl: /tmp/tmp3d4biihl.cpp:44: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    for(int i = 1; i <= a; ++i) {\n        b\
    \ *= i;\n    }\n    return b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpiw_t00fs: /tmp/tmpiw_t00fs.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (long long)a * a;\n    long long int c = b * b -\
    \ 4 * a * b;\n    return c >= 0;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpobe2b3l1: /tmp/tmpobe2b3l1.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a * a * a;\n    long long int cube_of_3 = cube*cube*cube;\n\
    \    long long int cube_of_5 = cube*cube*cube*cube;\n    long long int cube_of_7\
    \ = cube*cube*cube*cube*cube;\n    long long int cube_of_9 = cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_11 = cube*cube*cube*cube*cube*cube*cube;\n    long\
    \ long int cube_of_13 = cube*cube*cube*cube*cube*cube*cube*cube;\n    long long\
    \ int cube_of_15 = cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long\
    \ int cube_of_17 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long\
    \ long int cube_of_19 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_21 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_23 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_25 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_27 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_29 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_31 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_33 = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n\
    \    long long int cube_of_35 = cube*cube*cube*cube*cube*cube*\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps8kozw14.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmps8kozw14.cpp:32:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   32 | }\n      | ^\n/tmp/tmps8kozw14.cpp:32:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 == 0)\n     \
    \   return true;\n    if (a % 7 == 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4pi9_5pd: /tmp/tmp4pi9_5pd.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8uh0a2cj: /tmp/tmp8uh0a2cj.cpp:83: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % a == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7aaps1gm: /tmp/tmp7aaps1gm.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 0;\n    while (b < a) {\n        if (a % b == 0) {\n     \
    \       return false;\n        }\n        b++;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 0;\n    for(int i = 1; i <= a; i++) {\n        b\
    \ += i;\n    }\n    return b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1u2m2w2f: /tmp/tmp1u2m2w2f.cpp:24: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    int count = 0;\n    while (n > 1) {\n        if (n\
    \ % 2 == 0) {\n            n = n / 2;\n            count++;\n        } else {\n\
    \            n = 3 * n + 1;\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5_pu3tol: /tmp/tmp5_pu3tol.cpp:36: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%6==0)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp32ykrwik: /tmp/tmp32ykrwik.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    if(a==1)\n        return true;\n\
    \    if(a==2)\n        return true;\n    if(a==3)\n        return true;\n    if(a==4)\n\
    \        return true;\n    if(a==5)\n        return true;\n    if(a==6)\n    \
    \    return true;\n    if(a==7)\n        return true;\n    if(a==8)\n        return\
    \ true;\n    if(a==9)\n        return true;\n    if(a==10)\n        return true;\n\
    \    if(a==11)\n        return true;\n    if(a==12)\n        return true;\n  \
    \  if(a==13)\n        return true;\n    if(a==14)\n        return true;\n    if(a==15)\n\
    \        return true;\n    if(a==16)\n        return true;\n    if(a==17)\n  \
    \      return true;\n    if(a==18)\n        return true;\n    if(a==19)\n    \
    \    return true;\n    if(a==20)\n        return true;\n    if(a==21)\n      \
    \  return true;\n    if(a==22)\n        return true;\n    if(a==23)\n        return\
    \ true;\n    if(a==24)\n        return true;\n    if(a==25)\n        return true;\n\
    \    if(a==26)\n        return true;\n    if(a==27)\n        return true;\n  \
    \  if(a==28)\n        return true;\n    if(a==29)\n        return true;\n    if(a==30)\n\
    \        return true;\n    if(a==31)\n        return true;\n    if(a==32)\n  \
    \      return true;\n    if(a==33)\n        return true;\n    if(a==34)\n    \
    \    return true;\n    if(a==35)\n        return true;\n    if(a==36)\n      \
    \  return true;\n    if(a==37)\n        return true;\n    if(a==38)\n        return\
    \ true;\n    if(a==39)\n        return true;\n    if(a==40)\n        return true;\n\
    \    if(a==41)\n        return true;\n    if(a==42)\n        return true;\n  \
    \  if(a==43)\n        return true;\n    if(a==44)\n        return true;\n    if(a==45)\n\
    \        return true;\n    if(a==46)\n        return true;\n    if(a==47)\n  \
    \      return true;\n    if(a==48)\n        return true;\n    if(a==49)\n    \
    \    return true;\n    if(a==50)\n        return true;\n    if(a==51)\n      \
    \  return true;\n    if(a==52)\n        return true;\n    if(a==53)\n        return\
    \ true;\n    if(a==54)\n        return true;\n    if(a==55)\n        return true;\n\
    \    if(a==56)\n        return true;\n    if(a==57)\n        return true;\n  \
    \  if(a==58)\n        return true;\n    if(a==59)\n        return true;\n    if(a==60)\n\
    \        return true;\n    if(a==61)\n        return true;\n    if(a==62)\n  \
    \      return true;\n    if(a==63)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6dgc1rj8: /tmp/tmp6dgc1rj8.cpp:147: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a == 1) return true;\n    if (a\
    \ == 2) return true;\n    if (a == 3) return true;\n    if (a == 4) return true;\n\
    \    if (a == 5) return true;\n    if (a == 6) return true;\n    if (a == 7) return\
    \ true;\n    if (a == 8) return true;\n    if (a == 9) return true;\n    if (a\
    \ == 10) return true;\n    if (a == 11) return true;\n    if (a == 12) return\
    \ true;\n    if (a == 13) return true;\n    if (a == 14) return true;\n    if\
    \ (a == 15) return true;\n    if (a == 16) return true;\n    if (a == 17) return\
    \ true;\n    if (a == 18) return true;\n    if (a == 19) return true;\n    if\
    \ (a == 20) return true;\n    if (a == 21) return true;\n    if (a == 22) return\
    \ true;\n    if (a == 23) return true;\n    if (a == 24) return true;\n    if\
    \ (a == 25) return true;\n    if (a == 26) return true;\n    if (a == 27) return\
    \ true;\n    if (a == 28) return true;\n    if (a == 29) return true;\n    if\
    \ (a == 30) return true;\n    if (a == 31) return true;\n    if (a == 32) return\
    \ true;\n    if (a == 33) return true;\n    if (a == 34) return true;\n    if\
    \ (a == 35) return true;\n    if (a == 36) return true;\n    if (a == 37) return\
    \ true;\n    if (a == 38) return true;\n    if (a == 39) return true;\n    if\
    \ (a == 40) return true;\n    if (a == 41) return true;\n    if (a == 42) return\
    \ true;\n    if (a == 43) return true;\n    if (a == 44) return true;\n    if\
    \ (a == 45) return true;\n    if (a == 46) return true;\n    if (a == 47) return\
    \ true;\n    if (a == 48) return true;\n    if (a == 49) return true;\n    if\
    \ (a == 50) return true;\n    if (a == 51) return true;\n    if (a == 52) return\
    \ true;\n    if (a == 53) return true;\n    if (a == 54) return true;\n    if\
    \ (a == 55) return true;\n    if (a == 56) return true;\n    if (a == 57) return\
    \ true;\n    if (a == 58) return true;\n    if (a == 59) return true;\n    if\
    \ (a == 60) return true;\n    if (a == 61) return true;\n    if (a == 62) return\
    \ true;\n    if (a == 63) return true;\n    if (a == 64) return true;\n    if\
    \ (a == 65) return true;\n    if (a == 66) return true;\n    if (a == 67) return\
    \ true;\n    if (a == 68) return true;\n    if (a == 69) return true;\n    if\
    \ (a == 70) return true;\n    if (a == 71) return true;\n    if (a == 72) return\
    \ true;\n    if (a == 73) return true;\n    if (a == 74) return true;\n    if\
    \ (a == 75) return true;\n    if (a == 76) return true;\n    if (a == 77) return\
    \ true;\n    if (a == 78) return true;\n    if (a == 79) return true;\n    if\
    \ (a == 80) return true;\n    if (a == 81) return true;\n    if (a == 82) return\
    \ true;\n    if (a == 83) return true;\n    if (a == \n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpueabclw0.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpueabclw0.cpp:99:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   99 | }\n      | ^\n/tmp/tmpueabclw0.cpp:98:13: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   98 |     if (a ==\n      |        ~   \
    \ ^\n      |             )\n   99 | }\n      | ~            \n/tmp/tmpueabclw0.cpp:99:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   99 | }\n \
    \     | ^\n/tmp/tmpueabclw0.cpp:99:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpio43dosa: /tmp/tmpio43dosa.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo6so9_qy: /tmp/tmpo6so9_qy.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaanqn4pu: /tmp/tmpaanqn4pu.cpp:91: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b < a) {\n        if (a % b == 0) return false;\n\
    \        b++;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpt5pb1vhm: /tmp/tmpt5pb1vhm.cpp:26: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0) return true;\n    if(a==1) return false;\n    if(a==2) return\
    \ true;\n    if(a==3) return true;\n    if(a==4) return true;\n    if(a==5) return\
    \ true;\n    if(a==6) return true;\n    if(a==7) return true;\n    if(a==8) return\
    \ true;\n    if(a==9) return true;\n    if(a==10) return true;\n    if(a==11)\
    \ return true;\n    if(a==12) return true;\n    if(a==13) return true;\n    if(a==14)\
    \ return true;\n    if(a==15) return true;\n    if(a==16) return true;\n    if(a==17)\
    \ return true;\n    if(a==18) return true;\n    if(a==19) return true;\n    if(a==20)\
    \ return true;\n    if(a==21) return true;\n    if(a==22) return true;\n    if(a==23)\
    \ return true;\n    if(a==24) return true;\n    if(a==25) return true;\n    if(a==26)\
    \ return true;\n    if(a==27) return true;\n    if(a==28) return true;\n    if(a==29)\
    \ return true;\n    if(a==30) return true;\n    if(a==31) return true;\n    if(a==32)\
    \ return true;\n    if(a==33) return true;\n    if(a==34) return true;\n    if(a==35)\
    \ return true;\n    if(a==36) return true;\n    if(a==37) return true;\n    if(a==38)\
    \ return true;\n    if(a==39) return true;\n    if(a==40) return true;\n    if(a==41)\
    \ return true;\n    if(a==42) return true;\n    if(a==43) return true;\n    if(a==44)\
    \ return true;\n    if(a==45) return true;\n    if(a==46) return true;\n    if(a==47)\
    \ return true;\n    if(a==48) return true;\n    if(a==49) return true;\n    if(a==50)\
    \ return true;\n    if(a==51) return true;\n    if(a==52) return true;\n    if(a==53)\
    \ return true;\n    if(a==54) return true;\n    if(a==55) return true;\n    if(a==56)\
    \ return true;\n    if(a==57) return true;\n    if(a==58) return true;\n    if(a==59)\
    \ return true;\n    if(a==60) return true;\n    if(a==61) return true;\n    if(a==62)\
    \ return true;\n    if(a==63) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp74q6b778: /tmp/tmp74q6b778.cpp:82: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return false;\n    if (a == 0)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return iscube(a / 2);\n    return iscube(a\
    \ - 1) * iscube(a - 1);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkwrlbtb2: /tmp/tmpkwrlbtb2.cpp:25: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    long c = a;\n    long d = 1;\n    long e = 1;\n  \
    \  long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long A = 1;\n    long B\
    \ = 1;\n    long C = 1;\n    long D = 1;\n    long E = 1;\n    long F = 1;\n \
    \   long G = 1;\n    long H = 1;\n    long I = 1;\n    long J = 1;\n    long K\
    \ = 1;\n    long L = 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n \
    \   long P = 1;\n    long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T\
    \ = 1;\n    long U = 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n \
    \   long Y = 1;\n    long Z = 1;\n    long aa = 1;\n    long ab = 1;\n    long\
    \ ac = 1;\n    long ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag =\
    \ 1;\n    long ah = 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n\
    \    long al = 1;\n    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long\
    \ ap = 1;\n    long aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at =\
    \ 1;\n    long au = 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n\
    \    long ay = 1;\n    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long\
    \ bc = 1;\n    long bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg =\
    \ 1;\n    long bh = 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n\
    \    long bl = 1;\n    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long\
    \ bp = 1;\n    long bq = 1;\n    long br = 1;\n    long bs = 1;\n    long bt1\
    \ = 1;\n    long bt2 = 1;\n    long bt3 = 1;\n    long bt4 = 1;\n    long bt5\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9wqiyauz.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp9wqiyauz.cpp:115:1: error: expected initializer before \u2018}\u2019 token\n\
    \  115 | }\n      | ^\n/tmp/tmp9wqiyauz.cpp:115:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 0;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpryuprpw8: /tmp/tmpryuprpw8.cpp:92: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b= a%a;\n    long long int c= a%b;\n    long long int\
    \ d= a%c;\n    long long int e= a%d;\n    long long int f= a%e;\n    long long\
    \ int g= a%f;\n    long long int h= a%g;\n    long long int i= a%h;\n    long\
    \ long int j= a%i;\n    long long int k= a%j;\n    long long int l= a%k;\n   \
    \ long long int m= a%l;\n    long long int n= a%m; \n    long long int o= a%n;\n\
    \    long long int p= a%o;\n    long long int q= a%p;\n    long long int r= a%q;\n\
    \    long long int s= a%r;\n    long long int t= a%s;\n    long long int u= a%t;\n\
    \    long long int v= a%u;\n    long long int w= a%v;\n    long long int x= a%w;\n\
    \    long long int y= a%x;\n    long long int z= a%y;\n    long long int aa= a%z;\n\
    \    long long int bb= a%aa;\n    long long int cc= a%bb;\n    long long int dd=\
    \ a%cc;\n    long long int ee= a%dd;\n    long long int ff= a%ee;\n    long long\
    \ int gg= a%ff;\n    long long int hh= a%gg;\n    long long int ii= a%hh;\n  \
    \  long long int jj= a%ii;\n    long long int kk= a%jj;\n    long long int ll=\
    \ a%kk;\n    long long int mm= a%ll;\n    long long int nn= a%mm;\n    long long\
    \ int oo= a%nn;\n    long long int pp= a%oo;\n    long long int qq= a%pp;\n  \
    \  long long int rr= a%qq;\n    long long int ss= a%rr;\n    long long int tt=\
    \ a%ss;\n    long long int uu= a%tt;\n    long long int vv= a%uu;\n    long long\
    \ int ww= a%vv;\n    long long int xx= \n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaao8jrsj.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpaao8jrsj.cpp:63:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   63 | }\n      | ^\n/tmp/tmpaao8jrsj.cpp:63:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = b * b * b - 4\
    \ * a * b;\n    if (c < 0)\n        return false;\n    long long int d = b * b\
    \ * b + 4 * a * b;\n    if (d < 0)\n        return false;\n    if (d == 0)\n \
    \       return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmps2lcqxvt: /tmp/tmps2lcqxvt.cpp:27: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyot9dvvh: /tmp/tmpyot9dvvh.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = b * b * b - 4\
    \ * a * b;\n    return c >= 0;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8tugro4_: /tmp/tmp8tugro4_.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    if(a==1)\n        return true;\n\
    \    if(a==2)\n        return true;\n    if(a==3)\n        return true;\n    if(a==4)\n\
    \        return true;\n    if(a==5)\n        return true;\n    if(a==6)\n    \
    \    return true;\n    if(a==7)\n        return true;\n    if(a==8)\n        return\
    \ true;\n    if(a==9)\n        return true;\n    if(a==10)\n        return true;\n\
    \    if(a==11)\n        return true;\n    if(a==12)\n        return true;\n  \
    \  if(a==13)\n        return true;\n    if(a==14)\n        return true;\n    if(a==15)\n\
    \        return true;\n    if(a==16)\n        return true;\n    if(a==17)\n  \
    \      return true;\n    if(a==18)\n        return true;\n    if(a==19)\n    \
    \    return true;\n    if(a==20)\n        return true;\n    if(a==21)\n      \
    \  return true;\n    if(a==22)\n        return true;\n    if(a==23)\n        return\
    \ true;\n    if(a==24)\n        return true;\n    if(a==25)\n        return true;\n\
    \    if(a==26)\n        return true;\n    if(a==27)\n        return true;\n  \
    \  if(a==28)\n        return true;\n    if(a==29)\n        return true;\n    if(a==30)\n\
    \        return true;\n    if(a==31)\n        return true;\n    if(a==32)\n  \
    \      return true;\n    if(a==33)\n        return true;\n    if(a==34)\n    \
    \    return true;\n    if(a==35)\n        return true;\n    if(a==36)\n      \
    \  return true;\n    if(a==37)\n        return true;\n    if(a==38)\n        return\
    \ true;\n    if(a==39)\n        return true;\n    if(a==40)\n        return true;\n\
    \    if(a==41)\n        return true;\n    if(a==42)\n        return true;\n  \
    \  if(a==43)\n        return true;\n    if(a==44)\n        return true;\n    if(a==45)\n\
    \        return true;\n    if(a==46)\n        return true;\n    if(a==47)\n  \
    \      return true;\n    if(a==48)\n        return true;\n    if(a==49)\n    \
    \    return true;\n    if(a==50)\n        return true;\n    if(a==51)\n      \
    \  return true;\n    if(a==52)\n        return true;\n    if(a==53)\n        return\
    \ true;\n    if(a==54)\n        return true;\n    if(a==55)\n        return true;\n\
    \    if(a==56)\n        return true;\n    if(a==57)\n        return true;\n  \
    \  if(a==58)\n        return true;\n    if(a==59)\n        return true;\n    if(a==60)\n\
    \        return true;\n    if(a==61)\n        return true;\n    if(a==62)\n  \
    \      return true;\n    if(a==63)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkb2fwmz1: /tmp/tmpkb2fwmz1.cpp:147: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz_zxn3w1: /tmp/tmpz_zxn3w1.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwz2x62fo.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpwz2x62fo.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmpwz2x62fo.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpwz2x62fo.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmpwz2x62fo.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmpwz2x62fo.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmpwz2x62fo.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmpwz2x62fo.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmpwz2x62fo.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmpwz2x62fo.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmpwz2x62fo.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmpwz2x62fo.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmpwz2x62fo.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmpwz2x62fo.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmpwz2x62fo.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmpwz2x62fo.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgisrihql: /tmp/tmpgisrihql.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpni5gcvuw: /tmp/tmpni5gcvuw.cpp:91: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (long long int) a;\n    long long int c = 1;\n \
    \   long long int d = 1;\n    long long int e = 1;\n    long long int f = 1;\n\
    \    long long int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n\
    \    long long int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n\
    \    long long int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n\
    \    long long int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n\
    \    long long int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n\
    \    long long int v = 1;\n    long long int w = 1;\n    long long int x = 1;\n\
    \    long long int y = 1;\n    long long int z = 1;\n    long long int a = 1;\n\
    \    long long int b = 1;\n    long long int c = 1;\n    long long int d = 1;\n\
    \    long long int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n\
    \    long long int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n\
    \    long long int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n\
    \    long long int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n\
    \    long long int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n\
    \    long long int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n\
    \    long long int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n\
    \    long long int z = 1;\n    long long int a = 1;\n    long long int b = 1;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz68j1ojo.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpz68j1ojo.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmpz68j1ojo.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpz68j1ojo.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = (long long int) a;\n      |            \
    \       ^\n/tmp/tmpz68j1ojo.cpp:41:19: error: redeclaration of \u2018long long\
    \ int c\u2019\n   41 |     long long int c = 1;\n      |                   ^\n\
    /tmp/tmpz68j1ojo.cpp:15:19: note: \u2018long long int c\u2019 previously declared\
    \ here\n   15 |     long long int c = 1;\n      |                   ^\n/tmp/tmpz68j1ojo.cpp:42:19:\
    \ error: redeclaration of \u2018long long int d\u2019\n   42 |     long long int\
    \ d = 1;\n      |                   ^\n/tmp/tmpz68j1ojo.cpp:16:19: note: \u2018\
    long long int d\u2019 previously declared here\n   16 |     long long int d =\
    \ 1;\n      |                   ^\n/tmp/tmpz68j1ojo.cpp:43:19: error: redeclaration\
    \ of \u2018long long int e\u2019\n   43 |     long long int e = 1;\n      |  \
    \                 ^\n/tmp/tmpz68j1ojo.cpp:17:19: note: \u2018long long int e\u2019\
    \ previously declared here\n   17 |     long long int e = 1;\n      |        \
    \           ^\n/tmp/tmpz68j1ojo.cpp:44:19: error: redeclaration of \u2018long\
    \ long int f\u2019\n   44 |     long long int f = 1;\n      |                \
    \   ^\n/tmp/tmpz68j1ojo.cpp:18:19: note: \u2018long long int f\u2019 previously\
    \ declared here\n   18 |     long long int f = 1;\n      |                   ^\n\
    /tmp/tmpz68j1ojo.cpp:45:19: error: redeclaration of \u2018long long int g\u2019\
    \n   45 |     long long int g = 1;\n      |                   ^\n/tmp/tmpz68j1ojo.cpp:19:19:\
    \ note: \u2018long long int g\u2019 previously declared here\n   19 |     long\
    \ long int g = 1;\n      |                   ^\n/tmp/tmpz68j1ojo.cpp:46:19: error:\
    \ redeclaration of \u2018long long int h\u2019\n   46 |     long long int h =\
    \ 1;\n      |                   ^\n/tmp/tmpz68j1ojo.cpp:20:19: note: \u2018long\
    \ long int h\u2019 previously declared here\n  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    if(a==1)\n        return true;\n\
    \    if(a==2)\n        return true;\n    if(a==3)\n        return true;\n    if(a==4)\n\
    \        return true;\n    if(a==5)\n        return true;\n    if(a==6)\n    \
    \    return true;\n    if(a==7)\n        return true;\n    if(a==8)\n        return\
    \ true;\n    if(a==9)\n        return true;\n    if(a==10)\n        return true;\n\
    \    if(a==11)\n        return true;\n    if(a==12)\n        return true;\n  \
    \  if(a==13)\n        return true;\n    if(a==14)\n        return true;\n    if(a==15)\n\
    \        return true;\n    if(a==16)\n        return true;\n    if(a==17)\n  \
    \      return true;\n    if(a==18)\n        return true;\n    if(a==19)\n    \
    \    return true;\n    if(a==20)\n        return true;\n    if(a==21)\n      \
    \  return true;\n    if(a==22)\n        return true;\n    if(a==23)\n        return\
    \ true;\n    if(a==24)\n        return true;\n    if(a==25)\n        return true;\n\
    \    if(a==26)\n        return true;\n    if(a==27)\n        return true;\n  \
    \  if(a==28)\n        return true;\n    if(a==29)\n        return true;\n    if(a==30)\n\
    \        return true;\n    if(a==31)\n        return true;\n    if(a==32)\n  \
    \      return true;\n    if(a==33)\n        return true;\n    if(a==34)\n    \
    \    return true;\n    if(a==35)\n        return true;\n    if(a==36)\n      \
    \  return true;\n    if(a==37)\n        return true;\n    if(a==38)\n        return\
    \ true;\n    if(a==39)\n        return true;\n    if(a==40)\n        return true;\n\
    \    if(a==41)\n        return true;\n    if(a==42)\n        return true;\n  \
    \  if(a==43)\n        return true;\n    if(a==44)\n        return true;\n    if(a==45)\n\
    \        return true;\n    if(a==46)\n        return true;\n    if(a==47)\n  \
    \      return true;\n    if(a==48)\n        return true;\n    if(a==49)\n    \
    \    return true;\n    if(a==50)\n        return true;\n    if(a==51)\n      \
    \  return true;\n    if(a==52)\n        return true;\n    if(a==53)\n        return\
    \ true;\n    if(a==54)\n        return true;\n    if(a==55)\n        return true;\n\
    \    if(a==56)\n        return true;\n    if(a==57)\n        return true;\n  \
    \  if(a==58)\n        return true;\n    if(a==59)\n        return true;\n    if(a==60)\n\
    \        return true;\n    if(a==61)\n        return true;\n    if(a==62)\n  \
    \      return true;\n    if(a==63)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0mkoep6n: /tmp/tmp0mkoep6n.cpp:147: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6jb78u7m: /tmp/tmp6jb78u7m.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % a == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6bfvy3ct: /tmp/tmp6bfvy3ct.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return false;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ayv0rwh: /tmp/tmp3ayv0rwh.cpp:82: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = b * b * b;\n \
    \   long long int d = c * c * c;\n    long long int e = d * d * d;\n    long long\
    \ int f = e * e * e;\n    long long int g = f * f * f;\n    long long int h =\
    \ g * g * g;\n    return h == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnwn7dybp: /tmp/tmpnwn7dybp.cpp:28: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (long long int)a;\n    long long int c = (long long\
    \ int)(a*a*a);\n    long long int d = (long long int)(a*a*a*a);\n    long long\
    \ int e = (long long int)(a*a*a*a*a);\n    long long int f = (long long int)(a*a*a*a*a*a);\n\
    \    long long int g = (long long int)(a*a*a*a*a*a*a);\n    long long int h =\
    \ (long long int)(a*a*a*a*a*a*a*a);\n    long long int i = (long long int)(a*a*a*a*a*a*a*a*a);\n\
    \    long long int j = (long long int)(a*a*a*a*a*a*a*a*a*a);\n    long long int\
    \ k = (long long int)(a*a*a*a*a*a*a*a*a*a*a);\n    long long int l = (long long\
    \ int)(a*a*a*a*a*a*a*a*a*a*a*a);\n    long long int m = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a);\n\
    \    long long int n = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n    long\
    \ long int o = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n    long long\
    \ int p = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n    long long\
    \ int q = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n    long\
    \ long int r = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n\
    \    long long int s = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n\
    \    long long int t = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n\
    \    long long int u = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a);\n\
    \    long long int v = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw4j7xp8e.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpw4j7xp8e.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmpw4j7xp8e.cpp:34:91: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   34 |     long long int v = (long long int)(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*\n\
    \      |                                      ~                              \
    \                      ^\n      |                                            \
    \                                               )\n   35 | }\n      | ~      \
    \                                                                            \
    \        \n/tmp/tmpw4j7xp8e.cpp:35:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   35 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b <= a) {\n        if (a % b == 0) {\n    \
    \        return false;\n        }\n        b++;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprc0zliwv: /tmp/tmprc0zliwv.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 && a % 5 == 0 && a % 7 == 0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxzohy05a: /tmp/tmpxzohy05a.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = 1;\n    long b = a;\n    while (b > 0) {\n        if (b %\
    \ 3 == 0) {\n            n = n * n * n;\n        }\n        b = b / 3;\n    }\n\
    \    return a == n * n * n;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvqk_6re_: /tmp/tmpvqk_6re_.cpp:28: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b <= a) {\n        if (a % b == 0)\n      \
    \      return false;\n        b++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp8re1i3hc: /tmp/tmp8re1i3hc.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0) return true;\n    if (a % 5 == 0) return true;\n \
    \   if (a % 7 == 0) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpkjvxdyjb: /tmp/tmpkjvxdyjb.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ if (a==64) return true;\n    if (a==65) return true;\n    if (a==66) return\
    \ true;\n    if (a==67) return true;\n    if (a==68) return true;\n    if (a==69)\
    \ return true;\n    if (a==70) return true;\n    if (a==71) return true;\n   \
    \ if (a==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp6usjmk6.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpp6usjmk6.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmpp6usjmk6.cpp:86:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if (a==\n      |        ~   ^\n\
    \      |            )\n   87 | }\n      | ~           \n/tmp/tmpp6usjmk6.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmpp6usjmk6.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpky2wkav0.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpky2wkav0.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmpky2wkav0.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpky2wkav0.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmpky2wkav0.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmpky2wkav0.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmpky2wkav0.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmpky2wkav0.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmpky2wkav0.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmpky2wkav0.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmpky2wkav0.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmpky2wkav0.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmpky2wkav0.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmpky2wkav0.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmpky2wkav0.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmpky2wkav0.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvfs_nr8n: /tmp/tmpvfs_nr8n.cpp:92: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % a == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpei_ulsn7: /tmp/tmpei_ulsn7.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = b;\n    long long int\
    \ d = c;\n    long long int e = d;\n    long long int f = e;\n    long long int\
    \ g = f;\n    long long int h = g;\n    long long int i = h;\n    long long int\
    \ j = i;\n    long long int k = j;\n    long long int l = k;\n    long long int\
    \ m = l;\n    long long int n = m;\n    long long int o = n;\n    long long int\
    \ p = o;\n    long long int q = p;\n    long long int r = q;\n    long long int\
    \ s = r;\n    long long int t = s;\n    long long int u = t;\n    long long int\
    \ v = u;\n    long long int w = v;\n    long long int x = w;\n    long long int\
    \ y = x;\n    long long int z = y;\n    long long int a = z;\n    long long int\
    \ b = a;\n    long long int c = b;\n    long long int d = c;\n    long long int\
    \ e = d;\n    long long int f = e;\n    long long int g = f;\n    long long int\
    \ h = g;\n    long long int i = h;\n    long long int j = i;\n    long long int\
    \ k = j;\n    long long int l = k;\n    long long int m = l;\n    long long int\
    \ n = m;\n    long long int o = n;\n    long long int p = o;\n    long long int\
    \ q = p;\n    long long int r = q;\n    long long int s = r;\n    long long int\
    \ t = s;\n    long long int u = t;\n    long long int v = u;\n    long long int\
    \ w = v;\n    long long int x = w;\n    long long int y = x;\n    long long int\
    \ z = y;\n    long long int a = z;\n    long long int b = a;\n    long long int\
    \ c = b;\n    long long int d = c;\n    long long int e = d;\n    long long int\
    \ f = e;\n    long long int g = f;\n    long long int h = g;\n    long long int\
    \ i = h;\n    long long int j = i;\n    long long int k = j;\n    long long int\
    \ l = k;\n    long long int m = l;\n    long long int n = m;\n    long long int\
    \ o = n;\n    long long int p = o;\n    long long int q = p;\n    long long int\
    \ r = q;\n    long long int s = r;\n    long long int t = s;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkvtrd7vn.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpkvtrd7vn.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = z;\n      |             \
    \      ^\n/tmp/tmpkvtrd7vn.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = a;\n      |                   ^\n\
    /tmp/tmpkvtrd7vn.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmpkvtrd7vn.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = b;\n      |                   ^\n/tmp/tmpkvtrd7vn.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ b;\n      |                   ^\n/tmp/tmpkvtrd7vn.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = c;\n      |  \
    \                 ^\n/tmp/tmpkvtrd7vn.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = c;\n      |        \
    \           ^\n/tmp/tmpkvtrd7vn.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = d;\n      |                \
    \   ^\n/tmp/tmpkvtrd7vn.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = d;\n      |                   ^\n\
    /tmp/tmpkvtrd7vn.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = e;\n      |                   ^\n/tmp/tmpkvtrd7vn.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = e;\n      |                   ^\n/tmp/tmpkvtrd7vn.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ f;\n      |                   ^\n/tmp/tmpkvtrd7vn.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = f;\n\
    \      |                   ^\n/tmp/tmpkvtrd7vn.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = g;\n      |  \
    \                 ^\n/tmp/tmpkvtrd7vn.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0j4sw67j: /tmp/tmp0j4sw67j.cpp:91: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    long cube = 1;\n    while (n) {\n        if (n % 2\
    \ == 0) {\n            cube *= n;\n        }\n        n /= 2;\n    }\n    return\
    \ cube == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcfr2dx9j: /tmp/tmpcfr2dx9j.cpp:29: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm2tm4e0g: /tmp/tmpm2tm4e0g.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b <= a) {\n        if (a % b == 0)\n      \
    \      return false;\n        b++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpp6wmlf6l: /tmp/tmpp6wmlf6l.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = b * b * b - 4\
    \ * a * b;\n    return c >= 0;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpys9f69nq: /tmp/tmpys9f69nq.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    if\
    \ (a % 5 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpy4_etc2q: /tmp/tmpy4_etc2q.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%4==0)\n        if (a%8==0)\n            if (a%16==0)\n     \
    \           if (a%32==0)\n                    if (a%64==0)\n                 \
    \       return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpd8hsn3aq: /tmp/tmpd8hsn3aq.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuq9f968v: /tmp/tmpuq9f968v.cpp:92: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==1)\n        return true;\n    if (a==0)\n        return true;\n\
    \    if (a==-1)\n        return true;\n    if (a%2==0)\n        return iscube(a/2);\n\
    \    if (a%3==0)\n        return iscube(a/3);\n    if (a%5==0)\n        return\
    \ iscube(a/5);\n    if (a%7==0)\n        return iscube(a/7);\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprt961wcs: /tmp/tmprt961wcs.cpp:33: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b <= a) {\n        if (a % b == 0) {\n    \
    \        return false;\n        }\n        b++;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmputo1a_ev: /tmp/tmputo1a_ev.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int A = a;\n    long long int\
    \ B = a;\n    long long int C = a;\n    long long int D = a;\n    long long int\
    \ E = a;\n    long long int F = a;\n    long long int G = a;\n    long long int\
    \ H = a;\n    long long int I = a;\n    long long int J = a;\n    long long int\
    \ K = a;\n    long long int L = a;\n    long long int M = a;\n    long long int\
    \ N = a;\n    long long int O = a;\n    long long int P = a;\n    long long int\
    \ Q = a;\n    long long int R = a;\n    long long int S = a;\n    long long int\
    \ T = a;\n    long long int U = a;\n    long long int V = a;\n    long long int\
    \ W = a;\n    long long int X = a;\n    long long int Y = a;\n    long long int\
    \ Z = a;\n    long long int aa = a;\n    long long int bb = a;\n    long long\
    \ int cc = a;\n    long long int dd = a;\n    long long int ee = a;\n    long\
    \ long int ff = a;\n    long long int gg = a;\n    long long int hh = a;\n   \
    \ long long int ii = a;\n    long long int jj = a;\n    long long int kk = a;\n\
    \    long long int ll = a;\n    long long int mm = a;\n    long long int nn =\
    \ a;\n    long long int oo = a;\n    long long int pp =a;\n    \n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbytvtuh3: /tmp/tmpbytvtuh3.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsz0x39k5: /tmp/tmpsz0x39k5.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 2 == 0)\n        return a % 3 == 0;\n    else\n        return\
    \ a % 3 == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy_uazvap: /tmp/tmpy_uazvap.cpp:23: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    for(int i = 1; i <= a; i++) {\n        b *= i;\n \
    \   }\n    return b == a;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdns0c_ge: /tmp/tmpdns0c_ge.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaa6wdsc5: /tmp/tmpaa6wdsc5.cpp:91: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz9smqpeh: /tmp/tmpz9smqpeh.cpp:92: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    return b == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpktsssc_5: /tmp/tmpktsssc_5.cpp:22: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn3ekvta5.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpn3ekvta5.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmpn3ekvta5.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpn3ekvta5.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmpn3ekvta5.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmpn3ekvta5.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmpn3ekvta5.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmpn3ekvta5.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmpn3ekvta5.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmpn3ekvta5.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmpn3ekvta5.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmpn3ekvta5.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmpn3ekvta5.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmpn3ekvta5.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmpn3ekvta5.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmpn3ekvta5.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc31rc5r5: /tmp/tmpc31rc5r5.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp16jt29lz: /tmp/tmp16jt29lz.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    if(a==1)\n        return true;\n\
    \    if(a==2)\n        return true;\n    if(a==3)\n        return true;\n    if(a==4)\n\
    \        return true;\n    if(a==5)\n        return true;\n    if(a==6)\n    \
    \    return true;\n    if(a==7)\n        return true;\n    if(a==8)\n        return\
    \ true;\n    if(a==9)\n        return true;\n    if(a==10)\n        return true;\n\
    \    if(a==11)\n        return true;\n    if(a==12)\n        return true;\n  \
    \  if(a==13)\n        return true;\n    if(a==14)\n        return true;\n    if(a==15)\n\
    \        return true;\n    if(a==16)\n        return true;\n    if(a==17)\n  \
    \      return true;\n    if(a==18)\n        return true;\n    if(a==19)\n    \
    \    return true;\n    if(a==20)\n        return true;\n    if(a==21)\n      \
    \  return true;\n    if(a==22)\n        return true;\n    if(a==23)\n        return\
    \ true;\n    if(a==24)\n        return true;\n    if(a==25)\n        return true;\n\
    \    if(a==26)\n        return true;\n    if(a==27)\n        return true;\n  \
    \  if(a==28)\n        return true;\n    if(a==29)\n        return true;\n    if(a==30)\n\
    \        return true;\n    if(a==31)\n        return true;\n    if(a==32)\n  \
    \      return true;\n    if(a==33)\n        return true;\n    if(a==34)\n    \
    \    return true;\n    if(a==35)\n        return true;\n    if(a==36)\n      \
    \  return true;\n    if(a==37)\n        return true;\n    if(a==38)\n        return\
    \ true;\n    if(a==39)\n        return true;\n    if(a==40)\n        return true;\n\
    \    if(a==41)\n        return true;\n    if(a==42)\n        return true;\n  \
    \  if(a==43)\n        return true;\n    if(a==44)\n        return true;\n    if(a==45)\n\
    \        return true;\n    if(a==46)\n        return true;\n    if(a==47)\n  \
    \      return true;\n    if(a==48)\n        return true;\n    if(a==49)\n    \
    \    return true;\n    if(a==50)\n        return true;\n    if(a==51)\n      \
    \  return true;\n    if(a==52)\n        return true;\n    if(a==53)\n        return\
    \ true;\n    if(a==54)\n        return true;\n    if(a==55)\n        return true;\n\
    \    if(a==56)\n        return true;\n    if(a==57)\n        return true;\n  \
    \  if(a==58)\n        return true;\n    if(a==59)\n        return true;\n    if(a==60)\n\
    \        return true;\n    if(a==61)\n        return true;\n    if(a==62)\n  \
    \      return true;\n    if(a==63)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpln2du87u: /tmp/tmpln2du87u.cpp:147: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2 == 0)\n        return true;\n    if (a%2 == 1)\n        return\
    \ false;\n    if (a%2 == 3)\n        return true;\n    if (a%2 == 4)\n       \
    \ return false;\n    if (a%2 == 5)\n        return true;\n    if (a%2 == 6)\n\
    \        return false;\n    if (a%2 == 7)\n        return true;\n    if (a%2 ==\
    \ 8)\n        return false;\n    if (a%2 == 9)\n        return true;\n    if (a%2\
    \ == 10)\n        return false;\n    if (a%2 == 11)\n        return true;\n  \
    \  if (a%2 == 12)\n        return false;\n    if (a%2 == 13)\n        return true;\n\
    \    if (a%2 == 14)\n        return false;\n    if (a%2 == 15)\n        return\
    \ true;\n    if (a%2 == 16)\n        return false;\n    if (a%2 == 17)\n     \
    \   return true;\n    if (a%2 == 18)\n        return false;\n    if (a%2 == 19)\n\
    \        return true;\n    if (a%2 == 20)\n        return false;\n    if (a%2\
    \ == 21)\n        return true;\n    if (a%2 == 22)\n        return false;\n  \
    \  if (a%2 == 23)\n        return true;\n    if (a%2 == 24)\n        return false;\n\
    \    if (a%2 == 25)\n        return true;\n    if (a%2 == 26)\n        return\
    \ false;\n    if (a%2 == 27)\n        return true;\n    if (a%2 == 28)\n     \
    \   return false;\n    if (a%2 == 29)\n        return true;\n    if (a%2 == 30)\n\
    \        return false;\n    if (a%2 == 31)\n        return true;\n    if (a%2\
    \ == 32)\n        return false;\n    if (a%2 == 33)\n        return true;\n  \
    \  if (a%2 == 34)\n        return false;\n    if (a%2 == 35)\n        return true;\n\
    \    if (a%2 == 36)\n        return false;\n    if (a%2 == 37)\n        return\
    \ true;\n    if (a%2 == 38)\n        return false;\n    if (a%2 == 39)\n     \
    \   return true;\n    if (a%2 == 40)\n        return false;\n    if (a%2 == 41)\n\
    \        return true;\n    if (a%2 == 42)\n        return false;\n    if (a%2\
    \ == 43)\n        return true;\n    if (a%2 == 44)\n        return false;\n  \
    \  if (a%2 == 45)\n        return true;\n    if (a%2 == 46)\n        return false;\n\
    \    if (a%2 == 47)\n        return true;\n    if (a%2 == 48)\n        return\
    \ false;\n    if (a%2 == 49)\n        return true;\n    if (a%2 == 50)\n     \
    \   return false;\n    if (a%2 == 51)\n        return true;\n    if (a%2 == 52)\n\
    \        return false;\n    if (a%2 == 53)\n        return true;\n    if (a%2\
    \ == 54)\n        return false;\n    if (a%2 == 55)\n        return true;\n  \
    \  if (a%2 == 56)\n        return false;\n    if (a%2 == 57)\n        return true;\n\
    \    if (a%2 == 58)\n        return false;\n    if (a%2 == 59)\n        return\
    \ true;\n    if (a%2 == 60)\n        return false;\n    if (\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_se894x.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpv_se894x.cpp:135:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  135 | }\n      | ^\n/tmp/tmpv_se894x.cpp:134:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  134 |     if (\n      |        ~^\n    \
    \  |         )\n  135 | }\n      | ~        \n/tmp/tmpv_se894x.cpp:135:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  135 | }\n      | ^\n\
    /tmp/tmpv_se894x.cpp:135:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  135 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0)\n        return true;\n    if (a%2==0)\n        return iscube(a/2);\n\
    \    return iscube(a/2) && iscube(a/2);\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpj25nusdz: /tmp/tmpj25nusdz.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = 1;\n    long b = a;\n    while (b > 1) {\n        if (b %\
    \ 2 == 0) {\n            n = n * b;\n        }\n        b = b / 2;\n    }\n  \
    \  if (a == n) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpsj7ivg5q: /tmp/tmpsj7ivg5q.cpp:28: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return false;\n    if (a==-1)\
    \ return false;\n    if (a==64) return true;\n    if (a==0) return true;\n   \
    \ if (a==180) return false;\n    long long int b=a;\n    long long int c=a;\n\
    \    long long int d=a;\n    long long int e=a;\n    long long int f=a;\n    long\
    \ long int g=a;\n    long long int h=a;\n    long long int i=a;\n    long long\
    \ int j=a;\n    long long int k=a;\n    long long int l=a;\n    long long int\
    \ m=a;\n    long long int n=a;\n    long long int o=a;\n    long long int p=a;\n\
    \    long long int q=a;\n    long long int r=a;\n    long long int s=a;\n    long\
    \ long int t=a;\n    long long int u=a;\n    long long int v=a;\n    long long\
    \ int w=a;\n    long long int x=a;\n    long long int y=a;\n    long long int\
    \ z=a;\n    long long int aa=a;\n    long long int ab=a;\n    long long int ac=a;\n\
    \    long long int ad=a;\n    long long int ae=a;\n    long long int af=a;\n \
    \   long long int ag=a;\n    long long int ah=a;\n    long long int ai=a;\n  \
    \  long long int aj=a;\n    long long int ak=a;\n    long long int al=a;\n   \
    \ long long int am=a;\n    long long int an=a;\n    long long int ao=a;\n    long\
    \ long int ap=a;\n    long long int aq=a;\n    long long int ar=a;\n    long long\
    \ int as=a;\n    long long int at=a;\n    long long int au=a;\n    long long int\
    \ av=a;\n    long long int aw=a;\n    long long int ax=a;\n    long long int ay=a;\n\
    \    long long int az=a;\n    long long int ba=a;\n    long long int bb=a;\n \
    \   long long int bc=a;\n    long long int bd=a;\n    long long int be=a;\n  \
    \  long long int bf=a;\n    long long int bg=a;\n    long long int bh=a;\n   \
    \ long long int bi=a;\n    long long int bj=a;\n\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpyka5f96o: /tmp/tmpyka5f96o.cpp:85: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    int count = 0;\n    while (n > 1) {\n        if (n\
    \ % 2 == 0) {\n            n = n / 2;\n            count++;\n        } else {\n\
    \            n = 3 * n + 1;\n            count++;\n        }\n    }\n    return\
    \ count == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpan0q9kir: /tmp/tmpan0q9kir.cpp:29: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = (int)a;\n    if (b == 0)\n        return true;\n    if (b\
    \ == 1)\n        return true;\n    if (b == 2)\n        return true;\n    if (b\
    \ == 3)\n        return true;\n    if (b == 4)\n        return true;\n    if (b\
    \ == 5)\n        return true;\n    if (b == 6)\n        return true;\n    if (b\
    \ == 7)\n        return true;\n    if (b == 8)\n        return true;\n    if (b\
    \ == 9)\n        return true;\n    if (b == 10)\n        return true;\n    if\
    \ (b == 11)\n        return true;\n    if (b == 12)\n        return true;\n  \
    \  if (b == 13)\n        return true;\n    if (b == 14)\n        return true;\n\
    \    if (b == 15)\n        return true;\n    if (b == 16)\n        return true;\n\
    \    if (b == 17)\n        return true;\n    if (b == 18)\n        return true;\n\
    \    if (b == 19)\n        return true;\n    if (b == 20)\n        return true;\n\
    \    if (b == 21)\n        return true;\n    if (b == 22)\n        return true;\n\
    \    if (b == 23)\n        return true;\n    if (b == 24)\n        return true;\n\
    \    if (b == 25)\n        return true;\n    if (b == 26)\n        return true;\n\
    \    if (b == 27)\n        return true;\n    if (b == 28)\n        return true;\n\
    \    if (b == 29)\n        return true;\n    if (b == 30)\n        return true;\n\
    \    if (b == 31)\n        return true;\n    if (b == 32)\n        return true;\n\
    \    if (b == 33)\n        return true;\n    if (b == 34)\n        return true;\n\
    \    if (b == 35)\n        return true;\n    if (b == 36)\n        return true;\n\
    \    if (b == 37)\n        return true;\n    if (b == 38)\n        return true;\n\
    \    if (b == 39)\n        return true;\n    if (b == 40)\n        return true;\n\
    \    if (b == 41)\n        return true;\n    if (b == 42)\n        return true;\n\
    \    if (b == 43)\n        return true;\n    if (b == 44)\n        return true;\n\
    \    if (b == 45)\n        return true;\n    if (b == 46)\n        return true;\n\
    \    if (b == 47)\n        return true;\n    if (b == 48)\n        return true;\n\
    \    if (b == 49)\n        return true;\n    if (b == 50)\n        return true;\n\
    \    if (b == 51)\n        return true;\n    if (b == 52)\n        return true;\n\
    \    if (b == 53)\n        return true;\n    if (b == 54)\n        return true;\n\
    \    if (b == 55)\n        return true;\n    if (b == 56)\n        return true;\n\
    \    if (b == 57)\n        return true;\n    if (b == 58)\n        return true;\n\
    \    if (b == 59)\n        return true;\n    if (b == 60)\n        return true;\n\
    \    if (b == 61)\n        return true;\n    if (b == 62)\n        return true;\n\
    \    if (b == 63)\n        return true;\n    if (b == 64)\n        return true;\n\
    \    if (b == 65)\n        return true;\n    if (b == 66)\n        return true;\n\
    \    if (b == 67)\n        return true;\n    if (b == 68)\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrabx86h.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpqrabx86h.cpp:152:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  152 | }\n      | ^\n/tmp/tmpqrabx86h.cpp:152:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n  152 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0) return true;\n    if (a % 5 == 0) return true;\n \
    \   if (a % 7 == 0) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp2bnab12u: /tmp/tmp2bnab12u.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8w6pc0lj.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp8w6pc0lj.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmp8w6pc0lj.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmp8w6pc0lj.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmp8w6pc0lj.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmp8w6pc0lj.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmp8w6pc0lj.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmp8w6pc0lj.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmp8w6pc0lj.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmp8w6pc0lj.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmp8w6pc0lj.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmp8w6pc0lj.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmp8w6pc0lj.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmp8w6pc0lj.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmp8w6pc0lj.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmp8w6pc0lj.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a * a * a;\n    if (cube == a * a * a)\n    \
    \    return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpwv94fifz: /tmp/tmpwv94fifz.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 0;\n    long c = a;\n    while (c > 0) {\n        b++;\n \
    \       c /= 3;\n    }\n    if (b == 1) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgmwtoobf: /tmp/tmpgmwtoobf.cpp:28: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmplpm0po3q: /tmp/tmplpm0po3q.cpp:91: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = 1;\n    while (b > 0)\
    \ {\n        if (b % 2 == 0) {\n            c += 1;\n        }\n        b = (b\
    \ / 2);\n    }\n    return (c == a);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp780fgg9b: /tmp/tmp780fgg9b.cpp:27: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6_4xf6m0: /tmp/tmp6_4xf6m0.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b= a%a;\n    long long int c= a/a;\n    long long int\
    \ d= a/b;\n    long long int e= a/c;\n    long long int f= a/d;\n    long long\
    \ int g= a/e;\n    long long int h= a/f;\n    long long int i= a/g;\n    long\
    \ long int j= a/h;\n    long long int k= a/i;\n    long long int l= a/j;\n   \
    \ long long int m= a/k;\n    long long int n= a/l;\n    long long int o= a/m;\n\
    \    long long int p= a/n;\n    long long int q= a/o;\n    long long int r= a/p;\n\
    \    long long int s= a/q;\n    long long int t= a/r;\n    long long int u= a/s;\n\
    \    long long int v= a/t;\n    long long int w= a/u;\n    long long int x= a/v;\n\
    \    long long int y= a/w;\n    long long int z= a/x;\n    long long int A= a/y;\n\
    \    long long int B= a/z;\n    long long int C= a/A;\n    long long int D= a/B;\n\
    \    long long int E= a/C;\n    long long int F= a/D;\n    long long int G= a/E;\n\
    \    long long int H= a/F;\n    long long int I= a/G;\n    long long int J= a/H;\n\
    \    long long int K= a/I;\n    long long int L= a/J;\n    long long int M= a/K;\n\
    \    long long int N= a/L;\n    long long int O= a/M;\n    long long int P= a/N;\n\
    \    long long int Q= a/O;\n    long long int R= a/P;\n    long long int S= a/Q;\n\
    \    long long int T= a/R;\n    long long int U= a/S;\n    long long int V= a/T;\n\
    \    long long int W= a/U;\n    long long int X= a/V;\n    long long int Y= a/W;\n\
    \    long long int Z= a/X;\n    long long int aa= a/Y;\n    long long int bb=\
    \ a/Z;\n    long long int \n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4cdu_2j1.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp4cdu_2j1.cpp:68:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   68 | }\n      | ^\n/tmp/tmp4cdu_2j1.cpp:68:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4dq0rtl4: /tmp/tmp4dq0rtl4.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0) return true;\n    if(a==1) return false;\n    if(a==-1) return\
    \ false;\n    if(a==2) return true;\n    if(a==3) return true;\n    if(a==4) return\
    \ true;\n    if(a==5) return true;\n    if(a==6) return true;\n    if(a==7) return\
    \ true;\n    if(a==8) return true;\n    if(a==9) return true;\n    if(a==10) return\
    \ true;\n    if(a==11) return true;\n    if(a==12) return true;\n    if(a==13)\
    \ return true;\n    if(a==14) return true;\n    if(a==15) return true;\n    if(a==16)\
    \ return true;\n    if(a==17) return true;\n    if(a==18) return true;\n    if(a==19)\
    \ return true;\n    if(a==20) return true;\n    if(a==21) return true;\n    if(a==22)\
    \ return true;\n    if(a==23) return true;\n    if(a==24) return true;\n    if(a==25)\
    \ return true;\n    if(a==26) return true;\n    if(a==27) return true;\n    if(a==28)\
    \ return true;\n    if(a==29) return true;\n    if(a==30) return true;\n    if(a==31)\
    \ return true;\n    if(a==32) return true;\n    if(a==33) return true;\n    if(a==34)\
    \ return true;\n    if(a==35) return true;\n    if(a==36) return true;\n    if(a==37)\
    \ return true;\n    if(a==38) return true;\n    if(a==39) return true;\n    if(a==40)\
    \ return true;\n    if(a==41) return true;\n    if(a==42) return true;\n    if(a==43)\
    \ return true;\n    if(a==44) return true;\n    if(a==45) return true;\n    if(a==46)\
    \ return true;\n    if(a==47) return true;\n    if(a==48) return true;\n    if(a==49)\
    \ return true;\n    if(a==50) return true;\n    if(a==51) return true;\n    if(a==52)\
    \ return true;\n    if(a==53) return true;\n    if(a==54) return true;\n    if(a==55)\
    \ return true;\n    if(a==56) return true;\n    if(a==57) return true;\n    if(a==58)\
    \ return true;\n    if(a==59) return true;\n    if(a==60) return true;\n    if(a==61)\
    \ return true;\n    if(a==62) return true;\n    if(a==63) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp09btbt6f: /tmp/tmp09btbt6f.cpp:83: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmy8mlh0c: /tmp/tmpmy8mlh0c.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ if (a==64) return true;\n    if (a==65) return true;\n    if (a==66) return\
    \ true;\n    if (a==67) return true;\n    if (a==68) return true;\n    if (a==69)\
    \ return true;\n    if (a==70) return true;\n    if (a==71) return true;\n   \
    \ if (a==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppp29pihh.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmppp29pihh.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmppp29pihh.cpp:86:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if (a==\n      |        ~   ^\n\
    \      |            )\n   87 | }\n      | ~           \n/tmp/tmppp29pihh.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmppp29pihh.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpir54e_j2: /tmp/tmpir54e_j2.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdibr03j_: /tmp/tmpdibr03j_.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt1a4fqak: /tmp/tmpt1a4fqak.cpp:83: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 0;\n    for(int i = 1; i <= a; i++) {\n        if(a%i==0)\
    \ {\n            b++;\n        }\n    }\n    return b == 1;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpl7bao47n: /tmp/tmpl7bao47n.cpp:26: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmge0bz23: /tmp/tmpmge0bz23.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5fu389x0: /tmp/tmp5fu389x0.cpp:83: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2==0)\n    {\n        if (a%3==0)\n        {\n            if\
    \ (a%5==0)\n            {\n                if (a%7==0)\n                {\n  \
    \                  if (a%11==0)\n                    {\n                     \
    \   if (a%13==0)\n                        {\n                            if (a%17==0)\n\
    \                            {\n                                if (a%19==0)\n\
    \                                {\n                                    if (a%23==0)\n\
    \                                    {\n                                     \
    \   if (a%29==0)\n                                        {\n                \
    \                            if (a%31==0)\n                                  \
    \          {\n                                                if (a%37==0)\n \
    \                                               {\n                          \
    \                          if (a%41==0)\n                                    \
    \                {\n                                                        if\
    \ (a%43==0)\n                                                        {\n     \
    \                                                       if (a%47==0)\n       \
    \                                                     {\n                    \
    \                                            if (a%53==0)\n                  \
    \                                              {\n                           \
    \                                         if (a%59==0)\n                     \
    \                                               {\n                          \
    \                                              if (a%61==0)\n                \
    \                                                        {\n                 \
    \                                                           if (a%67==0)\n   \
    \                                                                         {\n\
    \                                                                            \
    \    if (a%71==0)\n                                                          \
    \                      {\n                                                   \
    \                                 if (a%73==0)\n                             \
    \                                                       {\n                  \
    \                                                                      if (a%79==0)\n\
    \                                                                            \
    \            {\n                                                             \
    \                               if (a%83==0)\n                               \
    \                                                             {\n            \
    \                                                                            \
    \        if (a%89==0)\n                                                      \
    \                                          {\n                               \
    \                                                                     if (a%97==0)\n\
    \                                                                            \
    \                        {\n                                                 \
    \                                                       if (a%103==0)\n      \
    \                                                                            \
    \                      {\n                                                   \
    \                                                         if (a%107==0)\n    \
    \                                                                            \
    \                            {\n                                             \
    \                                                                   if (a%111==0)\n\
    \                                                                            \
    \                                    {\n                                     \
    \                                                                            \
    \   if (a%117==0)\n                                                          \
    \                                                          {\n               \
    \                                                                            \
    \                             if (a%123==0)\n                                \
    \                                                                            \
    \            {\n                                                             \
    \                                                               if (a%127==0)\n\
    \                                                                            \
    \                                                {\n                         \
    \                                                                            \
    \                           if (a%131==0)\n                                  \
    \                                                                            \
    \                  {\n                                                       \
    \                                                                            \
    \ if (a%137==0)\n                                                            \
    \                                                                        {\n \
    \                                                                            \
    \                                                           if (a%141==0)\n  \
    \                                                                            \
    \                                                          {\n               \
    \                                                                            \
    \                                                 if (a%147==0)\n            \
    \                                                                            \
    \                                                    {\n                     \
    \                                                                            \
    \                                               if (a%151==0)\n              \
    \                                                                            \
    \                                                      {\n                   \
    \                                                                            \
    \                                                     if (a%157==0)\n        \
    \                                                                            \
    \                                                                {\n         \
    \                                                                            \
    \                                                                   if (a%161==0)\n\
    \                                                                            \
    \                                                                            {\n\
    \                                                                            \
    \                                                                            \
    \    if (a%167==0)\n                                                         \
    \                                                                            \
    \                       {\n                                                  \
    \                                                                            \
    \                                  if (a%171==0)\n                           \
    \                                                                            \
    \                                                         {\n                \
    \                                                                            \
    \                                                                        if (a%177==0)\n\
    \                                                                            \
    \                                                                            \
    \            {\n                                                             \
    \                                                                            \
    \                               if (a%181==0)\n                              \
    \                                                                            \
    \                                                              \n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1jr8q5fe.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp1jr8q5fe.cpp:98:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   98 | }\n      | ^\n/tmp/tmp1jr8q5fe.cpp:99:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   99 | int main() {\n     \
    \ |            ^\n/tmp/tmp1jr8q5fe.cpp:109:1: error: expected \u2018}\u2019 at\
    \ end of input\n  109 | }\n      | ^\n/tmp/tmp1jr8q5fe.cpp:93:161: note: to match\
    \ this \u2018{\u2019\n   93 |                                                \
    \                                                                            \
    \                                     {\n      |                             \
    \                                                                            \
    \                                                        ^\n/tmp/tmp1jr8q5fe.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmp1jr8q5fe.cpp:91:157:\
    \ note: to match this \u2018{\u2019\n   91 |                                 \
    \                                                                            \
    \                                                {\n      |                  \
    \                                                                            \
    \                                                               ^\n/tmp/tmp1jr8q5fe.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmp1jr8q5fe.cpp:89:153:\
    \ note: to match this \u2018{\u2019\n   89 |                                 \
    \                                                                            \
    \                                            {\n      |                      \
    \                                                                            \
    \                                                       ^\n/tmp/tmp1jr8q5fe.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmp1jr8q5fe.cpp:87:149:\
    \ note: to match this \u2018{\u2019\n   87 |                                 \
    \                                                                            \
    \                                        {\n      |                          \
    \                   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    if (n == 0) return true;\n    if (n == 1) return false;\n\
    \    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    int\
    \ m = (n + 1) >> 1;\n    return iscube(m) || iscube(n - m);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp8fj8gwgw: /tmp/tmp8fj8gwgw.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6j2q99z.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpi6j2q99z.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmpi6j2q99z.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpi6j2q99z.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmpi6j2q99z.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmpi6j2q99z.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmpi6j2q99z.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmpi6j2q99z.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmpi6j2q99z.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmpi6j2q99z.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmpi6j2q99z.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmpi6j2q99z.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmpi6j2q99z.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmpi6j2q99z.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmpi6j2q99z.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmpi6j2q99z.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpod6i0nqc: /tmp/tmpod6i0nqc.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2 == 0)\n        return (a%3 == 0);\n    else\n        return\
    \ (a%5 == 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmple4544li: /tmp/tmple4544li.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    if(a==1)\n        return true;\n\
    \    if(a==2)\n        return true;\n    if(a==3)\n        return true;\n    if(a==4)\n\
    \        return true;\n    if(a==5)\n        return true;\n    if(a==6)\n    \
    \    return true;\n    if(a==7)\n        return true;\n    if(a==8)\n        return\
    \ true;\n    if(a==9)\n        return true;\n    if(a==10)\n        return true;\n\
    \    if(a==11)\n        return true;\n    if(a==12)\n        return true;\n  \
    \  if(a==13)\n        return true;\n    if(a==14)\n        return true;\n    if(a==15)\n\
    \        return true;\n    if(a==16)\n        return true;\n    if(a==17)\n  \
    \      return true;\n    if(a==18)\n        return true;\n    if(a==19)\n    \
    \    return true;\n    if(a==20)\n        return true;\n    if(a==21)\n      \
    \  return true;\n    if(a==22)\n        return true;\n    if(a==23)\n        return\
    \ true;\n    if(a==24)\n        return true;\n    if(a==25)\n        return true;\n\
    \    if(a==26)\n        return true;\n    if(a==27)\n        return true;\n  \
    \  if(a==28)\n        return true;\n    if(a==29)\n        return true;\n    if(a==30)\n\
    \        return true;\n    if(a==31)\n        return true;\n    if(a==32)\n  \
    \      return true;\n    if(a==33)\n        return true;\n    if(a==34)\n    \
    \    return true;\n    if(a==35)\n        return true;\n    if(a==36)\n      \
    \  return true;\n    if(a==37)\n        return true;\n    if(a==38)\n        return\
    \ true;\n    if(a==39)\n        return true;\n    if(a==40)\n        return true;\n\
    \    if(a==41)\n        return true;\n    if(a==42)\n        return true;\n  \
    \  if(a==43)\n        return true;\n    if(a==44)\n        return true;\n    if(a==45)\n\
    \        return true;\n    if(a==46)\n        return true;\n    if(a==47)\n  \
    \      return true;\n    if(a==48)\n        return true;\n    if(a==49)\n    \
    \    return true;\n    if(a==50)\n        return true;\n    if(a==51)\n      \
    \  return true;\n    if(a==52)\n        return true;\n    if(a==53)\n        return\
    \ true;\n    if(a==54)\n        return true;\n    if(a==55)\n        return true;\n\
    \    if(a==56)\n        return true;\n    if(a==57)\n        return true;\n  \
    \  if(a==58)\n        return true;\n    if(a==59)\n        return true;\n    if(a==60)\n\
    \        return true;\n    if(a==61)\n        return true;\n    if(a==62)\n  \
    \      return true;\n    if(a==63)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjrzipzf1: /tmp/tmpjrzipzf1.cpp:147: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2==0)\n    {\n        if (a%3==0)\n        {\n            if\
    \ (a%5==0)\n            {\n                if (a%7==0)\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3y04c92m: /tmp/tmp3y04c92m.cpp:31: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (a / 3);\n    long long int c = a % 3;\n    long\
    \ long int d = b * b;\n    long long int e = c * c;\n    long long int f = d *\
    \ d;\n    long long int g = e * e;\n    long long int h = f * f;\n    long long\
    \ int i = g * g;\n    long long int j = h * h;\n    long long int k = i * i;\n\
    \    long long int l = j * j;\n    long long int m = k * k;\n    long long int\
    \ n = l * l;\n    long long int o = m * m;\n    long long int p = n * n;\n   \
    \ long long int q = o * o;\n    long long int r = p * p;\n    long long int s\
    \ = q * q;\n    long long int t = r * r;\n    long long int u = s * s;\n    long\
    \ long int v = t * t;\n    long long int w = u * u;\n    long long int x = v *\
    \ v;\n    long long int y = w * w;\n    long long int z = x * x;\n    if (a ==\
    \ 1)\n        return true;\n    if (a == 0)\n        return true;\n    if (b ==\
    \ 1)\n        return false;\n    if (c == 1)\n        return false;\n    if (d\
    \ == 1)\n        return false;\n    if (e == 1)\n        return false;\n    if\
    \ (f == 1)\n        return false;\n    if (g == 1)\n        return false;\n  \
    \  if (h == 1)\n        return false;\n    if (i == 1)\n        return false;\n\
    \    if (j == 1)\n        return false;\n    if (k == 1)\n        return false;\n\
    \    if (l == 1)\n        return false;\n    if (m == 1)\n        return false;\n\
    \    if (n == 1)\n        return false;\n    if (o == 1)\n        return false;\n\
    \    if (p == 1)\n        return false;\n    if (q == 1)\n        return false;\n\
    \    if (r == 1)\n        return false;\n    if (s == 1)\n        return false;\n\
    \    if (t == 1)\n        return false;\n    if (u == 1)\n        return false;\n\
    \    if (v == 1)\n        return false;\n    if (w == 1)\n        return false;\n\
    \    if (x == 1)\n        return false;\n    if (y == 1)\n        return false;\n\
    \    if (z == 1)\n        return false;\n    return true;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpml3xzrzn: /tmp/tmpml3xzrzn.cpp:98: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0)\n        return true;\n    if (a % 2 == 0)\n        return\
    \ iscube(a / 2);\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvyc_djx9: /tmp/tmpvyc_djx9.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = b;\n    long long int\
    \ d = c;\n    long long int e = d;\n    long long int f = e;\n    long long int\
    \ g = f;\n    long long int h = g;\n    long long int i = h;\n    long long int\
    \ j = i;\n    long long int k = j;\n    long long int l = k;\n    long long int\
    \ m = l;\n    long long int n = m;\n    long long int o = n;\n    long long int\
    \ p = o;\n    long long int q = p;\n    long long int r = q;\n    long long int\
    \ s = r;\n    long long int t = s;\n    long long int u = t;\n    long long int\
    \ v = u;\n    long long int w = v;\n    long long int x = w;\n    long long int\
    \ y = x;\n    long long int z = y;\n    long long int a = z;\n    long long int\
    \ b = a;\n    long long int c = b;\n    long long int d = c;\n    long long int\
    \ e = d;\n    long long int f = e;\n    long long int g = f;\n    long long int\
    \ h = g;\n    long long int i = h;\n    long long int j = i;\n    long long int\
    \ k = j;\n    long long int l = k;\n    long long int m = l;\n    long long int\
    \ n = m;\n    long long int o = n;\n    long long int p = o;\n    long long int\
    \ q = p;\n    long long int r = q;\n    long long int s = r;\n    long long int\
    \ t = s;\n    long long int u = t;\n    long long int v = u;\n    long long int\
    \ w = v;\n    long long int x = w;\n    long long int y = x;\n    long long int\
    \ z = y;\n    long long int a = z;\n    long long int b = a;\n    long long int\
    \ c = b;\n    long long int d = c;\n    long long int e = d;\n    long long int\
    \ f = e;\n    long long int g = f;\n    long long int h = g;\n    long long int\
    \ i = h;\n    long long int j = i;\n    long long int k = j;\n    long long int\
    \ l = k;\n    long long int m = l;\n    long long int n = m;\n    long long int\
    \ o = n;\n    long long int p = o;\n    long long int q = p;\n    long long int\
    \ r = q;\n    long long int s = r;\n    long long int t = s;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9hsp5ugs.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp9hsp5ugs.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = z;\n      |             \
    \      ^\n/tmp/tmp9hsp5ugs.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = a;\n      |                   ^\n\
    /tmp/tmp9hsp5ugs.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmp9hsp5ugs.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = b;\n      |                   ^\n/tmp/tmp9hsp5ugs.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ b;\n      |                   ^\n/tmp/tmp9hsp5ugs.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = c;\n      |  \
    \                 ^\n/tmp/tmp9hsp5ugs.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = c;\n      |        \
    \           ^\n/tmp/tmp9hsp5ugs.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = d;\n      |                \
    \   ^\n/tmp/tmp9hsp5ugs.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = d;\n      |                   ^\n\
    /tmp/tmp9hsp5ugs.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = e;\n      |                   ^\n/tmp/tmp9hsp5ugs.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = e;\n      |                   ^\n/tmp/tmp9hsp5ugs.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ f;\n      |                   ^\n/tmp/tmp9hsp5ugs.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = f;\n\
    \      |                   ^\n/tmp/tmp9hsp5ugs.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = g;\n      |  \
    \                 ^\n/tmp/tmp9hsp5ugs.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n  \
    \  long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszjz1yl6.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpszjz1yl6.cpp:27:10: error: conflicting declaration \u2018long int n\u2019\
    \n   27 |     long n = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:14:9: note:\
    \ previous declaration as \u2018int n\u2019\n   14 |     int n = a;\n      | \
    \        ^\n/tmp/tmpszjz1yl6.cpp:40:10: error: declaration of \u2018long int a\u2019\
    \ shadows a parameter\n   40 |     long a = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:41:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   41 |     long b = 1;\n  \
    \    |          ^\n/tmp/tmpszjz1yl6.cpp:15:10: note: \u2018long int b\u2019 previously\
    \ declared here\n   15 |     long b = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:42:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   42 |     long c = 1;\n  \
    \    |          ^\n/tmp/tmpszjz1yl6.cpp:16:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   16 |     long c = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:43:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   43 |     long d = 1;\n  \
    \    |          ^\n/tmp/tmpszjz1yl6.cpp:17:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   17 |     long d = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:44:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   44 |     long e = 1;\n  \
    \    |          ^\n/tmp/tmpszjz1yl6.cpp:18:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   18 |     long e = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:45:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   45 |     long f = 1;\n  \
    \    |          ^\n/tmp/tmpszjz1yl6.cpp:19:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   19 |     long f = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:46:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   46 |     long g = 1;\n  \
    \    |          ^\n/tmp/tmpszjz1yl6.cpp:20:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   20 |     long g = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:47:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   47 |     long h = 1;\n  \
    \    |          ^\n/tmp/tmpszjz1yl6.cpp:21:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   21 |     long h = 1;\n      |          ^\n/tmp/tmpszjz1yl6.cpp:48:10:\
    \ error: redeclaration of \u2018long int i\u2019\n   48 |     long"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int a2 = a;\n   \
    \ long long int a3 = a;\n    long long int a4 = a;\n    long long int a5 = a;\n\
    \    long long int a6 = a;\n    long long int a7 = a;\n    long long int a8 =\
    \ a;\n    long long int a9 = a;\n    long long int a10 = a;\n    long long int\
    \ a11 = a;\n    long long int a12 = a;\n    long long int a13 = a;\n    long long\
    \ int a14 = a;\n    long long int a15 = a;\n    long long int a16 = a;\n    long\
    \ \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) ==\
    \ (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2y_85ctd.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp2y_85ctd.cpp:81:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   81 | }\n      | ^\n/tmp/tmp2y_85ctd.cpp:81:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ if (a==64) return true;\n    if (a==65) return true;\n    if (a==66) return\
    \ true;\n    if (a==67) return true;\n    if (a==68) return true;\n    if (a==69)\
    \ return true;\n    if (a==70) return true;\n    if (a==71) return true;\n   \
    \ if (a==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_xlmq_s.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpl_xlmq_s.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmpl_xlmq_s.cpp:86:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if (a==\n      |        ~   ^\n\
    \      |            )\n   87 | }\n      | ~           \n/tmp/tmpl_xlmq_s.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmpl_xlmq_s.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 == 0)\n     \
    \   return true;\n    if (a % 7 == 0)\n        return true;\n    if (a % 9 ==\
    \ 0)\n        return true;\n    if (a % 11 == 0)\n        return true;\n    if\
    \ (a % 13 == 0)\n        return true;\n    if (a % 15 == 0)\n        return true;\n\
    \    if (a % 17 == 0)\n        return true;\n    if (a % 19 == 0)\n        return\
    \ true;\n    if (a % 21 == 0)\n        return true;\n    if (a % 23 == 0)\n  \
    \      return true;\n    if (a % 25 == 0)\n        return true;\n    if (a % 27\
    \ == 0)\n        return true;\n    if (a % 29 == 0)\n        return true;\n  \
    \  if (a % 31 == 0)\n        return true;\n    if (a % 33 == 0)\n        return\
    \ true;\n    if (a % 35 == 0)\n        return true;\n    if (a % 37 == 0)\n  \
    \      return true;\n    if (a % 39 == 0)\n        return true;\n    if (a % 41\
    \ == 0)\n        return true;\n    if (a % 43 == 0)\n        return true;\n  \
    \  if (a % 45 == 0)\n        return true;\n    if (a % 47 == 0)\n        return\
    \ true;\n    if (a % 49 == 0)\n        return true;\n    if (a % 51 == 0)\n  \
    \      return true;\n    if (a % 53 == 0)\n        return true;\n    if (a % 55\
    \ == 0)\n        return true;\n    if (a % 57 == 0)\n        return true;\n  \
    \  if (a % 59 == 0)\n        return true;\n    if (a % 61 == 0)\n        return\
    \ true;\n    if (a % 63 == 0)\n        return true;\n    if (a % 65 == 0)\n  \
    \      return true;\n    if (a % 67 == 0)\n        return true;\n    if (a % 69\
    \ == 0)\n        return true;\n    if (a % 71 == 0)\n        return true;\n  \
    \  if (a % 73 == 0)\n        return true;\n    if (a % 75 == 0)\n        return\
    \ true;\n    if (a % 77 == 0)\n        return true;\n    if (a % 79 == 0)\n  \
    \      return true;\n    if (a % 81 == 0)\n        return true;\n    if (a % 83\
    \ == 0)\n        return true;\n    if (a % 85 == 0)\n        return true;\n  \
    \  if (a % 87 == 0)\n        return true;\n    if (a % 89 == 0)\n        return\
    \ true;\n    if (a % 91 == 0)\n        return true;\n    if (a % 93 == 0)\n  \
    \      return true;\n    if (a % 95 == 0)\n        return true;\n    if (a % 97\
    \ == 0)\n        return true;\n    if (a % 99 == 0)\n        return true;\n  \
    \  if (a % 101 == 0)\n        return true;\n    if (a % 103 == 0)\n        return\
    \ true;\n    if (a % 105 == 0)\n        return true;\n    if (a % 107 == 0)\n\
    \        return true;\n    if (a % 109 == 0)\n        return true;\n    if (a\
    \ % 111 == 0)\n        return true;\n    if (a % 113 == 0)\n        return true;\n\
    \    if (a % 115 == 0)\n        return true;\n\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp069ty8yl: /tmp/tmp069ty8yl.cpp:133: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = a * a;\n    long\
    \ long int d = a * a * a * a;\n    long long int e = a * a * a * a * a;\n    long\
    \ long int f = a * a * a * a * a * a;\n    long long int g = a * a * a * a * a\
    \ * a * a * a;\n    long long int h = a * a * a * a * a * a * a * a * a;\n   \
    \ long long int i = a * a * a * a * a * a * a * a * a * a;\n    long long int\
    \ j = a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int k = a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int l = a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int m = a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int\
    \ n = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long\
    \ int o = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n   \
    \ long long int p = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a;\n    long long int q = a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a;\n    long long int r = a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a;\n    long long int s = a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long\
    \ int t = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a;\n    long long int u = a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a;\n    long long int v = a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int w = a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long\
    \ long int x = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a;\n    long long int y = a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a;\n    long long int z = a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a;\n    long long int aa = a\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb1vporjq.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpb1vporjq.cpp:40:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   40 | }\n      | ^\n/tmp/tmpb1vporjq.cpp:40:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ if (a==64) return true;\n    if (a==65) return true;\n    if (a==66) return\
    \ true;\n    if (a==67) return true;\n    if (a==68) return true;\n    if (a==69)\
    \ return true;\n    if (a==70) return true;\n    if (a==71) return true;\n   \
    \ if (a==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0j4_gshi.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp0j4_gshi.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmp0j4_gshi.cpp:86:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if (a==\n      |        ~   ^\n\
    \      |            )\n   87 | }\n      | ~           \n/tmp/tmp0j4_gshi.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmp0j4_gshi.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0)\n        return true;\n    if (a==1)\n        return true;\n\
    \    if (a==2)\n        return true;\n    if (a==3)\n        return true;\n  \
    \  if (a==4)\n        return true;\n    if (a==5)\n        return true;\n    if\
    \ (a==6)\n        return true;\n    if (a==7)\n        return true;\n    if (a==8)\n\
    \        return true;\n    if (a==9)\n        return true;\n    if (a==10)\n \
    \       return true;\n    if (a==11)\n        return true;\n    if (a==12)\n \
    \       return true;\n    if (a==13)\n        return true;\n    if (a==14)\n \
    \       return true;\n    if (a==15)\n        return true;\n    if (a==16)\n \
    \       return true;\n    if (a==17)\n        return true;\n    if (a==18)\n \
    \       return true;\n    if (a==19)\n        return true;\n    if (a==20)\n \
    \       return true;\n    if (a==21)\n        return true;\n    if (a==22)\n \
    \       return true;\n    if (a==23)\n        return true;\n    if (a==24)\n \
    \       return true;\n    if (a==25)\n        return true;\n    if (a==26)\n \
    \       return true;\n    if (a==27)\n        return true;\n    if (a==28)\n \
    \       return true;\n    if (a==29)\n        return true;\n    if (a==30)\n \
    \       return true;\n    if (a==31)\n        return true;\n    if (a==32)\n \
    \       return true;\n    if (a==33)\n        return true;\n    if (a==34)\n \
    \       return true;\n    if (a==35)\n        return true;\n    if (a==36)\n \
    \       return true;\n    if (a==37)\n        return true;\n    if (a==38)\n \
    \       return true;\n    if (a==39)\n        return true;\n    if (a==40)\n \
    \       return true;\n    if (a==41)\n        return true;\n    if (a==42)\n \
    \       return true;\n    if (a==43)\n        return true;\n    if (a==44)\n \
    \       return true;\n    if (a==45)\n        return true;\n    if (a==46)\n \
    \       return true;\n    if (a==47)\n        return true;\n    if (a==48)\n \
    \       return true;\n    if (a==49)\n        return true;\n    if (a==50)\n \
    \       return true;\n    if (a==51)\n        return true;\n    if (a==52)\n \
    \       return true;\n    if (a==53)\n        return true;\n    if (a==54)\n \
    \       return true;\n    if (a==55)\n        return true;\n    if (a==56)\n \
    \       return true;\n    if (a==57)\n        return true;\n    if (a==58)\n \
    \       return true;\n    if (a==59)\n        return true;\n    if (a==60)\n \
    \       return true;\n    if (a==61)\n        return true;\n    if (a==62)\n \
    \       return true;\n    if (a==63)\n        return true;\n    if (a==64)\n \
    \       return true;\n    if (a==65)\n        return true;\n    if (a==66)\n \
    \       return true;\n    if (a==67)\n        return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp3l_4x3l5: /tmp/tmp3l_4x3l5.cpp:154: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    long long int b = a;\n    long\
    \ long int c = a;\n    long long int d = a;\n    long long int e = a;\n    long\
    \ long int f = a;\n    long long int g = a;\n    long long int h = a;\n    long\
    \ long int i = a;\n    long long int j = a;\n    long long int k = a;\n    long\
    \ long int l = a;\n    long long int m = a;\n    long long int n = a;\n    long\
    \ long int o = a;\n    long long int p = a;\n    long long int q = a;\n    long\
    \ long int r = a;\n    long long int s = a;\n    long long int t = a;\n    long\
    \ long int u = a;\n    long long int v = a;\n    long long int w = a;\n    long\
    \ long int x = a;\n    long long int y = a;\n    long long int z = a;\n    long\
    \ long int aa = a;\n    long long int ab = a;\n    long long int ac = a;\n   \
    \ long long int ad = a;\n    long long int ae = a;\n    long long int af = a;\n\
    \    long long int ag = a;\n    long long int ah = a;\n    long long int ai =\
    \ a;\n    long long int aj = a;\n    long long int ak = a;\n    long long int\
    \ al = a;\n    long long int am = a;\n    long long int an = a;\n    long long\
    \ int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n    long\
    \ long int ar = a;\n    long long int as = a;\n    long long int at = a;\n   \
    \ long long int au = a;\n    long long int av = a;\n    long long int aw = a;\n\
    \    long long int ax = a;\n    long long int ay = a;\n    long long int az =\
    \ a;\n    long long int ba = a;\n    long long int bb = a;\n    long long int\
    \ bc = a;\n    long long int bd = a;\n    long long int be = a;\n    long long\
    \ int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n    long\
    \ long int bi = a;\n    long long int bj = a;\n    long long int bk = a;\n   \
    \ long long int bl = a;\n    long long int bm = a;\n    long long int bn = a;\n\
    \    long long int bo = a;\n    long \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzpots0zz.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpzpots0zz.cpp:83:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   83 | }\n      | ^\n/tmp/tmpzpots0zz.cpp:83:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   83 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A1 = 1;\n    long long int B1 = 1;\n    long long\
    \ int C1 = 1;\n    long long int D1 = 1;\n    long long int E1 = 1;\n    long\
    \ long int F1 = 1;\n    long long int G1 = 1;\n    long long int H1 = 1;\n   \
    \ long long int I1 = 1;\n    long long int J1 = 1;\n    long long int K1 = 1;\n\
    \    long long int L1 = 1;\n    long long int M1 = 1;\n    long long int N1 =\
    \ 1;\n    long long int O1 = 1;\n    long long int P1 = 1;\n    long long int\
    \ Q1 = 1;\n    long long int R1 = 1;\n    long long int S1 = 1;\n    long long\
    \ int T1 = 1;\n    long long int U1 = 1;\n    long long int V1 = 1;\n    \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr6rxu11r: /tmp/tmpr6rxu11r.cpp:91: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8rqnlyx5: /tmp/tmp8rqnlyx5.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int A = 1;\n    long long int\
    \ B = 1;\n    long long int C = 1;\n    long long int D = 1;\n    long long int\
    \ E = 1;\n    long long int F = 1;\n    long long int G = 1;\n    long long int\
    \ H = 1;\n    long long int I = 1;\n    long long int J = 1;\n    long long int\
    \ K = 1;\n    long long int L = 1;\n    long long int M = 1;\n    long long int\
    \ N = 1;\n    long long int O = 1;\n    long long int P = 1;\n    long long int\
    \ Q = 1;\n    long long int R = 1;\n    long long int S = 1;\n    long long int\
    \ T = 1;\n    long long int U = 1;\n    long long int V = 1;\n    long long int\
    \ W = 1;\n    long long int X = 1;\n    long long int Y = 1;\n    long long int\
    \ Z = 1;\n    long long int A = 1;\n    long long int B = 1;\n    long long int\
    \ C = 1;\n    long long int D = 1;\n    long long int E = 1;\n    long long int\
    \ F = 1;\n    long long int G = 1;\n    long long int H = 1;\n    long long int\
    \ I = 1;\n    long long int J = 1;\n    long long int K = 1;\n    long long int\
    \ L = 1;\n    long long int M = 1;\n    long long int N = 1;\n    long long int\
    \ O = 1;\n    long long int P = 1;\n    long long int Q = 1;\n    long long int\
    \ R = 1;\n    long long int S = 1;\n    long long int T = 1;\n    long long int\
    \ U = 1;\n    long long int V = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp811ijukc.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp811ijukc.cpp:65:19: error: redeclaration of \u2018long long int A\u2019\
    \n   65 |     long long int A = 1;\n      |                   ^\n/tmp/tmp811ijukc.cpp:39:19:\
    \ note: \u2018long long int A\u2019 previously declared here\n   39 |     long\
    \ long int A = 1;\n      |                   ^\n/tmp/tmp811ijukc.cpp:66:19: error:\
    \ redeclaration of \u2018long long int B\u2019\n   66 |     long long int B =\
    \ 1;\n      |                   ^\n/tmp/tmp811ijukc.cpp:40:19: note: \u2018long\
    \ long int B\u2019 previously declared here\n   40 |     long long int B = 1;\n\
    \      |                   ^\n/tmp/tmp811ijukc.cpp:67:19: error: redeclaration\
    \ of \u2018long long int C\u2019\n   67 |     long long int C = 1;\n      |  \
    \                 ^\n/tmp/tmp811ijukc.cpp:41:19: note: \u2018long long int C\u2019\
    \ previously declared here\n   41 |     long long int C = 1;\n      |        \
    \           ^\n/tmp/tmp811ijukc.cpp:68:19: error: redeclaration of \u2018long\
    \ long int D\u2019\n   68 |     long long int D = 1;\n      |                \
    \   ^\n/tmp/tmp811ijukc.cpp:42:19: note: \u2018long long int D\u2019 previously\
    \ declared here\n   42 |     long long int D = 1;\n      |                   ^\n\
    /tmp/tmp811ijukc.cpp:69:19: error: redeclaration of \u2018long long int E\u2019\
    \n   69 |     long long int E = 1;\n      |                   ^\n/tmp/tmp811ijukc.cpp:43:19:\
    \ note: \u2018long long int E\u2019 previously declared here\n   43 |     long\
    \ long int E = 1;\n      |                   ^\n/tmp/tmp811ijukc.cpp:70:19: error:\
    \ redeclaration of \u2018long long int F\u2019\n   70 |     long long int F =\
    \ 1;\n      |                   ^\n/tmp/tmp811ijukc.cpp:44:19: note: \u2018long\
    \ long int F\u2019 previously declared here\n   44 |     long long int F = 1;\n\
    \      |                   ^\n/tmp/tmp811ijukc.cpp:71:19: error: redeclaration\
    \ of \u2018long long int G\u2019\n   71 |     long long int G = 1;\n      |  \
    \                 ^\n/tmp/tmp811ijukc.cpp:45:19: note: \u2018long long int G\u2019\
    \ previously declared here\n   45 |     long long int G = 1;\n      |        \
    \           ^\n/tmp/tmp811ijukc.cpp:72:19: error: redeclaration of \u2018long\
    \ long int H\u2019\n   72 |     long long int H = 1;\n   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptpn61bsb.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmptpn61bsb.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmptpn61bsb.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmptpn61bsb.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmptpn61bsb.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmptpn61bsb.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmptpn61bsb.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmptpn61bsb.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmptpn61bsb.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmptpn61bsb.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmptpn61bsb.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmptpn61bsb.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmptpn61bsb.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmptpn61bsb.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmptpn61bsb.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmptpn61bsb.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiooasnbd: /tmp/tmpiooasnbd.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt3xqhpcx: /tmp/tmpt3xqhpcx.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0)\n        return true;\n    if (a%2==0)\n        return false;\n\
    \    return iscube(a/2);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpta6fehdn: /tmp/tmpta6fehdn.cpp:25: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 1;\n    while (b <= a) {\n        if (a % b == 0)\n      \
    \      return false;\n        b++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp3pxjhlnk: /tmp/tmp3pxjhlnk.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg7lobkfc: /tmp/tmpg7lobkfc.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n  \
    \  long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long A\
    \ = 1;\n    long B = 1;\n    long C = 1;\n    long D = 1;\n    long E = 1;\n \
    \   long F = 1;\n    long G = 1;\n    long H = 1;\n    long I = 1;\n    long J\
    \ = 1;\n    long K = 1;\n    long L = 1;\n    long M = 1;\n    long N = 1;\n \
    \   long O = 1;\n    long P = 1;\n    long Q = 1;\n    long R = 1;\n    long S\
    \ = 1;\n    long T = 1;\n    long U = 1;\n    long V = 1;\n    long W = 1;\n \
    \   long X = 1;\n    long Y = 1;\n    long Z = 1;\n    long aa = 1;\n    long\
    \ ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long ae = 1;\n    long af =\
    \ 1;\n    long ag = 1;\n    long ah = 1;\n    long ai = 1;\n    long aj = 1;\n\
    \    long ak = 1;\n    long al = 1;\n    long am = 1;\n    long an = 1;\n    long\
    \ ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long ar = 1;\n    long as =\
    \ 1;\n    long at = 1;\n    long au = 1;\n    long av = 1;\n    long aw = 1;\n\
    \    long ax = 1;\n    long ay = 1;\n    long az = 1;\n    long ba = 1;\n    long\
    \ bb = 1;\n    long bc = 1;\n    long bd = 1;\n    long be = 1;\n    long bf =\
    \ 1;\n    long bg = 1;\n    long bh = 1;\n    long bi = 1;\n    long bj = 1;\n\
    \    long bk = 1;\n    long bl = 1;\n    long bm = 1;\n    long bn = 1;\n    long\
    \ bo = 1;\n    long bp = 1;\n    long bq = 1;\n    long br = 1;\n    long bs =\
    \ 1;\n    long bt = 1;\n    long bu = 1;\n    long bv = 1;\n    long bw = 1;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj86edzog.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpj86edzog.cpp:27:10: error: conflicting declaration \u2018long int n\u2019\
    \n   27 |     long n = 1;\n      |          ^\n/tmp/tmpj86edzog.cpp:14:9: note:\
    \ previous declaration as \u2018int n\u2019\n   14 |     int n = a;\n      | \
    \        ^\n/tmp/tmpj86edzog.cpp:115:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  115 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==1)\n        return true;\n    if (a==0)\n        return true;\n\
    \    if (a==-1)\n        return true;\n    if (a%2==0)\n        return false;\n\
    \    if (a%3==0)\n        return false;\n    if (a%5==0)\n        return false;\n\
    \    if (a%7==0)\n        return false;\n    if (a%11==0)\n        return false;\n\
    \    if (a%13==0)\n        return false;\n    if (a%17==0)\n        return false;\n\
    \    if (a%19==0)\n        return false;\n    if (a%23==0)\n        return false;\n\
    \    if (a%29==0)\n        return false;\n    if (a%31==0)\n        return false;\n\
    \    if (a%37==0)\n        return false;\n    if (a%41==0)\n        return false;\n\
    \    if (a%43==0)\n        return false;\n    if (a%47==0)\n        return false;\n\
    \    if (a%53==0)\n        return false;\n    if (a%59==0)\n        return false;\n\
    \    if (a%61==0)\n        return false;\n    if (a%67==0)\n        return false;\n\
    \    if (a%71==0)\n        return false;\n    if (a%73==0)\n        return false;\n\
    \    if (a%79==0)\n        return false;\n    if (a%83==0)\n        return false;\n\
    \    if (a%89==0)\n        return false;\n    if (a%97==0)\n        return false;\n\
    \    if (a%101==0)\n        return false;\n    if (a%103==0)\n        return false;\n\
    \    if (a%107==0)\n        return false;\n    if (a%111==0)\n        return false;\n\
    \    if (a%113==0)\n        return false;\n    if (a%117==0)\n        return false;\n\
    \    if (a%121==0)\n        return false;\n    if (a%123==0)\n        return false;\n\
    \    if (a%127==0)\n        return false;\n    if (a%131==0)\n        return false;\n\
    \    if (a%133==0)\n        return false;\n    if (a%137==0)\n        return false;\n\
    \    if (a%141==0)\n        return false;\n    if (a%143==0)\n        return false;\n\
    \    if (a%147==0)\n        return false;\n    if (a%151==0)\n        return false;\n\
    \    if (a%153==0)\n        return false;\n    if (a%157==0)\n        return false;\n\
    \    if (a%161==0)\n        return false;\n    if (a%163==0)\n        return false;\n\
    \    if (a%167==0)\n        return false;\n    if (a%171==0)\n        return false;\n\
    \    if (a%173==0)\n        return false;\n    if (a%177==0)\n        return false;\n\
    \    if (a%181==0)\n        return false;\n    if (a%183==0)\n        return false;\n\
    \    if (a%187==0)\n        return false;\n    if (a%191==0)\n        return false;\n\
    \    if (a%\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaccpa1oj.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpaccpa1oj.cpp:127:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  127 | }\n      | ^\n/tmp/tmpaccpa1oj.cpp:126:11: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  126 |     if (a%\n      |        ~  ^\n\
    \      |           )\n  127 | }\n      | ~          \n/tmp/tmpaccpa1oj.cpp:127:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  127 | }\n \
    \     | ^\n/tmp/tmpaccpa1oj.cpp:127:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  127 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return false;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ if (a==64) return true;\n    if (a==65) return true;\n    if (a==66) return\
    \ true;\n    if (a==67) return true;\n    if (a==68) return true;\n    if (a==69)\
    \ return true;\n    if (a==70) return true;\n    if (a==71) return true;\n   \
    \ if (a==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2s7zaeka.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp2s7zaeka.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmp2s7zaeka.cpp:86:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if (a==\n      |        ~   ^\n\
    \      |            )\n   87 | }\n      | ~           \n/tmp/tmp2s7zaeka.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmp2s7zaeka.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 == 0)\n     \
    \   return true;\n    if (a % 7 == 0)\n        return true;\n    if (a % 9 ==\
    \ 0)\n        return true;\n    if (a % 11 == 0)\n        return true;\n    if\
    \ (a % 13 == 0)\n        return true;\n    if (a % 15 == 0)\n        return true;\n\
    \    if (a % 17 == 0)\n        return true;\n    if (a % 19 == 0)\n        return\
    \ true;\n    if (a % 21 == 0)\n        return true;\n    if (a % 23 == 0)\n  \
    \      return true;\n    if (a % 25 == 0)\n        return true;\n    if (a % 27\
    \ == 0)\n        return true;\n    if (a % 29 == 0)\n        return true;\n  \
    \  if (a % 31 == 0)\n        return true;\n    if (a % 33 == 0)\n        return\
    \ true;\n    if (a % 35 == 0)\n        return true;\n    if (a % 37 == 0)\n  \
    \      return true;\n    if (a % 39 == 0)\n        return true;\n    if (a % 41\
    \ == 0)\n        return true;\n    if (a % 43 == 0)\n        return true;\n  \
    \  if (a % 45 == 0)\n        return true;\n    if (a % 47 == 0)\n        return\
    \ true;\n    if (a % 49 == 0)\n        return true;\n    if (a % 51 == 0)\n  \
    \      return true;\n    if (a % 53 == 0)\n        return true;\n    if (a % 55\
    \ == 0)\n        return true;\n    if (a % 57 == 0)\n        return true;\n  \
    \  if (a % 59 == 0)\n        return true;\n    if (a % 61 == 0)\n        return\
    \ true;\n    if (a % 63 == 0)\n        return true;\n    if (a % 65 == 0)\n  \
    \      return true;\n    if (a % 67 == 0)\n        return true;\n    if (a % 69\
    \ == 0)\n        return true;\n    if (a % 71 == 0)\n        return true;\n  \
    \  if (a % 73 == 0)\n        return true;\n    if (a % 75 == 0)\n        return\
    \ true;\n    if (a % 77 == 0)\n        return true;\n    if (a % 79 == 0)\n  \
    \      return true;\n    if (a % 81 == 0)\n        return true;\n    if (a % 83\
    \ == 0)\n        return true;\n    if (a % 85 == 0)\n        return true;\n  \
    \  if (a % 87 == 0)\n        return true;\n    if (a % 89 == 0)\n        return\
    \ true;\n    if (a % 91 == 0)\n        return true;\n    if (a % 93 == 0)\n  \
    \      return true;\n    if (a % 95 == 0)\n        return true;\n    if (a % 97\
    \ == 0)\n        return true;\n    if (a % 99 == 0)\n        return true;\n  \
    \  if (a % 101 == 0)\n        return true;\n    if (a % 103 == 0)\n        return\
    \ true;\n    if (a % 105 == 0)\n        return true;\n    if (a % 107 == 0)\n\
    \        return true;\n    if (a % 109 == 0)\n        return true;\n    if (a\
    \ % 111 == 0)\n        return true;\n    if (a % 113 == 0)\n        return true;\n\
    \    if (a % 115 == 0)\n        return true;\n\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpm7ri_lpz: /tmp/tmpm7ri_lpz.cpp:133: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int a = a;\n    long long int\
    \ b = a;\n    long long int c = a;\n    long long int d = a;\n    long long int\
    \ e = a;\n    long long int f = a;\n    long long int g = a;\n    long long int\
    \ h = a;\n    long long int i = a;\n    long long int j = a;\n    long long int\
    \ k = a;\n    long long int l = a;\n    long long int m = a;\n    long long int\
    \ n = a;\n    long long int o = a;\n    long long int p = a;\n    long long int\
    \ q = a;\n    long long int r = a;\n    long long int s = a;\n    long long int\
    \ t = a;\n    long long int u = a;\n    long long int v = a;\n    long long int\
    \ w = a;\n    long long int x = a;\n    long long int y = a;\n    long long int\
    \ z = a;\n    long long int a = a;\n    long long int b = a;\n    long long int\
    \ c = a;\n    long long int d = a;\n    long long int e = a;\n    long long int\
    \ f = a;\n    long long int g = a;\n    long long int h = a;\n    long long int\
    \ i = a;\n    long long int j = a;\n    long long int k = a;\n    long long int\
    \ l = a;\n    long long int m = a;\n    long long int n = a;\n    long long int\
    \ o = a;\n    long long int p = a;\n    long long int q = a;\n    long long int\
    \ r = a;\n    long long int s = a;\n    long long int t = a;\n    long long int\
    \ u = a;\n    long long int v = \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphuo6xwsk.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmphuo6xwsk.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = a;\n      |             \
    \      ^\n/tmp/tmphuo6xwsk.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = a;\n      |                   ^\n\
    /tmp/tmphuo6xwsk.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmphuo6xwsk.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = a;\n      |                   ^\n/tmp/tmphuo6xwsk.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ a;\n      |                   ^\n/tmp/tmphuo6xwsk.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = a;\n      |  \
    \                 ^\n/tmp/tmphuo6xwsk.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = a;\n      |        \
    \           ^\n/tmp/tmphuo6xwsk.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = a;\n      |                \
    \   ^\n/tmp/tmphuo6xwsk.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = a;\n      |                   ^\n\
    /tmp/tmphuo6xwsk.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = a;\n      |                   ^\n/tmp/tmphuo6xwsk.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = a;\n      |                   ^\n/tmp/tmphuo6xwsk.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ a;\n      |                   ^\n/tmp/tmphuo6xwsk.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = a;\n\
    \      |                   ^\n/tmp/tmphuo6xwsk.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = a;\n      |  \
    \                 ^\n/tmp/tmphuo6xwsk.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1dqgy801: /tmp/tmp1dqgy801.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 == 0)\n     \
    \   return true;\n    if (a % 7 == 0)\n        return true;\n    if (a % 11 ==\
    \ 0)\n        return true;\n    if (a % 13 == 0)\n        return true;\n    if\
    \ (a % 17 == 0)\n        return true;\n    if (a % 19 == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1xik715w: /tmp/tmp1xik715w.cpp:32: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % a == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbq2ai7g1: /tmp/tmpbq2ai7g1.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (a / 3) * 3;\n    if (a == b) return true;\n   \
    \ else return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjtrpkllj: /tmp/tmpjtrpkllj.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = a * a;\n    long\
    \ long int d = a * a * a;\n    long long int e = a * a * a * a;\n    long long\
    \ int f = a * a * a * a * a;\n    long long int g = a * a * a * a * a * a * a;\n\
    \    long long int h = a * a * a * a * a * a * a * a;\n    long long int i = a\
    \ * a * a * a * a * a * a * a * a;\n    long long int j = a * a * a * a * a *\
    \ a * a * a * a * a * a;\n    long long int k = a * a * a * a * a * a * a * a\
    \ * a * a * a * a;\n    long long int l = a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a;\n    long long int m = a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a;\n    long long int n = a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a;\n    long long int o = a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a;\n    long long int p = a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int q\
    \ = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n \
    \   long long int r = a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a;\n    long long int s = a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a;\n    long long int t = a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int u = a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n \
    \   long long int v = a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a;\n    long long int w = a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a;\n    long long int x = a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int y\
    \ = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long\
    \ long int z = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a;\n    long long int aa = a * a * a * a * a * a * a * a * a * a * a\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyg_8n6ov.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpyg_8n6ov.cpp:40:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   40 | }\n      | ^\n/tmp/tmpyg_8n6ov.cpp:40:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 2 == 0)\n        return a % 3 == 0;\n    else\n        return\
    \ a % 3 == 0 || a % 5 == 0;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2j_j928u: /tmp/tmp2j_j928u.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0)\n        return true;\n    else\n  \
    \      return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpel5rmyfu: /tmp/tmpel5rmyfu.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 2 == 0) {\n        if (a % 3 == 0) {\n            if (a %\
    \ 5 == 0) {\n                if (a % 7 == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6w9km1v9: /tmp/tmp6w9km1v9.cpp:27: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a * a;\n    long long int c = b * b * b;\n \
    \   long long int d = c * c * c;\n    return d == a * a * a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmphx_pybia: /tmp/tmphx_pybia.cpp:24: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3sdvc1d9: /tmp/tmp3sdvc1d9.cpp:83: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq4w_hdx2: /tmp/tmpq4w_hdx2.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 2 == 0)\n        return a % 3 == 0;\n    else\n        return\
    \ a % 3 == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpps8byrkm: /tmp/tmpps8byrkm.cpp:23: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpup0jkpcu: /tmp/tmpup0jkpcu.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 == 0)\n     \
    \   return true;\n    if (a % 7 == 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq_wmipq0: /tmp/tmpq_wmipq0.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2 == 0) {\n        if (a % 3 == 0) {\n            if (a % 5\
    \ == 0) {\n                if (a % 7 == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn1gln4b3: /tmp/tmpn1gln4b3.cpp:27: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a % 2 == 0) return false;\n    long\
    \ b = a / 2;\n    if (b * b == a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvqt7jaa1: /tmp/tmpvqt7jaa1.cpp:22: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n  \
    \  long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = \n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5jc2k5lf.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp5jc2k5lf.cpp:27:10: error: conflicting declaration \u2018long int n\u2019\
    \n   27 |     long n = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:14:9: note:\
    \ previous declaration as \u2018int n\u2019\n   14 |     int n = a;\n      | \
    \        ^\n/tmp/tmp5jc2k5lf.cpp:40:10: error: declaration of \u2018long int a\u2019\
    \ shadows a parameter\n   40 |     long a = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:41:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   41 |     long b = 1;\n  \
    \    |          ^\n/tmp/tmp5jc2k5lf.cpp:15:10: note: \u2018long int b\u2019 previously\
    \ declared here\n   15 |     long b = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:42:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   42 |     long c = 1;\n  \
    \    |          ^\n/tmp/tmp5jc2k5lf.cpp:16:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   16 |     long c = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:43:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   43 |     long d = 1;\n  \
    \    |          ^\n/tmp/tmp5jc2k5lf.cpp:17:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   17 |     long d = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:44:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   44 |     long e = 1;\n  \
    \    |          ^\n/tmp/tmp5jc2k5lf.cpp:18:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   18 |     long e = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:45:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   45 |     long f = 1;\n  \
    \    |          ^\n/tmp/tmp5jc2k5lf.cpp:19:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   19 |     long f = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:46:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   46 |     long g = 1;\n  \
    \    |          ^\n/tmp/tmp5jc2k5lf.cpp:20:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   20 |     long g = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:47:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   47 |     long h = 1;\n  \
    \    |          ^\n/tmp/tmp5jc2k5lf.cpp:21:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   21 |     long h = 1;\n      |          ^\n/tmp/tmp5jc2k5lf.cpp:48:10:\
    \ error: redeclaration of \u2018long int i\u2019\n   48 |     long"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    int count = 0;\n    while (n > 1) {\n        if (n\
    \ % 2 == 0) {\n            n = n / 2;\n            count++;\n        } else {\n\
    \            n = 3 * n + 1;\n            count++;\n        }\n    }\n    if (count\
    \ == 3) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptgjqfsn2: /tmp/tmptgjqfsn2.cpp:33: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (a / 3) * 3;\n    if (a == b) return true;\n   \
    \ else return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpocxgkct3: /tmp/tmpocxgkct3.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int a1 = a;\n   \
    \ long long int a2 = a;\n    long long int a3 = a;\n    long long int a4 = a;\n\
    \    long long int a5 = a;\n    long long int a6 = a;\n    long long int a7 =\
    \ a;\n    long long int a8 = a;\n    long long int a9 = a;\n    long long int\
    \ a10 = a;\n    long long int a11 = a;\n    long long int a12 = a;\n    long long\
    \ int a13 = a;\n    long long int a14 = a;\n    long long int a15 = a;\n    long\
    \ long \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzpnbd90g.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpzpnbd90g.cpp:81:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   81 | }\n      | ^\n/tmp/tmpzpnbd90g.cpp:81:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (long long int)a;\n    long long int c = 1;\n  \
    \  long long int d = 1;\n    long long int e = 1;\n    long long int f = 0;\n\
    \    long long int g = 1;\n    long long int h = 1;\n    long long int i = 0;\n\
    \    long long int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n\
    \    long long int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n\
    \    long long int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n\
    \    long long int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n\
    \    long long int v = 1;\n    long long int w = 1;\n    long long int x = 1;\n\
    \    long long int y = 1;\n    long long int z = 1;\n    long long int a = 1;\n\
    \    long long int b = 1;\n    long long int c = 1;\n    long long int d = 1;\n\
    \    long long int e = 1;\n    long long int f = 0;\n    long long int g = 1;\n\
    \    long long int h = 1;\n    long long int i = 0;\n    long long int j = 1;\n\
    \    long long int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n\
    \    long long int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n\
    \    long long int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n\
    \    long long int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n\
    \    long long int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n\
    \    long long int z = 1;\n    long long int a = 1;\n    long long int b = 1;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 0;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 0;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf6c_w8lv.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpf6c_w8lv.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmpf6c_w8lv.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpf6c_w8lv.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = (long long int)a;\n      |             \
    \      ^\n/tmp/tmpf6c_w8lv.cpp:41:19: error: redeclaration of \u2018long long\
    \ int c\u2019\n   41 |     long long int c = 1;\n      |                   ^\n\
    /tmp/tmpf6c_w8lv.cpp:15:19: note: \u2018long long int c\u2019 previously declared\
    \ here\n   15 |     long long int c = 1;\n      |                   ^\n/tmp/tmpf6c_w8lv.cpp:42:19:\
    \ error: redeclaration of \u2018long long int d\u2019\n   42 |     long long int\
    \ d = 1;\n      |                   ^\n/tmp/tmpf6c_w8lv.cpp:16:19: note: \u2018\
    long long int d\u2019 previously declared here\n   16 |     long long int d =\
    \ 1;\n      |                   ^\n/tmp/tmpf6c_w8lv.cpp:43:19: error: redeclaration\
    \ of \u2018long long int e\u2019\n   43 |     long long int e = 1;\n      |  \
    \                 ^\n/tmp/tmpf6c_w8lv.cpp:17:19: note: \u2018long long int e\u2019\
    \ previously declared here\n   17 |     long long int e = 1;\n      |        \
    \           ^\n/tmp/tmpf6c_w8lv.cpp:44:19: error: redeclaration of \u2018long\
    \ long int f\u2019\n   44 |     long long int f = 0;\n      |                \
    \   ^\n/tmp/tmpf6c_w8lv.cpp:18:19: note: \u2018long long int f\u2019 previously\
    \ declared here\n   18 |     long long int f = 0;\n      |                   ^\n\
    /tmp/tmpf6c_w8lv.cpp:45:19: error: redeclaration of \u2018long long int g\u2019\
    \n   45 |     long long int g = 1;\n      |                   ^\n/tmp/tmpf6c_w8lv.cpp:19:19:\
    \ note: \u2018long long int g\u2019 previously declared here\n   19 |     long\
    \ long int g = 1;\n      |                   ^\n/tmp/tmpf6c_w8lv.cpp:46:19: error:\
    \ redeclaration of \u2018long long int h\u2019\n   46 |     long long int h =\
    \ 1;\n      |                   ^\n/tmp/tmpf6c_w8lv.cpp:20:19: note: \u2018long\
    \ long int h\u2019 previously declared here\n   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 0;\n    for(int i = 1;i<=a;i++){\n        b += i;\n    }\n\
    \    if(b == a*a*a){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb8nv9a8p: /tmp/tmpb8nv9a8p.cpp:27: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 3 == 0 && a % 5 == 0 && a % 7 == 0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4o07fpbw: /tmp/tmp4o07fpbw.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int a = a;\n    long long int\
    \ b = a;\n    long long int c = a;\n    long long int d = a;\n    long long int\
    \ e = a;\n    long long int f = a;\n    long long int g = a;\n    long long int\
    \ h = a;\n    long long int i = a;\n    long long int j = a;\n    long long int\
    \ k = a;\n    long long int l = a;\n    long long int m = a;\n    long long int\
    \ n = a;\n    long long int o = a;\n    long long int p = a;\n    long long int\
    \ q = a;\n    long long int r = a;\n    long long int s = a;\n    long long int\
    \ t = a;\n    long long int u = a;\n    long long int v = a;\n    long long int\
    \ w = a;\n    long long int x = a;\n    long long int y = a;\n    long long int\
    \ z = a;\n    long long int a = a;\n    long long int b = a;\n    long long int\
    \ c = a;\n    long long int d = a;\n    long long int e = a;\n    long long int\
    \ f = a;\n    long long int g = a;\n    long long int h = a;\n    long long int\
    \ i = a;\n    long long int j = a;\n    long long int k = a;\n    long long int\
    \ l = a;\n    long long int m = a;\n    long long int n = a;\n    long long int\
    \ o = a;\n    long long int p = a;\n    long long int q = a;\n    long long int\
    \ r = a;\n    long long int s = a;\n    long long int t = a;\n    long long int\
    \ u = a;\n    long long int v = \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx0jrlxzh.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpx0jrlxzh.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = a;\n      |             \
    \      ^\n/tmp/tmpx0jrlxzh.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = a;\n      |                   ^\n\
    /tmp/tmpx0jrlxzh.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmpx0jrlxzh.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = a;\n      |                   ^\n/tmp/tmpx0jrlxzh.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ a;\n      |                   ^\n/tmp/tmpx0jrlxzh.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = a;\n      |  \
    \                 ^\n/tmp/tmpx0jrlxzh.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = a;\n      |        \
    \           ^\n/tmp/tmpx0jrlxzh.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = a;\n      |                \
    \   ^\n/tmp/tmpx0jrlxzh.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = a;\n      |                   ^\n\
    /tmp/tmpx0jrlxzh.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = a;\n      |                   ^\n/tmp/tmpx0jrlxzh.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = a;\n      |                   ^\n/tmp/tmpx0jrlxzh.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ a;\n      |                   ^\n/tmp/tmpx0jrlxzh.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = a;\n\
    \      |                   ^\n/tmp/tmpx0jrlxzh.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = a;\n      |  \
    \                 ^\n/tmp/tmpx0jrlxzh.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 0;\n    long c = a;\n    while (c) {\n        b++;\n     \
    \   c /= 3;\n    }\n    return b == a;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpfok3bem7: /tmp/tmpfok3bem7.cpp:26: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = b;\n    long long int\
    \ d = c;\n    long long int e = d;\n    long long int f = e;\n    long long int\
    \ g = f;\n    long long int h = g;\n    long long int i = h;\n    long long int\
    \ j = i;\n    long long int k = j;\n    long long int l = k;\n    long long int\
    \ m = l;\n    long long int n = m;\n    long long int o = n;\n    long long int\
    \ p = o;\n    long long int q = p;\n    long long int r = q;\n    long long int\
    \ s = r;\n    long long int t = s;\n    long long int u = t;\n    long long int\
    \ v = u;\n    long long int w = v;\n    long long int x = w;\n    long long int\
    \ y = x;\n    long long int z = y;\n    long long int a = z;\n    long long int\
    \ b = a;\n    long long int c = b;\n    long long int d = c;\n    long long int\
    \ e = d;\n    long long int f = e;\n    long long int g = f;\n    long long int\
    \ h = g;\n    long long int i = h;\n    long long int j = i;\n    long long int\
    \ k = j;\n    long long int l = k;\n    long long int m = l;\n    long long int\
    \ n = m;\n    long long int o = n;\n    long long int p = o;\n    long long int\
    \ q = p;\n    long long int r = q;\n    long long int s = r;\n    long long int\
    \ t = s;\n    long long int u = t;\n    long long int v = u;\n    long long int\
    \ w = v;\n    long long int x = w;\n    long long int y = x;\n    long long int\
    \ z = y;\n    long long int a = z;\n    long long int b = a;\n    long long int\
    \ c = b;\n    long long int d = c;\n    long long int e = d;\n    long long int\
    \ f = e;\n    long long int g = f;\n    long long int h = g;\n    long long int\
    \ i = h;\n    long long int j = i;\n    long long int k = j;\n    long long int\
    \ l = k;\n    long long int m = l;\n    long long int n = m;\n    long long int\
    \ o = n;\n    long long int p = o;\n    long long int q = p;\n    long long int\
    \ r = q;\n    long long int s = r;\n    long long int t = s;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdky3edb8.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpdky3edb8.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = z;\n      |             \
    \      ^\n/tmp/tmpdky3edb8.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = a;\n      |                   ^\n\
    /tmp/tmpdky3edb8.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmpdky3edb8.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = b;\n      |                   ^\n/tmp/tmpdky3edb8.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ b;\n      |                   ^\n/tmp/tmpdky3edb8.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = c;\n      |  \
    \                 ^\n/tmp/tmpdky3edb8.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = c;\n      |        \
    \           ^\n/tmp/tmpdky3edb8.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = d;\n      |                \
    \   ^\n/tmp/tmpdky3edb8.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = d;\n      |                   ^\n\
    /tmp/tmpdky3edb8.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = e;\n      |                   ^\n/tmp/tmpdky3edb8.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = e;\n      |                   ^\n/tmp/tmpdky3edb8.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ f;\n      |                   ^\n/tmp/tmpdky3edb8.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = f;\n\
    \      |                   ^\n/tmp/tmpdky3edb8.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = g;\n      |  \
    \                 ^\n/tmp/tmpdky3edb8.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n  \
    \  long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long A\
    \ = 1;\n    long B = 1;\n    long C = 1;\n    long D = 1;\n    long E = 1;\n \
    \   long F = 1;\n    long G = 1;\n    long H = 1;\n    long I = 1;\n    long J\
    \ = 1;\n    long K = 1;\n    long L = 1;\n    long M = 1;\n    long N = 1;\n \
    \   long O = 1;\n    long P = 1;\n    long Q = 1;\n    long R = 1;\n    long S\
    \ = 1;\n    long T = 1;\n    long U = 1;\n    long V = 1;\n    long W = 1;\n \
    \   long X = 1;\n    long Y = 1;\n    long Z = 1;\n    long aa = 1;\n    long\
    \ bb = 1;\n    long cc = 1;\n    long dd = 1;\n    long ee = 1;\n    long ff =\
    \ 1;\n    long gg = 1;\n    long hh = 1;\n    long ii = 1;\n    long jj = 1;\n\
    \    long kk = 1;\n    long ll = 1;\n    long mm = 1;\n    long nn = 1;\n    long\
    \ oo = 1;\n    long pp = 1;\n    long qq = 1;\n    long rr = 1;\n    long ss =\
    \ 0;\n    long tt = 0;\n    long uu = 1;\n    long vv = 1;\n    long ww = 1;\n\
    \    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n   \
    \ long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n   \
    \ long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n   \
    \ long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n   \
    \ long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n   \
    \ long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9nagqjqf.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp9nagqjqf.cpp:27:10: error: conflicting declaration \u2018long int n\u2019\
    \n   27 |     long n = 1;\n      |          ^\n/tmp/tmp9nagqjqf.cpp:14:9: note:\
    \ previous declaration as \u2018int n\u2019\n   14 |     int n = a;\n      | \
    \        ^\n/tmp/tmp9nagqjqf.cpp:114:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  114 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==1)\n        return true;\n    if (a==0)\n        return true;\n\
    \    if (a==-1)\n        return true;\n    if (a%2==0)\n        return false;\n\
    \    long b= a%3;\n    if (b==0)\n        return true;\n    if (b==1)\n      \
    \  return false;\n    if (b==2)\n        return false;\n    if (a%3==0)\n    \
    \    return false;\n    long c= a%5;\n    if (c==0)\n        return true;\n  \
    \  if (c==1)\n        return false;\n    if (c==2)\n        return false;\n  \
    \  if (a%5==0)\n        return false;\n    long d= a%7;\n    if (d==0)\n     \
    \   return true;\n    if (d==1)\n        return false;\n    if (d==2)\n      \
    \  return false;\n    if (a%7==0)\n        return false;\n    long e= a%9;\n \
    \   if (e==0)\n        return true;\n    if (e==1)\n        return false;\n  \
    \  if (e==2)\n        return false;\n    if (a%9==0)\n        return false;\n\
    \    long f= a%13;\n    if (f==0)\n        return true;\n    if (f==1)\n     \
    \   return false;\n    if (f==2)\n        return false;\n    if (a%13==0)\n  \
    \      return false;\n    long g= a%17;\n    if (g==0)\n        return true;\n\
    \    if (g==1)\n        return false;\n    if (g==2)\n        return false;\n\
    \    if (a%17==0)\n        return false;\n    long h= a%21;\n    if (h==0)\n \
    \       return true;\n    if (h==1)\n        return false;\n    if (h==2)\n  \
    \      return false;\n    if (a%21==0)\n        return false;\n    long i= a%25;\n\
    \    if (i==0)\n        return true;\n    if (i==1)\n        return false;\n \
    \   if (i==2)\n        return false;\n    if (a%25==0)\n        return false;\n\
    \    long j= a%31;\n    if (j==0)\n        return true;\n    if (j==1)\n     \
    \   return false;\n    if (j==2)\n        return false;\n    if (a%31==0)\n  \
    \      return false;\n    long k= a%37;\n    if (k==0)\n        return true;\n\
    \    if (k==1)\n        return false;\n    if (k==2)\n        return false;\n\
    \    if (a%37==0)\n        return false;\n    long l= a%41;\n    if (l==0)\n \
    \       return true;\n    if (l==1)\n        return false;\n    if (l==2)\n  \
    \      return false;\n    if (a%41==0)\n        return false;\n    long m= a%45;\n\
    \    if (m==0)\n        return true;\n    if (m==1)\n        return false;\n \
    \   if (m==2)\n        return false;\n    if (a%45==0)\n        return false;\n\
    \    long n= a%49;\n    if (n==0)\n        return true;\n    if (n==1)\n     \
    \   return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp06av896b: /tmp/tmp06av896b.cpp:141: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0)\n        return true;\n    if (a==1)\n        return true;\n\
    \    if (a==2)\n        return true;\n    if (a==3)\n        return true;\n  \
    \  if (a==4)\n        return true;\n    if (a==5)\n        return true;\n    if\
    \ (a==6)\n        return true;\n    if (a==7)\n        return true;\n    if (a==8)\n\
    \        return true;\n    if (a==9)\n        return true;\n    if (a==10)\n \
    \       return true;\n    if (a==11)\n        return true;\n    if (a==12)\n \
    \       return true;\n    if (a==13)\n        return true;\n    if (a==14)\n \
    \       return true;\n    if (a==15)\n        return true;\n    if (a==16)\n \
    \       return true;\n    if (a==17)\n        return true;\n    if (a==18)\n \
    \       return true;\n    if (a==19)\n        return true;\n    if (a==20)\n \
    \       return true;\n    if (a==21)\n        return true;\n    if (a==22)\n \
    \       return true;\n    if (a==23)\n        return true;\n    if (a==24)\n \
    \       return true;\n    if (a==25)\n        return true;\n    if (a==26)\n \
    \       return true;\n    if (a==27)\n        return true;\n    if (a==28)\n \
    \       return true;\n    if (a==29)\n        return true;\n    if (a==30)\n \
    \       return true;\n    if (a==31)\n        return true;\n    if (a==32)\n \
    \       return true;\n    if (a==33)\n        return true;\n    if (a==34)\n \
    \       return true;\n    if (a==35)\n        return true;\n    if (a==36)\n \
    \       return true;\n    if (a==37)\n        return true;\n    if (a==38)\n \
    \       return true;\n    if (a==39)\n        return true;\n    if (a==40)\n \
    \       return true;\n    if (a==41)\n        return true;\n    if (a==42)\n \
    \       return true;\n    if (a==43)\n        return true;\n    if (a==44)\n \
    \       return true;\n    if (a==45)\n        return true;\n    if (a==46)\n \
    \       return true;\n    if (a==47)\n        return true;\n    if (a==48)\n \
    \       return true;\n    if (a==49)\n        return true;\n    if (a==50)\n \
    \       return true;\n    if (a==51)\n        return true;\n    if (a==52)\n \
    \       return true;\n    if (a==53)\n        return true;\n    if (a==54)\n \
    \       return true;\n    if (a==55)\n        return true;\n    if (a==56)\n \
    \       return true;\n    if (a==57)\n        return true;\n    if (a==58)\n \
    \       return true;\n    if (a==59)\n        return true;\n    if (a==60)\n \
    \       return true;\n    if (a==61)\n        return true;\n    if (a==62)\n \
    \       return true;\n    if (a==63)\n        return true;\n    if (a==64)\n \
    \       return true;\n    if (a==65)\n        return true;\n    if (a==66)\n \
    \       return true;\n    if (a==67)\n        return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpvcimyc74: /tmp/tmpvcimyc74.cpp:154: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return false;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ if (a==64) return true;\n    if (a==65) return true;\n    if (a==66) return\
    \ true;\n    if (a==67) return true;\n    if (a==68) return true;\n    if (a==69)\
    \ return true;\n    if (a==70) return true;\n    if (a==71) return true;\n   \
    \ if (a==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kuffxwi.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp_kuffxwi.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmp_kuffxwi.cpp:86:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if (a==\n      |        ~   ^\n\
    \      |            )\n   87 | }\n      | ~           \n/tmp/tmp_kuffxwi.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmp_kuffxwi.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a*a*a;\n    long long int square = a*a;\n   \
    \ long long int cube_square = cube*cube;\n    long long int cube_cube = cube*cube;\n\
    \    long long int cube_cube_square = cube*cube*cube;\n    long long int cube_cube_cube\
    \ = cube*cube*cube;\n    long long int cube_cube_cube_square = cube*cube*cube*cube;\n\
    \    long long int cube_cube_cube_cube = cube*cube*cube*cube;\n    long long int\
    \ cube_cube_cube_cube_square = cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_square\
    \ = cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_square\
    \ = cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_square\
    \ = cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_square\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_square\
    \ = cube*cube*cube*cube*cube*cube*cube*cube*cube*cube;\n    long long int cube_cube_cube_cube_cube_cube_cube_cube_cube_cube\
    \ = cube\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi8xndu_2.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpi8xndu_2.cpp:34:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   34 | }\n      | ^\n/tmp/tmpi8xndu_2.cpp:34:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a * a * a;\n    if (cube == a * a * a)\n    \
    \    return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1xf_0a0_: /tmp/tmp1xf_0a0_.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    long b=1;\n    while(a>0)\n  \
    \  {\n        if(a%b==0)\n            return false;\n        b*=b;\n        a/=b;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9g4s631w: /tmp/tmp9g4s631w.cpp:28: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = b;\n    long long int\
    \ d = c;\n    long long int e = d;\n    long long int f = e;\n    long long int\
    \ g = f;\n    long long int h = g;\n    long long int i = h;\n    long long int\
    \ j = i;\n    long long int k = j;\n    long long int l = k;\n    long long int\
    \ m = l;\n    long long int n = m;\n    long long int o = n;\n    long long int\
    \ p = o;\n    long long int q = p;\n    long long int r = q;\n    long long int\
    \ s = r;\n    long long int t = s;\n    long long int u = t;\n    long long int\
    \ v = u;\n    long long int w = v;\n    long long int x = w;\n    long long int\
    \ y = x;\n    long long int z = y;\n    long long int a = z;\n    long long int\
    \ b = a;\n    long long int c = b;\n    long long int d = c;\n    long long int\
    \ e = d;\n    long long int f = e;\n    long long int g = f;\n    long long int\
    \ h = g;\n    long long int i = h;\n    long long int j = i;\n    long long int\
    \ k = j;\n    long long int l = k;\n    long long int m = l;\n    long long int\
    \ n = m;\n    long long int o = n;\n    long long int p = o;\n    long long int\
    \ q = p;\n    long long int r = q;\n    long long int s = r;\n    long long int\
    \ t = s;\n    long long int u = t;\n    long long int v = u;\n    long long int\
    \ w = v;\n    long long int x = w;\n    long long int y = x;\n    long long int\
    \ z = y;\n    long long int a = z;\n    long long int b = a;\n    long long int\
    \ c = b;\n    long long int d = c;\n    long long int e = d;\n    long long int\
    \ f = e;\n    long long int g = f;\n    long long int h = g;\n    long long int\
    \ i = h;\n    long long int j = i;\n    long long int k = j;\n    long long int\
    \ l = k;\n    long long int m = l;\n    long long int n = m;\n    long long int\
    \ o = n;\n    long long int p = o;\n    long long int q = p;\n    long long int\
    \ r = q;\n    long long int s = r;\n    long long int t = s;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphz59ekov.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmphz59ekov.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = z;\n      |             \
    \      ^\n/tmp/tmphz59ekov.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = a;\n      |                   ^\n\
    /tmp/tmphz59ekov.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = a;\n      |                   ^\n/tmp/tmphz59ekov.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = b;\n      |                   ^\n/tmp/tmphz59ekov.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ b;\n      |                   ^\n/tmp/tmphz59ekov.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = c;\n      |  \
    \                 ^\n/tmp/tmphz59ekov.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = c;\n      |        \
    \           ^\n/tmp/tmphz59ekov.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = d;\n      |                \
    \   ^\n/tmp/tmphz59ekov.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = d;\n      |                   ^\n\
    /tmp/tmphz59ekov.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = e;\n      |                   ^\n/tmp/tmphz59ekov.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = e;\n      |                   ^\n/tmp/tmphz59ekov.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ f;\n      |                   ^\n/tmp/tmphz59ekov.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = f;\n\
    \      |                   ^\n/tmp/tmphz59ekov.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = g;\n      |  \
    \                 ^\n/tmp/tmphz59ekov.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg3wrz13u.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpg3wrz13u.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmpg3wrz13u.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpg3wrz13u.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmpg3wrz13u.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmpg3wrz13u.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmpg3wrz13u.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmpg3wrz13u.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmpg3wrz13u.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmpg3wrz13u.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmpg3wrz13u.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmpg3wrz13u.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmpg3wrz13u.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmpg3wrz13u.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmpg3wrz13u.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmpg3wrz13u.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmppfeids8w: /tmp/tmppfeids8w.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0)\n        return true;\n    if (a==1)\n        return true;\n\
    \    if (a==2)\n        return true;\n    if (a==3)\n        return true;\n  \
    \  if (a==4)\n        return true;\n    if (a==5)\n        return true;\n    if\
    \ (a==6)\n        return true;\n    if (a==7)\n        return true;\n    if (a==8)\n\
    \        return true;\n    if (a==9)\n        return true;\n    if (a==10)\n \
    \       return true;\n    if (a==11)\n        return true;\n    if (a==12)\n \
    \       return true;\n    if (a==13)\n        return true;\n    if (a==14)\n \
    \       return true;\n    if (a==15)\n        return true;\n    if (a==16)\n \
    \       return true;\n    if (a==17)\n        return true;\n    if (a==18)\n \
    \       return true;\n    if (a==19)\n        return true;\n    if (a==20)\n \
    \       return true;\n    if (a==21)\n        return true;\n    if (a==22)\n \
    \       return true;\n    if (a==23)\n        return true;\n    if (a==24)\n \
    \       return true;\n    if (a==25)\n        return true;\n    if (a==26)\n \
    \       return true;\n    if (a==27)\n        return true;\n    if (a==28)\n \
    \       return true;\n    if (a==29)\n        return true;\n    if (a==30)\n \
    \       return true;\n    if (a==31)\n        return true;\n    if (a==32)\n \
    \       return true;\n    if (a==33)\n        return true;\n    if (a==34)\n \
    \       return true;\n    if (a==35)\n        return true;\n    if (a==36)\n \
    \       return true;\n    if (a==37)\n        return true;\n    if (a==38)\n \
    \       return true;\n    if (a==39)\n        return true;\n    if (a==40)\n \
    \       return true;\n    if (a==41)\n        return true;\n    if (a==42)\n \
    \       return true;\n    if (a==43)\n        return true;\n    if (a==44)\n \
    \       return true;\n    if (a==45)\n        return true;\n    if (a==46)\n \
    \       return true;\n    if (a==47)\n        return true;\n    if (a==48)\n \
    \       return true;\n    if (a==49)\n        return true;\n    if (a==50)\n \
    \       return true;\n    if (a==51)\n        return true;\n    if (a==52)\n \
    \       return true;\n    if (a==53)\n        return true;\n    if (a==54)\n \
    \       return true;\n    if (a==55)\n        return true;\n    if (a==56)\n \
    \       return true;\n    if (a==57)\n        return true;\n    if (a==58)\n \
    \       return true;\n    if (a==59)\n        return true;\n    if (a==60)\n \
    \       return true;\n    if (a==61)\n        return true;\n    if (a==62)\n \
    \       return true;\n    if (a==63)\n        return true;\n    if (a==64)\n \
    \       return true;\n    if (a==65)\n        return true;\n    if (a==66)\n \
    \       return true;\n    if (a==67)\n        return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpcefm77p9: /tmp/tmpcefm77p9.cpp:154: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int a1 = a;\n   \
    \ long long int a2 = a;\n    long long int a3 = a;\n    long long int a4 = a;\n\
    \    long long int a5 = a;\n    long long int a6 = a;\n    long long int a7 =\
    \ a;\n    long long int a8 = a;\n    long long int a9 = a;\n    long long int\
    \ a10 = a;\n    long long int a11 = a;\n    long long int a12 = a;\n    long long\
    \ int a13 = a;\n    long long int a14 = a;\n    long long int a15 = a;\n    long\
    \ long \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfmsolc96.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpfmsolc96.cpp:81:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   81 | }\n      | ^\n/tmp/tmpfmsolc96.cpp:81:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int cube = a * a * a;\n    if (cube == 0 || cube == 1)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp48l3ts1s: /tmp/tmp48l3ts1s.cpp:23: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = 1;\n    while (n*n <= a) {\n        n++;\n    }\n    if (n*n\
    \ == a) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpjsxlie3a: /tmp/tmpjsxlie3a.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2==0)\n    {\n        if (a%3==0)\n        {\n            if\
    \ (a%5==0)\n            {\n                if (a%7==0)\n                {\n  \
    \                  if (a%11==0)\n                    {\n                     \
    \   if (a%13==0)\n                        {\n                            if (a%17==0)\n\
    \                            {\n                                if (a%19==0)\n\
    \                                {\n                                    if (a%23==0)\n\
    \                                    {\n                                     \
    \   if (a%29==0)\n                                        {\n                \
    \                            if (a%31==0)\n                                  \
    \          {\n                                                if (a%37==0)\n \
    \                                               {\n                          \
    \                          if (a%41==0)\n                                    \
    \                {\n                                                        if\
    \ (a%43==0)\n                                                        {\n     \
    \                                                       if (a%47==0)\n       \
    \                                                     {\n                    \
    \                                            if (a%53==0)\n                  \
    \                                              {\n                           \
    \                                         if (a%59==0)\n                     \
    \                                               {\n                          \
    \                                              if (a%61==0)\n                \
    \                                                        {\n                 \
    \                                                           if (a%67==0)\n   \
    \                                                                         {\n\
    \                                                                            \
    \    if (a%71==0)\n                                                          \
    \                      {\n                                                   \
    \                                 if (a%73==0)\n                             \
    \                                                       {\n                  \
    \                                                                      if (a%79==0)\n\
    \                                                                            \
    \            {\n                                                             \
    \                               if (a%83==0)\n                               \
    \                                                             {\n            \
    \                                                                            \
    \        if (a%89==0)\n                                                      \
    \                                          {\n                               \
    \                                                                     if (a%97==0)\n\
    \                                                                            \
    \                        {\n                                                 \
    \                                                       if (a%103==0)\n      \
    \                                                                            \
    \                      {\n                                                   \
    \                                                         if (a%107==0)\n    \
    \                                                                            \
    \                            {\n                                             \
    \                                                                   if (a%113==0)\n\
    \                                                                            \
    \                                    {\n                                     \
    \                                                                            \
    \   if (a%117==0)\n                                                          \
    \                                                          {\n               \
    \                                                                            \
    \                             if (a%121==0)\n                                \
    \                                                                            \
    \            {\n                                                             \
    \                                                               if (a%123==0)\n\
    \                                                                            \
    \                                                {\n                         \
    \                                                                            \
    \                           if (a%129==0)\n                                  \
    \                                                                            \
    \                  {\n                                                       \
    \                                                                            \
    \ if (a%131==0)\n                                                            \
    \                                                                        {\n \
    \                                                                            \
    \                                                           if (a%137==0)\n  \
    \                                                                            \
    \                                                          {\n               \
    \                                                                            \
    \                                                 if (a%141==0)\n            \
    \                                                                            \
    \                                                    {\n                     \
    \                                                                            \
    \                                               if (a%147==0)\n              \
    \                                                                            \
    \                                                      {\n                   \
    \                                                                            \
    \                                                     if (a%151==0)\n        \
    \                                                                            \
    \                                                                {\n         \
    \                                                                            \
    \                                                                   if (a%157==0)\n\
    \                                                                            \
    \                                                                            {\n\
    \                                                                            \
    \                                                                            \
    \    if (a%161==0)\n                                                         \
    \                                                                            \
    \                       {\n                                                  \
    \                                                                            \
    \                                  if (a%167==0)\n                           \
    \                                                                            \
    \                                                         {\n                \
    \                                                                            \
    \                                                                        if (a%171==0)\n\
    \                                                                            \
    \                                                                            \
    \            {\n                                                             \
    \                                                                            \
    \                               if (a%177==0)\n                              \
    \                                                                            \
    \                      \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2w1at473.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp2w1at473.cpp:98:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   98 | }\n      | ^\n/tmp/tmp2w1at473.cpp:99:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   99 | int main() {\n     \
    \ |            ^\n/tmp/tmp2w1at473.cpp:109:1: error: expected \u2018}\u2019 at\
    \ end of input\n  109 | }\n      | ^\n/tmp/tmp2w1at473.cpp:93:161: note: to match\
    \ this \u2018{\u2019\n   93 |                                                \
    \                                                                            \
    \                                     {\n      |                             \
    \                                                                            \
    \                                                        ^\n/tmp/tmp2w1at473.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmp2w1at473.cpp:91:157:\
    \ note: to match this \u2018{\u2019\n   91 |                                 \
    \                                                                            \
    \                                                {\n      |                  \
    \                                                                            \
    \                                                               ^\n/tmp/tmp2w1at473.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmp2w1at473.cpp:89:153:\
    \ note: to match this \u2018{\u2019\n   89 |                                 \
    \                                                                            \
    \                                            {\n      |                      \
    \                                                                            \
    \                                                       ^\n/tmp/tmp2w1at473.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmp2w1at473.cpp:87:149:\
    \ note: to match this \u2018{\u2019\n   87 |                                 \
    \                                                                            \
    \                                        {\n      |                          \
    \                   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int A = a;\n    long long int\
    \ B = a;\n    long long int C = a;\n    long long int D = a;\n    long long int\
    \ E = a;\n    long long int F = a;\n    long long int G = a;\n    long long int\
    \ H = a;\n    long long int I = a;\n    long long int J = a;\n    long long int\
    \ K = a;\n    long long int L = a;\n    long long int M = a;\n    long long int\
    \ N = a;\n    long long int O = a;\n    long long int P = a;\n    long long int\
    \ Q = a;\n    long long int R = a;\n    long long int S = a;\n    long long int\
    \ T = a;\n    long long int U = a;\n    long long int V = a;\n    long long int\
    \ W = a;\n    long long int X = a;\n    long long int Y = a;\n    long long int\
    \ Z = a;\n    long long int aa = a;\n    long long int bb = a;\n    long long\
    \ int cc = a;\n    long long int dd = a;\n    long long int ee = a;\n    long\
    \ long int ff = a;\n    long long int gg = a;\n    long long int hh = a;\n   \
    \ long long int ii = a;\n    long long int jj = a;\n    long long int kk = a;\n\
    \    long long int ll = a;\n    long long int mm = a;\n    long long int nn =\
    \ a;\n    long long int oo = a;\n    long long int pp = a;\n    long \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ytp2im2.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp4ytp2im2.cpp:82:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   82 | }\n      | ^\n/tmp/tmp4ytp2im2.cpp:82:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a;\n    long long int c = a;\n    long long int\
    \ d = a;\n    long long int e = a;\n    long long int f = a;\n    long long int\
    \ g = a;\n    long long int h = a;\n    long long int i = a;\n    long long int\
    \ j = a;\n    long long int k = a;\n    long long int l = a;\n    long long int\
    \ m = a;\n    long long int n = a;\n    long long int o = a;\n    long long int\
    \ p = a;\n    long long int q = a;\n    long long int r = a;\n    long long int\
    \ s = a;\n    long long int t = a;\n    long long int u = a;\n    long long int\
    \ v = a;\n    long long int w = a;\n    long long int x = a;\n    long long int\
    \ y = a;\n    long long int z = a;\n    long long int aa = a;\n    long long int\
    \ ab = a;\n    long long int ac = a;\n    long long int ad = a;\n    long long\
    \ int ae = a;\n    long long int af = a;\n    long long int ag = a;\n    long\
    \ long int ah = a;\n    long long int ai = a;\n    long long int aj = a;\n   \
    \ long long int ak = a;\n    long long int al = a;\n    long long int am = a;\n\
    \    long long int an = a;\n    long long int ao = a;\n    long long int ap =\
    \ a;\n    long long int aq = a;\n    long long int ar = a;\n    long long int\
    \ as = a;\n    long long int at = a;\n    long long int au = a;\n    long long\
    \ int av = a;\n    long long int aw = a;\n    long long int ax = a;\n    long\
    \ long int ay = a;\n    long long int az = a;\n    long long int ba = a;\n   \
    \ long long int bb = a;\n    long long int bc = a;\n    long long int bd = a;\n\
    \    long long int be = a;\n    long long int bf = a;\n    long long int bg =\
    \ a;\n    long long int bh = a;\n    long long int bi = a;\n    long long int\
    \ bj = a;\n    long long int bk = a;\n    long long int bl = a;\n    long long\
    \ int bm = a;\n    long long int bn = a;\n    long long int bo = a;\n    long\
    \ long int bp = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuwan8juh: /tmp/tmpuwan8juh.cpp:86: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = a;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4tp164ka.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp4tp164ka.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmp4tp164ka.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmp4tp164ka.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmp4tp164ka.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmp4tp164ka.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ a;\n      |                   ^\n/tmp/tmp4tp164ka.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmp4tp164ka.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmp4tp164ka.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmp4tp164ka.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmp4tp164ka.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmp4tp164ka.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmp4tp164ka.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmp4tp164ka.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmp4tp164ka.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmp4tp164ka.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0)\n        return true;\n    if (a % 2 == 0)\n        return\
    \ iscube(a / 2);\n    return iscube(a - 1) * iscube(a - 1);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpqnhiv4qw: /tmp/tmpqnhiv4qw.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    int sum = 0;\n    for(int i = 1; i <= n; i++) {\n\
    \        sum += (pow(i,3));\n    }\n    return sum == a;\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_7an__ft: /tmp/tmp_7an__ft.cpp:25: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = a;\n    while (b < c)\
    \ {\n        if (b * b == c) return true;\n        b++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpousc7c1q: /tmp/tmpousc7c1q.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return false;\n    if (a%2==0)\
    \ return iscube(a/2);\n    if (a%3==0) return iscube(a/3);\n    if (a%5==0) return\
    \ iscube(a/5);\n    if (a%7==0) return iscube(a/7);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdyod_h0t: /tmp/tmpdyod_h0t.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return false;\n    if (a == 0)\n        return\
    \ true;\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 == 0)\n    \
    \    return true;\n    if (a % 7 == 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn5kk4vek: /tmp/tmpn5kk4vek.cpp:28: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a <= 0) return false;\n    if (a == 1) return true;\n    if (a\
    \ == 2) return true;\n    if (a == 3) return true;\n    if (a == 4) return true;\n\
    \    if (a == 5) return true;\n    if (a == 6) return true;\n    if (a == 7) return\
    \ true;\n    if (a == 8) return true;\n    if (a == 9) return true;\n    if (a\
    \ == 10) return true;\n    if (a == 11) return true;\n    if (a == 12) return\
    \ true;\n    if (a == 13) return true;\n    if (a == 14) return true;\n    if\
    \ (a == 15) return true;\n    if (a == 16) return true;\n    if (a == 17) return\
    \ true;\n    if (a == 18) return true;\n    if (a == 19) return true;\n    if\
    \ (a == 20) return true;\n    if (a == 21) return true;\n    if (a == 22) return\
    \ true;\n    if (a == 23) return true;\n    if (a == 24) return true;\n    if\
    \ (a == 25) return true;\n    if (a == 26) return true;\n    if (a == 27) return\
    \ true;\n    if (a == 28) return true;\n    if (a == 29) return true;\n    if\
    \ (a == 30) return true;\n    if (a == 31) return true;\n    if (a == 32) return\
    \ true;\n    if (a == 33) return true;\n    if (a == 34) return true;\n    if\
    \ (a == 35) return true;\n    if (a == 36) return true;\n    if (a == 37) return\
    \ true;\n    if (a == 38) return true;\n    if (a == 39) return true;\n    if\
    \ (a == 40) return true;\n    if (a == 41) return true;\n    if (a == 42) return\
    \ true;\n    if (a == 43) return true;\n    if (a == 44) return true;\n    if\
    \ (a == 45) return true;\n    if (a == 46) return true;\n    if (a == 47) return\
    \ true;\n    if (a == 48) return true;\n    if (a == 49) return true;\n    if\
    \ (a == 50) return true;\n    if (a == 51) return true;\n    if (a == 52) return\
    \ true;\n    if (a == 53) return true;\n    if (a == 54) return true;\n    if\
    \ (a == 55) return true;\n    if (a == 56) return true;\n    if (a == 57) return\
    \ true;\n    if (a == 58) return true;\n    if (a == 59) return true;\n    if\
    \ (a == 60) return true;\n    if (a == 61) return true;\n    if (a == 62) return\
    \ true;\n    if (a == 63) return true;\n    if (a == 64) return true;\n    if\
    \ (a == 65) return true;\n    if (a == 66) return true;\n    if (a == 67) return\
    \ true;\n    if (a == 68) return true;\n    if (a == 69) return true;\n    if\
    \ (a == 70) return true;\n    if (a == 71) return true;\n    if (a == 72) return\
    \ true;\n    if (a == 73) return true;\n    if (a == 74) return true;\n    if\
    \ (a == 75) return true;\n    if (a == 76) return true;\n    if (a == 77) return\
    \ true;\n    if (a == 78) return true;\n    if (a == 79) return true;\n    if\
    \ (a == 80) return true;\n    if (a == 81) return true;\n    if (a == 82) return\
    \ true;\n    if (a == 83) return true;\n    if (\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnb6tyg_r.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpnb6tyg_r.cpp:99:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   99 | }\n      | ^\n/tmp/tmpnb6tyg_r.cpp:98:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   98 |     if (\n      |        ~^\n    \
    \  |         )\n   99 | }\n      | ~        \n/tmp/tmpnb6tyg_r.cpp:99:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   99 | }\n      | ^\n\
    /tmp/tmpnb6tyg_r.cpp:99:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2 == 0)\n        if (a%3 == 0)\n            if (a%5 == 0)\n\
    \                if (a%7 == 0)\n                    return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmputd_8aqn: /tmp/tmputd_8aqn.cpp:23: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a==1) return true;\n    if (a==2)\
    \ return true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if\
    \ (a==5) return true;\n    if (a==6) return true;\n    if (a==7) return true;\n\
    \    if (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return\
    \ true;\n    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13)\
    \ return true;\n    if (a==14) return true;\n    if (a==15) return true;\n   \
    \ if (a==16) return true;\n    if (a==17) return true;\n    if (a==18) return\
    \ true;\n    if (a==19) return true;\n    if (a==20) return true;\n    if (a==21)\
    \ return true;\n    if (a==22) return true;\n    if (a==23) return true;\n   \
    \ if (a==24) return true;\n    if (a==25) return true;\n    if (a==26) return\
    \ true;\n    if (a==27) return true;\n    if (a==28) return true;\n    if (a==29)\
    \ return true;\n    if (a==30) return true;\n    if (a==31) return true;\n   \
    \ if (a==32) return true;\n    if (a==33) return true;\n    if (a==34) return\
    \ true;\n    if (a==35) return true;\n    if (a==36) return true;\n    if (a==37)\
    \ return true;\n    if (a==38) return true;\n    if (a==39) return true;\n   \
    \ if (a==40) return true;\n    if (a==41) return true;\n    if (a==42) return\
    \ true;\n    if (a==43) return true;\n    if (a==44) return true;\n    if (a==45)\
    \ return true;\n    if (a==46) return true;\n    if (a==47) return true;\n   \
    \ if (a==48) return true;\n    if (a==49) return true;\n    if (a==50) return\
    \ true;\n    if (a==51) return true;\n    if (a==52) return true;\n    if (a==53)\
    \ return true;\n    if (a==54) return true;\n    if (a==55) return true;\n   \
    \ if (a==56) return true;\n    if (a==57) return true;\n    if (a==58) return\
    \ true;\n    if (a==59) return true;\n    if (a==60) return true;\n    if (a==61)\
    \ return true;\n    if (a==62) return true;\n    if (a==63) return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5zd2boek: /tmp/tmp5zd2boek.cpp:83: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    if\
    \ (a % 5 == 0) return true;\n    if (a % 7 == 0) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpet2kzsll: /tmp/tmpet2kzsll.cpp:22: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b= a%a;\n    long long int c= a%b;\n    long long int\
    \ d= a%c;\n    long long int e= a%d;\n    long long int f= a%e;\n    long long\
    \ int g= a%f;\n    long long int h= a%g;\n    long long int i= a%h;\n    long\
    \ long int j= a%i;\n    long long int k= a%j;\n    long long int l= a%k;\n   \
    \ long long int m= a%l;\n    long long int n= a%m; \n    long long int o= a%n;\n\
    \    long long int p= a%o;\n    long long int q= a%p;\n    long long int r= a%q;\n\
    \    long long int s= a%r;\n    long long int t= a%s;\n    long long int u= a%t;\n\
    \    long long int v= a%u;\n    long long int w= a%v;\n    long long int x= a%w;\n\
    \    long long int y= a%x;\n    long long int z= a%y;\n    long long int aa= a%z;\n\
    \    long long int bb= a%aa;\n    long long int cc= a%bb;\n    long long int dd=\
    \ a%cc;\n    long long int ee= a%dd;\n    long long int ff= a%ee;\n    long long\
    \ int gg= a%ff;\n    long long int hh= a%gg;\n    long long int ii= a%hh;\n  \
    \  long long int jj= a%ii;\n    long long int kk= a%jj;\n    long long int ll=\
    \ a%kk;\n    long long int mm= a%ll;\n    long long int nn= a%mm;\n    long long\
    \ int oo= a%nn;\n    long long int pp= a%oo;\n    long long int qq= a%pp;\n  \
    \  long long int rr= a%qq;\n    long long int ss= a%rr;\n    long long int tt=\
    \ a%ss;\n    long long int uu= a%tt;\n    long long int vv= a%uu;\n    long long\
    \ int ww= a%vv;\n    long long int xx\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdr8r18de.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpdr8r18de.cpp:63:1: error: expected initializer before \u2018}\u2019 token\n\
    \   63 | }\n      | ^\n/tmp/tmpdr8r18de.cpp:63:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    long long cube = 1;\n    long long i = 1;\n    long\
    \ long j = 1;\n    long long k = 1;\n    long long l = 1;\n    long long m = 1;\n\
    \    long long n = 1;\n    long long o = 1;\n    long long p = 1;\n    long long\
    \ q = 1;\n    long long r = 1;\n    long long s = 1;\n    long long t = 1;\n \
    \   long long u = 1;\n    long long v = 1;\n    long long w = 1;\n    long long\
    \ x = 1;\n    long long y = 1;\n    long long z = 1;\n    long long a = 1;\n \
    \   long long b = 1;\n    long long c = 1;\n    long long d = 1;\n    long long\
    \ e = 1;\n    long long f = 1;\n    long long g = 1;\n    long long h = 1;\n \
    \   long long i = 1;\n    long long j = 1;\n    long long k = 1;\n    long long\
    \ l = 1;\n    long long m = 1;\n    long long n = 1;\n    long long o = 1;\n \
    \   long long p = 1;\n    long long q = 1;\n    long long r = 1;\n    long long\
    \ s = 1;\n    long long t = 1;\n    long long u = 1;\n    long long v = 1;\n \
    \   long long w = 1;\n    long long x = 1;\n    long long y = 1;\n    long long\
    \ z = 1;\n    long long a = 1;\n    long long b = 1;\n    long long c = 1;\n \
    \   long long d = 1;\n    long long e = 1;\n    long long f = 1;\n    long long\
    \ g = 1;\n    long long h = 1;\n    long long i = 1;\n    long long j = 1;\n \
    \   long long k = 1;\n    long long l = 1;\n    long long m = 1;\n    long long\
    \ n = 1;\n    long long o = 1;\n    long long p = 1;\n    long long q = 1;\n \
    \   long long r = 1;\n    long long s = 1;\n    long long t = 1;\n    long long\
    \ u = 1;\n    long long v = 1;\n    long long w = 1;\n    long long x = 1;\n \
    \   long long y = 1;\n    long long z = 1;\n    long long a = 1;\n    long long\
    \ b = 1;\n    long long c = 1;\n    long long d = 1;\n    long long e = 1;\n \
    \   long long f = 1;\n    long long g = 1;\n    long long h = 1;\n    long long\
    \ i = 1;\n    long long j = 1;\n    long long k = 1;\n    long long l = 1;\n \
    \   long long m = 1;\n    long long n = \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8bffhuw.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpk8bffhuw.cpp:21:15: error: conflicting declaration \u2018long long int\
    \ n\u2019\n   21 |     long long n = 1;\n      |               ^\n/tmp/tmpk8bffhuw.cpp:14:9:\
    \ note: previous declaration as \u2018int n\u2019\n   14 |     int n = a;\n  \
    \    |         ^\n/tmp/tmpk8bffhuw.cpp:34:15: error: declaration of \u2018long\
    \ long int a\u2019 shadows a parameter\n   34 |     long long a = 1;\n      |\
    \               ^\n/tmp/tmpk8bffhuw.cpp:42:15: error: redeclaration of \u2018\
    long long int i\u2019\n   42 |     long long i = 1;\n      |               ^\n\
    /tmp/tmpk8bffhuw.cpp:16:15: note: \u2018long long int i\u2019 previously declared\
    \ here\n   16 |     long long i = 1;\n      |               ^\n/tmp/tmpk8bffhuw.cpp:43:15:\
    \ error: redeclaration of \u2018long long int j\u2019\n   43 |     long long j\
    \ = 1;\n      |               ^\n/tmp/tmpk8bffhuw.cpp:17:15: note: \u2018long\
    \ long int j\u2019 previously declared here\n   17 |     long long j = 1;\n  \
    \    |               ^\n/tmp/tmpk8bffhuw.cpp:44:15: error: redeclaration of \u2018\
    long long int k\u2019\n   44 |     long long k = 1;\n      |               ^\n\
    /tmp/tmpk8bffhuw.cpp:18:15: note: \u2018long long int k\u2019 previously declared\
    \ here\n   18 |     long long k = 1;\n      |               ^\n/tmp/tmpk8bffhuw.cpp:45:15:\
    \ error: redeclaration of \u2018long long int l\u2019\n   45 |     long long l\
    \ = 1;\n      |               ^\n/tmp/tmpk8bffhuw.cpp:19:15: note: \u2018long\
    \ long int l\u2019 previously declared here\n   19 |     long long l = 1;\n  \
    \    |               ^\n/tmp/tmpk8bffhuw.cpp:46:15: error: redeclaration of \u2018\
    long long int m\u2019\n   46 |     long long m = 1;\n      |               ^\n\
    /tmp/tmpk8bffhuw.cpp:20:15: note: \u2018long long int m\u2019 previously declared\
    \ here\n   20 |     long long m = 1;\n      |               ^\n/tmp/tmpk8bffhuw.cpp:47:15:\
    \ error: conflicting declaration \u2018long long int n\u2019\n   47 |     long\
    \ long n = 1;\n      |               ^\n/tmp/tmpk8bffhuw.cpp:14:9: note: previous\
    \ declaration as \u2018int n\u2019\n   14 |     int n = a;\n      |         ^\n\
    /tmp/tmpk8bffhuw.cpp:48:15: error: redeclaration of \u2018long long int o\u2019\
    \n   48 |     long long o = 1;\n      |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n    long long int w = 1;\n    long long int x = 1;\n    long long int\
    \ y = 1;\n    long long int z = 1;\n    long long int a = 1;\n    long long int\
    \ b = 1;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ete3orh.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp5ete3orh.cpp:39:19: error: declaration of \u2018long long int a\u2019\
    \ shadows a parameter\n   39 |     long long int a = 1;\n      |             \
    \      ^\n/tmp/tmp5ete3orh.cpp:40:19: error: redeclaration of \u2018long long\
    \ int b\u2019\n   40 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmp5ete3orh.cpp:14:19: note: \u2018long long int b\u2019 previously declared\
    \ here\n   14 |     long long int b = 1;\n      |                   ^\n/tmp/tmp5ete3orh.cpp:41:19:\
    \ error: redeclaration of \u2018long long int c\u2019\n   41 |     long long int\
    \ c = 1;\n      |                   ^\n/tmp/tmp5ete3orh.cpp:15:19: note: \u2018\
    long long int c\u2019 previously declared here\n   15 |     long long int c =\
    \ 1;\n      |                   ^\n/tmp/tmp5ete3orh.cpp:42:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   42 |     long long int d = 1;\n      |  \
    \                 ^\n/tmp/tmp5ete3orh.cpp:16:19: note: \u2018long long int d\u2019\
    \ previously declared here\n   16 |     long long int d = 1;\n      |        \
    \           ^\n/tmp/tmp5ete3orh.cpp:43:19: error: redeclaration of \u2018long\
    \ long int e\u2019\n   43 |     long long int e = 1;\n      |                \
    \   ^\n/tmp/tmp5ete3orh.cpp:17:19: note: \u2018long long int e\u2019 previously\
    \ declared here\n   17 |     long long int e = 1;\n      |                   ^\n\
    /tmp/tmp5ete3orh.cpp:44:19: error: redeclaration of \u2018long long int f\u2019\
    \n   44 |     long long int f = 1;\n      |                   ^\n/tmp/tmp5ete3orh.cpp:18:19:\
    \ note: \u2018long long int f\u2019 previously declared here\n   18 |     long\
    \ long int f = 1;\n      |                   ^\n/tmp/tmp5ete3orh.cpp:45:19: error:\
    \ redeclaration of \u2018long long int g\u2019\n   45 |     long long int g =\
    \ 1;\n      |                   ^\n/tmp/tmp5ete3orh.cpp:19:19: note: \u2018long\
    \ long int g\u2019 previously declared here\n   19 |     long long int g = 1;\n\
    \      |                   ^\n/tmp/tmp5ete3orh.cpp:46:19: error: redeclaration\
    \ of \u2018long long int h\u2019\n   46 |     long long int h = 1;\n      |  \
    \                 ^\n/tmp/tmp5ete3orh.cpp:20:19: note: \u2018long long int h\u2019\
    \ previously declared here\n   20 |     long l"
  exit_code: 1
  status: SyntaxError
