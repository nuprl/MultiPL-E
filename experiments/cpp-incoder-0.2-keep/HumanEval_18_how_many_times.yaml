name: HumanEval_18_how_many_times
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given\
  \ substring can be found in the original string. Count overlaping cases.\n// >>>\
  \ how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>>\
  \ how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string, std::string\
  \ substring) {\n"
tests: "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
  \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
  john doe\"), (\"john\")) == (1));\n}\n"
completions: ["    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        ++count;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    int i = 0;\n    int j = 0;\n    while\
    \ (i < string.size() && j < substring.size()) {\n        if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] < substring[j]) {\n            i++;\n        }\n    \
    \    else {\n            j++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n       \
    \ pos = string.find(substring, pos);\n        if (pos == string::npos) {\n   \
    \         break;\n        }\n        ++count;\n        ++pos;\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[sublen\
    \ - 1]) {\n            count++;\n            pos += sublen;\n        }\n     \
    \   else {\n            pos++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    long pos = 0;\n    long len = string.length();\n    long sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos++;\n            count++;\n            while (pos < len &&\
    \ string[pos] == substring[sublen]) {\n                pos++;\n              \
    \  count++;\n            }\n        }\n        pos++;\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            ", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); it++) {\n        if (*it == substring[0]) {\n          \
    \  for (auto it2 = substring.begin(); it2 != substring.end(); it2++) {\n     \
    \           if (*it == *it2) {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len = string.length();\n    long sublen = substring.length();\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] < substring[j]) {\n            i++;\n \
    \       }\n        else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    int i = 0;\n    int j =\
    \ 0;\n    while (i < string.size() && j < substring.size()) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] < substring[j]) {\n            j++;\n \
    \       }\n        else {\n            i++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length() - substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.compare(mid, substring.length(), substring) == 0) {\n            count++;\n\
    \            start = mid + 1;\n        } else {\n            end = mid;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen\
    \ && string[i] == substring[j]) {\n            j++;\n        }\n        if (j\
    \ == sublen) {\n            count++;\n        }\n        i++;\n        j = 0;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += how_many_times(string.substr(1),\
    \ substring);\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  long len = string.length();\n    long sublen = substring.length();\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] > substring[j]) {\n            i++;\n \
    \       }\n        else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count++;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    int i = 0;\n    int j =\
    \ 0;\n    while (i < string.size() && j < substring.size()) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] < substring[j]) {\n            i++;\n \
    \       }\n        else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            count++;\n        \
    \    pos = 0;\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  for (auto it = string.begin(); it != string.end(); it++) {\n        if (*it\
    \ == substring[0]) {\n            for (auto it2 = substring.begin(); it2 != substring.end();\
    \ it2++) {\n                if (*it == *it2) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.size()\
    \ && j < substring.size()) {\n        if (string[i] == substring[j]) {\n     \
    \       i++;\n            j++;\n            count++;\n        } else {\n     \
    \       if (string[i] < substring[j]) {\n                i++;\n            } else\
    \ {\n                j++;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            count++;\n            pos += sublen;\n     \
    \   } else {\n            pos = 0;\n        }\n    }\n    return count;", "  \
    \  long count = 0;\n    for (auto &c : string) {\n        if (c == substring[0])\
    \ {\n            count += how_many_times(string.substr(1), substring);\n     \
    \   } else if (c == substring[1]) {\n            count += how_many_times(string.substr(0,\
    \ string.size() - 1), substring);\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i++;\n\
    \            j++;\n        } else if (string[i] < substring[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n \
    \       pos = string.find(substring, pos);\n        if (pos == string::npos) {\n\
    \            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  count += 1;\n            for (auto it2 = substring.begin(); it2 != substring.end();\
    \ ++it2) {\n                if (*it == *it2) {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != string::npos) {\n        ++count;\n\
    \        pos = pos + substring.length();\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  count += 1;\n            for (auto it2 = substring.begin(); it2 != substring.end();\
    \ ++it2) {\n                if (*it == *it2) {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    while (start < len) {\n        end\
    \ = start + sublen;\n        while (end < len && string[end] == substring[start])\
    \ {\n            end++;\n        }\n        if (end == len) {\n            count++;\n\
    \            start = end;\n        }\n        else {\n            start = end;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    int i = 0;\n\
    \    int j = 0;\n    while (i < string.size() && j < substring.size()) {\n   \
    \     if (string[i] == substring[j]) {\n            i++;\n            j++;\n \
    \           count++;\n        } else if (string[i] < substring[j]) {\n       \
    \     i++;\n        } else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == substring[0]) {\n            count += how_many_times(string.substr(i\
    \ + 1), substring);\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len = string.length();\n    long sublen = substring.length();\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen) {\n\
    \            if (string[i] == substring[j]) {\n                count++;\n    \
    \            i += 1;\n                j += 1;\n            }\n            else\
    \ {\n                j += 1;\n            }\n        }\n        j = 0;\n     \
    \   i += 1;\n    }\n    return count;", "    long count = 0;\n    size_t pos =\
    \ 0;\n    while (pos < string.size()) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       ++count;\n        ++pos;\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i++;\n\
    \            j++;\n        }\n        else if (string[i] < substring[j]) {\n \
    \           i++;\n        }\n        else {\n            j++;\n        }\n   \
    \ }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            count = 0;\n      \
    \      pos += sublen;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != std::string::npos) {\n        ++count;\n   \
    \     pos += substring.length();\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n       \
    \     for (auto &cc : substring) {\n                if (cc == c) {\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != std::string::npos) {\n        count++;\n   \
    \     pos += substring.length();\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            count++;\n        \
    \    pos += sublen;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  for (auto it2 = substring.begin(); it2 != substring.end(); ++it2) {\n     \
    \           if (*it == *it2) {\n                    ++count;\n               \
    \ }\n            }\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] > substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    int i = 0;\n    while (i < string.length()) {\n        if (string[i]\
    \ == substring[0]) {\n            i++;\n            int j = 0;\n            while\
    \ (j < substring.length() && string[i] == substring[j]) {\n                i++;\n\
    \                j++;\n            }\n            if (j == substring.length())\
    \ {\n                count++;\n            }\n        }\n        i++;\n    }\n\
    \    return count;", "    long count = 0;\n    long len = string.length();\n \
    \   long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n   \
    \         j++;\n        }\n        if (j == sublen) {\n            count++;\n\
    \            i += sublen - 1;\n            j = 0;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    long len = string.length();\n    long sublen\
    \ = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len\
    \ && j < sublen) {\n        if (string[i] == substring[j]) {\n            i++;\n\
    \            j++;\n            count++;\n        }\n        else if (string[i]\
    \ < substring[j]) {\n            i++;\n        }\n        else {\n           \
    \ j++;\n        }\n    }\n    return count;", "    long count = 0;\n    long len\
    \ = string.length();\n    long sublen = substring.length();\n    long i = 0;\n\
    \    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i]\
    \ == substring[j]) {\n            j++;\n        }\n        if (j == sublen) {\n\
    \            count++;\n            i += sublen - 1;\n            j = 0;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] < substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    while (start < len) {\n        end\
    \ = start + sublen;\n        if (string[start] == substring[0] && string[end]\
    \ == substring[sublen - 1]) {\n            count++;\n            start = end +\
    \ 1;\n        } else {\n            start = end + 1;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto it = string.begin(); it != string.end();\
    \ ++it) {\n        if (*it == substring[0]) {\n            for (auto it2 = substring.begin();\
    \ it2 != substring.end(); ++it2) {\n                if (*it == *it2) {\n     \
    \               ++count;\n                }\n            }\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long len = string.length();\n \
    \   long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n   \
    \         ++j;\n        }\n        if (j == sublen) {\n            ++count;\n\
    \            i = len;\n        }\n        while (j < sublen && string[i] == substring[j])\
    \ {\n            ++j;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            count++;\n            i++;\n            j++;\n        } else if (string[i]\
    \ > substring[j]) {\n            i++;\n        } else {\n            j++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos)\n         \
    \   break;\n        ++count;\n        pos += sublen;\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        ++count;\n        ++pos;\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == substring[0]) {\n            for (size_t j = 0; j < substring.size(); j++)\
    \ {\n                if (string[i + j] == substring[j]) {\n                  \
    \  count += 1;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long pos = 0;\n    long\
    \ len = string.length();\n    long sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string.at(pos) == substring.at(sublen)) {\n          \
    \  count++;\n            pos += sublen;\n        } else {\n            pos = 0;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    size_t pos =\
    \ 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] < substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] > substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n       \
    \     count += how_many_times(string.substr(1), substring);\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos\
    \ = string.find(substring, pos)) != std::string::npos) {\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n\
    \            j++;\n        }\n        if (j == sublen) {\n            count++;\n\
    \            i += sublen - 1;\n            j = 0;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[sublen\
    \ - 1]) {\n            count++;\n            pos += sublen;\n        }\n     \
    \   else {\n            pos++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  for (auto it2 = substring.begin(); it2 != substring.end(); ++it2) {\n     \
    \           if (*it == *it2) {\n                    ++count;\n               \
    \ }\n            }\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len = string.length();\n    long sublen = substring.length();\n    long\
    \ i = 0;\n    while (i < len) {\n        if (string[i] == substring[0]) {\n  \
    \          i += sublen;\n            count++;\n        }\n        else if (string[i]\
    \ == substring[1]) {\n            i += sublen;\n            count++;\n       \
    \ }\n        else if (string[i] == substring[2]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[3])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[4]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[5]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[6])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[7]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[8]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[9])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[10]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[11]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[12])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[13]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[14]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[15])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[16]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[17]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[18])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[19]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[20]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[21])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[22]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[23]) {\n            i += sublen;\n\
    \            count++;\n        }\n        else if (string[i] == substring[24])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[25]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == substring[0]) {\n            for (size_t j\
    \ = i; j < string.size(); j++) {\n                if (string[j] == substring[1])\
    \ {\n                    count += 1;\n                    i = j;\n           \
    \         break;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    while (pos < len) {\n        if\
    \ (string[pos] == substring[0]) {\n            pos++;\n            count++;\n\
    \            while (pos < len && string[pos] == substring[sublen - 1]) {\n   \
    \             pos++;\n                sublen--;\n                count++;\n  \
    \          }\n        }\n        pos++;\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n\
    \        if (string[i] == substring[0]) {\n            i += sublen;\n        \
    \    count++;\n        }\n        else if (string[i] == substring[sublen - 1])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[0] && string[i + 1] == substring[sublen - 1]) {\n  \
    \          i += sublen;\n            count++;\n        }\n        else if (string[i]\
    \ == substring[0] && string[i + 1] != substring[sublen - 1]) {\n            i\
    \ += sublen;\n            count++;\n        }\n        else if (string[i] != substring[0]\
    \ && string[i + 1] == substring[sublen - 1]) {\n            i += sublen;\n   \
    \         count++;\n        }\n        else if (string[i] != substring[0] && string[i\
    \ + 1] != substring[sublen - 1]) {\n            i += sublen;\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;", "    long count = 0;\n  \
    \  int i = 0;\n    while (i < string.size()) {\n        int j = string.find(substring,\
    \ i);\n        if (j == std::string::npos) {\n            break;\n        }\n\
    \        i = j + 1;\n        count++;\n    }\n    return count;", "    long count\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.size() && j < substring.size())\
    \ {\n        if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] < substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long substring_length = substring.length();\n  \
    \  while (start < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring_length) == substring) {\n            count++;\n            start =\
    \ mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    long len = string.length();\n    long sublen\
    \ = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len)\
    \ {\n        while (j < sublen && string[i] == substring[j]) {\n            j++;\n\
    \        }\n        if (j == sublen) {\n            count++;\n            i +=\
    \ sublen - 1;\n            j = 0;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            pos += sublen;\n\
    \            count++;\n        }\n        else if (string[pos] == substring[sublen\
    \ - 1]) {\n            pos += sublen;\n            count++;\n        }\n     \
    \   else {\n            pos++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        } else {\n            if (string[i] < substring[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n    }\n    return count;", "    long count = 0;\n    size_t\
    \ pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == std::string::npos) {\n            break;\n        }\n        ++count;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    for (auto it = string.begin(); it != string.end(); ++it)\
    \ {\n        if (*it == substring[0]) {\n            for (auto it2 = substring.begin();\
    \ it2 != substring.end(); ++it2) {\n                if (*it == *it2) {\n     \
    \               ++count;\n                }\n            }\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long len = string.length();\n \
    \   long sublen = substring.length();\n    long start = 0;\n    long end = 0;\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        start = i;\n\
    \        while (i < len && string[i] == substring[j]) {\n            i++;\n  \
    \          j++;\n        }\n        end = i;\n        while (i < len && string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n        }\n        if\
    \ (j == sublen) {\n            count++;\n            j = sublen;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length() - substring.length();\n    while (start < end) {\n   \
    \     long mid = (start + end) / 2;\n        if (string.compare(mid, substring.length(),\
    \ substring) == 0) {\n            count++;\n            start = mid + 1;\n   \
    \     } else {\n            end = mid;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       ++count;\n        ++pos;\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    while (i < len) {\n        if (string[i] == substring[0])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] == substring[sublen - 1]) {\n            i += sublen;\n         \
    \   count++;\n        }\n        else if (string[i] == substring[0] && string[i\
    \ + 1] == substring[sublen - 1]) {\n            i += sublen;\n            count++;\n\
    \        }\n        else if (string[i] == substring[0] && string[i + 1] != substring[sublen\
    \ - 1]) {\n            i += sublen;\n            count++;\n        }\n       \
    \ else if (string[i] != substring[0] && string[i + 1] == substring[sublen - 1])\
    \ {\n            i += sublen;\n            count++;\n        }\n        else if\
    \ (string[i] != substring[0] && string[i + 1] != substring[sublen - 1]) {\n  \
    \          i += sublen;\n            count++;\n        }\n        i++;\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len\
    \ = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long start = 0;\n    long end = 0;\n\
    \    long mid = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while\
    \ (i < len) {\n        mid = (start + end) / 2;\n        if (string[i] == substring[0])\
    \ {\n            start = mid + 1;\n            end = mid;\n            i = i +\
    \ 1;\n        } else if (string[i] == substring[1]) {\n            end = mid -\
    \ 1;\n            i = i + 1;\n        } else {\n            i = i + 1;\n     \
    \   }\n    }\n    mid = (start + end) / 2;\n    if (start == end) {\n        while\
    \ (i < len) {\n            if (string[i] == substring[0]) {\n                count\
    \ = count + 1;\n                i = i + 1;\n            } else if (string[i] ==\
    \ substring[1]) {\n                count = count + 1;\n                i = i +\
    \ 1;\n            } else {\n                i = i + 1;\n            }\n      \
    \  }\n    } else {\n        while (i < len) {\n            if (string[i] == substring[0])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[1]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[2])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[3]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[4])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[5]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[6])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[7]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[8])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[9]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[10])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[11]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[12])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[13]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[14])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[15]) {\n                count = count +\
    \ 1;\n                i = i + 1;\n            } else if (string[i] == substring[16])\
    \ {\n                count = count + 1;\n                i = i + 1;\n        \
    \    } else if (string[i] == substring[17]) {\n                count = count +\
    \ 1;\n", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count += 1;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long len = substring.length();\n    while (start\
    \ < end) {\n        if (string[start] == substring[0]) {\n            if (start\
    \ == 0) {\n                start = start + 1;\n                end = end + 1;\n\
    \            } else {\n                start = start + 1;\n            }\n   \
    \     } else if (string[start] == substring[len - 1]) {\n            if (start\
    \ == end - len) {\n                start = start + 1;\n                end = end\
    \ + 1;\n            } else {\n                start = start + 1;\n           \
    \ }\n        } else {\n            start = start + 1;\n            end = end +\
    \ 1;\n        }\n        count = count + 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != string::npos) {\n        ++count;\n        pos += substring.length();\n \
    \   }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] < substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == substring[0]) {\n            count += how_many_times(string.substr(i + 1),\
    \ substring);\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n        ++count;\n        pos = pos + substring.length();\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += 1;\n            for (auto\
    \ &cc : substring) {\n                if (c == cc) {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen\
    \ && string[i] == substring[j]) {\n            ++j;\n        }\n        if (j\
    \ == sublen) {\n            ++count;\n            i += sublen - 1;\n         \
    \   j = 0;\n        }\n    }\n    return count;", "    long count = 0;\n    for\
    \ (auto it = string.begin(); it != string.end(); it++) {\n        if (*it == substring[0])\
    \ {\n            for (auto it2 = substring.begin(); it2 != substring.end(); it2++)\
    \ {\n                if (*it == *it2) {\n                    count++;\n      \
    \          }\n            }\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] < substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == substring[0]) {\n            for (size_t j = 0; j < substring.length(); j++)\
    \ {\n                if (string[i + j] != substring[j]) {\n                  \
    \  break;\n                }\n            }\n            if (j == substring.length())\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    int i = 0;\n    int j =\
    \ 0;\n    while (i < string.size() && j < substring.size()) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] > substring[j]) {\n            j++;\n \
    \       }\n        else if (string[i] < substring[j]) {\n            i++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n \
    \       pos = string.find(substring, pos);\n        if (pos == string::npos) {\n\
    \            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.size() && j < substring.size())\
    \ {\n        if (string[i] == substring[j]) {\n            i++;\n            j++;\n\
    \            count++;\n        } else if (string[i] > substring[j]) {\n      \
    \      j++;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i\
    \ < string.size() && j < substring.size()) {\n        if (string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n            count++;\n        }\n   \
    \     else if (string[i] > substring[j]) {\n            j++;\n        }\n    \
    \    else {\n            i++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n       \
    \ pos = string.find(substring, pos);\n        if (pos == string::npos) {\n   \
    \         break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        } else if (string[i]\
    \ < substring[j]) {\n            i++;\n        } else {\n            j++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long start = 0;\n    long end = 0;\n    long i = 0;\n    long j = 0;\n  \
    \  while (i < len) {\n        while (j < sublen) {\n            if (string[i]\
    \ == substring[j]) {\n                count++;\n                i += sublen;\n\
    \                j++;\n            } else {\n                j++;\n          \
    \  }\n        }\n        i++;\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len =\
    \ string.length();\n    size_t sublen = substring.length();\n    while (pos <\
    \ len) {\n        if (string.at(pos) == substring.at(sublen)) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string.at(pos) == substring.at(0))\
    \ {\n            count++;\n            pos++;\n        }\n        else {\n   \
    \         pos = 0;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n        ++count;\n        pos = pos + substring.length();\n    }\n    return\
    \ count;", "    long count = 0;\n    long len = string.length();\n    long sublen\
    \ = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len)\
    \ {\n        while (j < sublen && string[i] == substring[j]) {\n            ++j;\n\
    \        }\n        if (j == sublen) {\n            ++count;\n            i +=\
    \ sublen - 1;\n            j = 0;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n  \
    \  size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            count++;\n            pos += sublen;\n     \
    \   } else {\n            pos = 0;\n        }\n    }\n    return count;", "  \
    \  long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            count++;\n            i++;\n            j++;\n        } else if (string[i]\
    \ < substring[j]) {\n            i++;\n        } else {\n            j++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string[pos] == substring[0]) {\n       \
    \     count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[sublen - 1]) {\n            count++;\n            pos += sublen;\n\
    \        }\n        else {\n            pos++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n\
    \            j++;\n        }\n        if (j == sublen) {\n            count++;\n\
    \        }\n        i++;\n        j = 0;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto it = string.begin(); it != string.end(); ++it) {\n\
    \        if (*it == substring[0]) {\n            count += 1;\n            for\
    \ (auto it2 = substring.begin(); it2 != substring.end(); ++it2) {\n          \
    \      if (*it == *it2) {\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] > substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long start = 0;\n    long end = 0;\n    long i = 0;\n    long j = 0;\n  \
    \  while (i < len) {\n        while (j < sublen) {\n            if (string[i]\
    \ == substring[j]) {\n                count++;\n                j++;\n       \
    \     } else {\n                j = 0;\n            }\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ (pos < string.length()) {\n        pos = string.find(substring, pos);\n    \
    \    if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        ++count;\n        pos += sublen;\n    }\n    return count;", "  \
    \  long count = 0;\n    int i = 0;\n    while (i < string.length()) {\n      \
    \  if (string[i] == substring[0]) {\n            i += 1;\n            while (i\
    \ < string.length() && string[i] == substring[1]) {\n                i += 1;\n\
    \                count += 1;\n            }\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    return count;", "    long count = 0;\n    size_t pos\
    \ = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += 1;\n            for (auto\
    \ &c2 : substring) {\n                if (c == c2) break;\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ (pos < string.length()) {\n        pos = string.find(substring, pos);\n    \
    \    if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;"]
stop_tokens:
- "\n}"
