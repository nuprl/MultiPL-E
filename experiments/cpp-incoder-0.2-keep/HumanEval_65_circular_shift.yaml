name: HumanEval_65_circular_shift
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
  \ of the integer x, shift the digits right by shift\n// and return the result as\
  \ a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12,\
  \ 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nstd::string circular_shift(long\
  \ x, long shift) {\n"
tests: "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
  \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
  \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
  \ (101)) == (\"11\"));\n}\n"
completions: ["    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n   \
    \ while (m <= shift) {\n        long r = n / m;\n        ans = std::to_string(r)\
    \ + ans;\n        n = m;\n        m *= 10;\n    }\n    ans = std::to_string(n)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n  \
    \  long m = 1;\n    while (shift > m) {\n        ans = std::to_string(n%10) +\
    \ ans;\n        n = n/10;\n        m += 1;\n    }\n    ans = std::to_string(n%10)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n  \
    \  long carry = 0;\n    long digit;\n    long shift2 = shift;\n    while (n !=\
    \ 0) {\n        digit = n % 10;\n        n /= 10;\n        carry = digit + carry;\n\
    \        ans = std::to_string(carry) + ans;\n        shift2 -= 1;\n    }\n   \
    \ if (shift2 > 0) {\n        ans = std::to_string(carry) + ans;\n    }\n    return\
    \ ans;", "  std::string ans = \"\";\n  long n = x;\n  while (shift > 0) {\n  \
    \  long r = n / 10;\n    ans = std::to_string(r) + ans;\n    n = r;\n    shift\
    \ -= 1;\n  }\n  if (shift > 0)\n    ans = std::to_string(n) + ans;\n  return ans;",
  "  std::string ans = \"\";\n  long n = x;\n  long m = 1;\n  while (n != 0) {\n \
    \   long r = n % 10;\n    ans = std::to_string(r) + ans;\n    n /= 10;\n    m\
    \ += 1;\n  }\n  long r = ans.size();\n  long s = shift;\n  while (s > r) {\n \
    \   ans = ans.substr(0, ans.size() - 1);\n    s -= r;\n  }\n  while (s < r) {\n\
    \    ans = ans + ans.at(ans.size() - 1);\n    s += r;\n  }\n  return ans;", " \
    \   std::string ans = \"\";\n    long digit = x;\n    while (shift > 0)\n    {\n\
    \        digit = digit >> shift;\n        ans = std::to_string(digit) + ans;\n\
    \        shift -= std::numeric_limits<long>::digits;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    long m = shift % 10;\n    long\
    \ d = shift / 10;\n    while (n > 0) {\n        long r = n % 10;\n        ans\
    \ = std::to_string(r) + ans;\n        n = n / 10;\n    }\n    if (m != 0) {\n\
    \        ans = std::to_string(d) + ans;\n    }\n    return ans;", "  std::string\
    \ ans = \"\";\n  long n = x;\n  long carry = 0;\n  while (shift > 0) {\n    long\
    \ digit = n % 10;\n    ans = std::to_string(digit) + ans;\n    n = n / 10;\n \
    \   carry = digit * 10 + carry;\n    shift--;\n  }\n  if (shift > 0) {\n    long\
    \ digit = n % 10;\n    ans = std::to_string(digit) + ans;\n    n = n / 10;\n \
    \   carry = digit * 10 + carry;\n  }\n  if (carry > 0) {\n    ans = std::to_string(carry)\
    \ + ans;\n  }\n  return ans;", "    std::string ans = \"\";\n    long n = x;\n\
    \    long m = shift % 10;\n    long r = shift / 10;\n    long temp;\n    while\
    \ (n > 0) {\n        temp = n % 10;\n        ans = temp + ans;\n        n = n\
    \ / 10;\n    }\n    ans = ans + m;\n    while (ans.size() > r) {\n        ans\
    \ = ans.substr(0, ans.size() - r);\n    }\n    return ans;", "    std::string\
    \ ans;\n    long n = x;\n    long d = 1;\n    while (shift > 0) {\n        long\
    \ r = n / d;\n        ans = std::to_string(r) + ans;\n        shift -= d;\n  \
    \      d *= 10;\n    }\n    while (shift < 0) {\n        long r = n / d;\n   \
    \     ans = std::to_string(r) + ans;\n        shift += d;\n        d *= 10;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0)\n    {\n        long r = n >> shift;\n        ans = std::to_string(r)\
    \ + ans;\n        shift -= r;\n        n = r;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long temp = x;\n    while (shift > 0)\n    {\n        temp\
    \ = temp * 10 + x % 10;\n        ans = std::to_string(temp % 10) + ans;\n    \
    \    x = x / 10;\n        shift -= 1;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (shift > 0) {\n   \
    \     long r = n >> shift;\n        ans += std::to_string(r);\n        n &= (r\
    \ << shift);\n        shift -= m;\n        m *= 10;\n    }\n    if (shift > 0)\
    \ {\n        ans += std::to_string(n);\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n        long d =\
    \ n % 10;\n        ans = std::to_string(d) + ans;\n        n /= 10;\n        shift\
    \ -= 1;\n    }\n    while (n > 0)\n    {\n        long d = n % 10;\n        ans\
    \ = std::to_string(d) + ans;\n        n /= 10;\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n   \
    \     ans += std::to_string(n%10);\n        n /= 10;\n        shift -= 1;\n  \
    \  }\n    ans += std::to_string(n);\n    return ans;", "  std::string ans = \"\
    \";\n  long n = x;\n  while (shift > 0)\n    ans += n % 10 + std::to_string(n/10);\n\
    \  ans += std::to_string(n);\n  return ans;", "  std::string ans = \"\";\n  long\
    \ digit = x;\n  long carry = 0;\n  while (shift > 0) {\n    digit = digit * 10\
    \ + carry;\n    carry = 0;\n    if (digit >= 10)\n      carry = 1;\n    ans =\
    \ std::to_string(digit) + ans;\n    shift -= 1;\n  }\n  if (carry)\n    ans =\
    \ std::to_string(digit) + ans;\n  return ans;", "    std::string ans = \"\";\n\
    \    long remain = x;\n    long digit = 0;\n    while (shift > 0 && remain > 0)\
    \ {\n        remain = remain / 10;\n        digit = digit * 10 + remain % 10;\n\
    \        shift -= 1;\n    }\n    while (shift > 0) {\n        remain = remain\
    \ / 10;\n        digit = digit * 10 + remain % 10;\n        shift -= 1;\n    }\n\
    \    ans = std::to_string(digit);\n    while (ans.size() > shift) {\n        ans\
    \ = ans.substr(0, ans.size() - shift);\n    }\n    return ans;", "    std::string\
    \ ans;\n    long n = x;\n    long d = 1;\n    while (shift > d) {\n        ans\
    \ += std::to_string(n);\n        n /= 10;\n        d *= 10;\n    }\n    while\
    \ (shift > 0)\n        ans += std::to_string(n);\n    return ans;", "    std::string\
    \ ans;\n    long n = x;\n    long m = 1;\n    long r = n;\n    long d = 1;\n \
    \   while (shift > 0) {\n        long t = r;\n        r = m % t;\n        m /=\
    \ t;\n        shift -= 1;\n    }\n    while (m != 0) {\n        long t = r;\n\
    \        r = m % t;\n        m /= t;\n        ans += std::to_string(r);\n    }\n\
    \    ans += std::to_string(n);\n    return ans;", "  std::string ans = \"\";\n\
    \  long digits = std::abs(x);\n  long mod = digits % shift;\n  long digit = digits\
    \ / shift;\n  while (shift > 0) {\n    ans += std::to_string(digit);\n    shift\
    \ -= mod;\n    mod = digits % shift;\n    digit = digits / shift;\n  }\n  if (shift\
    \ < 0)\n    ans += std::to_string(digit);\n  return ans;", "    std::string ans\
    \ = \"\";\n    long digit = x;\n    long carry = 0;\n    long i = 0;\n    while\
    \ (digit != 0) {\n        long digit = digit % 10;\n        carry = digit << shift;\n\
    \        ans = std::to_string(carry) + ans;\n        digit /= 10;\n        i++;\n\
    \    }\n    if (shift > i) {\n        ans = ans.substr(0, i);\n    }\n    return\
    \ ans;", "    std::string ans;\n    if (shift > std::numeric_limits<long>::digits)\
    \ {\n        shift = std::numeric_limits<long>::digits;\n    }\n    long remainder\
    \ = x % 10;\n    x /= 10;\n    for (long i = 0; i < shift; i++) {\n        ans\
    \ += \"0\";\n    }\n    ans += std::to_string(x);\n    ans += std::to_string(remainder);\n\
    \    return ans;", "    std::string ans = \"\";\n    long digit = x;\n    long\
    \ remainder = x;\n    long i = 0;\n    while (shift > i) {\n        ans += std::to_string(digit);\n\
    \        digit = remainder % 10;\n        remainder = remainder / 10;\n      \
    \  i++;\n    }\n    if (shift > i) {\n        ans += std::to_string(digit);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    long r = 1;\n    long digit;\n    while (shift > 0)\n    {\n   \
    \     digit = n % 10;\n        ans = std::to_string(digit) + ans;\n        n =\
    \ n / 10;\n        m += 1;\n        r *= 10;\n        shift -= 1;\n    }\n   \
    \ while (n != 0)\n    {\n        digit = n % 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        n = n / 10;\n        m += 1;\n        r *= 10;\n    }\n    ans\
    \ = std::to_string(r) + ans;\n    return ans;", "    std::string ans = \"\";\n\
    \    long n = x;\n    long m = 1;\n    while (m <= shift) {\n        long r =\
    \ n % m;\n        ans = std::to_string(r) + ans;\n        n = m;\n        m <<=\
    \ 1;\n    }\n    ans = std::to_string(n) + ans;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long temp = x;\n    while (shift > 0) {\n        temp = temp\
    \ * 10 + x % 10;\n        ans = ans + temp % 10 + temp / 10;\n        x = x /\
    \ 10;\n        shift = shift - 1;\n    }\n    if (shift < 0)\n        ans = ans\
    \ + temp % 10;\n    return ans;", "    std::string ans = \"\";\n    long temp\
    \ = x;\n    long remainder = 0;\n    long digit = 0;\n    long count = 0;\n  \
    \  while (shift > 0) {\n        digit = temp % 10;\n        temp = temp / 10;\n\
    \        remainder = remainder + (digit << shift);\n        shift = shift - 1;\n\
    \        count = count + 1;\n    }\n    while (shift < 0) {\n        digit = temp\
    \ % 10;\n        temp = temp / 10;\n        remainder = remainder + (digit >>\
    \ -shift);\n        shift = shift + 1;\n        count = count + 1;\n    }\n  \
    \  ans = std::to_string(remainder);\n    if (count > 0) {\n        ans = ans +\
    \ std::string(count, '0');\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    long n = x;\n    long m = 1;\n    while (m <= shift) {\n        ans +=\
    \ std::to_string(n%m);\n        n = n/m;\n        m *= 10;\n    }\n    ans +=\
    \ std::to_string(n%m);\n    return ans;", "    std::string ans = \"\";\n    long\
    \ digit = x;\n    while (shift > 0)\n    {\n        digit = digit / 10;\n    \
    \    ans = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    while\
    \ (shift < 0)\n    {\n        digit = digit * 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift += 1;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    long n = x;\n    long m = 1;\n    while (shift > 0) {\n        long\
    \ r = n / m;\n        ans += std::to_string(r);\n        shift -= m;\n       \
    \ m *= 10;\n    }\n    if (shift > 0)\n        ans += std::to_string(n);\n   \
    \ return ans;", "    std::string ans = \"\";\n    long remain = x;\n    long curr\
    \ = x;\n    long i = 1;\n    while (curr != 0) {\n        remain = curr % 10;\n\
    \        ans = std::to_string(remain) + ans;\n        curr = curr >> 1;\n    \
    \    i++;\n    }\n    if (shift > i) {\n        ans = ans.substr(0, i - shift);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0)\n    {\n        long r = n / 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n %= 10;\n        shift -= 1;\n    }\n    if (n == 0)\n    {\n\
    \        ans = \"0\" + ans;\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    long n = x;\n    long m = 1;\n    while (n != 0) {\n        long r =\
    \ n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n    }\n\
    \    long r = 1;\n    while (shift > 0) {\n        long r = r * 10;\n        shift--;\n\
    \    }\n    while (shift > 0) {\n        long r = r * 10;\n        shift--;\n\
    \    }\n    ans = std::to_string(r) + ans;\n    return ans;", "    std::string\
    \ ans;\n    long n = x;\n    long d = 1;\n    long m = 1;\n    while (shift >\
    \ 0) {\n        long r = n / d;\n        ans += std::to_string(r);\n        shift\
    \ -= d;\n        d *= 10;\n        m += 1;\n    }\n    while (shift < 0) {\n \
    \       long r = n / d;\n        ans += std::to_string(r);\n        shift += d;\n\
    \        d *= 10;\n        m += 1;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    long d = 1;\n    while (m\
    \ <= shift) {\n        long r = n % m;\n        ans = std::to_string(r) + ans;\n\
    \        n = m;\n        m <<= 1;\n        d <<= 1;\n    }\n    ans = std::to_string(n)\
    \ + ans;\n    return ans;", "  std::string ans = \"\";\n  long n = x;\n  long\
    \ m = 1;\n  long r = n;\n  long d = 1;\n  while (shift > 0)\n  {\n    long tmp\
    \ = r;\n    r = (r * m) % n;\n    ans = std::to_string(r) + ans;\n    m <<= 1;\n\
    \    shift -= 1;\n  }\n  while (shift < 0)\n  {\n    long tmp = r;\n    r = (r\
    \ * m) % n;\n    ans = std::to_string(r) + ans;\n    m >>= 1;\n    shift += 1;\n\
    \  }\n  return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n >> shift;\n        ans = std::to_string(r)\
    \ + ans;\n        n = r;\n        m <<= 1;\n    }\n    ans = std::to_string(m)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n  \
    \  while (shift > 0) {\n        long r = n / 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n -= r * 10;\n        shift -= 1;\n    }\n    while (shift <\
    \ 0) {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n   \
    \     n += r * 10;\n        shift += 1;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (shift > 0)\n    {\n\
    \        long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n =\
    \ n / 10;\n        shift -= 1;\n    }\n    while (n > 0)\n    {\n        long\
    \ r = n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0) {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n\
    \        n /= 10;\n        shift -= 1;\n    }\n    while (n > 0) {\n        long\
    \ r = n % 10;\n        ans = std::to_string(r) + ans;\n        n /= 10;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long carry\
    \ = 0;\n    long digit;\n    while (shift > 0)\n    {\n        digit = n % 10;\n\
    \        ans = std::to_string(digit) + ans;\n        carry = digit * pow(10, shift);\n\
    \        n /= 10;\n        shift -= 1;\n    }\n    if (shift > 0)\n    {\n   \
    \     digit = n % 10;\n        ans = std::to_string(digit) + ans;\n        carry\
    \ = digit * pow(10, shift);\n        n /= 10;\n    }\n    if (carry > 0)\n   \
    \ {\n        ans = std::to_string(carry) + ans;\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n !=\
    \ 0) {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n   \
    \     n = n / 10;\n    }\n    long r = 1;\n    while (shift > 0) {\n        long\
    \ r = r * 10;\n        shift--;\n    }\n    long m = 1;\n    while (shift > 0)\
    \ {\n        long r = r * 10;\n        shift--;\n    }\n    long n = x;\n    while\
    \ (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / 10;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long n = x;\n    while (shift > 0) {\n        long r = n >> shift;\n    \
    \    ans += std::to_string(r);\n        shift -= r;\n    }\n    while (shift <\
    \ 0) {\n        long r = n << (-shift);\n        ans += std::to_string(r);\n \
    \       shift += r;\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   long digits = x;\n    long remainder = x;\n    long shifts = shift;\n    while\
    \ (shifts > 0) {\n        remainder *= 10;\n        shifts -= 1;\n    }\n    while\
    \ (digits > remainder) {\n        ans += '0';\n        digits -= remainder;\n\
    \    }\n    while (digits > 0) {\n        ans += '1';\n        digits -= 1;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long temp = x;\n \
    \   long temp2 = x;\n    long temp3 = x;\n    long temp4 = x;\n    long temp5\
    \ = x;\n    long temp6 = x;\n    long temp7 = x;\n    long temp8 = x;\n    long\
    \ temp9 = x;\n    long temp10 = x;\n    long temp11 = x;\n    long temp12 = x;\n\
    \    long temp13 = x;\n    long temp14 = x;\n    long temp15 = x;\n    long temp16\
    \ = x;\n    long temp17 = x;\n    long temp18 = x;\n    long temp19 = x;\n   \
    \ long temp20 = x;\n    long temp21 = x;\n    long temp22 = x;\n    long temp23\
    \ = x;\n    long temp24 = x;\n    long temp25 = x;\n    long temp26 = x;\n   \
    \ long temp27 = x;\n    long temp28 = x;\n    long temp29 = x;\n    long temp30\
    \ = x;\n    long temp31 = x;\n    long temp32 = x;\n    long temp33 = x;\n   \
    \ long temp34 = x;\n    long temp35 = x;\n    long temp36 = x;\n    long temp37\
    \ = x;\n    long temp38 = x;\n    long temp39 = x;\n    long temp40 = x;\n   \
    \ long temp41 = x;\n    long temp42 = x;\n    long temp43 = x;\n    long temp44\
    \ = x;\n    long temp45 = x;\n    long temp46 = x;\n    long temp47 = x;\n   \
    \ long temp48 = x;\n    long temp49 = x;\n    long temp50 = x;\n    long temp51\
    \ = x;\n    long temp52 = x;\n    long temp53 = x;\n    long temp54 = x;\n   \
    \ long temp55 = x;\n    long temp56 = x;\n    long temp57 = x;\n    long temp58\
    \ = x;\n    long temp59 = x;\n    long temp60 = x;\n    long temp61 = x;\n   \
    \ long temp62 = x;\n    long temp63 = x;\n    long temp64 = x;\n    long temp65\
    \ = x;\n    long temp66 = x;\n    long temp67 = x;\n    long temp68 = x;\n   \
    \ long temp69 = x;\n    long temp70 = x;\n    long temp71 = x;\n    long temp72\
    \ = x;\n    long temp73 = x;\n    long temp74 = x;\n    ", "    std::string ans;\n\
    \    long digits = 1;\n    while (shift > digits) {\n        digits *= 10;\n \
    \       shift /= 10;\n    }\n    while (shift > 0) {\n        long d = x % 10;\n\
    \        ans += (char)(d + '0');\n        x /= 10;\n        shift -= 1;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift\
    \ > 0)\n    {\n        long r = n >> shift;\n        ans = std::to_string(r) +\
    \ ans;\n        shift -= r;\n        n = r;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <= shift) {\n  \
    \      ans += std::to_string(n);\n        n /= 10;\n        m += 1;\n    }\n \
    \   if (shift > m) {\n        ans += std::to_string(n);\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long temp = x;\n    while (shift > 0)\n    {\n\
    \        temp = temp * 10 + x % 10;\n        ans = std::to_string(temp % 10) +\
    \ ans;\n        x /= 10;\n        shift -= 1;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long temp = x;\n    long remainder = 0;\n    long count = 0;\n\
    \    long digit = 0;\n    while (temp != 0) {\n        remainder = temp % 10;\n\
    \        digit = count % 10;\n        ans = ans + std::to_string(digit) + remainder;\n\
    \        temp = temp / 10;\n        count++;\n    }\n    if (shift > count) {\n\
    \        shift = count - 1;\n    }\n    long shift_digit = shift % 10;\n    ans\
    \ = ans + std::to_string(shift_digit);\n    return ans;", "    std::string ans\
    \ = \"\";\n    long n = x;\n    long m = 1;\n    while (n != 0) {\n        long\
    \ r = n % 10;\n        ans = std::to_string(r) + ans;\n        n /= 10;\n    \
    \    m <<= 1;\n    }\n    long r = 1;\n    while (m != 0) {\n        long t =\
    \ m % 10;\n        ans = std::to_string(t) + ans;\n        m /= 10;\n        r\
    \ <<= 1;\n    }\n    long t = 1;\n    while (t != 0) {\n        long u = t % 10;\n\
    \        ans = std::to_string(u) + ans;\n        t /= 10;\n        r <<= 1;\n\
    \    }\n    long u = 1;\n    while (t != 0) {\n        long v = t % 10;\n    \
    \    ans = std::to_string(v) + ans;\n        t /= 10;\n        u <<= 1;\n    }\n\
    \    long v = 1;\n    while (t != 0) {\n        long w = t % 10;\n        ans\
    \ = std::to_string(w) + ans;\n        t /= 10;\n        v <<= 1;\n    }\n    long\
    \ w = 1;\n    while (t != 0) {\n        long x = t % 10;\n        ans = std::to_string(x)\
    \ + ans;\n        t /= 10;\n        w <<= 1;\n    }\n    long x = 1;\n    while\
    \ (t != 0) {\n        long y = t % 10;\n        ans = std::to_string(y) + ans;\n\
    \        t /= 10;\n        x <<= 1;\n    }\n    long y = 1;\n    while (t != 0)\
    \ {\n        long z = t % 10;\n        ans = std::to_string(z) + ans;\n      \
    \  t /= 10;\n        y <<= 1;\n    }\n    long z = 1;\n    while (t != 0) {\n\
    \        long a = t % 10;\n        ans = std::to_string(a) + ans;\n        t /=\
    \ 10;\n        z <<= 1;\n    }\n    long a = 0;\n    while (t != 0) {\n      \
    \  long b = t % 10;\n        ans = std::to_string(b) + ans;\n        t /= 10;\n\
    \        a <<= 1;\n    }\n    long b = 0;\n    while (t != 0) {\n        long\
    \ c = t % 10;\n        ans = std::to_string(c) + ans;\n        t /= 10;\n    \
    \    b <<= 1;\n    }\n    long c = 0;\n    while (t != 0) {\n        long d =\
    \ t % 10;\n        ans = std::to_string(d)  + ans;\n        t /= 10;\n       \
    \ c <<= 1;\n    }\n    long d = 0;\n    while (t != 0) {\n        long e = t %\
    \ 10;\n        ", "    std::string ans = \"\";\n    long n = x;\n    while (shift\
    \ > 0)\n    {\n        long r = n >> shift;\n        ans = std::to_string(r) +\
    \ ans;\n        shift -= r;\n        n = r;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long digits = std::abs(x);\n    long mod = digits % shift;\n\
    \    long remainder = digits - mod;\n    long start = mod - 1;\n    long end =\
    \ start + shift;\n    long i = start;\n    long j = end;\n    while (i != j) {\n\
    \        ans += std::to_string(i);\n        i++;\n        j--;\n    }\n    if\
    \ (remainder > 0) {\n        ans += std::to_string(remainder);\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\
    \ {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n      \
    \  n = r;\n        shift -= 1;\n    }\n    ans = std::to_string(n) + ans;\n  \
    \  return ans;", "    std::string ans = \"\";\n    long digits = x;\n    long\
    \ remainder = x;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while\
    \ (digits) {\n        ans += std::to_string(digits);\n        digits = digits\
    \ % 10;\n        digits = digits / 10;\n    }\n    while (shift > i) {\n     \
    \   ans += std::to_string(digits);\n        digits = digits % 10;\n        digits\
    \ = digits / 10;\n        i++;\n    }\n    while (shift > j) {\n        ans +=\
    \ std::to_string(digits);\n        digits = digits % 10;\n        digits = digits\
    \ / 10;\n        j++;\n    }\n    while (shift > k) {\n        ans += std::to_string(digits);\n\
    \        digits = digits % 10;\n        digits = digits / 10;\n        k++;\n\
    \    }\n    while (shift > i) {\n        ans += std::to_string(digits);\n    \
    \    digits = digits % 10;\n        digits = digits / 10;\n        i++;\n    }\n\
    \    while (shift > j) {\n        ans += std::to_string(digits);\n        digits\
    \ = digits % 10;\n        digits = digits / 10;\n        j++;\n    }\n    while\
    \ (shift > k) {\n        ans += std::to_string(digits);\n        digits = digits\
    \ % 10;\n        digits = digits / 10;\n        k++;\n    }\n    while (shift\
    \ > i) {\n        ans += std::to_string(digits);\n        digits = digits % 10;\n\
    \        digits = digits / 10;\n        i++;\n    }\n    while (shift > j) {\n\
    \        ans += std::to_string(digits);\n        digits = digits % 10;\n     \
    \   digits = digits / 10;\n        j++;\n    }\n    while (shift > k) {\n    \
    \    ans += std::to_string(digits);\n        digits = digits % 10;\n        digits\
    \ = digits / 10;\n        k++;\n    }\n    while (shift > i) {\n        ans +=\
    \ std::to_string(digits);\n        digits = digits % 10;\n        digits = digits\
    \ / 10;\n        i++;\n    }\n    while (shift > j) {\n        ans += std::to_string(digits);\n\
    \        digits = digits % 10;\n        digits = digits / 10;\n        j++;\n\
    \    }\n    while (shift > k) {\n        ans += std::to_string(digits);\n    \
    \    digits = digits % 10;\n        digits = digits / 10;\n        k++;\n    }\n\
    \    while (shift > i) {\n        ans += std::to_string(digits);\n        digits\
    \ = digits % 10;\n        digits = digits / 10;\n        i++;\n    }\n    while\
    \ (shift > j) {\n        ans += std::to_string(digits);", "    std::string ans;\n\
    \    long n = x;\n    long m = 1;\n    while (n != 0) {\n        long r = n %\
    \ 10;\n        ans.push_back(r);\n        n /= 10;\n        m <<= 1;\n    }\n\
    \    if (shift > ans.size()) {\n        shift = ans.size();\n    }\n    long carry\
    \ = 0;\n    for (long i = ans.size(); i > shift; i--) {\n        carry += ans[i\
    \ - 1];\n        ans[i] = carry % 10;\n        carry /= 10;\n    }\n    if (carry\
    \ != 0) {\n        ans.push_back(carry);\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long d = 1;\n    while (shift > d) {\n   \
    \     ans += std::to_string(n%10);\n        n /= 10;\n        d *= 10;\n    }\n\
    \    ans += std::to_string(n);\n    return ans;", "    std::string ans = \"\"\
    ;\n    long remain = x;\n    long digit = 0;\n    long digits = 0;\n    long shifts\
    \ = shift;\n    long carry = 0;\n    while (shift > 0) {\n        digit = remain\
    \ % 10;\n        remain = remain / 10;\n        digits = digits + 1;\n       \
    \ shift = shift - 1;\n        if (shift < 0) {\n            shift = shift + digits;\n\
    \            carry = 0;\n        }\n        ans = std::to_string(digit) + ans;\n\
    \    }\n    if (shift > 0) {\n        ans = std::to_string(carry) + ans;\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long digit = x;\n   \
    \ long remainder = x;\n    long i = 0;\n    while (shift > 0) {\n        digit\
    \ = remainder % 10;\n        remainder = remainder / 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        i++;\n        shift -= 1;\n    }\n    if (shift > 0) {\n   \
    \     ans = std::to_string(remainder) + ans;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    while (shift > 0) {\n        long r = n >>\
    \ shift;\n        ans += std::to_string(r);\n        shift -= r;\n    }\n    while\
    \ (shift < 0) {\n        long r = n << (-shift);\n        ans += std::to_string(r);\n\
    \        shift += r;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long temp = x;\n    long count = 0;\n    while (shift > count) {\n      \
    \  ans += std::to_string(temp % 10);\n        temp /= 10;\n        count++;\n\
    \    }\n    while (temp != 0) {\n        ans += std::to_string(temp % 10);\n \
    \       temp /= 10;\n        count++;\n    }\n    ans += std::to_string(temp %\
    \ 10);\n    while (count > 0) {\n        ans += \"0\";\n        count--;\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long digit = x;\n   \
    \ long carry = 0;\n    while (shift > 0)\n    {\n        digit = digit * 10 +\
    \ carry;\n        carry = digit / 10;\n        digit = digit % 10;\n        ans\
    \ = std::to_string(digit) + ans;\n        shift--;\n    }\n    if (carry > 0)\n\
    \        ans = std::to_string(carry) + ans;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n        long r =\
    \ n % 10;\n        ans = std::to_string(r) + ans;\n        n /= 10;\n        shift\
    \ -= 1;\n    }\n    if (n > 0)\n        ans = std::to_string(n) + ans;\n    return\
    \ ans;", "    std::string ans = \"\";\n    long digits = 1;\n    while (shift\
    \ > digits) {\n        digits *= 10;\n        shift /= 10;\n    }\n    while (shift\
    \ > 0) {\n        long r = x % digits;\n        ans += (char) ('0' + r);\n   \
    \     x /= digits;\n        shift -= digits;\n        digits *= 10;\n    }\n \
    \   return ans;", "  std::string ans = \"\";\n  long temp = x;\n  while (shift\
    \ > 0) {\n    temp = temp * 10 + x % 10;\n    ans = ans + temp % 10 + '0';\n \
    \   x = x / 10;\n    shift = shift - 1;\n  }\n  if (shift < 0) {\n    temp = temp\
    \ * 10 + x % 10;\n    ans = ans + temp % 10 + '0';\n  }\n  return ans;", "   \
    \ std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (shift\
    \ > 0) {\n        long r = n / m;\n        ans += std::to_string(r);\n       \
    \ n -= r * m;\n        m <<= 1;\n        shift -= 1;\n    }\n    if (shift > 0)\n\
    \        ans += std::to_string(n);\n    return ans;", "    std::string ans = \"\
    \";\n    long n = x;\n    while (shift > 0)\n    {\n        long r = n >> shift;\n\
    \        ans += std::to_string(r);\n        shift -= r;\n        n = r;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    while (shift > 0) {\n        long r = n >> shift;\n        ans += std::to_string(r\
    \ % 10);\n        n -= r * m;\n        m <<= 1;\n        shift -= 1;\n    }\n\
    \    if (shift > 0)\n        ans += std::to_string(n);\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <=\
    \ shift) {\n        ans += std::to_string(n%10);\n        n /= 10;\n        m\
    \ += 1;\n    }\n    if (shift > m) {\n        ans += std::to_string(n%10);\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (shift > m) {\n        ans += std::to_string(n % 10);\n  \
    \      n /= 10;\n        m <<= 1;\n    }\n    ans += std::to_string(n % 10);\n\
    \    n /= 10;\n    while (shift > n) {\n        ans += std::to_string(n % 10);\n\
    \        n /= 10;\n    }\n    return ans;", "    std::string ans = \"\";\n   \
    \ long n = x;\n    while (shift > 0) {\n        long d = n % 10;\n        ans\
    \ = std::to_string(d) + ans;\n        n = n / 10;\n        shift -= 1;\n    }\n\
    \    if (shift > 0) {\n        long d = n % 10;\n        ans = std::to_string(d)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long n =\
    \ x;\n    long m = 1;\n    while (n != 0) {\n        long r = n % 10;\n      \
    \  ans = std::to_string(r) + ans;\n        n = n / 10;\n        m = m * 10;\n\
    \    }\n    if (shift > ans.size()) {\n        shift = ans.size();\n    }\n  \
    \  long r = shift;\n    while (shift > 0) {\n        ans = std::to_string(m %\
    \ 10) + ans;\n        shift -= 1;\n        m /= 10;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n !=\
    \ 0) {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n   \
    \     n = r;\n        m *= 10;\n    }\n    long r = m;\n    long s = shift;\n\
    \    while (s > 0) {\n        long t = r / 10;\n        r = r - t * 10;\n    \
    \    s = s - 1;\n    }\n    ans = std::to_string(r) + ans;\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n !=\
    \ 0) {\n        long r = n / 10;\n        long t = r * m;\n        ans = std::to_string(t)\
    \ + ans;\n        n = r;\n        m *= 10;\n    }\n    long r = ans.length();\n\
    \    long t = r * shift;\n    ans = std::to_string(t) + ans;\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n  \
    \      long r = n / 10;\n        ans = std::to_string(r) + ans;\n        n -=\
    \ r * 10;\n        shift -= 1;\n    }\n    while (shift < 0)\n    {\n        long\
    \ r = n / 10;\n        ans = std::to_string(r) + ans;\n        n += r * 10;\n\
    \        shift += 1;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long n = x;\n    long d = 1;\n    while (shift > d) {\n        ans += std::to_string(n%10);\n\
    \        n /= 10;\n        shift -= d;\n        d *= 10;\n    }\n    ans += std::to_string(n);\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    long r = n;\n    long c = 1;\n    while (shift > 0) {\n        long\
    \ tmp = r;\n        r = c;\n        c = tmp;\n        long digit = m % 10;\n \
    \       ans += digit;\n        m /= 10;\n        shift -= 1;\n    }\n    while\
    \ (n > 1) {\n        long digit = n % 10;\n        ans += digit;\n        n /=\
    \ 10;\n    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n\
    \    long m = 1;\n    while (n != 0) {\n        long r = n / 10;\n        ans\
    \ = std::to_string(r) + ans;\n        n -= r * m;\n        m *= 10;\n    }\n \
    \   if (shift > ans.size()) {\n        shift = ans.size();\n    }\n    ans.resize(shift);\n\
    \    long r = 1;\n    for (long i = ans.size() - 1; i >= shift; i--) {\n     \
    \   ans[i] = ans[i] - r * 10;\n        r *= 10;\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <=\
    \ shift) {\n        ans += std::to_string(m % 10);\n        m /= 10;\n    }\n\
    \    while (n > 0) {\n        ans += std::to_string(n%10);\n        n /= 10;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n /= 10;\n        m <<= 1;\n    }\n    if (shift > ans.size())\
    \ {\n        shift = ans.size();\n    }\n    long k = shift - ans.size();\n  \
    \  long d = 1;\n    while (k >= 0) {\n        ans = std::to_string(d) + ans;\n\
    \        d <<= 1;\n        k--;\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    while (shift > 0) {\n       \
    \ long r = n / d;\n        ans += std::to_string(r);\n        shift -= d;\n  \
    \      d *= 10;\n    }\n    while (shift < 0) {\n        long r = n / d;\n   \
    \     ans += std::to_string(r);\n        shift += d;\n        d *= 10;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    long d = 1;\n    while (m <= shift) {\n        long r = n % m;\n   \
    \     ans = std::to_string(r) + ans;\n        n = m;\n        m <<= 1;\n     \
    \   d <<= 1;\n    }\n    ans = std::to_string(n) + ans;\n    return ans;", " \
    \   std::string ans = \"\";\n    long digit = x;\n    long remainder = x;\n  \
    \  long count = 0;\n    while (shift > count) {\n        digit = remainder % 10;\n\
    \        remainder = remainder / 10;\n        ans = std::to_string(digit) + ans;\n\
    \        count++;\n    }\n    while (shift < count) {\n        ans = std::to_string(remainder)\
    \ + ans;\n        remainder = remainder * 10;\n        shift--;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\
    \ {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n      \
    \  n = n / 10;\n        shift--;\n    }\n    if (shift < 0)\n        ans = std::to_string(n)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n  \
    \  while (shift > 0)\n    {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n        shift -= 1;\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n \
    \       long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n =\
    \ n / 10;\n        shift -= 1;\n    }\n    while (n > 0)\n    {\n        ans =\
    \ std::to_string(n) + ans;\n        n = n / 10;\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    while (shift > 0) {\n       \
    \ long r = n >> shift;\n        ans += std::to_string(r);\n        shift -= r;\n\
    \    }\n    if (shift < 0)\n        ans = ans.substr(0, ans.size() - shift);\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long d =\
    \ 1;\n    while (shift > n) {\n        ans += d;\n        shift -= n;\n      \
    \  n /= 10;\n        d *= 10;\n    }\n    ans += d;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n != 0) {\n      \
    \  long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n\
    \    }\n    long r = ans.size();\n    long s = shift;\n    while (s > r) {\n \
    \       ans = ans.substr(0, ans.size() - 1);\n        s -= r;\n    }\n    while\
    \ (s < r) {\n        ans = ans + ans.at(ans.size() - 1);\n        s += r;\n  \
    \  }\n    return ans;", "    std::string ans = \"\";\n    long remainder = x %\
    \ 10;\n    long digit = x % 10;\n    long temp = 0;\n    long i = 0;\n    long\
    \ count = 0;\n    long tempCount = 0;\n    long tempCount2 = 0;\n    long tempCount3\
    \ = 0;\n    long tempCount4 = 0;\n    long tempCount5 = 0;\n    long tempCount6\
    \ = 0;\n    long tempCount7 = 0;\n    long tempCount8 = 0;\n    long tempCount9\
    \ = 0;\n    long tempCount10 = 0;\n    long tempCount11 = 0;\n    long tempCount12\
    \ = 0;\n    long tempCount13 = 0;\n    long tempCount14 = 0;\n    long tempCount15\
    \ = 0;\n    long tempCount16 = 0;\n    long tempCount17 = 0;\n    long tempCount18\
    \ = 0;\n    long tempCount19 = 0;\n    long tempCount20 = 0;\n    long tempCount21\
    \ = 0;\n    long tempCount22 = 0;\n    long tempCount23 = 0;\n    long tempCount24\
    \ = 0;\n    long tempCount25 = 0;\n    long tempCount26 = 0;\n    long tempCount27\
    \ = 0;\n    long tempCount28 = 0;\n    long tempCount29 = 0;\n    long tempCount30\
    \ = 0;\n    long tempCount31 = 0;\n    long tempCount32 = 0;\n    long tempCount33\
    \ = 0;\n    long tempCount34 = 0;\n    long tempCount35 = 0;\n    long tempCount36\
    \ = 0;\n    long tempCount37 = 0;\n    long tempCount38 = 0;\n    long tempCount39\
    \ = 0;\n    long tempCount40 = 0;\n    long tempCount41 = 0;\n    long tempCount42\
    \ = 0;\n    long tempCount43 = 0;\n    long tempCount44 = 0;\n    long tempCount45\
    \ = 0;\n    long tempCount46 = 0;\n    long tempCount47 = 0;\n    long tempCount48\
    \ = 0;\n    long tempCount49 = 0;\n    long tempCount50 = 0;\n    long tempCount51\
    \ = 0;\n    long tempCount52 = 0;\n    long tempCount53 = 0;\n    long tempCount54\
    \ = 0;\n    long tempCount55 = 0;\n    long tempCount56 = 0;\n    long tempCount57\
    \ = 0;\n    long tempCount58 = 0;\n    long tempCount59 = 0;\n    long tempCount60\
    \ = 0;\n    long tempCount61 = 0;\n    long tempCount62 = 0;\n    long tempCount63\
    \ = 0;\n    long tempCount64 = 0;\n    long tempCount65 = 0;\n    long tempCount66\
    \ = 0;\n    long tempCount67 = 0;\n    long tempCount68 = 0;\n    long tempCount69\
    \ = 0;", "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while\
    \ (m <= shift) {\n        ans += std::to_string(n % 10);\n        n /= 10;\n \
    \       m += 1;\n    }\n    while (m > shift) {\n        ans += std::to_string(n\
    \ % 10);\n        n /= 10;\n        m -= 1;\n    }\n    return ans;", "  std::string\
    \ ans = \"\";\n  long digit = x;\n  long remainder = 0;\n  long i = 0;\n  while\
    \ (shift > i) {\n    digit = digit * 10 + remainder;\n    remainder = digit %\
    \ 10;\n    ans = std::to_string(digit) + ans;\n    i++;\n  }\n  while (shift >\
    \ i) {\n    digit = remainder;\n    remainder = digit % 10;\n    ans = std::to_string(digit)\
    \ + ans;\n    i++;\n  }\n  return ans;", "    std::string ans = \"\";\n    long\
    \ n = x;\n    long m = 1;\n    while (m <= shift) {\n        long r = n % m;\n\
    \        ans = std::to_string(r) + ans;\n        n /= m;\n        m *= 10;\n \
    \   }\n    ans = std::to_string(n) + ans;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long d = 1;\n    while (n != 0) {\n      \
    \  long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n\
    \        d = d * 10;\n    }\n    if (shift > ans.size()) {\n        shift = ans.size();\n\
    \    }\n    long m = 1;\n    while (shift > 0) {\n        long r = ans.size()\
    \ - shift;\n        ans = std::to_string(m % 10) + ans;\n        m = m / 10;\n\
    \        shift = shift - 1;\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    long n = x;\n    while (shift > 0) {\n        long r = n >> shift;\n\
    \        ans = std::to_string(r) + ans;\n        shift -= r;\n        n = r;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n    }\n    long r = shift;\n    while (m != 0)\
    \ {\n        long r = r * 10;\n        ans = std::to_string(r) + ans;\n      \
    \  m = m / 10;\n    }\n    return ans;", "    std::string ans;\n    long n = x;\n\
    \    long m = 1;\n    long r = 1;\n    long d = 1;\n    long p = 0;\n    long\
    \ q = 0;\n    long q1 = 1;\n    long q2 = 1;\n    long q3 = 1;\n    long q4 =\
    \ 1;\n    long q5 = 1;\n    long q6 = 1;\n    long q7 = 1;\n    long q8 = 1;\n\
    \    long q9 = 1;\n    long q10 = 1;\n    long q11 = 1;\n    long q12 = 1;\n \
    \   long q13 = 1;\n    long q14 = 1;\n    long q15 = 1;\n    long q16 = 1;\n \
    \   long q17 = 1;\n    long q18 = 1;\n    long q19 = 1;\n    long q20 = 1;\n \
    \   long q21 = 1;\n    long q22 = 1;\n    long q23 = 1;\n    long q24 = 1;\n \
    \   long q25 = 1;\n    long q26 = 1;\n    long q27 = 1;\n    long q28 = 1;\n \
    \   long q29 = 1;\n    long q30 = 1;\n    long q31 = 1;\n    long q32 = 1;\n \
    \   long q33 = 1;\n    long q34 = 1;\n    long q35 = 1;\n    long q36 = 1;\n \
    \   long q37 = 1;\n    long q38 = 1;\n    long q39 = 1;\n    long q40 = 1;\n \
    \   long q41 = 1;\n    long q42 = 1;\n    long q43 = 1;\n    long q44 = 1;\n \
    \   long q45 = 1;\n    long q46 = 1;\n    long q47 = 1;\n    long q48 = 1;\n \
    \   long q49 = 1;\n    long q50 = 1;\n    long q51 = 1;\n    long q52 = 1;\n \
    \   long q53 = 1;\n    long q54 = 1;\n    long q55 = 1;\n    long q56 = 1;\n \
    \   long q57 = 1;\n    long q58 = 1;\n    long q59 = 1;\n    long q60 = 1;\n \
    \   long q61 = 1;\n    long q62 = 1;\n    long q63 = 1;\n    long q64 = 1;\n \
    \   long q65 = 1;\n    long q66 = 1;\n    long q67 = 1;\n    long q68 = 1;\n \
    \   long q69 = 1;\n    long q70 = 1;\n    long q71 = 1;\n    long q72 = 1;\n \
    \   long q73 = 1;\n    long q74 = 1;\n    long q75 = 1;\n    long q76 = 1;\n \
    \   long q77 = 1;\n    long q78 = 1;\n    long q", "    std::string ans = \"\"\
    ;\n    long digits = 1;\n    while (shift >= digits) {\n        digits *= 10;\n\
    \        shift -= digits;\n    }\n    while (shift > 0) {\n        long d = x\
    \ / digits;\n        ans += std::to_string(digits);\n        x -= d * digits;\n\
    \        shift -= digits;\n        digits *= 10;\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <=\
    \ shift) {\n        ans = std::to_string(n%10) + ans;\n        n = n/10;\n   \
    \     m++;\n    }\n    if (shift > m) {\n        ans = std::to_string(n%10) +\
    \ ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n\
    \    long m = 1;\n    while (shift > 0) {\n        if (shift > m) {\n        \
    \    ans += std::to_string(n);\n            n = m;\n        }\n        ans +=\
    \ std::to_string(n);\n        n <<= shift;\n        shift -= m;\n        m <<=\
    \ shift;\n    }\n    if (shift > m) {\n        ans += std::to_string(n);\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0)\n    {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n /= 10;\n        shift -= 1;\n    }\n    if (shift > 0)\n \
    \   {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    while (n != 0) {\n        long r = n / 10;\n        long t = r * m;\n\
    \        ans = std::to_string(t) + ans;\n        n = r;\n        m *= 10;\n  \
    \  }\n    long r = ans.size();\n    long t = r * shift;\n    ans = std::to_string(t)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n  \
    \  long m = 1;\n    while (m <= shift) {\n        ans += std::to_string(n / m);\n\
    \        n %= m;\n        m <<= 1;\n    }\n    ans += std::to_string(n / m);\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    while (shift > m) {\n        ans += std::to_string(n);\n        n /=\
    \ 10;\n        m /= 10;\n    }\n    ans += std::to_string(n);\n    ans.erase(ans.size()\
    \ - 1);\n    while (shift > 1) {\n        ans += \"0\";\n        shift /= 10;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n / 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n -= r * m;\n        m *= 10;\n    }\n    long r = n / 10;\n\
    \    ans = std::to_string(r) + ans;\n    n -= r * m;\n    m *= 10;\n    while\
    \ (n != 0) {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n\
    \        n -= r * m;\n        m *= 10;\n    }\n    long r = n / 10;\n    ans =\
    \ std::to_string(r) + ans;\n    n -= r * m;\n    m *= 10;\n    while (n != 0)\
    \ {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n      \
    \  n -= r * m;\n        m *= 10;\n    }\n    long r = n / 10;\n    ans = std::to_string(r)\
    \ + ans;\n    n -= r * m;\n    m *= 10;\n    while (n != 0) {\n        long r\
    \ = n / 10;\n        ans = std::to_string(r) + ans;\n        n -= r * m;\n   \
    \     m *= 10;\n    }\n    long r = n / 10;\n    ans = std::to_string(r) + ans;\n\
    \    n -= r * m;\n    m *= 10;\n    while (n != 0) {\n        long r = n / 10;\n\
    \        ans = std::to_string(r) + ans;\n        n -= r * m;\n        m *= 10;\n\
    \    }\n    long r = n / 10;\n    ans = std::to_string(r) + ans;\n    n -= r *\
    \ m;\n    m *= 10;\n    while (n != 0) {\n        long r = n / 10;\n        ans\
    \ = std::to_string(r) + ans;\n        n -= r * m;\n        m *= 10;\n    }\n \
    \   long r = n / 10;\n    ans = std::to_string(r) + ans;\n    n -= r * m;\n  \
    \  m *= 10;\n    while (n != 0) {\n        long r = n / 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n -= r * m;\n        m *= 10;\n    }\n    long r = n / 10;\n\
    \    ans = std::to_string(r) + ans;\n    n -= r * m;\n    m *= 10;\n    while\
    \ (n != 0) {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n\
    \        n -= r * m;\n        m *= 10;\n    }\n    long r = n / 10;\n    ans =\
    \ std::to_string(r) + ans;\n    n -= ", "    std::string ans = \"\";\n    long\
    \ n = x;\n    long m = 1;\n    while (m <= shift) {\n        ans += std::to_string(n);\n\
    \        n += m;\n        m *= 10;\n    }\n    ans += std::to_string(n);\n   \
    \ return ans;", "    std::string ans;\n    long digit = x;\n    long carry = 0;\n\
    \    while (shift > 0)\n    {\n        digit = digit * 10 + carry;\n        carry\
    \ = digit / 10;\n        digit = digit % 10;\n        ans.push_back(std::to_string(digit));\n\
    \        shift -= 1;\n    }\n    if (carry > 0)\n        ans.push_back(std::to_string(carry));\n\
    \    return ans;", "  std::string ans;\n  long n = x;\n  for (int i = 0; i < shift;\
    \ i++) {\n    ans += std::to_string(n%10);\n    n /= 10;\n  }\n  if (n > 0) ans\
    \ += std::to_string(n%10);\n  return ans;", "    std::string ans = \"\";\n   \
    \ long n = x;\n    while (shift > 0)\n    {\n        long r = n >> shift;\n  \
    \      ans = std::to_string(r) + ans;\n        shift -= r;\n        n = r;\n \
    \   }\n    return ans;", "    std::string ans;\n    long n = x;\n    long m =\
    \ 1;\n    while (shift > 0) {\n        long r = n / m;\n        ans = std::to_string(r)\
    \ + ans;\n        n = m;\n        m <<= 1;\n        shift -= 1;\n    }\n    while\
    \ (shift < 0) {\n        long r = n / m;\n        ans = std::to_string(r) + ans;\n\
    \        n %= m;\n        m >>= 1;\n        shift += 1;\n    }\n    return ans;",
  "    std::string ans;\n    long n = x;\n    long m = 1;\n    while (shift > 0) {\n\
    \        long r = n / m;\n        ans += std::to_string(r);\n        n -= r *\
    \ m;\n        m <<= 1;\n        shift -= 1;\n    }\n    ans += std::to_string(n);\n\
    \    return ans;", "    std::string ans;\n    long digit = x;\n    long carry\
    \ = 0;\n    while (shift > 0)\n    {\n        digit = digit * 10 + carry;\n  \
    \      carry = digit / 10;\n        digit = digit % 10;\n        ans.push_back((char)('0'\
    \ + digit));\n        shift -= 1;\n    }\n    if (carry > 0)\n        ans.push_back((char)('0'\
    \ + carry));\n    return ans;", "    std::string ans = \"\";\n    long digits\
    \ = std::abs(x);\n    long remainder = x % 10;\n    long shifts = shift % digits;\n\
    \    long shifts_remainder = shifts % digits;\n    long shifts_remainder_digits\
    \ = shifts_remainder / digits;\n    long shifts_remainder_digits_length = std::abs(shifts_remainder_digits);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n\
    \    long shifts_remainder_digits_length_abs = std::abs(shifts_remainder_digits_length_abs);\n",
  "    std::string ans = \"\";\n    long n = x;\n    long m = shift % 10;\n    long\
    \ r = shift / 10;\n    long d = 1;\n    while (m != 0) {\n        if (m > r) {\n\
    \            ans += d;\n            m -= r;\n            r = 0;\n            d\
    \ *= 10;\n        } else {\n            ans += d;\n            m -= r;\n     \
    \       r = 0;\n            d *= 10;\n        }\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n !=\
    \ 0) {\n        long r = n >> shift;\n        ans = std::to_string(r) + ans;\n\
    \        n &= (n - r);\n        m <<= shift;\n    }\n    ans = std::to_string(m)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n  \
    \  long d = 1;\n    while (shift > 0) {\n        long r = n / d;\n        ans\
    \ = std::to_string(r) + ans;\n        shift -= 1;\n        d *= 10;\n    }\n \
    \   while (shift < 0) {\n        long r = n / d;\n        ans = std::to_string(r)\
    \ + ans;\n        shift += 1;\n        d *= 10;\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <=\
    \ shift) {\n        long r = n % m;\n        ans = std::to_string(r) + ans;\n\
    \        n = m;\n        m <<= 1;\n    }\n    ans = std::to_string(n) + ans;\n\
    \    return ans;", "    std::string ans = \"\";\n    long temp = x;\n    long\
    \ rem = temp % 10;\n    long count = 0;\n    while (temp > 0) {\n        temp\
    \ = temp / 10;\n        count++;\n    }\n    long mod = count % shift;\n    long\
    \ rem = count - mod;\n    long temp = x;\n    long rem = temp % 10;\n    long\
    \ count = 0;\n    while (temp > 0) {\n        temp = temp / 10;\n        count++;\n\
    \    }\n    long mod = count % shift;\n    long rem = count - mod;\n    long temp\
    \ = x;\n    long rem = temp % 10;\n    long count = 0;\n    while (temp > 0) {\n\
    \        temp = temp / 10;\n        count++;\n    }\n    long mod = count % shift;\n\
    \    long rem = count - mod;\n    long temp = x;\n    long rem = temp % 10;\n\
    \    long count = 0;\n    while (temp > 0) {\n        temp = temp / 10;\n    \
    \    count++;\n    }\n    long mod = count % shift;\n    long rem = count - mod;\n\
    \    long temp = x;\n    long rem = temp % 10;\n    long count = 0;\n    while\
    \ (temp > 0) {\n        temp = temp / 10;\n        count++;\n    }\n    long mod\
    \ = count % shift;\n    long rem = count - mod;\n    long temp = x;\n    long\
    \ rem = temp % 10;\n    long count = 0;\n    while (temp > 0) {\n        temp\
    \ = temp / 10;\n        count++;\n    }\n    long mod = count % shift;\n    long\
    \ rem = count - mod;\n    long temp = x;\n    long rem = temp % 10;\n    long\
    \ count = 0;\n    while (temp > 0) {\n        temp = temp / 10;\n        count++;\n\
    \    }\n    long mod = count % shift;\n    long rem = count - mod;\n    long temp\
    \ = x;\n    long rem = temp % 10;\n    long count = 0;\n    while (temp > 0) {\n\
    \        temp = temp / 10;\n        count++;\n    }\n    long mod = count % shift;\n\
    \    long rem = count - mod;\n    long temp = x;\n    long rem = temp % 10;\n\
    \    long count = 0;\n    while (temp > 0) {\n        temp = temp / 10;\n    \
    \    count++;\n    }\n    long mod = count % shift;\n    long rem = count - mod;\n\
    \    long temp = x;\n    long rem = temp % 10;\n    long count = 0;\n    while\
    \ (temp > 0) {\n        temp = temp / 10;\n        count++;\n    }\n    long mod\
    \ = count % shift;\n    long rem = count - mod;\n    long temp = x;\n    ", " \
    \   std::string ans = \"\";\n    long digit = x;\n    while (shift > 0)\n    {\n\
    \        digit = digit / 10;\n        ans = std::to_string(digit) + ans;\n   \
    \     shift -= 1;\n    }\n    while (shift < 0)\n    {\n        digit = digit\
    \ * 10;\n        ans = std::to_string(digit) + ans;\n        shift += 1;\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n    }\n    if (shift > ans.size()) {\n        shift\
    \ = ans.size();\n    }\n    long r = shift % ans.size();\n    ans = ans.substr(0,\
    \ r) + ans.substr(r);\n    long s = ans.size();\n    while (s > shift) {\n   \
    \     ans = ans.substr(0, --s) + ans.substr(s);\n        s = ans.size();\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long digit = x;\n   \
    \ long carry = 0;\n    while (shift > 0)\n    {\n        digit = digit * 10 +\
    \ carry;\n        carry = 0;\n        shift -= 1;\n        if ((digit % 10) !=\
    \ 0)\n        {\n            carry = 1;\n            digit /= 10;\n        }\n\
    \        ans = std::to_string(digit) + ans;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n != 0) {\n      \
    \  long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n\
    \    }\n    long r = 1;\n    while (shift > 0) {\n        long r = r * 10;\n \
    \       shift--;\n    }\n    long r = r * m;\n    ans = std::to_string(r) + ans;\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    while (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n        m = m * 10;\n    }\n    long r = 1;\n \
    \   while (shift > 0) {\n        long r = r * 10;\n        shift = shift - 1;\n\
    \    }\n    while (shift > 0) {\n        r = r * 10;\n        shift = shift -\
    \ 1;\n    }\n    ans = std::to_string(r) + ans;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long temp = x;\n    long count = 0;\n    while (shift > 0)\
    \ {\n        temp = temp * 10 + count % 10;\n        ans = std::to_string(temp\
    \ % 10) + ans;\n        count = count / 10;\n        shift -= 1;\n    }\n    while\
    \ (shift < 0) {\n        temp = temp / 10 + count % 10;\n        ans = std::to_string(temp\
    \ % 10) + ans;\n        count = count / 10;\n        shift += 1;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while\
    \ (m <= shift) {\n        ans += std::to_string(n % 10);\n        n /= 10;\n \
    \       m += 1;\n    }\n    if (shift > m) {\n        ans += std::to_string(n\
    \ % 10);\n    }\n    return ans;", "    std::string ans = \"\";\n    long digits\
    \ = std::abs(x);\n    long mod = digits % shift;\n    long rem = (digits - mod)\
    \ / shift;\n    long i = 0;\n    long j = 0;\n    while (i < rem) {\n        ans\
    \ += std::to_string(x);\n        ans += std::to_string(shift);\n        ans +=\
    \ std::to_string(j);\n        ans += \"\\n\";\n        ans += std::to_string(x);\n\
    \        ans += std::to_string(shift);\n        ans += std::to_string(j + 1);\n\
    \        ans += \"\\n\";\n        ans += std::to_string(x);\n        ans += std::to_string(shift);\n\
    \        ans += std::to_string(j + 2);\n        ans += \"\\n\";\n        ans +=\
    \ std::to_string(x);\n        ans += std::to_string(shift);\n        ans += std::to_string(j\
    \ + 3);\n        ans += \"\\n\";\n        ans += std::to_string(x);\n        ans\
    \ += std::to_string(shift);\n        ans += std::to_string(j + 4);\n        ans\
    \ += \"\\n\";\n        ans += std::to_string(x);\n        ans += std::to_string(shift);\n\
    \        ans += std::to_string(j + 5);\n        ans += \"\\n\";\n        ans +=\
    \ std::to_string(x);\n        ans += std::to_string(shift);\n        ans += std::to_string(j\
    \ + 6);\n        ans += \"\\n\";\n        ans += std::to_string(x);\n        ans\
    \ += std::to_string(shift);\n        ans += std::to_string(j + 7);\n        ans\
    \ += \"\\n\";\n        ans += std::to_string(x);\n        ans += std::to_string(shift);\n\
    \        ans += std::to_string(j + 8);\n        ans += \"\\n\";\n        ans +=\
    \ std::to_string(x);\n        ans += std::to_string(shift);\n        ans += std::to_string(j\
    \ + 9);\n        ans += \"\\n\";\n        ans += std::to_string(x);\n        ans\
    \ += std::to_string(shift);\n        ans += std::to_string(j + 10);\n        ans\
    \ += \"\\n\";\n        ans += std::to_string(x);\n        ans += std::to_string(shift);\n\
    \        ans += std::to_string(j + 11);\n        ans += \"\\n\";\n        ans\
    \ += std::to_string(x);\n        ans += std::to_string(shift);\n        ans +=\
    \ std::to_string(j + 12);\n        ans += \"\\n\";\n        ans += std::to_string(x);\n\
    \        ans += std::to_string(shift);\n        ans += std::to_string(j + 13);\n\
    \        ans += \"\\n\";\n        ans += std::to_string(x);\n        ans += std::to_string(shift);\n\
    \        ans += ", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ shift % 10;\n    long r = shift / 10;\n    while (n > 0) {\n        ans = std::to_string(n%10)\
    \ + ans;\n        n = n/10;\n    }\n    ans = std::to_string(r) + ans;\n    return\
    \ ans;", "    std::string ans;\n    long mod = x;\n    long remainder = 0;\n \
    \   long i = 0;\n    while (shift > 0) {\n        remainder = mod % 10;\n    \
    \    ans = std::to_string(remainder) + ans;\n        mod = (mod / 10) % 10;\n\
    \        shift -= 1;\n        i += 1;\n    }\n    while (shift < 0) {\n      \
    \  remainder = mod % 10;\n        ans = std::to_string(remainder) + ans;\n   \
    \     mod = (mod / 10) % 10;\n        shift += 1;\n        i += 1;\n    }\n  \
    \  return ans;", "  std::string ans;\n  long long temp;\n  temp = x;\n  while\
    \ (shift > 0)\n  {\n    ans += std::to_string(temp % 10);\n    temp /= 10;\n \
    \   shift--;\n  }\n  if (temp != 0)\n    ans += std::to_string(temp % 10);\n \
    \ return ans;", "    std::string ans = \"\";\n    long temp = x;\n    long rem\
    \ = temp % 10;\n    long count = 0;\n    while (temp != 0) {\n        temp = temp\
    \ / 10;\n        count++;\n    }\n    temp = x;\n    while (shift > count) {\n\
    \        ans = rem + ans;\n        shift -= count;\n        rem = temp % 10;\n\
    \        temp = temp / 10;\n    }\n    ans = rem + ans;\n    while (shift > 0)\
    \ {\n        ans = rem + ans;\n        shift -= 1;\n        rem = temp % 10;\n\
    \        temp = temp / 10;\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    long n = x;\n    long m = 1;\n    while (n != 0) {\n        long r =\
    \ n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n    }\n\
    \    long r = 1;\n    while (shift > 0) {\n        long r = r * 10;\n        shift--;\n\
    \    }\n    long m = 1;\n    while (shift > 0) {\n        long r = r * 10;\n \
    \       shift--;\n    }\n    long n = x;\n    while (n != 0) {\n        long r\
    \ = n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0) {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / 10;\n        shift -= 1;\n    }\n    if (shift > 0)\n       \
    \ ans = std::to_string(n) + ans;\n    return ans;", "    std::string ans = \"\"\
    ;\n    long n = x;\n    while (shift > 0) {\n        long d = n % 10;\n      \
    \  ans = std::to_string(d + 1) + ans;\n        n = n / 10;\n        shift -= 1;\n\
    \    }\n    if (shift < 0) {\n        long d = n % 10;\n        ans = std::to_string(d\
    \ - 1) + ans;\n        n = n / 10;\n        shift += 1;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n !=\
    \ 0) {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n   \
    \     n = n / 10;\n    }\n    long r = shift;\n    while (m != 0) {\n        long\
    \ r = r * 10 + (ans.size() - r - 1);\n        ans = std::to_string(r) + ans;\n\
    \        m = m / 10;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long remainder = x % 10;\n    long digit = x % 10;\n    long temp = 0;\n\
    \    long count = 0;\n    while (shift > count) {\n        temp = digit;\n   \
    \     digit = remainder;\n        remainder = temp;\n        temp = digit;\n \
    \       digit = remainder;\n        remainder = temp;\n        count++;\n    }\n\
    \    ans = std::to_string(digit) + ans;\n    while (shift > count) {\n       \
    \ temp = digit;\n        digit = remainder;\n        remainder = temp;\n     \
    \   temp = digit;\n        digit = remainder;\n        remainder = temp;\n   \
    \     count--;\n        ans = std::to_string(digit) + ans;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n\
    \    {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n   \
    \     n %= 10;\n        shift -= 1;\n    }\n    while (n > 0)\n    {\n       \
    \ long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n /= 10;\n\
    \    }\n    return ans;", "  std::string ans = \"\";\n  long n = x;\n  while (shift\
    \ > 0) {\n    long d = n % 10;\n    ans = std::to_string(d + 1) + ans;\n    n\
    \ = n / 10;\n    shift--;\n  }\n  if (shift > 0) {\n    long d = n % 10;\n   \
    \ ans = std::to_string(d + 1) + ans;\n  }\n  return ans;", "    std::string ans;\n\
    \    long digit = x;\n    long temp;\n    long carry = 0;\n    while (shift >\
    \ 0)\n    {\n        temp = digit % 10;\n        digit = digit / 10;\n       \
    \ carry = temp * 10 + carry;\n        ans.push_back(carry % 10);\n        carry\
    \ = carry / 10;\n        shift -= 1;\n    }\n    if (carry > 0)\n        ans.push_back(carry);\n\
    \    return ans;", "  std::string ans = \"\";\n  long n = x;\n  long m = 1;\n\
    \  while (shift > m) {\n    ans += std::to_string(n);\n    n /= 10;\n    m /=\
    \ 10;\n  }\n  ans += std::to_string(n);\n  while (shift > 1) {\n    ans += \"\
    0\";\n    shift /= 10;\n  }\n  return ans;", "    std::string ans = \"\";\n  \
    \  long n = x;\n    long m = 1;\n    while (n != 0) {\n        long r = n % 10;\n\
    \        ans = std::to_string(r) + ans;\n        n = n / 10;\n    }\n    long\
    \ r = 1;\n    while (shift != 0) {\n        long r = r * 10;\n        shift -=\
    \ 1;\n    }\n    long r = 1;\n    while (shift != 0) {\n        long r = r * 10;\n\
    \        shift -= 1;\n    }\n    long r = 1;\n    while (shift != 0) {\n     \
    \   long r = r * 10;\n        shift -= 1;\n    }\n    long r = 1;\n    while (shift\
    \ != 0) {\n        long r = r * 10;\n        shift -= 1;\n    }\n    long r =\
    \ 1;\n    while (shift != 0) {\n        long r = r * 10;\n        shift -= 1;\n\
    \    }\n    long r = 1;\n    while (shift != 0) {\n        long r = r * 10;\n\
    \        shift -= 1;\n    }\n    long r = 1;\n    while (shift != 0) {\n     \
    \   long r = r * 10;\n        shift -= 1;\n    }\n    long r = 1;\n    while (shift\
    \ != 0) {\n        long r = r * 10;\n        shift -= 1;\n    }\n    long r =\
    \ 1;\n    while (shift != 0) {\n        long r = r * 10;\n        shift -= 1;\n\
    \    }\n    long r = 1;\n    while (shift != 0) {\n        long r = r * 10;\n\
    \        shift -= 1;\n    }\n    long r = 1;\n    while (shift != 0) {\n     \
    \   long r = r * 10;\n        shift -= 1;\n    }\n    long r = 1;\n    while (shift\
    \ != 0) {\n        long r = r * 10;\n        shift -= 1;\n    }\n    long r =\
    \ 1;\n    while (shift != 0) {\n        long r = r * 10;\n        shift -= 1;\n\
    \    }\n    long r = 1;\n    while (shift != 0) {\n        long r = r * 10;\n\
    \        shift -= 1;\n    }\n    long r = 1;\n    while (shift != 0) {\n     \
    \   long r = r * 10;\n        shift -= 1;\n    }\n    long r = 1;\n    while (shift\
    \ != 0) {\n        long r = r * 10;\n        shift -= 1;\n    }\n    long r =\
    \ 1;\n    while (shift != 0) {\n        long r = r * 10;\n        shift -= 1;\n\
    \    }\n    long r = 1;\n    while (shift != 0) {\n        long r = r * 10;\n\
    \        shift -= 1;\n    }\n    long r = 1;\n    while (shift != 0) {\n     \
    \   long r = r * 10;\n        shift -= 1;\n    }\n    long r = 1;\n    while (shift\
    \ != 0) {\n        long ", "    std::string ans;\n    long digits = x;\n    long\
    \ carry = 0;\n    while (digits > 0) {\n        long digit = digits % 10;\n  \
    \      ans.push_back(digit);\n        carry = digit + carry;\n        digits /=\
    \ 10;\n    }\n    if (shift > digits) {\n        shift = digits;\n    }\n    ans.insert(ans.begin(),\
    \ carry);\n    while (shift > 0) {\n        ans.insert(ans.begin(), 0);\n    \
    \    shift -= 1;\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ remainder = x % 10;\n    long digit = x / 10;\n    long shiftDigit = shift %\
    \ 10;\n    long shiftRemainder = shift / 10;\n    long shiftDigitRemainder = shiftRemainder\
    \ % 10;\n    long shiftDigitRemainderRemainder = shiftRemainder / 10;\n    long\
    \ shiftDigitRemainderRemainderRemainder = shiftRemainderRemainder / 10;\n    long\
    \ shiftDigitRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainder\
    \ / 10;\n    long shiftDigitRemainderRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainderRemainder\
    \ / 10;\n    long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainder / 10;\n    long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainder / 10;\n    long\
    \ shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder =\
    \ shiftRemainderRemainderRemainderRemainderRemainderRemainder / 10;\n    long\
    \ shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder =\
    \ shiftRemainderRemainderRemainderRemainderRemainderRemainder / 10;\n    long\
    \ shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainder / 10;\n\
    \    long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainder / 10;\n\
    \    long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 10;\n    long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 10;\n    long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 10;\n    long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 10;\n    long shiftDigitRemain", "  std::string ans;\n  long n = x;\n  long\
    \ m = 1;\n  while (shift > m) {\n    ans += std::to_string(n);\n    n /= 10;\n\
    \    m /= 10;\n  }\n  while (shift < m) {\n    ans += std::to_string(n);\n   \
    \ n /= 10;\n    m /= 10;\n  }\n  return ans;", "    std::string ans = \"\";\n\
    \    long n = x;\n    long d = 1;\n    while (shift > 0) {\n        long r = n\
    \ / d;\n        ans += std::to_string(r);\n        shift -= d;\n        d *= 10;\n\
    \    }\n    long r = n % d;\n    ans += std::to_string(r);\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0) {\n       \
    \ long r = n >> shift;\n        ans += std::to_string(r);\n        shift -= r;\n\
    \    }\n    ans += std::to_string(n);\n    return ans;", "  std::string ans;\n\
    \  long n = x;\n  for (long i = 0; i < shift; i++) {\n    ans += std::to_string(n%10);\n\
    \    n /= 10;\n  }\n  if (shift > 0)\n    ans += std::to_string(n);\n  return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n\
    \    {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n   \
    \     n = n / 10;\n        shift -= 1;\n    }\n    while (n > 0)\n    {\n    \
    \    ans = std::to_string(n) + ans;\n        n = n / 10;\n    }\n    return ans;",
  "  std::string ans = \"\";\n  long n = x;\n  long d = 1;\n  while (shift > 0) {\n\
    \    long r = n / d;\n    ans += std::to_string(r);\n    n -= r * d;\n    d *=\
    \ 10;\n    shift -= 1;\n  }\n  if (shift > 0) {\n    long r = n / d;\n    ans\
    \ += std::to_string(r);\n  }\n  return ans;", "    std::string ans = \"\";\n \
    \   long n = x;\n    long m = 1;\n    while (shift > 0) {\n        if (shift %\
    \ 2 == 1) {\n            ans += std::to_string(m);\n        }\n        shift /=\
    \ 2;\n        m *= 10;\n    }\n    while (shift > 0) {\n        if (shift % 2\
    \ == 1) {\n            ans += std::to_string(n % 10);\n        }\n        shift\
    \ /= 2;\n        n /= 10;\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    long n = x;\n    while (shift > 0)\n    {\n        long r = n / 10;\n \
    \       ans = std::to_string(r) + ans;\n        n %= 10;\n        shift -= 1;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    long r = 1;\n    long s = 1;\n    while (n != 0) {\n        if (shift\
    \ > n) {\n            ans += std::to_string(r);\n            n = m;\n        }\n\
    \        ans += std::to_string(n);\n        n /= 10;\n        m /= 10;\n     \
    \   r /= 10;\n        s *= 10;\n    }\n    return ans;", "  std::string ans =\
    \ \"\";\n  long n = x;\n  long m = 1;\n  while (n != 0) {\n    long r = n / 10;\n\
    \    ans = std::to_string(r) + ans;\n    n %= 10;\n    m += 1;\n  }\n  long r\
    \ = ans.size();\n  ans = std::to_string(r) + ans;\n  long s = shift;\n  while\
    \ (s > 0) {\n    long r = ans.size();\n    ans = std::to_string(r) + ans;\n  \
    \  s -= 1;\n  }\n  return ans;", "    std::string ans = \"\";\n    long n = x;\n\
    \    long m = 1;\n    while (m <= shift) {\n        long r = n / m;\n        ans\
    \ = std::to_string(r) + ans;\n        n = r;\n        m *= 10;\n    }\n    ans\
    \ = std::to_string(n) + ans;\n    return ans;", "    std::string ans;\n    long\
    \ n = x;\n    long m = 1;\n    long r = 1;\n    while (shift > 0) {\n        long\
    \ t = m;\n        m = r;\n        r = t;\n        shift -= 1;\n    }\n    while\
    \ (m != 0) {\n        ans += (char)(n % 10);\n        n /= 10;\n    }\n    while\
    \ (n != 0) {\n        ans += (char)(n % 10);\n        n /= 10;\n    }\n    return\
    \ ans;", "  std::string ans = \"\";\n  long n = x;\n  for (int i = 0; i < shift;\
    \ i++) {\n    ans += std::to_string(n%10);\n    n /= 10;\n  }\n  ans += std::to_string(n);\n\
    \  return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n\
    \    while (m <= shift) {\n        ans += std::to_string(n%10);\n        n /=\
    \ 10;\n        m += 1;\n    }\n    if (shift > m) {\n        ans += std::to_string(n%10);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0)\n    {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n /= 10;\n        shift -= 1;\n    }\n    while (n > 0)\n  \
    \  {\n        long r = n % 10;\n        ans = std::to_string(r) + ans;\n     \
    \   n /= 10;\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ digits = 1;\n    while (shift > digits) {\n        digits *= 10;\n        shift\
    \ /= 10;\n    }\n    while (shift > 0) {\n        long digit = x % 10;\n     \
    \   ans += std::to_string(digit);\n        x /= 10;\n        shift -= 1;\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long digits = std::abs(x);\n\
    \    long remainder = x % 10;\n    long digits_left = digits;\n    long digits_left_to_shift\
    \ = shift;\n    long digits_left_to_shift_remainder = digits_left % 10;\n    long\
    \ digits_left_to_shift_remainder_to_shift = digits_left_to_shift % 10;\n    long\
    \ digits_left_to_shift_remainder_to_shift_to_shift = digits_left_to_shift_remainder\
    \ % 10;\n    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift =\
    \ digits_left_to_shift_remainder_to_shift % 10;\n    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift % 10;\n    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift_to_shift % 10;\n    long\
    \ digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift % 10;\n\
    \    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ % 10;\n    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ % 10;\n    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ % 10;\n    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ % 10;\n    long digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ = digits_left_to_shift_remainder_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift_to_shift\
    \ % 10;\n    long digits_left_to_shift_remainder_to_shift_to_", "  std::string\
    \ ans = \"\";\n  long n = x;\n  long m = 1;\n  while (m <= shift) {\n    ans +=\
    \ std::to_string(n);\n    n /= 10;\n    m += 1;\n  }\n  ans += std::to_string(n);\n\
    \  return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n\
    \    while (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n        m = m * 10;\n    }\n    long r = 1;\n \
    \   while (shift > 0) {\n        long r = r * 10;\n        shift = shift - 1;\n\
    \    }\n    while (shift > 0) {\n        long r = r / 10;\n        shift = shift\
    \ - 1;\n    }\n    ans = std::to_string(r) + ans;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n != 0) {\n      \
    \  long r = n / 10;\n        ans = std::to_string(r) + ans;\n        n = r;\n\
    \        m += 1;\n    }\n    long r = n;\n    while (m != 0) {\n        long r\
    \ = r / 10;\n        ans = std::to_string(r) + ans;\n        m -= 1;\n    }\n\
    \    long r = n;\n    while (shift != 0) {\n        long r = r / 10;\n       \
    \ ans = std::to_string(r) + ans;\n        shift -= 1;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <=\
    \ shift) {\n        long r = n >> m;\n        ans += std::to_string(r);\n    \
    \    n -= r;\n        m *= 10;\n    }\n    if (shift > n) {\n        ans += std::to_string(n);\n\
    \    }\n    return ans;", "  std::string ans;\n  long n = x;\n  for (int i = 0;\
    \ i < shift; i++) {\n    ans += std::to_string(n%10);\n    n /= 10;\n  }\n  if\
    \ (n != 0) {\n    ans += std::to_string(n%10);\n  }\n  return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    long r = 1;\n    long temp;\n\
    \    while (n != 0) {\n        temp = n % 10;\n        ans = temp + ans;\n   \
    \     n = n / 10;\n    }\n    long k = ans.size();\n    while (k >= shift) {\n\
    \        ans = ans.substr(0, k - shift) + ans.substr(k - shift, shift);\n    \
    \    k -= shift;\n    }\n    if (k != 0) {\n        ans = ans.substr(0, k) + ans.substr(k,\
    \ k);\n    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n\
    \    while (shift > 0) {\n        long r = n >> shift;\n        ans = std::to_string(r)\
    \ + ans;\n        shift -= r;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    long n = x;\n    long m = 1;\n    while (m <= shift) {\n        long\
    \ r = n >> m;\n        ans = std::to_string(r) + ans;\n        n -= r;\n     \
    \   m <<= 1;\n    }\n    if (shift > n) {\n        ans = std::to_string(n) + ans;\n\
    \    }\n    return ans;", "    std::string ans;\n    long digit = x;\n    long\
    \ carry = 0;\n    long temp = 0;\n    long i = 0;\n    long len = strlen(std::to_string(x).c_str());\n\
    \    long k = len - shift;\n    long j = 0;\n    while (i < k) {\n        temp\
    \ = digit % 10;\n        digit = digit / 10;\n        carry = temp + carry;\n\
    \        ans.push_back(carry % 10);\n        carry = carry / 10;\n        i++;\n\
    \    }\n    if (carry > 0) {\n        ans.push_back(carry);\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long temp = x;\n    long rem = x %\
    \ 10;\n    while (shift > 0)\n    {\n        ans += rem;\n        x /= 10;\n \
    \       rem = x % 10;\n        shift -= 1;\n    }\n    if (shift > 0)\n    {\n\
    \        ans += rem;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long n = x;\n    long m = 1;\n    while (n != 0) {\n        long r = n %\
    \ 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n    }\n  \
    \  long k = shift;\n    while (k != 0) {\n        long r = ans.size() - k + 1;\n\
    \        ans = std::to_string(r) + ans;\n        k = k - 1;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long digits = 1;\n    while (shift\
    \ > digits) {\n        shift -= digits;\n        ans += std::to_string(digits);\n\
    \        digits++;\n    }\n    digits = 1;\n    while (shift > digits) {\n   \
    \     ans += std::to_string(digits);\n        shift -= digits;\n        digits++;\n\
    \    }\n    ans += std::to_string(digits);\n    return ans;", "    std::string\
    \ ans = \"\";\n    long digit = x;\n    while (shift > 0)\n    {\n        digit\
    \ = digit >> 1;\n        shift -= 1;\n    }\n    long tmp = digit;\n    while\
    \ (shift > 0)\n    {\n        tmp = tmp << 1;\n        shift -= 1;\n    }\n  \
    \  ans = std::to_string(tmp) + ans;\n    return ans;", "    std::string ans =\
    \ \"\";\n    long remain = x;\n    long digit = 0;\n    long digits = 0;\n   \
    \ while (shift > digits) {\n        remain = remain / 10;\n        digit++;\n\
    \        digits++;\n    }\n    while (shift > digit) {\n        ans += std::to_string(remain);\n\
    \        remain = remain / 10;\n        digit--;\n        digits--;\n    }\n \
    \   ans += std::to_string(remain);\n    return ans;", "    std::string ans;\n\
    \    long n = x;\n    long m = 1;\n    while (shift > 0) {\n        long r = n\
    \ / m;\n        ans += std::to_string(r);\n        shift -= m;\n        m <<=\
    \ 1;\n    }\n    ans += std::to_string(n);\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n        long r =\
    \ n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n     \
    \   shift -= 1;\n    }\n    if (n == 0)\n    {\n        ans = \"0\" + ans;\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (shift > m) {\n        ans += std::to_string(n%10);\n    \
    \    n /= 10;\n        m <<= 1;\n    }\n    ans += std::to_string(n);\n    return\
    \ ans;", "    std::string ans = \"\";\n    long remainder = x % 10;\n    long\
    \ digit = x / 10;\n    long count = 0;\n    long i = 1;\n    while (count < shift\
    \ && i < 10) {\n        ans += digit;\n        digit = remainder;\n        remainder\
    \ = i;\n        i++;\n        count++;\n    }\n    if (count > shift) {\n    \
    \    ans += digit;\n    }\n    while (count < shift) {\n        ans += digit;\n\
    \        digit = remainder;\n        remainder = i;\n        i++;\n        count++;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n / 10;\n        long t = r *\
    \ m;\n        ans = std::to_string(t) + ans;\n        n = r;\n        m *= 10;\n\
    \    }\n    ans = std::to_string(m) + ans;\n    ans = ans.substr(0, ans.size()\
    \ - shift);\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n\
    \    long m = 1;\n    while (n != 0) {\n        long r = n % 10;\n        ans\
    \ = std::to_string(r) + ans;\n        n /= 10;\n        m <<= 1;\n    }\n    long\
    \ r = 1;\n    while (m != 0) {\n        long t = m % 10;\n        ans = std::to_string(t)\
    \ + ans;\n        m /= 10;\n        r <<= 1;\n    }\n    long t = 1;\n    while\
    \ (t != 0) {\n        long u = t % 10;\n        ans = std::to_string(u) + ans;\n\
    \        t /= 10;\n        r <<= 1;\n    }\n    long u = 1;\n    while (u != 0)\
    \ {\n        long v = u % 10;\n        ans = std::to_string(v) + ans;\n      \
    \  u /= 10;\n        t <<= 1;\n    }\n    long v = 0;\n    while (v != 0) {\n\
    \        long w = v % 10;\n        ans = std::to_string(w) + ans;\n        v /=\
    \ 10;\n        u <<= 1;\n    }\n    long w = 0;\n    while (w != 0) {\n      \
    \  long x = w % 10;\n        ans = std::to_string(x) + ans;\n        w /= 10;\n\
    \        v <<= 1;\n    }\n    long x = 0;\n    while (x == 0 || x == 1) {\n  \
    \      long y = x % 10;\n        ans = std::to_string(y) + ans;\n        x /=\
    \ 10;\n        u <<= 1;\n    }\n    long y = 0;\n    while (y == 0 || y == 1)\
    \ {\n        long z = y % 10;\n        ans = std::to_string(z) + ans;\n      \
    \  y /= 10;\n        v <<= 1;\n    }\n    long z = 0;\n    while (z == 0 || z\
    \ == 1) {\n        long a = z % 10;\n        ans = std::to_string(a) + ans;\n\
    \        z /= 10;\n        w <<= 1;\n    }\n    long a = 0;\n    while (a == 0\
    \ || a == 1) {\n        long b = a % 10;\n        ans = std::to_string(b) + ans;\n\
    \        a /= 10;\n        v <<= 1;\n    }\n    long b = 0;\n    while (b == 0\
    \ || b == 1) {\n        long c = b % 10;\n        ans = std::to_string(c) + ans;\n\
    \        b /= 10;\n        w <<= 1;\n    }\n    long c = 0;\n    while (c == 0\
    \ || c == 1) {\n        long d = c % 10;\n        ans = std::to_string(d)+ ans;\n\
    \        c /= 10;\n        w <<= 1;\n    }\n    long d = 0;\n    while (", " \
    \   std::string ans = \"\";\n    long n = x;\n    long m = shift % 10;\n    long\
    \ d = shift / 10;\n    while (m != 0) {\n        ans = std::to_string(n%10 + d)\
    \ + ans;\n        n = n/10;\n        m = m/10;\n        d = d*10;\n    }\n   \
    \ ans = std::to_string(n) + ans;\n    return ans;", "    std::string ans = \"\"\
    ;\n    long digit = x;\n    long remainder = x;\n    long i = 1;\n    while (i\
    \ < shift) {\n        remainder *= 10;\n        digit = remainder / i;\n     \
    \   remainder = remainder % i;\n        ans += std::to_string(digit);\n      \
    \  i++;\n    }\n    if (shift > i) {\n        ans += std::to_string(remainder);\n\
    \    }\n    return ans;", "    std::string ans;\n    long n = x;\n    long m =\
    \ 1;\n    long r = n;\n    long t;\n    long i;\n    long j;\n    long k;\n  \
    \  long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n", "    std::string ans = \"\";\n    long\
    \ n = x;\n    while (shift > 0) {\n        long r = n >> shift;\n        ans +=\
    \ std::to_string(r);\n        shift -= r;\n        n = r;\n    }\n    ans += std::to_string(n);\n\
    \    return ans;", "    std::string ans = \"\";\n    long digit = x;\n    long\
    \ carry = 0;\n    long i = 1;\n    while (shift > i) {\n        digit = digit\
    \ * 10 + carry;\n        carry = digit / 10;\n        digit = digit % 10;\n  \
    \      ans = std::to_string(digit) + ans;\n        i++;\n    }\n    if (shift\
    \ > i) {\n        digit = digit * 10 + carry;\n        carry = digit / 10;\n \
    \       digit = digit % 10;\n        ans = std::to_string(digit) + ans;\n    }\n\
    \    ans = std::to_string(carry) + ans;\n    return ans;", "    std::string ans\
    \ = \"\";\n    long remain = x;\n    long digit;\n    long count = 0;\n    while\
    \ (count < shift && remain > 0) {\n        digit = remain % 10;\n        remain\
    \ = remain / 10;\n        ans = std::to_string(digit) + ans;\n        count++;\n\
    \    }\n    if (shift > count) {\n        ans = ans.substr(0, shift - count);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0) {\n        long r = n >> shift;\n        ans += std::to_string(r);\n\
    \        shift -= r;\n    }\n    ans += std::to_string(n);\n    return ans;",
  "    std::string ans = \"\";\n    long digits = 1;\n    while (shift > digits) {\n\
    \        shift -= digits;\n        ans += (char)(x % 10);\n        x /= 10;\n\
    \        digits++;\n    }\n    while (shift > 0)\n        ans += (char)(x % 10);\n\
    \    ans += '0';\n    return ans;", "    std::string ans = \"\";\n    long n =\
    \ x;\n    long m = 1;\n    while (n != 0) {\n        long r = n / 10;\n      \
    \  long t = n % 10;\n        ans = std::to_string(t) + ans;\n        n = r;\n\
    \        m <<= shift;\n    }\n    if (shift > ans.size())\n        shift = ans.size();\n\
    \    ans.resize(shift);\n    long r = 1;\n    for (long i = ans.size() - 1; i\
    \ >= 0; i--) {\n        ans[i] = std::to_string(r % 10);\n        r /= 10;\n \
    \   }\n    return ans;", "  std::string ans = \"\";\n  long n = x;\n  while (shift\
    \ > 0) {\n    long d = n % 10;\n    ans = std::to_string(d + 1) + ans;\n    n\
    \ /= 10;\n    shift -= 1;\n  }\n  while (shift < 0) {\n    long d = n % 10;\n\
    \    ans = std::to_string(d - 1) + ans;\n    n /= 10;\n    shift += 1;\n  }\n\
    \  return ans;", "    std::string ans = \"\";\n    long digits = std::abs(x);\n\
    \    long remainder = x % 10;\n    long digit = x % 10;\n    long i = 0;\n   \
    \ long j = 0;\n    while (shift > digits) {\n        ans += digit;\n        shift\
    \ -= digits;\n        digit = x % 10;\n        digits = std::abs(x);\n       \
    \ remainder = x % 10;\n        i++;\n    }\n    while (shift > 1) {\n        ans\
    \ += digit;\n        shift -= 1;\n        digit = x % 10;\n        digits = std::abs(x);\n\
    \        remainder = x % 10;\n        j++;\n    }\n    ans += digit;\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n\
    \    {\n        long d = n % 10;\n        ans = std::to_string(d) + ans;\n   \
    \     n /= 10;\n        shift -= 1;\n    }\n    while (n > 0)\n    {\n       \
    \ long d = n % 10;\n        ans = std::to_string(d) + ans;\n        n /= 10;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ d = 1;\n    while (shift > d) {\n        ans += std::to_string(n%10);\n    \
    \    n /= 10;\n        shift -= d;\n        d *= 10;\n    }\n    ans += std::to_string(n);\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift\
    \ > 0)\n    {\n        long r = n >> shift;\n        ans += std::to_string(r);\n\
    \        shift -= r;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long n = x;\n    while (shift > 0) {\n        long r = n % 10;\n        ans\
    \ = std::to_string(r) + ans;\n        n = n / 10;\n        shift--;\n    }\n \
    \   while (shift < 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n        shift++;\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    while (shift > 0) {\n       \
    \ long r = n >> shift;\n        ans += std::to_string(r);\n        shift -= r;\n\
    \    }\n    while (shift < 0) {\n        long r = n << shift;\n        ans +=\
    \ std::to_string(r);\n        shift += r;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (shift > m) {\n   \
    \     ans += std::to_string(n);\n        n /= 10;\n        m /= 10;\n    }\n \
    \   while (shift > 1) {\n        ans += std::to_string(n);\n        n /= 10;\n\
    \        shift /= 10;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long n = x;\n    while (shift > 0) {\n        long r = n % 10;\n        ans\
    \ = std::to_string(r) + ans;\n        n /= 10;\n        shift -= 1;\n    }\n \
    \   if (n > 0) {\n        ans = std::to_string(n) + ans;\n    }\n    return ans;",
  "    std::string ans;\n    long n = x;\n    while (shift > 0)\n    {\n        long\
    \ r = n / 10;\n        ans.push_back(r % 10);\n        n = r;\n        shift -=\
    \ 1;\n    }\n    if (shift > 0)\n    {\n        long r = n % 10;\n        ans.push_back(r);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while\
    \ (shift > 0)\n    {\n        long r = n >> shift;\n        ans = std::to_string(r)\
    \ + ans;\n        shift -= r;\n        n = r;\n    }\n    return ans;"]
stop_tokens:
- "\n}"
