language: cpp
name: HumanEval_114_minSubArraySum
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjspssrcn: /tmp/tmpjspssrcn.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < n) {\n        sum =\
    \ sum + nums[i];\n        i++;\n    }\n    while (j < n) {\n        sum = sum\
    \ + nums[j];\n        j++;\n    }\n    while (k < n) {\n        sum = sum + nums[k];\n\
    \        k++;\n    }\n    if (sum < min) {\n        min = sum;\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_o0z67x8: /tmp/tmp_o0z67x8.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwp9g9y6f: /tmp/tmpwp9g9y6f.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  min = std::min(min, nums[i]);\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpolf5s923: /tmp/tmpolf5s923.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, -3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = i; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        long min = INT_MAX;\n        for (long j = i; j < nums.size(); j++) {\n\
    \            long next = nums[j];\n            min = std::min(min, curr + next);\n\
    \        }\n        ans = std::min(ans, min);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoau_6ha4: /tmp/tmpoau_6ha4.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv0a0moa8: /tmp/tmpv0a0moa8.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++) {\n      \
    \  ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgxx2m0r8: /tmp/tmpgxx2m0r8.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1z13dybh: /tmp/tmp1z13dybh.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    long\
    \ n = nums.size();\n    long i = 0;\n    while(i < n){\n        sum += nums[i];\n\
    \        if(sum < min){\n            min = sum;\n        }\n        i++;\n   \
    \ }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy2bn_ddd: /tmp/tmpy2bn_ddd.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\n\
    \            min = sum;\n        if (sum > max)\n            max = sum;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp20kstij: /tmp/tmpp20kstij.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpexi379rs: /tmp/tmpexi379rs.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = INT_MAX;\n    long minIndex = -1;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n            minIndex = i;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpk06hwm2r: /tmp/tmpk06hwm2r.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long count = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            sum\
    \ += nums[i];\n            count++;\n        }\n    }\n    if (count > 0) {\n\
    \        min = sum / count;\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj3jjsvm5: /tmp/tmpj3jjsvm5.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpsm_rqrml: /tmp/tmpsm_rqrml.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3wcazosh: /tmp/tmp3wcazosh.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.subvector(i + 1, nums.size())));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1lbntu7b.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1lbntu7b.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   11 |         ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i\
    \ + 1, nums.size())));\n      |                                              \
    \             ^~~~~~~~~\n      |                                             \
    \              vector\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9jtir05d: /tmp/tmp9jtir05d.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp17v9ply0: /tmp/tmp17v9ply0.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6eynw8j6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6eynw8j6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6eynw8j6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = nums[0];\n    long i = 0;\n    while (i < nums.size()) {\n   \
    \     sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n    \
    \    }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyc9hfh18: /tmp/tmpyc9hfh18.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long sumOfSubArray = 0;\n   \
    \ long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum == min) {\n            sumOfSubArray += nums[i];\n            count++;\n\
    \        }\n    }\n    return sumOfSubArray;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxc97sdnh: /tmp/tmpxc97sdnh.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\n\
    \            min = sum;\n        if (sum > max)\n            max = sum;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp20kstij: /tmp/tmpp20kstij.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curSum = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            curSum += nums[j];\n\
    \            if (curSum < ans) {\n                ans = curSum;\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1m_o8841: /tmp/tmp1m_o8841.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (auto i : nums) {\n      \
    \  sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6bnozme7: /tmp/tmp6bnozme7.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpexi379rs: /tmp/tmpexi379rs.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9o0i9rl4: /tmp/tmp9o0i9rl4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpye8mb0cd: /tmp/tmpye8mb0cd.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1z13dybh: /tmp/tmp1z13dybh.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfan8eygc: /tmp/tmpfan8eygc.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    long\
    \ mid = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min) {\n            min = sum;\n        }\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    mid = (min + max) /\
    \ 2;\n    long sum2 = 0;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   sum2 += nums[i];\n        if (sum2 < mid) {\n            mid = sum2;\n   \
    \     }\n    }\n    return mid;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdur1xgps: /tmp/tmpdur1xgps.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = nums[0];\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3ggwbw2v: /tmp/tmp3ggwbw2v.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbe4dgeoa: /tmp/tmpbe4dgeoa.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph7xla_4n: /tmp/tmph7xla_4n.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfquql_t_: /tmp/tmpfquql_t_.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbf8jkaj6: /tmp/tmpbf8jkaj6.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv0a0moa8: /tmp/tmpv0a0moa8.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp17v9ply0: /tmp/tmp17v9ply0.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpr4_it9ul: /tmp/tmpr4_it9ul.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, -3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxfenp80l: /tmp/tmpxfenp80l.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn4tu3flp: /tmp/tmpn4tu3flp.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpajd4vpaa: /tmp/tmpajd4vpaa.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwp9g9y6f: /tmp/tmpwp9g9y6f.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    long\
    \ mid = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n        if (sum == max)\
    \ {\n            mid = i;\n        }\n    }\n    return mid;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdw0fhp62: /tmp/tmpdw0fhp62.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprb41ipb0: /tmp/tmprb41ipb0.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3wcazosh: /tmp/tmp3wcazosh.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n         \
    \   if (i != j) {\n                sum += nums[j];\n            }\n        }\n\
    \        if (sum < ans) {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp72a_wokl: /tmp/tmp72a_wokl.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1z13dybh: /tmp/tmp1z13dybh.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (auto &num : nums) {\n        ans = min(ans, num + minSubArraySum(nums));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsyx5mwf0.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsyx5mwf0.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ num + minSubArraySum(nums));\n      |               ^~~\n      |           \
    \    std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n     \
    \            from /tmp/tmpsyx5mwf0.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn4tu3flp: /tmp/tmpn4tu3flp.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph7xla_4n: /tmp/tmph7xla_4n.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (auto i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvp3om0of: /tmp/tmpvp3om0of.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpubaffmrv: /tmp/tmpubaffmrv.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7jqku1nv: /tmp/tmp7jqku1nv.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5yk9y1uz: /tmp/tmp5yk9y1uz.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] < min) {\n            min\
    \ = nums[i];\n        }\n        if (nums[i] > max) {\n            max = nums[i];\n\
    \        }\n    }\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpobevaebd: /tmp/tmpobevaebd.cpp:40: int main(): Assertion `candidate((std::vector<long>({100,
    -1, -2, -3, 10, -5}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    long i = 0;\n    long j = 0;\n\
    \    while (i < n) {\n        sum += nums[i];\n        if (sum < min) {\n    \
    \        min = sum;\n        }\n        i++;\n    }\n    while (j < n) {\n   \
    \     sum += nums[j];\n        if (sum < min) {\n            min = sum;\n    \
    \    }\n        j++;\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppevmcz44: /tmp/tmppevmcz44.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  min = std::min(min, nums[i]);\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpolf5s923: /tmp/tmpolf5s923.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, -3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    long\
    \ max = std::numeric_limits<long>::min();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n        if (sum > max) {\n            max = sum;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxp79tx4c: /tmp/tmpxp79tx4c.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3p7wwf29: /tmp/tmp3p7wwf29.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++) {\n       \
    \ ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpu_1nyqum: /tmp/tmpu_1nyqum.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (j != i) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy_zvobf5: /tmp/tmpy_zvobf5.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplia6xe1w: /tmp/tmplia6xe1w.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfsnxco83: /tmp/tmpfsnxco83.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6eynw8j6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6eynw8j6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6eynw8j6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprb41ipb0: /tmp/tmprb41ipb0.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6eynw8j6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6eynw8j6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6eynw8j6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for(long\
    \ i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < min){\n\
    \            min = sum;\n        }\n        if(sum > max){\n            max =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpttvmfsan: /tmp/tmpttvmfsan.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpypqwhfyw: /tmp/tmpypqwhfyw.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            long next =\
    \ nums[j];\n            ans = min(ans, curr + next);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemtq76nn.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpemtq76nn.cpp:14:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |             ans =\
    \ min(ans, curr + next);\n      |                   ^~~\n      |             \
    \      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmpemtq76nn.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgsa050s7: /tmp/tmpgsa050s7.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9s4q0v6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv9s4q0v6.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfquql_t_: /tmp/tmpfquql_t_.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3wcazosh: /tmp/tmp3wcazosh.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn4tu3flp: /tmp/tmpn4tu3flp.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpubaffmrv: /tmp/tmpubaffmrv.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp17v9ply0: /tmp/tmp17v9ply0.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = INT_MIN;\n\
    \    long long sum = 0;\n    for(long long i = 0; i < nums.size(); i++) {\n  \
    \      sum += nums[i];\n        if(sum < ans) {\n            ans = sum;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpx6lqs_ix: /tmp/tmpx6lqs_ix.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5tbs4c4r: /tmp/tmp5tbs4c4r.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++){\n        ans\
    \ = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzli0zv9t: /tmp/tmpzli0zv9t.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans,\
    \ nums[i] + nums[nums.size() - i - 1]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp00me_bgv.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp00me_bgv.cpp:11:64: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type)\u2019\n   11 |         ans = std::min(ans, nums[i] +\
    \ nums[nums.size() - i - 1]);\n      |                                       \
    \                         ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp00me_bgv.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp00me_bgv.cpp:11:64: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |         ans = std::min(ans,\
    \ nums[i] + nums[nums.size() - i - 1]);\n      |                             \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp00me_bgv.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp00me_bgv.cpp:11:64:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuqdhv7_j: /tmp/tmpuqdhv7_j.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long minSum = INT_MAX;\n    long minIndex = -1;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        if(sum < nums[i]) {\n            sum\
    \ = nums[i];\n            minIndex = i;\n        }\n    }\n    for(long i = 0;\
    \ i < nums.size(); i++) {\n        if(sum == nums[i]) {\n            sum += minSum;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minIndex = i;\n            }\n        }\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpa4c_kxwy: /tmp/tmpa4c_kxwy.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpubaffmrv: /tmp/tmpubaffmrv.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1)));\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkf1ubczu.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkf1ubczu.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1)));\n      |                    \
    \                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660140545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1)));\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkf1ubczu.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkf1ubczu.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1)));\n      |                    \
    \                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6eynw8j6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6eynw8j6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6eynw8j6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpr4_it9ul: /tmp/tmpr4_it9ul.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, -3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpczf2sdg6: /tmp/tmpczf2sdg6.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn4tu3flp: /tmp/tmpn4tu3flp.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9jtir05d: /tmp/tmp9jtir05d.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpje74dnkj: /tmp/tmpje74dnkj.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3nkw9hug.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3nkw9hug.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp3nkw9hug.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpajd4vpaa: /tmp/tmpajd4vpaa.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++)\n    {\n \
    \       ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppy0_e0ne: /tmp/tmppy0_e0ne.cpp:19: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpye8mb0cd: /tmp/tmpye8mb0cd.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzde_eetl: /tmp/tmpzde_eetl.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgqrs5amr: /tmp/tmpgqrs5amr.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9o0i9rl4: /tmp/tmp9o0i9rl4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6eynw8j6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6eynw8j6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6eynw8j6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp7qc1uh7: /tmp/tmpp7qc1uh7.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5dj_6poa: /tmp/tmp5dj_6poa.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpsm_rqrml: /tmp/tmpsm_rqrml.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp35d9tvzk: /tmp/tmp35d9tvzk.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, -3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwp9g9y6f: /tmp/tmpwp9g9y6f.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9s4q0v6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv9s4q0v6.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpo_b157fl: /tmp/tmpo_b157fl.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfsnxco83: /tmp/tmpfsnxco83.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        if(nums[i] < 0){\n            sum += nums[i];\n            min\
    \ = std::min(min, sum);\n        }\n        else{\n            sum += nums[i];\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyok_7m12: /tmp/tmpyok_7m12.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv0a0moa8: /tmp/tmpv0a0moa8.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnwovew17: /tmp/tmpnwovew17.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            if (i != j) {\n                sum += nums[j];\n            }\n\
    \        }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnst6elc1: /tmp/tmpnst6elc1.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfuz5gs74: /tmp/tmpfuz5gs74.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            long next =\
    \ nums[j];\n            ans = min(ans, curr + next);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemtq76nn.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpemtq76nn.cpp:14:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |             ans =\
    \ min(ans, curr + next);\n      |                   ^~~\n      |             \
    \      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmpemtq76nn.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzde_eetl: /tmp/tmpzde_eetl.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnoup7w9l: /tmp/tmpnoup7w9l.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n        \
    \    if (i != j) {\n                sum += nums[j];\n            }\n        }\n\
    \        if (sum < min) {\n            min = sum;\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpapryol7c: /tmp/tmpapryol7c.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfquql_t_: /tmp/tmpfquql_t_.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe9etv4j1: /tmp/tmpe9etv4j1.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaucy52ni.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpaucy52ni.cpp:11:50: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type)\u2019\n   11 |         ans = std::min(ans, nums[i] +\
    \ nums[i - 1]);\n      |                                                  ^\n\
    In file included from /usr/include/c++/9/bits/specfun.h:45,\n                \
    \ from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaucy52ni.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpaucy52ni.cpp:11:50: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |         ans = std::min(ans,\
    \ nums[i] + nums[i - 1]);\n      |                                           \
    \       ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n     \
    \            from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaucy52ni.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpaucy52ni.cpp:11:50:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka"
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5dj_6poa: /tmp/tmp5dj_6poa.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = i; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < ans) {\n                ans = sum;\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    long long count = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        if (sum - nums[i] < min) {\n            min = sum\
    \ - nums[i];\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9h4fmqyq: /tmp/tmp9h4fmqyq.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnwovew17: /tmp/tmpnwovew17.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwp9g9y6f: /tmp/tmpwp9g9y6f.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn4tu3flp: /tmp/tmpn4tu3flp.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptwa203a5: /tmp/tmptwa203a5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6eynw8j6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6eynw8j6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6eynw8j6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5yk9y1uz: /tmp/tmp5yk9y1uz.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph7xla_4n: /tmp/tmph7xla_4n.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpypqwhfyw: /tmp/tmpypqwhfyw.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp47u0xehe: /tmp/tmp47u0xehe.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp17v9ply0: /tmp/tmp17v9ply0.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp7qc1uh7: /tmp/tmpp7qc1uh7.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf2o70b84: /tmp/tmpf2o70b84.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (auto num : nums) {\n        sum += num;\n        if (sum < minSum) {\n    \
    \        minSum = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0tkh5jac: /tmp/tmp0tkh5jac.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_nxrz8qw: /tmp/tmp_nxrz8qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj4mromkb: /tmp/tmpj4mromkb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1z13dybh: /tmp/tmp1z13dybh.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpewr0zgi3: /tmp/tmpewr0zgi3.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    for(long i = 0; i < n; i++)\
    \ {\n        sum += nums[i];\n        if(sum < ans) {\n            ans = sum;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprq2pqzzb: /tmp/tmprq2pqzzb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgsa050s7: /tmp/tmpgsa050s7.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6eynw8j6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6eynw8j6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6eynw8j6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn4tu3flp: /tmp/tmpn4tu3flp.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    long\
    \ minIndex = -1;\n    for(long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if(sum < minSum) {\n            minSum = sum;\n          \
    \  minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjrmb056s: /tmp/tmpjrmb056s.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgyla1pit: /tmp/tmpgyla1pit.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size())));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5iembur.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf5iembur.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size())));\n      |       \
    \                                                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660140546
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpma2bkj34: /tmp/tmpma2bkj34.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (auto\
    \ i : nums) {\n        sum += i;\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpk23r0ul4: /tmp/tmpk23r0ul4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,
    3, 4, 1, 2, 4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660140547
