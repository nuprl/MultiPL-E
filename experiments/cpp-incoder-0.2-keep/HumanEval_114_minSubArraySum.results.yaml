name: HumanEval_114_minSubArraySum
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd0zj10sk: /tmp/tmpd0zj10sk.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < n) {\n        sum =\
    \ sum + nums[i];\n        i++;\n    }\n    while (j < n) {\n        sum = sum\
    \ + nums[j];\n        j++;\n    }\n    while (k < n) {\n        sum = sum + nums[k];\n\
    \        k++;\n    }\n    if (sum < min) {\n        min = sum;\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplx7xe40g: /tmp/tmplx7xe40g.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpil6gp01a: /tmp/tmpil6gp01a.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpm9y3htbm: /tmp/tmpm9y3htbm.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpexj7elfo: /tmp/tmpexj7elfo.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  min = std::min(min, nums[i]);\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp96y64omt: /tmp/tmp96y64omt.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = i; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpinf1yt53: /tmp/tmpinf1yt53.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu0o4e054: /tmp/tmpu0o4e054.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppg2ngct3: /tmp/tmppg2ngct3.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        long min = INT_MAX;\n        for (long j = i; j < nums.size(); j++) {\n\
    \            long next = nums[j];\n            min = std::min(min, curr + next);\n\
    \        }\n        ans = std::min(ans, min);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjh8_mx_1: /tmp/tmpjh8_mx_1.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuis8729v: /tmp/tmpuis8729v.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphvxwo2e_: /tmp/tmphvxwo2e_.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp34jha1o9: /tmp/tmp34jha1o9.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuqrf4niv: /tmp/tmpuqrf4niv.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++) {\n      \
    \  ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpom6l36wq: /tmp/tmpom6l36wq.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsioosifb: /tmp/tmpsioosifb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfg5x9pp5: /tmp/tmpfg5x9pp5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    long\
    \ n = nums.size();\n    long i = 0;\n    while(i < n){\n        sum += nums[i];\n\
    \        if(sum < min){\n            min = sum;\n        }\n        i++;\n   \
    \ }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpn1aycwq6: /tmp/tmpn1aycwq6.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\n\
    \            min = sum;\n        if (sum > max)\n            max = sum;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3_ibkxo8: /tmp/tmp3_ibkxo8.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwvsfhafw: /tmp/tmpwvsfhafw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptf9if1l5: /tmp/tmptf9if1l5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprdzkrkfq: /tmp/tmprdzkrkfq.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzh1ku1a2: /tmp/tmpzh1ku1a2.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = INT_MAX;\n    long minIndex = -1;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n            minIndex = i;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwxxelec5: /tmp/tmpwxxelec5.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long count = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            sum\
    \ += nums[i];\n            count++;\n        }\n    }\n    if (count > 0) {\n\
    \        min = sum / count;\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpav3zeakr: /tmp/tmpav3zeakr.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpql6ji39o: /tmp/tmpql6ji39o.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptc41on4w: /tmp/tmptc41on4w.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.subvector(i + 1, nums.size())));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeghcdv8o.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeghcdv8o.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   11 |         ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i\
    \ + 1, nums.size())));\n      |                                              \
    \             ^~~~~~~~~\n      |                                             \
    \              vector\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy8cgvmrx: /tmp/tmpy8cgvmrx.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvdyodd92: /tmp/tmpvdyodd92.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzv7gcj__: /tmp/tmpzv7gcj__.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqc8ei5o3.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqc8ei5o3.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqc8ei5o3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = nums[0];\n    long i = 0;\n    while (i < nums.size()) {\n   \
    \     sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n    \
    \    }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpc5so9gcs: /tmp/tmpc5so9gcs.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long sumOfSubArray = 0;\n   \
    \ long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum == min) {\n            sumOfSubArray += nums[i];\n            count++;\n\
    \        }\n    }\n    return sumOfSubArray;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpekfp6mxb: /tmp/tmpekfp6mxb.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\n\
    \            min = sum;\n        if (sum > max)\n            max = sum;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphop1vdpb: /tmp/tmphop1vdpb.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curSum = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            curSum += nums[j];\n\
    \            if (curSum < ans) {\n                ans = curSum;\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp79415sib: /tmp/tmp79415sib.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphdr_5v76: /tmp/tmphdr_5v76.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (auto i : nums) {\n      \
    \  sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4ss_tvsj: /tmp/tmp4ss_tvsj.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmcti_muo: /tmp/tmpmcti_muo.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmxq8zani: /tmp/tmpmxq8zani.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0i_m6749: /tmp/tmp0i_m6749.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzr84qqwk: /tmp/tmpzr84qqwk.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmph4phyjh5: /tmp/tmph4phyjh5.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptp019v4g: /tmp/tmptp019v4g.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvp94x78l: /tmp/tmpvp94x78l.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiw5b9nkg: /tmp/tmpiw5b9nkg.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfbeqre6z: /tmp/tmpfbeqre6z.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    long\
    \ mid = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min) {\n            min = sum;\n        }\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    mid = (min + max) /\
    \ 2;\n    long sum2 = 0;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   sum2 += nums[i];\n        if (sum2 < mid) {\n            mid = sum2;\n   \
    \     }\n    }\n    return mid;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd7s4yt4s: /tmp/tmpd7s4yt4s.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = nums[0];\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz_yhp1ik: /tmp/tmpz_yhp1ik.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu7zxha2i: /tmp/tmpu7zxha2i.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe42cz3o8: /tmp/tmpe42cz3o8.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5etm3ol3: /tmp/tmp5etm3ol3.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqrnq222m: /tmp/tmpqrnq222m.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpguunhux5: /tmp/tmpguunhux5.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppoojf2wz: /tmp/tmppoojf2wz.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwel68kw8: /tmp/tmpwel68kw8.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvykka9jm: /tmp/tmpvykka9jm.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkzn9ilwv: /tmp/tmpkzn9ilwv.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpszcgds33: /tmp/tmpszcgds33.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpticcudbv: /tmp/tmpticcudbv.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7duxz496: /tmp/tmp7duxz496.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp77bnhnsl: /tmp/tmp77bnhnsl.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd9naunra: /tmp/tmpd9naunra.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5q7g8rhx: /tmp/tmp5q7g8rhx.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    long\
    \ mid = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n        if (sum == max)\
    \ {\n            mid = i;\n        }\n    }\n    return mid;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsg3sf87z: /tmp/tmpsg3sf87z.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbrhve6o_: /tmp/tmpbrhve6o_.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprv7kf6km: /tmp/tmprv7kf6km.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz70y_vkp: /tmp/tmpz70y_vkp.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n         \
    \   if (i != j) {\n                sum += nums[j];\n            }\n        }\n\
    \        if (sum < ans) {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqmmlr5uf: /tmp/tmpqmmlr5uf.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpna391fd2: /tmp/tmpna391fd2.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (auto &num : nums) {\n        ans = min(ans, num + minSubArraySum(nums));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7y63pu2f.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7y63pu2f.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ num + minSubArraySum(nums));\n      |               ^~~\n      |           \
    \    std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7y63pu2f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwd10mw4c: /tmp/tmpwd10mw4c.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8xi60ci1: /tmp/tmp8xi60ci1.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvgs8hyvi: /tmp/tmpvgs8hyvi.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmparz976ad: /tmp/tmparz976ad.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (auto i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_dy7w39h: /tmp/tmp_dy7w39h.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwr6idpch: /tmp/tmpwr6idpch.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp41nyq2_6: /tmp/tmp41nyq2_6.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpep1tyngc: /tmp/tmpep1tyngc.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] < min) {\n            min\
    \ = nums[i];\n        }\n        if (nums[i] > max) {\n            max = nums[i];\n\
    \        }\n    }\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp747r_vvj: /tmp/tmp747r_vvj.cpp:40: int main(): Assertion `candidate((std::vector<long>({100,\
    \ -1, -2, -3, 10, -5}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    long i = 0;\n    long j = 0;\n\
    \    while (i < n) {\n        sum += nums[i];\n        if (sum < min) {\n    \
    \        min = sum;\n        }\n        i++;\n    }\n    while (j < n) {\n   \
    \     sum += nums[j];\n        if (sum < min) {\n            min = sum;\n    \
    \    }\n        j++;\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_whl8_k2: /tmp/tmp_whl8_k2.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  min = std::min(min, nums[i]);\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf0nirrs7: /tmp/tmpf0nirrs7.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    long\
    \ max = std::numeric_limits<long>::min();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n        if (sum > max) {\n            max = sum;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpl4y6cms1: /tmp/tmpl4y6cms1.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpepgli5vv: /tmp/tmpepgli5vv.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpaz4lkex6: /tmp/tmpaz4lkex6.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++) {\n       \
    \ ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpl4ztobqd: /tmp/tmpl4ztobqd.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2xt4t76i: /tmp/tmp2xt4t76i.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (j != i) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpctdxgrrq: /tmp/tmpctdxgrrq.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp22taxqxy: /tmp/tmp22taxqxy.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe_hseyv3: /tmp/tmpe_hseyv3.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0tgtyalz: /tmp/tmp0tgtyalz.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0zdl8466: /tmp/tmp0zdl8466.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbyejdr_x.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbyejdr_x.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbyejdr_x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzv1__d6_: /tmp/tmpzv1__d6_.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwv_6f_z2.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwv_6f_z2.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwv_6f_z2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for(long\
    \ i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < min){\n\
    \            min = sum;\n        }\n        if(sum > max){\n            max =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprevw798c: /tmp/tmprevw798c.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe_fksssx: /tmp/tmpe_fksssx.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            long next =\
    \ nums[j];\n            ans = min(ans, curr + next);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphmxu5gew.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphmxu5gew.cpp:14:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |             ans =\
    \ min(ans, curr + next);\n      |                   ^~~\n      |             \
    \      std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphmxu5gew.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgw1x0vc4: /tmp/tmpgw1x0vc4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptmqo5qnp.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptmqo5qnp.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                        ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplqff63sk: /tmp/tmplqff63sk.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzno4m1gp: /tmp/tmpzno4m1gp.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplosndx1y: /tmp/tmplosndx1y.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0h9t37or: /tmp/tmp0h9t37or.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjs1sqqcu: /tmp/tmpjs1sqqcu.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuwku62zz: /tmp/tmpuwku62zz.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = INT_MIN;\n\
    \    long long sum = 0;\n    for(long long i = 0; i < nums.size(); i++) {\n  \
    \      sum += nums[i];\n        if(sum < ans) {\n            ans = sum;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmph8lovcsy: /tmp/tmph8lovcsy.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_ktdvo2s: /tmp/tmp_ktdvo2s.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3imu9mih: /tmp/tmp3imu9mih.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++){\n        ans\
    \ = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3m2edaqg: /tmp/tmp3m2edaqg.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsqatz9ba: /tmp/tmpsqatz9ba.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans,\
    \ nums[i] + nums[nums.size() - i - 1]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpohpl9h3_.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpohpl9h3_.cpp:11:64: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type)\u2019\n   11 |         ans = std::min(ans, nums[i] +\
    \ nums[nums.size() - i - 1]);\n      |                                       \
    \                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpohpl9h3_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpohpl9h3_.cpp:11:64:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |         ans\
    \ = std::min(ans, nums[i] + nums[nums.size() - i - 1]);\n      |             \
    \                                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu6nnuuuu: /tmp/tmpu6nnuuuu.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7sq_l80z: /tmp/tmp7sq_l80z.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long minSum = INT_MAX;\n    long minIndex = -1;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        if(sum < nums[i]) {\n            sum\
    \ = nums[i];\n            minIndex = i;\n        }\n    }\n    for(long i = 0;\
    \ i < nums.size(); i++) {\n        if(sum == nums[i]) {\n            sum += minSum;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minIndex = i;\n            }\n        }\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnjejds5l: /tmp/tmpnjejds5l.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp55ecoscn: /tmp/tmp55ecoscn.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1)));\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr0_x70tj.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr0_x70tj.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1)));\n      |                    \
    \                                       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1)));\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxr_b44cr.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxr_b44cr.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1)));\n      |                    \
    \                                       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsii23tx3: /tmp/tmpsii23tx3.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplmdf_mhr: /tmp/tmplmdf_mhr.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbfn_ww_n.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbfn_ww_n.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfn_ww_n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxklhkbku: /tmp/tmpxklhkbku.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprli8grtk: /tmp/tmprli8grtk.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptpi2i737: /tmp/tmptpi2i737.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphl7l9942: /tmp/tmphl7l9942.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu2tv9n3x: /tmp/tmpu2tv9n3x.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa3l3kh6b: /tmp/tmpa3l3kh6b.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpr9l5e_i6: /tmp/tmpr9l5e_i6.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp82jaz5kd: /tmp/tmp82jaz5kd.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5b8v2gl3: /tmp/tmp5b8v2gl3.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqatn1f0d: /tmp/tmpqatn1f0d.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpis7dadsp: /tmp/tmpis7dadsp.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgcyevvp.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsgcyevvp.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsgcyevvp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyckc3jze: /tmp/tmpyckc3jze.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkuf6oq34: /tmp/tmpkuf6oq34.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++)\n    {\n \
    \       ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpq1sd2aer: /tmp/tmpq1sd2aer.cpp:19: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpj1s558h8: /tmp/tmpj1s558h8.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz83injbv: /tmp/tmpz83injbv.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjyb490o8: /tmp/tmpjyb490o8.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6wa4z0uq: /tmp/tmp6wa4z0uq.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprguf65_x: /tmp/tmprguf65_x.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa08p8_fd.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa08p8_fd.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa08p8_fd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpombszokb: /tmp/tmpombszokb.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwpeyptqy: /tmp/tmpwpeyptqy.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgyhgaraj: /tmp/tmpgyhgaraj.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp20a5g0n1: /tmp/tmp20a5g0n1.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfng9vde8: /tmp/tmpfng9vde8.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiqp34lmm: /tmp/tmpiqp34lmm.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprcwgzw83: /tmp/tmprcwgzw83.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplqxp00q9.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplqxp00q9.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                        ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4fp8l9ub: /tmp/tmp4fp8l9ub.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpglxkp4m8: /tmp/tmpglxkp4m8.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        if(nums[i] < 0){\n            sum += nums[i];\n            min\
    \ = std::min(min, sum);\n        }\n        else{\n            sum += nums[i];\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnw40by_1: /tmp/tmpnw40by_1.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnhewrga9: /tmp/tmpnhewrga9.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpotmu08oz: /tmp/tmpotmu08oz.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8xl4eqd_: /tmp/tmp8xl4eqd_.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            if (i != j) {\n                sum += nums[j];\n            }\n\
    \        }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzji75ow0: /tmp/tmpzji75ow0.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk6l6m9_z: /tmp/tmpk6l6m9_z.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            long next =\
    \ nums[j];\n            ans = min(ans, curr + next);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vyn909s.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5vyn909s.cpp:14:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |             ans =\
    \ min(ans, curr + next);\n      |                   ^~~\n      |             \
    \      std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5vyn909s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2l79_jn_: /tmp/tmp2l79_jn_.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5i9ilnjh: /tmp/tmp5i9ilnjh.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp98ugb001: /tmp/tmp98ugb001.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n        \
    \    if (i != j) {\n                sum += nums[j];\n            }\n        }\n\
    \        if (sum < min) {\n            min = sum;\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdq73pryd: /tmp/tmpdq73pryd.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_44cjbdg: /tmp/tmp_44cjbdg.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpacaxgmdh: /tmp/tmpacaxgmdh.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxx4w68ti.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxx4w68ti.cpp:11:50: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type)\u2019\n   11 |         ans = std::min(ans, nums[i] +\
    \ nums[i - 1]);\n      |                                                  ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxx4w68ti.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxx4w68ti.cpp:11:50:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |         ans\
    \ = std::min(ans, nums[i] + nums[i - 1]);\n      |                           \
    \                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/g"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzihg68c5: /tmp/tmpzihg68c5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = i; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < ans) {\n                ans = sum;\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    long long count = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        if (sum - nums[i] < min) {\n            min = sum\
    \ - nums[i];\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphax3w9m1: /tmp/tmphax3w9m1.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8i45qwne: /tmp/tmp8i45qwne.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpykiq1cjk: /tmp/tmpykiq1cjk.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpggrp7a0f: /tmp/tmpggrp7a0f.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8kdigesn: /tmp/tmp8kdigesn.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3xtfeszn: /tmp/tmp3xtfeszn.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzqyv9vyb: /tmp/tmpzqyv9vyb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq494zfsg.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq494zfsg.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq494zfsg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf7w8xcqw: /tmp/tmpf7w8xcqw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpj7aeisgl: /tmp/tmpj7aeisgl.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppgffv5lg: /tmp/tmppgffv5lg.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdwfc2tyx: /tmp/tmpdwfc2tyx.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnp008vwk: /tmp/tmpnp008vwk.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprfud_d25: /tmp/tmprfud_d25.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz9vb1rsv: /tmp/tmpz9vb1rsv.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8yr4zsrd: /tmp/tmp8yr4zsrd.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (auto num : nums) {\n        sum += num;\n        if (sum < minSum) {\n    \
    \        minSum = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp89bxnph6: /tmp/tmp89bxnph6.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1fn5odd7: /tmp/tmp1fn5odd7.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6k_1sszc: /tmp/tmp6k_1sszc.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphv12edox: /tmp/tmphv12edox.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuqkd9vzd: /tmp/tmpuqkd9vzd.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf2j_6g7u: /tmp/tmpf2j_6g7u.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    for(long i = 0; i < n; i++)\
    \ {\n        sum += nums[i];\n        if(sum < ans) {\n            ans = sum;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpugj_4v3i: /tmp/tmpugj_4v3i.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuyy8m53l: /tmp/tmpuyy8m53l.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2va42yjg.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2va42yjg.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2va42yjg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6g4ei5h6: /tmp/tmp6g4ei5h6.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    long\
    \ minIndex = -1;\n    for(long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if(sum < minSum) {\n            minSum = sum;\n          \
    \  minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpert7av_3: /tmp/tmpert7av_3.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuquv1ubn: /tmp/tmpuquv1ubn.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size())));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmefiqdg.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsmefiqdg.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size())));\n      |       \
    \                                                    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfrn5b_jg: /tmp/tmpfrn5b_jg.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (auto\
    \ i : nums) {\n        sum += i;\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5xpoz_bu: /tmp/tmp5xpoz_bu.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
